[
  {
    "filename": "AccessGatewayFilter.txt",
    "comments": [
      "# This class serves as a filter for accessing gateway filtering, primarily for authentication and access log recording.",
      "# Filter the incoming request based on specified rules and conditions.",
      "# Check if the request URI starts with specified prefixes.",
      "# Retrieve the user information from the JWT token in the request.",
      "# Set the current user information and log the access."
    ]
  },
  {
    "filename": "AreaCalculator.txt",
    "comments": [
      "# This class calculates the area of different shapes, including circle, sphere, cylinder, sector, and annulus.",
      "# Initialize the radius for shapes.",
      "# Calculate the area of the circle based on self.radius.",
      "# Calculate the area of the sphere based on self.radius.",
      "# Calculate the area of the cylinder based on self.radius and height.",
      "# Calculate the area of the sector based on the radius and angle.",
      "# Calculate the area of an annulus based on inner_radius and outer_radius."
    ]
  },
  {
    "filename": "ArgumentParser.txt",
    "comments": [
      "# This class is for parsing command line arguments into a dictionary.",
      "# Initialize the fields.",
      "# Parse the given command line argument string, invoke _convert_type to store the parsed result in specific type in the arguments dictionary, check for missing required arguments, and return False with the missing argument names if any; otherwise, return True.",
      "# Retrieve the value of the specified argument from the arguments dictionary and return it.",
      "# Add an argument to self.types and self.required. Check if it is a required argument and store the argument type. If the argument is set as required, add it to the required set. Store the argument type and name in the types dictionary as key-value pairs.",
      "# Specify the input value in the command line as a string."
    ]
  },
  {
    "filename": "ArrangementCalculator.txt",
    "comments": [
      "# The Arrangement class provides permutation calculations and selection operations for a given set of data elements.",
      "# Initialize the ArrangementCalculator object with a list of datas.",
      "# Count the number of arrangements by choosing m items from n items (permutations). \n# If m is not provided or if n equals m, return factorial(n).",
      "# Count the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.",
      "# Generate a list of arrangements by selecting m items from the internal data. If m is not provided, select all items.",
      "# Generate a list of all arrangements by selecting at least 1 item and at most the number of internal data items.",
      "# Accept an integer n to calculate the factorial."
    ]
  },
  {
    "filename": "AssessmentSystem.txt",
    "comments": [
      "# This class functions as a student assessment system, supporting the addition of students, the addition of course scores, the calculation of GPA, and various other functionalities for students and courses.",
      "# Initialize the students dictionary in the assessment system.",
      "# Add a new student into the self.students dictionary.",
      "# Add score of a specific course for a student in self.students.",
      "# Get the average grade of a student.",
      "# Get all students who have any score below 60.",
      "# Get the average score of a specific course.",
      "# Calculate each student's GPA using the get_gpa method and find the student with the highest GPA."
    ]
  },
  {
    "filename": "AutomaticGuitarSimulator.txt",
    "comments": [
      "# This class is an automatic guitar simulator that interprets and plays based on the input guitar sheet music.",
      "# Initialize the score to be played.",
      "# Interpret the music score to be played.",
      "# Print out the chord and play the tune in the following format: Normal Guitar Playing -- Chord: %s, Play Tune: %s"
    ]
  },
  {
    "filename": "AvgPartition.txt",
    "comments": [
      "# This class partitions a given list into different blocks by specifying the number of partitions, ensuring each block has a uniformly distributed length.",
      "# Initialize the class with the given list and number of partitions, and check if the number of partitions is greater than 0.",
      "# Calculate the size of each block and the remainder of the division.",
      "# Calculate the size of each block and the remainder of the division, then determine the corresponding start and end positions based on the index of the partition."
    ]
  },
  {
    "filename": "BalancedBrackets.txt",
    "comments": [
      "# This class checks for bracket matching.",
      "# Initialize the class with an expression.",
      "# Clear the expression of all characters that are not brackets.",
      "# Check if the expression has balanced brackets."
    ]
  },
  {
    "filename": "Bank_Account_System.txt",
    "comments": [
      "# This class implements a bank account system that supports depositing money, withdrawing money, viewing balance, and transferring money.",
      "# Initialize a bank account object with an attribute balance, with a default value of 0.",
      "# Deposit a certain amount into the account, increasing the account balance and return the current account balance. If the amount is negative, raise a ValueError with the message \"Invalid amount\".",
      "# Withdraw a certain amount from the account, decreasing the account balance and returning the current account balance.\n# If the amount is negative, raise a ValueError(\"Invalid amount\").\n# If the withdrawal amount is greater than the account balance, raise a ValueError(\"Insufficient balance.\")",
      "# Transfer a certain amount from the current account to another account."
    ]
  },
  {
    "filename": "BigNumCalculator.txt",
    "comments": [
      "# This class implements calculations for large numbers, including addition, subtraction, and multiplication.",
      "# Add two large numbers.",
      "# Subtract two large numbers.",
      "# Multiply two large numbers."
    ]
  },
  {
    "filename": "BinaryDataProcessor.txt",
    "comments": [
      "# Class used to process binary data, including functions for clearing non-0 or 1 characters, counting binary string information, and converting to corresponding strings based on different encoding methods.",
      "# Initialize the class with a binary string and clean it by removing all non-0 or 1 characters.",
      "# Clean the binary string by removing all non-0 or 1 characters.",
      "# Calculate the percentage of 0s and 1s, and the total length of the binary string.",
      "# Convert the binary string to an ASCII string.",
      "# Convert the binary string to a UTF-8 string."
    ]
  },
  {
    "filename": "BitStatusUtil.txt",
    "comments": [
      "# This is a utility class that provides methods for manipulating and checking status using bitwise operations.",
      "# Add a status to the current status and check whether the parameters are legal.",
      "# Check if the current status contains the specified status and verify the legality of the parameters.",
      "# Remove the specified status from the current status and check whether the parameters are valid.",
      "# Check if the parameters are legal; args must be greater than or equal to 0 and must be even. If not, raise ValueError."
    ]
  },
  {
    "filename": "BlackjackGame.txt",
    "comments": [
      "# This class represents a game of blackjack, including deck creation, hand value calculation, and winner determination based on the hand values of the player and dealer.",
      "# Initialize the Blackjack game with attributes: deck, player_hand, and dealer_hand.\n# Call the create_deck method to generate the deck attribute, which stores 52 randomly ordered poker cards with Jokers removed, formatted as ['AS', '2S', ...].\n# player_hand is a list that stores the cards in the player's hand.\n# dealer_hand is a list that stores the cards in the dealer's hand.",
      "# Create a deck of 52 cards, storing the cards in random order with the Jokers removed.",
      "# Calculate the value of the poker cards stored in the hand list according to the rules of the Blackjack game. \n# If the card is a digit, its value is added to the total hand value. \n# The value of J, Q, or K is 10, while Aces are worth 11. \n# If the total hand value exceeds 21 and there are Aces present, treat one Ace as having a value of 1 instead of 11, \n# until the hand value is less than or equal to 21, or all Aces have been counted as a value of 1.",
      "# Determine the winner of a game by comparing the hand values of the player and dealer. \n# If both players have hand values that are equal to or less than 21, the winner is the one whose hand value is closer to 21. \n# Otherwise, the winner is the one with the lower hand value."
    ]
  },
  {
    "filename": "BookManagement.txt",
    "comments": [
      "# This is a class for managing a book system, which supports adding and removing books from the inventory dictionary, viewing the inventory, and checking the quantity of a specific book.",
      "# Initialize the inventory for the Book Manager.",
      "# Add one or several books to the inventory, sorted by book title.",
      "# Remove one or several books from the inventory sorted by book title. Raise an exception for invalid input.",
      "# Retrieve the inventory of the Book Management system.",
      "# Get the quantity of a book."
    ]
  },
  {
    "filename": "BookManagementDB.txt",
    "comments": [
      "# This is a database class for a book management system, used to handle operations for adding, removing, updating, and searching books.",
      "# Initialize the class by creating a database connection and cursor, and create the book table if it does not already exist.",
      "# Create the book table in the database if it does not already exist.",
      "# Add a book to the database with the specified title and author, setting its availability to 1 as free to borrow.",
      "# Remove a book from the database based on the given book ID.",
      "# Mark the book as borrowed in the database based on the given book ID.",
      "# Mark the book as returned in the database based on the given book ID.",
      "# Retrieve all books from the database and return their information."
    ]
  },
  {
    "filename": "BoyerMooreSearch.txt",
    "comments": [
      "# This class implements the Boyer-Moore algorithm for string searching, used to find occurrences of a pattern within a given text.",
      "# Initialize the BoyerMooreSearch class with the given text and pattern.",
      "# Find the rightmost occurrence of a character in the pattern.",
      "# Determine the position of the first mismatch between the pattern and the text.",
      "# Find all occurrences of the pattern in the text."
    ]
  },
  {
    "filename": "CSVProcessor.txt",
    "comments": [
      "# This class is for processing CSV files, including reading and writing CSV data, performing specific operations, and saving the results as a new CSV file.",
      "# Read the CSV file using file_name, and obtain the title and data from it.",
      "# Write data into a CSV file.",
      "# Read a CSV file into the variables title and data. \n# Retain only the Nth (from 0) column data and capitalize it. \n# Store the title and the new data into a new CSV file with '_process' suffix added to the old file name."
    ]
  },
  {
    "filename": "Calculator.txt",
    "comments": [
      "# This class implements a calculator capable of performing basic arithmetic calculations on numerical expressions using the operators +, -, *, /, and ^ (exponentiation).",
      "# Initialize the operations performed by the five operators: '+', '-', '*', '/', and '^'.",
      "# Calculate the value of a given expression.",
      "# Return the priority of the specified operator, where higher values indicate greater precedence. The priority of '^' is greater than that of '/' and '*', while the priority of '/' and '*' is greater than that of '+' and '-'.",
      "# Use the operator at the top of the operator stack to perform the operation on the two numbers at the top of the operator stack and store the results at the top of the operator stack."
    ]
  },
  {
    "filename": "CalendarUtil.txt",
    "comments": [
      "# This class, CalendarUtil, provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.",
      "# Initialize the calendar with an empty list of events.",
      "# Add an event to the calendar.",
      "# Remove an event from the calendar.",
      "# Retrieve all events on a given date.",
      "# Check the availability of the calendar for a given time slot.",
      "# Retrieve all available time slots on a specified date.",
      "# Get the next n upcoming events from a given date."
    ]
  },
  {
    "filename": "CamelCaseMap.txt",
    "comments": [
      "# This is a custom class that allows keys to be in camel case style by converting them from underscore style, while providing dictionary-like functionality.",
      "# Initialize data as an empty dictionary.",
      "# Return the value corresponding to the specified key.",
      "# Set the value corresponding to the key to the specified value.",
      "# Delete the value corresponding to the specified key.",
      "# Return iterable objects with own data.",
      "# Return the length of the own data.",
      "# Convert key string into camel case.",
      "# Convert key string into camel case."
    ]
  },
  {
    "filename": "ChandrasekharSieve.txt",
    "comments": [
      "# This class implements Chandrasekhar's Sieve method to find all prime numbers within a specified range.",
      "# Initialize the ChandrasekharSieve class with the specified limit.",
      "# Generate prime numbers up to the specified limit using the Chandrasekhar sieve algorithm.",
      "# Get the list of generated prime numbers."
    ]
  },
  {
    "filename": "Chat.txt",
    "comments": [
      "# This class represents a chat system with functionalities to add users, remove users, send messages, and obtain messages.",
      "# Initialize the Chat with an attribute 'users', which is an empty dictionary.",
      "# Add a new user to the chat.",
      "# Remove a user from the chat.",
      "# Send a message from one user to another user.",
      "# Retrieve all the messages of a user from the Chat."
    ]
  },
  {
    "filename": "Class_Registration_System.txt",
    "comments": [
      "# This class serves as a class registration system, allowing for the registration of students, registration of students for classes, retrieval of students by major, obtaining a list of all majors, and determining the most popular class within a specific major.",
      "# Initialize the registration system with the attributes students and students_registration_class. \n# students is a list of student dictionaries, where each dictionary contains the keys name and major. \n# students_registration_class is a dictionary where the key is the student name and the value is a list of class names.",
      "# Register a student to the system, add the student to the students list, return 0 if the student is already registered, else return 1.",
      "# Register a class for the student.",
      "# Get all students in the specified major.",
      "# Retrieve all majors in the system.",
      "# Get the class with the highest enrollment in the major."
    ]
  },
  {
    "filename": "ClassroomManagement.txt",
    "comments": [
      "# This class represents a classroom, capable of adding and removing courses, checking availability at a given time, and detecting conflicts when scheduling new courses.",
      "# Initialize the classroom management system.",
      "# Add the course to the self.courses list if the course is not already present in it.",
      "# Remove the course from the self.courses list if it exists in the list.",
      "# Change the time format to '%H:%M' and check if the time is free in the classroom.",
      "# Before adding a new course, check if the new course time conflicts with any existing courses."
    ]
  },
  {
    "filename": "CombinationCalculator.txt",
    "comments": [
      "# This class provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.",
      "# Initialize the calculator with a list of data.",
      "# Calculate the number of combinations for a specific count.",
      "# Calculate the number of all possible combinations.",
      "# Generate combinations with a specified number of elements.",
      "# Generate all possible combinations of selecting elements from the given data list using the select method.",
      "# Generate combinations with a specified number of elements using recursion."
    ]
  },
  {
    "filename": "ComplexCalculator.txt",
    "comments": [
      "# Implement a class that performs addition, subtraction, multiplication, and division operations for complex numbers.",
      "# Add two complex numbers.",
      "# Subtract two complex numbers.",
      "# Multiply two complex numbers.",
      "# Divide two complex numbers."
    ]
  },
  {
    "filename": "CookiesUtil.txt",
    "comments": [
      "# This class serves as a utility for managing and manipulating Cookies, including methods for retrieving, saving, and setting Cookies data.",
      "# Initialize the CookiesUtil with the specified cookies file.",
      "# Get the cookies from the specified response and save them to cookies_file.",
      "# Load the cookies from the cookies_file into the cookies data.",
      "# Save the cookies to the cookies_file and return True if successful, False otherwise."
    ]
  },
  {
    "filename": "CurrencyConverter.txt",
    "comments": [
      "# This class is designed for currency conversion, supporting the conversion of amounts between different currencies, retrieval of supported currencies, addition of new currency rates, and updating of existing currency rates.",
      "# Initialize the exchange rate of the US dollar against various currencies.",
      "# Convert the value of a given currency to another currency type.",
      "# Return a list of supported currency types.",
      "# Add a new supported currency type and return False if the currency type is already in the support list.",
      "# Update the exchange rate for a specific currency."
    ]
  },
  {
    "filename": "DataStatistics.txt",
    "comments": [
      "# This class performs data statistics, supporting the calculation of the mean, median, and mode of a given data set.",
      "# Calculate the average value of a group of data, accurate to two digits after the decimal separator.",
      "# Calculate the median of a group of data, accurate to two digits after the decimal separator.",
      "# Calculate the mode of a set of data."
    ]
  },
  {
    "filename": "DataStatistics2.txt",
    "comments": [
      "# This class performs data statistics, supporting the computation of sum, minimum, maximum, variance, standard deviation, and correlation of a given dataset.",
      "# Initialize the data list.",
      "# Calculate the sum of the data.",
      "# Calculate the minimum value in the data.",
      "# Calculate the maximum value in the data.",
      "# Calculate variance, accurate to two decimal digits after the decimal separator.",
      "# Calculate standard deviation, accurate to two decimal places.",
      "# Calculate the correlation."
    ]
  },
  {
    "filename": "DataStatistics4.txt",
    "comments": [
      "# This class performs advanced mathematical calculations and statistical analyses, including the correlation coefficient, skewness, kurtosis, and the probability density function (PDF) for a normal distribution.",
      "# Calculate the correlation coefficient of two sets of data.",
      "# Calculate the skewness of a set of data.",
      "# Calculate the kurtosis of a set of data.",
      "# Calculate the probability density function (PDF) of a set of data under a normal distribution."
    ]
  },
  {
    "filename": "DatabaseOperation.txt",
    "comments": [
      "# This class processes a database, supporting the creation of tables, insertion of data, searching for data by name, and deletion of data from the database.",
      "# Initialize the database name of the database processor.",
      "# Create a new table in the database if it does not exist, with 'id' as INTEGER PRIMARY KEY, 'key1' as TEXT, and 'key2' as INTEGER.",
      "# Insert data into the specified table in the database.",
      "# Search the specified table in the database for rows that match the given name.",
      "# Delete rows from the specified table in the database that match a given name."
    ]
  },
  {
    "filename": "DecryptionUtils.txt",
    "comments": [
      "# This class provides methods for decryption, including the Caesar cipher, Vigen\u00e8re cipher, and Rail Fence cipher.",
      "# Initialize the decryption utility with a key.",
      "# Decipher the given ciphertext using the Caesar cipher.",
      "# Decipher the given ciphertext using the Vigenere cipher.",
      "# Decipher the given ciphertext using the Rail Fence cipher."
    ]
  },
  {
    "filename": "DiscountStrategy.txt",
    "comments": [
      "# This class implements various discount strategies based on shopping credit or shopping cart in a supermarket.",
      "# Initialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.",
      "# Calculate the total cost of items in the cart.",
      "# Calculate the final amount to be paid after applying the discount.",
      "# Calculate the discount based on the fidelity points of the customer. Customers with over 1000 points are eligible for a 5% discount on the entire order.",
      "# Calculate the discount based on bulk item quantity in the order. If the quantity of a single item reaches 20 or more, apply a 10% discount to each item in the order.",
      "# Calculate the discount based on the number of different products in the order. If the quantity of different products in the order reaches 10 or more, apply a 7% discount to the entire order."
    ]
  },
  {
    "filename": "DocFileHandler.txt",
    "comments": [
      "# This class handles Word documents and provides functionalities for reading, writing, and modifying their content.",
      "# Initialize the DocFileHandler object with the specified file path.",
      "# Read the content of a Word document and return it as a string.",
      "# Write the specified content to a Word document.",
      "# Add a heading to the Word document.",
      "# Add a table to the Word document with the specified data.",
      "# Return the alignment value corresponding to the given alignment string."
    ]
  },
  {
    "filename": "EightPuzzle.txt",
    "comments": [
      "# This class implements the classic 8-puzzle game, including methods for finding the blank tile, making moves, getting possible moves, and solving the puzzle using a breadth-first search algorithm.",
      "# Initialize the initial state of the Eight Puzzle Game, storing it in the attribute self.initial_state. Set the goal state of the game, storing it in self.goal_state, with a size of 3x3.",
      "# Find the blank position of the current state, which is represented by the 0 element.",
      "# Find the blank block and move the board forward in the given direction.",
      "# Based on the current state, find all possible moving directions: 'up', 'down', 'left', 'right'.",
      "# Use the BFS algorithm to find the path solution from the initial state to the goal state. \n# Maintain a list as a queue, named open_list, and append the initial state. \n# Always visit and pop the element at index 0, and invoke the get_possible_moves method to find all possible directions. \n# Traverse the possible_moves list and invoke the move method to obtain several new states, then append them to the open_list. \n# Repeat the above steps until the open_list is empty or the current state is the goal state."
    ]
  },
  {
    "filename": "EmailClient.txt",
    "comments": [
      "# This class serves as an email client, implementing functions for checking emails, determining sufficient space, and cleaning up space.",
      "# Initialize the EmailClient class with the specified email address and capacity of the email box.",
      "# Send an email to the given email address.",
      "# Retrieve the first unread email in the email box and mark it as read.",
      "# Determine whether the email box is full after adding an email of the given size.",
      "# Get the total size of the emails in the email box.",
      "# Clear the email box by deleting the oldest emails until there is enough space to accommodate the given size."
    ]
  },
  {
    "filename": "EncryptionUtils.txt",
    "comments": [
      "# This class provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.",
      "# Initialize the class with a key.",
      "# Encrypt the plaintext using the Caesar cipher.",
      "# Encrypt the plaintext using the Vigenere cipher.",
      "# Encrypt the plaintext using the Rail Fence cipher."
    ]
  },
  {
    "filename": "ExcelProcessor.txt",
    "comments": [
      "# This class is for processing Excel files, including reading and writing Excel data, performing specific operations, and saving the results as a new Excel file.",
      "# Read data from Excel files.",
      "# Write data to the specified Excel file.",
      "# Change the specified column in the Excel file to uppercase."
    ]
  },
  {
    "filename": "ExpressionCalculator.txt",
    "comments": [
      "# This class in Python performs calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.",
      "# Initialize the expression calculator.",
      "# Calculate the result of the given postfix expression.",
      "# Prepare the infix expression for conversion to postfix notation.",
      "# Check if a character is an operator in the set {'+', '-', '*', '/', '(', ')', '%'}",
      "# Compare the precedence of two operators.",
      "# Perform mathematical calculation based on the given operands and operator.",
      "# Transform the infix expression to a format suitable for conversion."
    ]
  },
  {
    "filename": "FitnessTracker.txt",
    "comments": [
      "# This class serves as a fitness tracker that calculates BMI (Body Mass Index) and calorie intake based on the user's height, weight, age, and sex.",
      "# Initialize the class with height, weight, age, and sex, and calculate the BMI standard based on sex, where male is 20-25 and female is 19-24.",
      "# Calculate the BMI based on height and weight.",
      "# Judge the condition of the user based on the BMI standard.",
      "# Calculate the calorie intake based on the user's condition and BMR (Basal Metabolic Rate). \n# BMR is calculated based on the user's height, weight, age, and sex: \n# For males, BMR = 10 * weight + 6.25 * height - 5 * age + 5; \n# For females, BMR = 10 * weight + 6.25 * height - 5 * age - 161. \n# The calorie intake is then determined based on the user's condition: \n# If the user is overweight, calorie intake = BMR * 1.2; \n# If the user is underweight, calorie intake = BMR * 1.6; \n# If the user has a normal weight, calorie intake = BMR * 1.4."
    ]
  },
  {
    "filename": "GomokuGame.txt",
    "comments": [
      "# This class implements a Gomoku game, supporting making moves, checking for a winner, and verifying if there are five consecutive symbols on the game board.",
      "# Initialize the game with a given board size by creating an empty board and setting the current player symbol as 'X'.",
      "# Make a move at the given row and column. If the move is valid, place the current player's symbol on the board and switch the current player to the other player (if the current player is 'X', it becomes 'O' and vice versa).",
      "# Check for a winner by looking for five in a row in all directions (horizontal, vertical, diagonal).",
      "# Check if there are five consecutive symbols of the same player in a row starting from a given cell in a specified direction (horizontal, vertical, diagonal) and count the number of consecutive symbols in that direction starting from the given cell."
    ]
  },
  {
    "filename": "HRManagementSystem.txt",
    "comments": [
      "# This class serves as a personnel management system that implements functions for adding, deleting, querying, and updating employees.",
      "# Initialize the HRManagementSystem with an attribute employees, which is an empty dictionary.",
      "# Add a new employee to the HR Management System.",
      "# Remove an employee from the HR Management System.",
      "# Update an employee's information in the HR Management System.",
      "# Retrieve an employee's information from the HR Management System.",
      "# List all employees' information in the HR Management System."
    ]
  },
  {
    "filename": "Hotel.txt",
    "comments": [
      "# This class implements a hotel management system that manages bookings, check-ins, check-outs, and the availability of rooms in a hotel with various room types.",
      "# Initialize the three fields in the Hotel System: \n# name for the hotel name, \n# available_rooms for the remaining rooms in the hotel, \n# booked_rooms for the rooms that have been booked along with the names of the individuals who booked them.",
      "# Check if there are any rooms of the specified type available. If rooms are sufficient, modify available_rooms and booked_rooms to complete the booking; otherwise, indicate the failure to book.",
      "# Check if the room of the specified type and number is booked by the person named 'name'. Remove this name upon successful check-in when room_number matches the specific person's booked_rooms. If the actual check-in quantity (room_number) is less than the booked quantity, adjust the number in booked_rooms to reflect the booked quantity minus the actual quantity.",
      "# Check out rooms and add the number for a specific type in available_rooms. \n# If room_type is new, add the new type in available_rooms.",
      "# Get the number of available rooms of a specific type."
    ]
  },
  {
    "filename": "HtmlUtil.txt",
    "comments": [
      "# This class serves as a utility for HTML, supporting formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific markers.",
      "# Initialize a series of labels.",
      "# Replace consecutive line breaks with a single line break.",
      "# Retrieve the HTML text excluding the code, and insert the code tag '-CODE-' at the locations of the code.",
      "# Extract codes from the HTML body."
    ]
  },
  {
    "filename": "IPAddress.txt",
    "comments": [
      "# This class processes IP addresses, including validating, obtaining the octets, and retrieving the binary representation of a valid IP address.",
      "# Initialize the IP address to the specified address.",
      "# Judge whether the IP address is valid by checking if it is composed of four decimal digits separated by '.' and ensuring each digit is greater than or equal to 0 and less than or equal to 255.",
      "# Return a list of four decimal numbers separated by \".\" if the IP address is valid; otherwise, return an empty list.",
      "# If the IP address is valid, return the binary form of the IP address; otherwise, return an empty string."
    ]
  },
  {
    "filename": "IPUtil.txt",
    "comments": [
      "# This class serves as a tool for obtaining the local IP address, validating its validity, and retrieving the corresponding hostname.",
      "# Check if the given IP address is a valid IPv4 address.",
      "# Check if the given IP address is a valid IPv6 address.",
      "# Get the hostname associated with the given IP address."
    ]
  },
  {
    "filename": "ImageProcessor.txt",
    "comments": [
      "# This class processes images, including loading, saving, resizing, rotating, and adjusting brightness.",
      "# Initialize the image attribute of the class.",
      "# Use the Image utility in PIL to open an image.",
      "# Save the image to a specified path if the image has been opened.",
      "# Resize the image if it is opened.",
      "# Rotate the image if it is opened.",
      "# Adjust the brightness of the image if the image is opened."
    ]
  },
  {
    "filename": "Interpolation.txt",
    "comments": [
      "# This class implements the linear interpolation operation for one-dimensional and two-dimensional data.",
      "# Perform linear interpolation of one-dimensional data.",
      "# Perform linear interpolation of two-dimensional data."
    ]
  },
  {
    "filename": "JSONProcessor.txt",
    "comments": [
      "# Class for processing JSON files, including reading and writing JSON files, and processing JSON data by removing a specified key from the JSON object.",
      "# Read a JSON file and return the data.",
      "# Write data to a JSON file and save it to the specified path.",
      "# Read a JSON file, process the data by removing a specified key, and rewrite the modified data back to the file."
    ]
  },
  {
    "filename": "JobMarketplace.txt",
    "comments": [
      "# This class provides functionalities to publish positions, remove positions, submit resumes, withdraw resumes, search for positions, and obtain candidate information.",
      "# Publish positions and add the position information to the job_listings list.",
      "# Remove positions and the position information from the job_listings list.",
      "# Submit resumes and add the resume information to the resumes list.",
      "# Withdraw resumes and remove the resume information from the resumes list.",
      "# Search for positions and return the position information that meets the requirements.",
      "# Obtain candidate information and return the information that meets the requirements by calling the matches_requirements function."
    ]
  },
  {
    "filename": "KappaCalculator.txt",
    "comments": [
      "# This is a class named KappaCalculator, which supports the calculation of Cohen's and Fleiss' kappa coefficients.",
      "# Calculate the Cohen's kappa value of a k-dimensional matrix.",
      "# Calculate the Fleiss' Kappa value of an N * k matrix."
    ]
  },
  {
    "filename": "Lemmatization.txt",
    "comments": [
      "# This class implements lemmatization using the NLTK library to perform lemmatization, part-of-speech tagging on sentences, and punctuation removal.",
      "# Create a WordNetLemmatizer object and store it in the self.lemmatizer member variable.",
      "# Remove punctuations from the input sentence, tokenize the sentence, mark the part of speech tag for each word, lemmatize the words with different parameters based on their parts of speech, and store the results in a list.",
      "# Remove punctuation from the input sentence, tokenize the sentence, and mark the part of speech tag for each word.",
      "# Remove punctuation from the input text."
    ]
  },
  {
    "filename": "LongestWord.txt",
    "comments": [
      "# This class allows the addition of words to a list and provides functionality to find the longest word in a given sentence by comparing the words in the sentence with those in the word list.",
      "# Initialize a list of words.",
      "# Append the input word into self.word_list.",
      "# Remove punctuation marks and split a sentence into a list of words. Find the longest split word that exists in self.word_list. Words are strictly case sensitive."
    ]
  },
  {
    "filename": "MahjongConnect.txt",
    "comments": [
      "# MahjongConnect is a class that represents a game board for Mahjong Connect. It includes features for creating the board, checking valid moves, finding paths, removing icons, and determining if the game is over.",
      "# Initialize the board size and the icon list, and create the game board.",
      "# Create the game board with the specified board size and icons.",
      "# Check if the move of two icons is valid by ensuring the positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions.",
      "# Check if there is a path between two icons.",
      "# Remove the connected icons on the game board.",
      "# Check if the game is over by determining if there are no more icons on the game board."
    ]
  },
  {
    "filename": "Manacher.txt",
    "comments": [
      "# This class implements the Manacher algorithm to find the longest palindromic substring in a given string.",
      "# Initialize the Manacher class with the given input_string.",
      "# Recursively calculate the length of the palindromic substring based on a given center, difference value, and input string.",
      "# Find the longest palindromic substring in the given string."
    ]
  },
  {
    "filename": "MetricsCalculator.txt",
    "comments": [
      "# The class calculates precision, recall, F1 score, and accuracy based on predicted and true labels.",
      "# Initialize the count of all four samples to 0.",
      "# Update the counts of all four samples: true_positives, false_positives, false_negatives, and true_negatives.",
      "# Calculate the precision.",
      "# Calculate the recall metric.",
      "# Calculate the F1 score, which is the harmonic mean of precision and recall.",
      "# Calculate the accuracy."
    ]
  },
  {
    "filename": "MetricsCalculator2.txt",
    "comments": [
      "# The class calculates Mean Reciprocal Rank (MRR) and Mean Average Precision (MAP) based on input data, where MRR measures ranking quality and MAP measures average precision.",
      "# Compute the Mean Reciprocal Rank (MRR) of the input data. MRR is a widely used evaluation metric that represents the mean of reciprocal ranks.",
      "# Compute the Mean Average Precision (MAP) of the input data, which is a widely used evaluation index calculated as the mean of Average Precision (AP)."
    ]
  },
  {
    "filename": "MinesweeperGame.txt",
    "comments": [
      "# This class implements mine sweeping games, including mine detection and win condition evaluation.",
      "# Initialize the MinesweeperGame class with the specified size of the board and the number of mines.",
      "# Generate a minesweeper map with the given size of the board and the number of mines. The parameter n specifies the size of the board (n*n), and the parameter k indicates the number of mines. 'X' represents a mine, while other numbers represent the count of mines surrounding each position.",
      "# Generate a player map with the size of the board defined by parameter n (size n*n) and place k mines. Represent unknown positions with '-'.",
      "# Check whether the player has won the game. Return True if there are only mines in the player map, otherwise return False.",
      "# Sweep the given position."
    ]
  },
  {
    "filename": "MovieBookingSystem.txt",
    "comments": [
      "# This is a class for a movie booking system that allows adding movies, booking tickets, and checking the available movies within a given time range.",
      "# Initialize movies to contain the information about movies.",
      "# Add a new movie into the list of movies in self.movies.",
      "# Book tickets for a movie and update the seats value in self.movies if the booking is successful.",
      "# Get a list of available movies within the specified time range."
    ]
  },
  {
    "filename": "MovieTicketDB.txt",
    "comments": [
      "# This class handles movie database operations, allowing for the insertion, searching, and deletion of movie information by name.",
      "# Initialize the MovieTicketDB object with the specified database name.",
      "# Create a \"tickets\" table in the database if it does not exist already. The fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str.",
      "# Insert a new ticket into the \"tickets\" table.",
      "# Search for tickets in the \"tickets\" table by customer name.",
      "# Delete a ticket from the \"tickets\" table by ticket ID."
    ]
  },
  {
    "filename": "MusicPlayer.txt",
    "comments": [
      "# This class implements a music player that provides functionality to play, stop, add songs, remove songs, set volume, shuffle, and switch to the next or previous song.",
      "# Initialize the music player with an empty playlist, no current song, and a default volume of 50.",
      "# Add a song to the playlist.",
      "# Remove a song from the playlist.",
      "# Play the current song in the playlist.",
      "# Stop the current song in the playlist.",
      "# Switch to the next song in the playlist.",
      "# Switch to the previous song in the playlist.",
      "# Set the volume of the music player, ensuring the volume is valid if it is between 0 and 100.",
      "# Shuffle the playlist."
    ]
  },
  {
    "filename": "NLPDataProcessor.txt",
    "comments": [
      "# The class processes NLP data by removing stop words from a list of strings using a predefined stop word list.",
      "# Construct a stop word list that includes 'a', 'an', and 'the'.",
      "# Remove all stop words from the list of strings.",
      "# Construct a stop word list including 'a', 'an', 'the', then remove all stop words from the list of strings."
    ]
  },
  {
    "filename": "NLPDataProcessor2.txt",
    "comments": [
      "# The class processes NLP data by extracting words from a list of strings, calculating the frequency of each word, and returning the top 5 most frequent words.",
      "# Keep only English letters and spaces in the string, convert the string to lower case, and split the string into a list of words.",
      "# Calculate the word frequency of each word in the list of words, and sort the word frequency dictionary by value in descending order.",
      "# Keep only English letters and spaces in the string, convert the string to lower case, and split the string into a list of words. Calculate the word frequency of each word in the list and sort the word frequency dictionary by value in descending order."
    ]
  },
  {
    "filename": "NumberConverter.txt",
    "comments": [
      "# The class allows conversion between decimal, binary, octal, and hexadecimal representations in both directions.",
      "# Convert a number from decimal format to binary format.",
      "# Convert a number from binary format to decimal format.",
      "# Convert a number from decimal format to octal format.",
      "# Convert a number from octal format to decimal format.",
      "# Convert a number from decimal format to hexadecimal format.",
      "# Convert a number from hexadecimal format to decimal format."
    ]
  },
  {
    "filename": "NumberWordFormatter.txt",
    "comments": [
      "# This class provides functionality to convert numbers into their corresponding English word representation, including handling the conversion of both integer and decimal parts, as well as incorporating appropriate connectors and units.",
      "# Initialize the NumberWordFormatter object.",
      "# Convert a number into word format.",
      "# Convert a string representation of a number into words format.",
      "# Convert a two-digit number into words format.",
      "# Convert a three-digit number into words format.",
      "# Parse the thousand/million/billion suffix based on the index."
    ]
  },
  {
    "filename": "NumericEntityUnescaper.txt",
    "comments": [
      "# This class provides functionality to replace numeric entities with their corresponding characters in a given string.",
      "# Replace numeric character references (HTML entities) in the input string with their corresponding Unicode characters.",
      "# Determine whether a given character is a hexadecimal digit."
    ]
  },
  {
    "filename": "OrderManagement.txt",
    "comments": [
      "# Manage restaurant orders by allowing the addition of dishes, calculation of the total cost, and checkout.",
      "# Initialize the order management system.\n# self.menu stores the dishes of the restaurant inventory in the format: \n# menu = [{\"dish\": dish name, \"price\": price, \"count\": count}, ...]\n# self.selected_dishes stores the dishes selected by the customer in the format:\n# selected_dish = {\"dish\": dish name, \"count\": count, \"price\": price}\n# self.sales stores the sales of each dish in the format:\n# sales = {dish name: sales}",
      "# Check the self.menu and add the dish to self.selected_dish if the dish count is valid. If the dish has been successfully added, update the count in self.menu.",
      "# Calculate the total price of ordered dishes by multiplying the count, price, and sales.",
      "# Check out the dishes ordered. If self.selected_dishes is not empty, invoke the calculate_total method to complete the check-out process."
    ]
  },
  {
    "filename": "PDFHandler.txt",
    "comments": [
      "# This class allows merging multiple PDF files into one and extracting text from PDFs using the PyPDF2 library.",
      "# Take a list of file paths as a parameter and create a list named readers using PyPDF2, where each reader opens a file from the given paths.",
      "# Read files in self.readers, which stores handles to multiple PDF files, merge them into one PDF, update the page numbers, and save to disk.",
      "# Extract text from PDF files in self.readers."
    ]
  },
  {
    "filename": "PageUtil.txt",
    "comments": [
      "# The PageUtil class is a versatile utility for handling pagination and search functionalities efficiently and conveniently.",
      "# Initialize the PageUtil object with the provided data and page size.",
      "# Retrieve a specific page of data.",
      "# Retrieve information about a specific page.",
      "# Search for items in the data that contain the specified keyword."
    ]
  },
  {
    "filename": "PersonRequest.txt",
    "comments": [
      "# This class validates input personal information data and sets invalid fields to None based on specific rules.",
      "# Initialize a PersonRequest object with the provided information.",
      "# Validate the name and return it. If the name is empty or exceeds 33 characters in length, set it to None.",
      "# Validate the sex and return it. If the sex is not 'Man', 'Woman', or 'UGM', set it to None and return the value.",
      "# Validate the phone number and return it. If phoneNumber is empty or not an 11-digit number, set it to None."
    ]
  },
  {
    "filename": "PushBoxGame.txt",
    "comments": [
      "# This class implements the functionality of a Sokoban game, where the player must move boxes to designated targets in order to win.",
      "# Initialize the push box game with the map and various attributes.",
      "# Initialize the game by setting the positions of the player, targets, and boxes according to the map.",
      "# Check if the game is won by confirming that all boxes are placed on target positions and update the value of self.is_game_over accordingly.",
      "# Move the player based on the specified direction and check if the game is won."
    ]
  },
  {
    "filename": "RPGCharacter.txt",
    "comments": [
      "# This class represents a role-playing game character, allowing for actions such as attacking other characters, healing, gaining experience, leveling up, and checking if the character is alive.",
      "# Initialize an RPG character object.",
      "# Attack another character and apply damage by offsetting the defense value.",
      "# Heal the character by 10 HP, ensuring the maximum HP does not exceed 100.",
      "# Gain experience points for the character and level up when the experience has reached 100 times the current level. \n# Use any excess experience to calculate the next level up until it is exhausted.",
      "# Level up the character, reset experience points to zero, increase health points by 20, and increase attack power and defense points by 5. The maximum level is 100.",
      "# Check if the player is alive."
    ]
  },
  {
    "filename": "RegexUtils.txt",
    "comments": [
      "# The class provides methods to match, find all occurrences, split, and substitute text using regular expressions. It also includes predefined patterns for validating phone numbers and extracting email addresses.",
      "# Check if the text matches the regular expression.",
      "# Find all matching substrings and return a list of matching substrings.",
      "# Split the text based on regular expression patterns and return a list of substrings.",
      "# Replace the substring matched by a regular expression with the specified string.",
      "# Generate regular expression patterns that match email addresses.",
      "# Generate regular expression patterns that match phone numbers.",
      "# Generate regular expression patterns that match the middle characters of two sentences.",
      "# Split the text into a list of sentences without punctuation, except for the last sentence.",
      "# Verify the validity of the phone number.",
      "# Extract all email addresses from the provided text."
    ]
  },
  {
    "filename": "SQLGenerator.txt",
    "comments": [
      "# This class generates SQL statements for common operations on a table, including SELECT, INSERT, UPDATE, and DELETE.",
      "# Initialize the table name.",
      "# Generate a SELECT SQL statement based on the specified fields and conditions.",
      "# Generate an INSERT SQL statement based on the given data.",
      "# Generate an UPDATE SQL statement based on the given data and condition.",
      "# Generate a DELETE SQL statement based on the given condition.",
      "# Generate a SQL statement to select females under a specified age.",
      "# Generate a SQL statement to select records within a specified age range."
    ]
  },
  {
    "filename": "SQLQueryBuilder.txt",
    "comments": [
      "# This class is designed to build SQL queries, including SELECT, INSERT, UPDATE, and DELETE statements.",
      "# Generate the SELECT SQL statement from the given parameters.",
      "# Generate the INSERT SQL statement from the specified parameters.",
      "# Generate the DELETE SQL statement from the given parameters.",
      "# Generate the UPDATE SQL statement from the given parameters."
    ]
  },
  {
    "filename": "Server.txt",
    "comments": [
      "# This class functions as a server that manages a white list, handles message sending and receiving, and facilitates information display.",
      "# Initialize the whitelist as an empty list and the sending and receiving information as an empty dictionary.",
      "# Add an address to the whitelist if it does not already exist, and do nothing if it already exists.",
      "# Remove an address from the whitelist and do nothing if the address does not exist.",
      "# Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it.",
      "# Send information containing address and content.",
      "# Return a struct of the specified type."
    ]
  },
  {
    "filename": "ShoppingCart.txt",
    "comments": [
      "# The class manages items, including their prices and quantities, and allows for adding, removing, viewing items, and calculating the total price.",
      "# Initialize the items representing the shopping list as an empty dictionary.",
      "# Add item information to the shopping list including price and quantity, with a default quantity of 1.",
      "# Subtract the specified quantity of item from the shopping list items.",
      "# Return the current shopping list items.",
      "# Calculate the total price of all items in the shopping list by multiplying the quantity of each item by its price."
    ]
  },
  {
    "filename": "SignInSystem.txt",
    "comments": [
      "# This class handles user sign-in functionality, including adding users, signing in/out, checking sign-in status, and retrieving users who are signed in or not signed in.",
      "# Initialize the sign-in system.",
      "# Add a user to the sign-in system if the user is not already in self.users, and set the initial state to False.",
      "# Sign in a user if the user is in self.users and change the state to True.",
      "# Check if a user is signed in.",
      "# Check if all users are signed in.",
      "# Get a list of usernames that are not signed in."
    ]
  },
  {
    "filename": "Snake.txt",
    "comments": [
      "# This class represents a snake game, allowing the snake to move, eat food, reset the game, and generate a random food position.",
      "# Initialize the length of the snake, screen width, screen height, block size, snake head position, score, and food position.",
      "# Move the snake in the specified direction. If the new position of the snake's head is equal to the position of the food, consume the food. If the position of the snake's head is equal to the position of its body, initiate the game over; otherwise, increase the snake's length by one.",
      "# Randomly generate a new food position that is not located on the snake.",
      "# Reset the snake to its initial state by setting the length to 1, the head position to (SCREEN_WIDTH/2, SCREEN_HEIGHT/2), the score to 0, and randomly generating a new food position.",
      "# Increase the length of the snake by 1, increase the score by 100, and randomly generate a new food position, ensuring it is not placed on the snake."
    ]
  },
  {
    "filename": "SplitSentence.txt",
    "comments": [
      "# The class allows for splitting sentences, counting words in a sentence, and processing a text file to find the maximum word count.",
      "# Split a string into a list of sentences, where sentences end with a period (.) or question mark (?) followed by a space. Note that \"Mr.\" also ends with a period but is not considered a sentence.",
      "# Count the number of words in a sentence, considering that words are separated by spaces, and excluding punctuation marks and numbers from the count.",
      "# Given a text, return the number of words in the longest sentence."
    ]
  },
  {
    "filename": "Statistics3.txt",
    "comments": [
      "# This class implements methods for calculating statistical indicators such as median, mode, correlation matrix, and Z-score.",
      "# Calculate the median of the given list.",
      "# Calculate the mode of the given list.",
      "# Calculate the correlation of the given list.",
      "# Calculate the mean of the given list.",
      "# Calculate the correlation matrix of the given list.",
      "# Calculate the standard deviation of the given list.",
      "# Calculate the z-score of the given list."
    ]
  },
  {
    "filename": "StockPortfolioTracker.txt",
    "comments": [
      "# This class, StockPortfolioTracker, allows adding stocks, removing stocks, buying stocks, selling stocks, calculating the total value of the portfolio, and obtaining a summary of the portfolio.",
      "# Initialize the StockPortfolioTracker class with a cash balance and an empty portfolio.",
      "# Add a stock to the portfolio.",
      "# Remove a stock from the portfolio.",
      "# Buy a stock and add it to the portfolio.",
      "# Sell a stock, remove it from the portfolio, and add the cash to the cash balance.",
      "# Calculate the total value of the portfolio.",
      "# Get a summary of the portfolio.",
      "# Get the value of a stock."
    ]
  },
  {
    "filename": "StudentDatabaseProcessor.txt",
    "comments": [
      "# This class provides database operations, including inserting student information, searching for student information by name, and deleting student information by name.",
      "# Initialize the StudentDatabaseProcessor object with the specified database name.",
      "# Create a \"students\" table in the database if it does not exist already. The fields include ID of type int, name of type str, age of type int, gender of type str, and grade of type int.",
      "# Insert a new student into the \"students\" table.",
      "# Search for a student in the \"students\" table by their name.",
      "# Delete a student from the \"students\" table by their name."
    ]
  },
  {
    "filename": "TextFileProcessor.txt",
    "comments": [
      "# The class handles reading, writing, and processing text files. It can read the file as JSON, read the raw text, write content to the file, and process the file by removing non-alphabetic characters.",
      "# Initialize the file path.",
      "# Read the self.file_path file in JSON format and raise an error if the file content does not conform to JSON format.",
      "# Read and return the content of the file located at self.file_path.",
      "# Write content to the self.file_path file and overwrite it if the file already exists.",
      "# Read the self.file_path file, filter out non-alphabetic characters from the content string, and overwrite the processed data into the same self.file_path file."
    ]
  },
  {
    "filename": "Thermostat.txt",
    "comments": [
      "# Manage temperature control, including setting and retrieving the target temperature, adjusting the mode, and simulating temperature operation.",
      "# Initialize instances of the Thermostat class, including the current temperature, target temperature, and operating mode.",
      "# Get the target temperature of an instance of the Thermostat class.",
      "# Set the target temperature.",
      "# Get the current work mode.",
      "# Get the current work mode.",
      "# Automatically set the operating mode by comparing the current temperature with the target temperature. If the current temperature is lower than the target temperature, set the operating mode to 'heat'; otherwise, set it to 'cool'.",
      "# Check for conflicts between the operating mode and the relationship between the current temperature and the target temperature. If a conflict exists, adjust the operating mode automatically.",
      "# Simulate the operation of a Thermostat by automatically starting the auto_set_mode method to set the operating mode,\n# and then automatically adjust the current temperature according to the operating mode until the target temperature is reached."
    ]
  },
  {
    "filename": "TicTacToe.txt",
    "comments": [
      "# The class represents a game of Tic-Tac-Toe, including functions for making a move on the board, checking for a winner, and determining if the board is full.",
      "# Initialize a 3x3 game board with all empty spaces and the current symbol for the player, default is 'X'.",
      "# Place the current player's mark at the specified position on the board and switch to the next player\u2019s mark.",
      "# Check if there is a winner on the board in rows, columns, and diagonals.",
      "# Check if the game board is completely filled."
    ]
  },
  {
    "filename": "TimeUtils.txt",
    "comments": [
      "# This is a time utility class that includes functionality for getting the current time and date, adding seconds to a datetime object, converting between strings and datetime objects, calculating the time difference in minutes, and formatting a datetime object.",
      "# Get the current datetime.",
      "# Return the current time in the format of '%H:%M:%S'.",
      "# Return the current date in the format of \"%Y-%m-%d\".",
      "# Add the specified number of seconds to the current time.",
      "# Convert the time string to a datetime instance.",
      "# Convert a datetime instance to a string.",
      "# Calculate the number of minutes that have passed between two times and round the results to the nearest minute.",
      "# Get formatted time."
    ]
  },
  {
    "filename": "TriCalculator.txt",
    "comments": [
      "# The class calculates trigonometric values, including cosine, sine, and tangent, using Taylor series approximations.",
      "# Calculate the cosine value of the x-degree angle.",
      "# Calculate the factorial of a given number a.",
      "# Find the n-order Taylor expansion value of cos(x/180 * pi).",
      "# Calculate the sine value of the x-degree angle.",
      "# Calculate the tangent value of the x-degree angle."
    ]
  },
  {
    "filename": "TwentyFourPointGame.txt",
    "comments": [
      "# This is a game of twenty-four points, designed to generate four numbers and check if the player's expression equals 24.",
      "# Generate random numbers between 1 and 9 for the cards.",
      "# Get a list of four random numbers between 1 and 9 to represent the player's cards.",
      "# Check if the given mathematical expression using the cards can evaluate to 24.",
      "# Evaluate a mathematical expression and check if the result is equal to 24."
    ]
  },
  {
    "filename": "URLHandler.txt",
    "comments": [
      "# The class supports handling URLs, including extracting the scheme, host, path, query parameters, and fragment.",
      "# Initialize the URL of the URLHandler.",
      "# Get the scheme of the URL.",
      "# Extract the host domain name from the URL.",
      "# Extract the third part of the URL, which represents the address of the resource.",
      "# Get the request parameters for the URL.",
      "# Get the fragment after '#' in the URL."
    ]
  },
  {
    "filename": "UrlPath.txt",
    "comments": [
      "# This class is a utility for encapsulating and manipulating the path component of a URL, including adding nodes, parsing path strings, and building path strings with optional encoding.",
      "# Initialize the UrlPath object with an empty list of segments and a flag indicating the presence of an end tag.",
      "# Add a segment to the list of segments in the UrlPath.",
      "# Parse the given path string and populate the list of segments in the UrlPath.",
      "# Fix the given path string by removing leading and trailing slashes."
    ]
  },
  {
    "filename": "UserLoginDB.txt",
    "comments": [
      "# This is a database management class for user login verification. It provides functions for inserting user information, searching user information, deleting user information, and validating user login.",
      "# Initialize the UserLoginDB object with the specified database name.",
      "# Insert a new user into the \"users\" table.",
      "# Search for users in the \"users\" table by username.",
      "# Delete a user from the \"users\" table by username.",
      "# Determine whether the user can log in by checking if the user exists in the database and if the password is correct."
    ]
  },
  {
    "filename": "VectorCalculator.txt",
    "comments": [
      "# The class provides vector operations, including calculating similarity, cosine similarity, average similarity, and IDF weights.",
      "# Compute the cosine similarity between one vector and another vector.",
      "# Compute cosine similarities between one vector and a set of other vectors.",
      "# Compute the cosine similarity between two sets of vectors.",
      "# Calculate log(total_num + 1 / count + 1) for each count in number_dict."
    ]
  },
  {
    "filename": "VendingMachine.txt",
    "comments": [
      "# This class simulates a vending machine, including functionalities for adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.",
      "# Initialize the vending machine's inventory and balance.",
      "# Add a product to the vending machine's inventory.",
      "# Insert coins into the vending machine.",
      "# Purchase a product from the vending machine, return the balance after the purchase, and display \"purchase unsuccessful\" if the product is out of stock.",
      "# Replenish the inventory of a product already in the vending machine.",
      "# Display the products in the vending machine."
    ]
  },
  {
    "filename": "Warehouse.txt",
    "comments": [
      "# This class manages inventory and orders by providing functionalities for adding products, updating product quantities, retrieving product quantities, creating orders, changing order statuses, and tracking orders.",
      "# Initialize two fields: \n# self.inventory is a dictionary that stores the products with the format {Product ID: Product}. \n# self.orders is a dictionary that stores the products in an order with the format {Order ID: Order}.",
      "# Add product to inventory and increase the quantity if it already exists; otherwise, add a new product to the dictionary.",
      "# According to product_id, add the quantity to the corresponding product in the inventory.",
      "# Get the quantity of a specific product by product_id.",
      "# Create an order that includes the information of the product, such as id and quantity, and add the new order to self.orders. The default value of status is 'Shipped'.",
      "# Change the status of the order if the input order_id exists in self.orders.",
      "# Get the status of a specific order."
    ]
  },
  {
    "filename": "WeatherSystem.txt",
    "comments": [
      "# This class represents a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.",
      "# Initialize the weather system with a specified city name.",
      "# Query the weather system for the weather and temperature of the city, and convert the temperature units based on the input parameter.",
      "# Set the city for the weather system.",
      "# Convert the temperature from Celsius to Fahrenheit.",
      "# Convert the temperature from Fahrenheit to Celsius."
    ]
  },
  {
    "filename": "Words2Numbers.txt",
    "comments": [
      "# The class provides a utility for converting written numbers (in words) to their numerical representation.",
      "# Initialize the word lists and dictionaries required for conversion.",
      "# Convert the word string to the corresponding integer string.",
      "# Check if the input text contains only valid words that can be converted into numbers."
    ]
  },
  {
    "filename": "XMLProcessor.txt",
    "comments": [
      "# This class serves as an XML file handler, including functionalities for reading, writing, processing, and finding elements within an XML file.",
      "# Initialize the XMLProcessor object with the specified file name.",
      "# Read the XML file and return the root element.",
      "# Write the XML data to the specified file.",
      "# Modify the data in XML elements and write the updated XML data to a new file.",
      "# Find the XML elements with the specified name."
    ]
  },
  {
    "filename": "ZipFileProcessor.txt",
    "comments": [
      "# This class processes compressed files and provides the ability to read and decompress them.",
      "# Initialize the file name.",
      "# Get the open file object.",
      "# Extract all zip files and place them in the specified path.",
      "# Extract the file with the specified name from the zip file and place it in the specified path.",
      "# Compress the specified file list into a zip file and place it in the specified path."
    ]
  }
]