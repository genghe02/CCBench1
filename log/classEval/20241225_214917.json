{"response body": "ChatCompletion(id='chatcmpl-AiM2w1FrLVpTEoCTgZKaOBFplJdum', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class provides methods to calculate trigonometric functions using Taylor series expansion.\\n\"\"\"\\n\\nfrom math import pi, fabs\\n\\nclass TriCalculator:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialization method for the TriCalculator class.\\n        \"\"\"\\n        pass\\n\\n    def cos(self, x):\\n        \"\"\"\\n        Calculate the cosine of angle x (in degrees) using Taylor series approximation.\\n\\n        Parameters:\\n            x (float): The angle in degrees for which to calculate the cosine.\\n\\n        Returns:\\n            float: The cosine of angle x rounded to 10 decimal places.\\n\\n        Test cases:\\n            # Test case 1: Cosine of 0 degrees\\n            input = 0\\n            expected_output = 1.0\\n\\n            # Test case 2: Cosine of 90 degrees\\n            input = 90\\n            expected_output = 0.0\\n\\n            # Test case 3: Cosine of 180 degrees\\n            input = 180\\n            expected_output = -1.0\\n        \"\"\"\\n        return round(self.taylor(x, 50), 10)\\n\\n    def factorial(self, a):\\n        \"\"\"\\n        Calculate the factorial of a given number.\\n\\n        Parameters:\\n            a (int): The number for which to calculate the factorial.\\n\\n        Returns:\\n            int: The factorial of the number a.\\n\\n        Test cases:\\n            # Test case 1: Factorial of 5\\n            input = 5\\n            expected_output = 120\\n\\n            # Test case 2: Factorial of 0\\n            input = 0\\n            expected_output = 1\\n\\n            # Test case 3: Factorial of 1\\n            input = 1\\n            expected_output = 1\\n        \"\"\"\\n        b = 1\\n        while a != 1 and a != 0:\\n            b *= a\\n            a -= 1\\n        return b\\n\\n    def taylor(self, x, n):\\n        \"\"\"\\n        Calculate the Taylor series expansion for cosine based on the angle x (in degrees).\\n\\n        Parameters:\\n            x (float): The angle in degrees to calculate the series expansion.\\n            n (int): The number of terms to include in the Taylor series.\\n\\n        Returns:\\n            float: The result of the Taylor series expansion for cosine.\\n\\n        Test cases:\\n            # Test case 1: Taylor series result for 0 degrees\\n            input = (0, 10)\\n            expected_output = 1.0\\n\\n            # Test case 2: Taylor series result for 60 degrees\\n            input = (60, 10)\\n            expected_output = 0.5\\n\\n            # Test case 3: Taylor series result for 90 degrees\\n            input = (90, 10)\\n            expected_output = 0.0\\n        \"\"\"\\n        a = 1\\n        x = x / 180 * pi\\n        count = 1\\n        for k in range(1, n):\\n            if count % 2 != 0:\\n                a -= (x ** (2 * k)) / self.factorial(2 * k)\\n            else:\\n                a += (x ** (2 * k)) / self.factorial(2 * k)\\n            count += 1\\n        return a\\n\\n    def sin(self, x):\\n        \"\"\"\\n        Calculate the sine of angle x (in degrees) using series expansion.\\n\\n        Parameters:\\n            x (float): The angle in degrees for which to calculate the sine.\\n\\n        Returns:\\n            float: The sine of angle x rounded to 10 decimal places.\\n\\n        Test cases:\\n            # Test case 1: Sine of 0 degrees\\n            input = 0\\n            expected_output = 0.0\\n\\n            # Test case 2: Sine of 30 degrees\\n            input = 30\\n            expected_output = 0.5\\n\\n            # Test case 3: Sine of 90 degrees\\n            input = 90\\n            expected_output = 1.0\\n        \"\"\"\\n        x = x / 180 * pi\\n        g = 0\\n        t = x\\n        n = 1\\n\\n        while fabs(t) >= 1e-15:\\n            g += t\\n            n += 1\\n            t = -t * x * x / (2 * n - 1) / (2 * n - 2)\\n        return round(g, 10)\\n\\n    def tan(self, x):\\n        \"\"\"\\n        Calculate the tangent of angle x (in degrees).\\n\\n        Parameters:\\n            x (float): The angle in degrees for which to calculate the tangent.\\n\\n        Returns:\\n            float or bool: The tangent of angle x rounded to 10 decimal places,\\n            or False if cosine of x is zero (undefined tangent).\\n\\n        Test cases:\\n            # Test case 1: Tangent of 45 degrees\\n            input = 45\\n            expected_output = 1.0\\n\\n            # Test case 2: Tangent of 0 degrees\\n            input = 0\\n            expected_output = 0.0\\n\\n            # Test case 3: Tangent of 90 degrees (undefined)\\n            input = 90\\n            expected_output = False\\n        \"\"\"\\n        if self.cos(x) != 0:\\n            result = self.sin(x) / self.cos(x)\\n            return round(result, 10)\\n        else:\\n            return False\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735134542, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1109, prompt_tokens=1695, total_tokens=2804, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "TriCalculator.txt"}