{"response body": "{\n  \"id\": \"eadb76a9-7fda-4a0f-abc2-9b18ef11b996\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class manages a stock portfolio, allowing users to add, remove, buy, and sell stocks, \\nwhile tracking the portfolio's value and cash balance.\\n\\\"\\\"\\\"\\n\\nclass StockPortfolioTracker:\\n    def __init__(self, cash_balance):\\n        \\\"\\\"\\\"\\n        Initializes the StockPortfolioTracker with a given cash balance and an empty portfolio.\\n\\n        Parameters:\\n            cash_balance (float): The initial cash balance available for buying stocks.\\n        \\\"\\\"\\\"\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        \\\"\\\"\\\"\\n        Adds a stock to the portfolio. If the stock already exists, it updates the quantity.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock's name, price, and quantity.\\n                          Example: {'name': 'AAPL', 'price': 150, 'quantity': 10}\\n\\n        Test cases:\\n            # Test case 1: Adding a new stock\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 10}]\\n\\n            # Test case 2: Adding an existing stock\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 5})\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 15}]\\n\\n            # Test case 3: Adding a different stock\\n            tracker.add_stock({'name': 'GOOGL', 'price': 2800, 'quantity': 2})\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 15}, {'name': 'GOOGL', 'price': 2800, 'quantity': 2}]\\n        \\\"\\\"\\\"\\n        for pf in self.portfolio:\\n            if pf['name'] == stock['name']:\\n                pf['quantity'] += stock['quantity']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        \\\"\\\"\\\"\\n        Removes a specified quantity of a stock from the portfolio. If the quantity reaches zero, the stock is removed entirely.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock's name and quantity to remove.\\n                          Example: {'name': 'AAPL', 'quantity': 5}\\n\\n        Returns:\\n            bool: True if the stock was successfully removed, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Removing part of a stock\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.remove_stock({'name': 'AAPL', 'quantity': 5}) == True\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 5}]\\n\\n            # Test case 2: Removing all of a stock\\n            assert tracker.remove_stock({'name': 'AAPL', 'quantity': 5}) == True\\n            assert tracker.portfolio == []\\n\\n            # Test case 3: Attempting to remove more than available\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.remove_stock({'name': 'AAPL', 'quantity': 15}) == False\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 10}]\\n        \\\"\\\"\\\"\\n        for pf in self.portfolio:\\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\\n                pf['quantity'] -= stock['quantity']\\n                if pf['quantity'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        \\\"\\\"\\\"\\n        Buys a stock using the available cash balance. If there is insufficient cash, the purchase fails.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock's name, price, and quantity.\\n                          Example: {'name': 'AAPL', 'price': 150, 'quantity': 10}\\n\\n        Returns:\\n            bool: True if the stock was successfully purchased, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful purchase\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.buy_stock({'name': 'AAPL', 'price': 150, 'quantity': 5}) == True\\n            assert tracker.cash_balance == 250\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 5}]\\n\\n            # Test case 2: Insufficient cash\\n            assert tracker.buy_stock({'name': 'GOOGL', 'price': 2800, 'quantity': 1}) == False\\n            assert tracker.cash_balance == 250\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 5}]\\n\\n            # Test case 3: Buying an existing stock\\n            assert tracker.buy_stock({'name': 'AAPL', 'price': 150, 'quantity': 2}) == True\\n            assert tracker.cash_balance == -50\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 7}]\\n        \\\"\\\"\\\"\\n        if stock['price'] * stock['quantity'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock['price'] * stock['quantity']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        \\\"\\\"\\\"\\n        Sells a stock from the portfolio and adds the proceeds to the cash balance.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock's name and quantity to sell.\\n                          Example: {'name': 'AAPL', 'quantity': 5}\\n\\n        Returns:\\n            bool: True if the stock was successfully sold, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful sale\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.sell_stock({'name': 'AAPL', 'quantity': 5}) == True\\n            assert tracker.cash_balance == 1750\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 5}]\\n\\n            # Test case 2: Attempting to sell more than available\\n            assert tracker.sell_stock({'name': 'AAPL', 'quantity': 10}) == False\\n            assert tracker.cash_balance == 1750\\n            assert tracker.portfolio == [{'name': 'AAPL', 'price': 150, 'quantity': 5}]\\n\\n            # Test case 3: Selling all of a stock\\n            assert tracker.sell_stock({'name': 'AAPL', 'quantity': 5}) == True\\n            assert tracker.cash_balance == 2500\\n            assert tracker.portfolio == []\\n        \\\"\\\"\\\"\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock['price'] * stock['quantity']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        \\\"\\\"\\\"\\n        Calculates the total value of the portfolio, including cash balance and stock holdings.\\n\\n        Returns:\\n            float: The total value of the portfolio.\\n\\n        Test cases:\\n            # Test case 1: Portfolio with cash and stocks\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.calculate_portfolio_value() == 2500\\n\\n            # Test case 2: Portfolio with only cash\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.calculate_portfolio_value() == 1000\\n\\n            # Test case 3: Portfolio with no cash and stocks\\n            tracker = StockPortfolioTracker(0)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            assert tracker.calculate_portfolio_value() == 1500\\n        \\\"\\\"\\\"\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock['price'] * stock['quantity']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        \\\"\\\"\\\"\\n        Provides a summary of the portfolio, including the total value and individual stock values.\\n\\n        Returns:\\n            tuple: A tuple containing the total portfolio value and a list of dictionaries with stock names and their values.\\n                   Example: (2500, [{'name': 'AAPL', 'value': 1500}, {'name': 'GOOGL', 'value': 1000}])\\n\\n        Test cases:\\n            # Test case 1: Portfolio with multiple stocks\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            tracker.add_stock({'name': 'GOOGL', 'price': 2800, 'quantity': 1})\\n            total_value, summary = tracker.get_portfolio_summary()\\n            assert total_value == 5300\\n            assert summary == [{'name': 'AAPL', 'value': 1500}, {'name': 'GOOGL', 'value': 2800}]\\n\\n            # Test case 2: Portfolio with only cash\\n            tracker = StockPortfolioTracker(1000)\\n            total_value, summary = tracker.get_portfolio_summary()\\n            assert total_value == 1000\\n            assert summary == []\\n\\n            # Test case 3: Portfolio with no cash and stocks\\n            tracker = StockPortfolioTracker(0)\\n            tracker.add_stock({'name': 'AAPL', 'price': 150, 'quantity': 10})\\n            total_value, summary = tracker.get_portfolio_summary()\\n            assert total_value == 1500\\n            assert summary == [{'name': 'AAPL', 'value': 1500}]\\n        \\\"\\\"\\\"\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\\\"name\\\": stock[\\\"name\\\"], \\\"value\\\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        \\\"\\\"\\\"\\n        Calculates the total value of a specific stock in the portfolio.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock's name, price, and quantity.\\n                          Example: {'name': 'AAPL', 'price': 150, 'quantity': 10}\\n\\n        Returns:\\n            float: The total value of the stock.\\n\\n        Test cases:\\n            # Test case 1: Calculating value of a stock\\n            tracker = StockPortfolioTracker(1000)\\n            stock = {'name': 'AAPL', 'price': 150, 'quantity': 10}\\n            assert tracker.get_stock_value(stock) == 1500\\n\\n            # Test case 2: Calculating value of a stock with zero quantity\\n            stock = {'name': 'AAPL', 'price': 150, 'quantity': 0}\\n            assert tracker.get_stock_value(stock) == 0\\n\\n            # Test case 3: Calculating value of a stock with negative quantity (edge case)\\n            stock = {'name': 'AAPL', 'price': 150, 'quantity': -5}\\n            assert tracker.get_stock_value(stock) == -750\\n        \\\"\\\"\\\"\\n        return stock['price'] * stock['quantity']\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735195008,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 2536,\n    \"prompt_tokens\": 1559,\n    \"total_tokens\": 4095,\n    \"prompt_cache_hit_tokens\": 0,\n    \"prompt_cache_miss_tokens\": 1559\n  }\n}", "test_case_name": "StockPortfolioTracker.txt"}