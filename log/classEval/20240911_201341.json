{"response body": "ChatCompletion(id='chatcmpl-A6GVwNMhzAgwBb32S5PH2FVcnTLSt', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\nclass SQLQueryBuilder:\\n    # This is a class for constructing SQL queries with methods for SELECT, INSERT, DELETE, and UPDATE operations.\\n\\n    @staticmethod\\n    def select(table, columns=\\'*\\', where=None):\\n        # Constructs a SELECT SQL query string based on the specified table, columns, and conditions.\\n        # param table: str, the name of the table to query from\\n        # param columns: str or list, the columns to select, default is \\'*\\' which selects all columns\\n        # param where: dict, optional conditions for the query\\n        # return: str, the constructed SQL SELECT query\\n        # Test cases:\\n        # >>> SQLQueryBuilder.select(\\'users\\')\\n        # \\'SELECT * FROM users\\'\\n        # >>> SQLQueryBuilder.select(\\'users\\', [\\'id\\', \\'name\\'])\\n        # \\'SELECT id, name FROM users\\'\\n        # >>> SQLQueryBuilder.select(\\'users\\', where={\\'active\\': 1})\\n        # \\'SELECT * FROM users WHERE active=\\\\\\'1\\\\\\'\\'\\n        # >>> SQLQueryBuilder.select(\\'users\\', [\\'id\\'], where={\\'active\\': 1, \\'age\\': 25})\\n        # \\'SELECT id FROM users WHERE active=\\\\\\'1\\\\\\' AND age=\\\\\\'25\\\\\\'\\'\\n        if columns != \\'*\\':\\n            columns = \\', \\'.join(columns)\\n        query = f\"SELECT {columns} FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        # Constructs an INSERT SQL query string to add a new record to the specified table.\\n        # param table: str, the name of the table to insert into\\n        # param data: dict, a dictionary containing the column names and their respective values to insert\\n        # return: str, the constructed SQL INSERT query\\n        # Test cases:\\n        # >>> SQLQueryBuilder.insert(\\'users\\', {\\'name\\': \\'Alice\\', \\'age\\': 30})\\n        # \"INSERT INTO users (name, age) VALUES (\\'Alice\\', \\'30\\')\"\\n        # >>> SQLQueryBuilder.insert(\\'users\\', {\\'email\\': \\'bob@example.com\\'})\\n        # \"INSERT INTO users (email) VALUES (\\'bob@example.com\\')\"\\n        keys = \\', \\'.join(data.keys())\\n        values = \\', \\'.join(f\"\\'{v}\\'\" for v in data.values())\\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        # Constructs a DELETE SQL query string to remove records from the specified table.\\n        # param table: str, the name of the table from which to delete records\\n        # param where: dict, optional conditions to specify which records to delete\\n        # return: str, the constructed SQL DELETE query\\n        # Test cases:\\n        # >>> SQLQueryBuilder.delete(\\'users\\')\\n        # \\'DELETE FROM users\\'\\n        # >>> SQLQueryBuilder.delete(\\'users\\', where={\\'id\\': 1})\\n        # \"DELETE FROM users WHERE id=\\'1\\'\"\\n        query = f\"DELETE FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        # Constructs an UPDATE SQL query string to modify existing records in the specified table.\\n        # param table: str, the name of the table to update\\n        # param data: dict, a dictionary containing the column names and their new values\\n        # param where: dict, optional conditions to specify which records to update\\n        # return: str, the constructed SQL UPDATE query\\n        # Test cases:\\n        # >>> SQLQueryBuilder.update(\\'users\\', {\\'name\\': \\'Alice\\'}, where={\\'id\\': 1})\\n        # \"UPDATE users SET name=\\'Alice\\' WHERE id=\\'1\\'\"\\n        # >>> SQLQueryBuilder.update(\\'users\\', {\\'age\\': 31}, where={\\'name\\': \\'Bob\\'})\\n        # \"UPDATE users SET age=\\'31\\' WHERE name=\\'Bob\\'\"\\n        update_str = \\', \\'.join(f\"{k}=\\'{v}\\'\" for k, v in data.items())\\n        query = f\"UPDATE {table} SET {update_str}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056812, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=930, prompt_tokens=1104, total_tokens=2034))", "test_case_name": "SQLQueryBuilder.txt"}