{"response body": {"id": "3b693135-cadb-43d5-800f-dce9f2dd37ac", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:31:42", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides methods to calculate basic statistical measures such as mean, median, and mode on a given dataset.\n\"\"\"\n\nfrom collections import Counter\n\n\nclass DataStatistics:\n\n    def mean(self, data):\n        \"\"\"\n        Method to calculate the arithmetic mean of the given list of numbers.\n\n        Parameters:\n            data (list): List of numbers to calculate the mean from.\n        \n        Returns:\n            float: The mean of the given list of numbers, rounded to 2 decimal places.\n        \n        Test cases:\n            # Test case 1: Normal case\n            assert mean([1,2,3,4,5]) == 3.0\n            \n            # Test case 2: List with repeated numbers\n            assert mean([1,1,1,1,1]) == 1.0\n            \n            # Test case 3: List with negative numbers\n            assert mean([-1,-2,-3,-4,-5]) == -3.0\n        \"\"\"\n        return round(sum(data) / len(data), 2)\n\n    def median(self, data):\n        \"\"\"\n        Method to calculate the median of the given list of numbers.\n\n        Parameters:\n            data (list): List of numbers to calculate the median from.\n        \n        Returns:\n            float: The median of the given list of numbers. If the list has an even number of elements, the median is the average of the two middle numbers, rounded to 2 decimal places.\n            \n        Test cases:\n            # Test case 1: List with odd number of elements\n            assert median([1,2,3,4,5]) == 3.0\n            \n            # Test case 2: List with even number of elements\n            assert median([1,2,3,4,5,6]) == 3.5\n            \n            # Test case 3: List with negative numbers\n            assert median([-1,-2,-3,-4,-5]) == -3.0\n        \"\"\"\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        if n % 2 == 0:\n            middle = n // 2\n            return round((sorted_data[middle - 1] + sorted_data[middle]) / 2, 2)\n        else:\n            middle = n // 2\n            return sorted_data[middle]\n\n    def mode(self, data):\n        \"\"\"\n        Method to calculate the mode of the given list of numbers.\n\n        Parameters:\n            data (list): List of numbers to calculate the mode from.\n        \n        Returns:\n            list: The mode of the given list of numbers as a list. If there are multiple modes, all are returned in the list.\n            \n        Test cases:\n            # Test case 1: List with one mode\n            assert mode([1,2,2,3,4,5]) == [2]\n            \n            # Test case 2: List with multiple modes\n            assert mode([1,2,2,3,3,4,5]) == [2, 3]\n            \n            # Test case 3: List with no repeating numbers\n            assert mode([1,2,3,4,5]) == [1,2,3,4,5] # All numbers are the mode\n        \"\"\"\n        counter = Counter(data)\n        mode_count = max(counter.values())\n        mode = [x for x, count in counter.items() if count == mode_count]\n        return mode"}}], "usage": {"completion_tokens": 708, "prompt_tokens": 1211, "total_tokens": 1919}, "feeType": "1", "consume": 1.145372}, "test_case_name": "DataStatistics.txt"}