{"response body": "{\n  \"id\": \"6d8df464-03d7-4b44-a0bf-6e609bba0895\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides functionality to parse and extract different components of a URL, such as the scheme, host, path, query parameters, and fragment.\\n\\\"\\\"\\\"\\n\\nclass URLHandler:\\n    def __init__(self, url):\\n        \\\"\\\"\\\"\\n        Initializes the URLHandler with the given URL.\\n\\n        Parameters:\\n            url (str): The URL to be parsed.\\n        \\\"\\\"\\\"\\n        self.url = url\\n\\n    def get_scheme(self):\\n        \\\"\\\"\\\"\\n        Extracts and returns the scheme (protocol) part of the URL.\\n\\n        Returns:\\n            str: The scheme part of the URL (e.g., 'http', 'https'), or None if not found.\\n\\n        Test cases:\\n            # Test case 1: URL with scheme\\n            handler = URLHandler('https://example.com/path')\\n            assert handler.get_scheme() == 'https'\\n\\n            # Test case 2: URL without scheme\\n            handler = URLHandler('example.com/path')\\n            assert handler.get_scheme() is None\\n\\n            # Test case 3: URL with invalid scheme\\n            handler = URLHandler('://example.com/path')\\n            assert handler.get_scheme() == ''\\n        \\\"\\\"\\\"\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            return self.url[:scheme_end]\\n        return None\\n\\n    def get_host(self):\\n        \\\"\\\"\\\"\\n        Extracts and returns the host part of the URL.\\n\\n        Returns:\\n            str: The host part of the URL (e.g., 'example.com'), or None if not found.\\n\\n        Test cases:\\n            # Test case 1: URL with host\\n            handler = URLHandler('https://example.com/path')\\n            assert handler.get_host() == 'example.com'\\n\\n            # Test case 2: URL without host\\n            handler = URLHandler('https:///path')\\n            assert handler.get_host() == ''\\n\\n            # Test case 3: URL with invalid host\\n            handler = URLHandler('https://example.com:8080/path')\\n            assert handler.get_host() == 'example.com:8080'\\n        \\\"\\\"\\\"\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\\\"/\\\")\\n            if host_end != -1:\\n                return url_without_scheme[:host_end]\\n            return url_without_scheme\\n        return None\\n\\n    def get_path(self):\\n        \\\"\\\"\\\"\\n        Extracts and returns the path part of the URL.\\n\\n        Returns:\\n            str: The path part of the URL (e.g., '/path'), or None if not found.\\n\\n        Test cases:\\n            # Test case 1: URL with path\\n            handler = URLHandler('https://example.com/path')\\n            assert handler.get_path() == '/path'\\n\\n            # Test case 2: URL without path\\n            handler = URLHandler('https://example.com')\\n            assert handler.get_path() is None\\n\\n            # Test case 3: URL with root path\\n            handler = URLHandler('https://example.com/')\\n            assert handler.get_path() == '/'\\n        \\\"\\\"\\\"\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\\\"/\\\")\\n            if host_end != -1:\\n                return url_without_scheme[host_end:]\\n        return None\\n\\n    def get_query_params(self):\\n        \\\"\\\"\\\"\\n        Extracts and returns the query parameters of the URL as a dictionary.\\n\\n        Returns:\\n            dict: A dictionary of query parameters, or None if no query parameters are found.\\n\\n        Test cases:\\n            # Test case 1: URL with query parameters\\n            handler = URLHandler('https://example.com/path?key1=value1&key2=value2')\\n            assert handler.get_query_params() == {'key1': 'value1', 'key2': 'value2'}\\n\\n            # Test case 2: URL without query parameters\\n            handler = URLHandler('https://example.com/path')\\n            assert handler.get_query_params() is None\\n\\n            # Test case 3: URL with empty query parameters\\n            handler = URLHandler('https://example.com/path?')\\n            assert handler.get_query_params() == {}\\n        \\\"\\\"\\\"\\n        query_start = self.url.find(\\\"?\\\")\\n        fragment_start = self.url.find(\\\"#\\\")\\n        if query_start != -1:\\n            query_string = self.url[query_start + 1:fragment_start]\\n            params = {}\\n            if len(query_string) > 0:\\n                param_pairs = query_string.split(\\\"&\\\")\\n                for pair in param_pairs:\\n                    key_value = pair.split(\\\"=\\\")\\n                    if len(key_value) == 2:\\n                        key, value = key_value\\n                        params[key] = value\\n            return params\\n        return None\\n\\n    def get_fragment(self):\\n        \\\"\\\"\\\"\\n        Extracts and returns the fragment part of the URL.\\n\\n        Returns:\\n            str: The fragment part of the URL (e.g., 'section1'), or None if not found.\\n\\n        Test cases:\\n            # Test case 1: URL with fragment\\n            handler = URLHandler('https://example.com/path#section1')\\n            assert handler.get_fragment() == 'section1'\\n\\n            # Test case 2: URL without fragment\\n            handler = URLHandler('https://example.com/path')\\n            assert handler.get_fragment() is None\\n\\n            # Test case 3: URL with empty fragment\\n            handler = URLHandler('https://example.com/path#')\\n            assert handler.get_fragment() == ''\\n        \\\"\\\"\\\"\\n        fragment_start = self.url.find(\\\"#\\\")\\n        if fragment_start != -1:\\n            return self.url[fragment_start + 1:]\\n        return None\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735195195,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1235,\n    \"prompt_tokens\": 1485,\n    \"total_tokens\": 2720,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 525\n  }\n}", "test_case_name": "URLHandler.txt"}