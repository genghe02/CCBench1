{"response body": {"id": "941a6b68-4628-49f8-9fe4-22733a4cfb0f", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:03:29", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "import math\n\n# This class provides methods to calculate statistical properties of data including correlation coefficient, skewness, kurtosis, and pdf.\n\nclass DataStatistics4:\n\n    @staticmethod\n    def correlation_coefficient(data1, data2):\n        # This function calculates and returns the correlation coefficient of two sets of data.\n        # :param data1: list, the first set of data\n        # :param data2: list, the second set of data\n        # :return: float, the correlation coefficient of data1 and data2. If denominator is zero, returns 0.\n        # Test case: >>> DataStatistics4.correlation_coefficient([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) should return a value near to 1.\n        n = len(data1)\n        mean1 = sum(data1) / n\n        mean2 = sum(data2) / n\n\n        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))\n        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))\n\n        return numerator / denominator if denominator != 0 else 0\n\n    @staticmethod\n    def skewness(data):\n        # This function calculates and returns the skewness of a data set.\n        # :param data: list, the data set\n        # :return: float, the skewness of the data. If std_deviation is zero, returns 0.\n        # Test case: >>> DataStatistics4.skewness([1, 2, 3, 4, 5]) should return a value near to 0 as the data is symmetric.\n        n = len(data)\n        mean = sum(data) / n\n        variance = sum((x - mean) ** 2 for x in data) / n\n        std_deviation = math.sqrt(variance)\n\n        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0\n\n        return skewness\n\n    @staticmethod\n    def kurtosis(data):\n        # This function calculates and returns the kurtosis of a data set.\n        # :param data: list, the data set\n        # :return: float, the kurtosis of the data. If std_dev is zero, returns math.nan.\n        # Test case: >>> DataStatistics4.kurtosis([1, 2, 3, 4, 5]) should return a value near to -1.2 as the data is perfectly normal.\n        n = len(data)\n        mean = sum(data) / n\n        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)\n\n        if std_dev == 0:\n            return math.nan\n\n        centered_data = [(x - mean) for x in data]\n        fourth_moment = sum(x ** 4 for x in centered_data) / n\n\n        kurtosis_value = (fourth_moment / std_dev ** 4) - 3\n\n        return kurtosis_value\n    \n    @staticmethod\n    def pdf(data, mu, sigma):\n        # This function calculates and returns the probability density function (pdf) of a data set given mu and sigma.\n        # :param data: list, the data set\n        # :param mu: float, the mean of the data\n        # :param sigma: float, the standard deviation of the data\n        # :return: list, a list containing the pdf value for each data point.\n        # Test case: >>> DataStatistics4.pdf([1, 2, 3, 4, 5], 3, 1) should return a list of pdf values for each data point.\n        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]\n        return pdf_values"}}], "usage": {"completion_tokens": 902, "prompt_tokens": 1120, "total_tokens": 2022}, "feeType": "1", "consume": 1.274864}, "test_case_name": "DataStatistics4.txt"}