{"response body": {"id": "f976fc17-3ee7-434d-ade7-2ad89623aaeb", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:31:14", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides an interface for creating, interacting with, and manipulating an SQLite database.\n\"\"\"\n\nimport sqlite3\nimport pandas as pd\n\n\nclass DatabaseProcessor:\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes an instance of the DatabaseProcessor class with a specified database name.\n\n        Parameters:\n            database_name (str): The name of the SQLite database to be processed.\n        \"\"\"\n        self.database_name = database_name\n\n    def create_table(self, table_name, key1, key2):\n        \"\"\"\n        Creates a table in the SQLite database with the given table name and two keys.\n\n        Parameters:\n            table_name (str): The name of the table to be created.\n            key1 (str): The name of the first key in the table.\n            key2 (str): The name of the second key in the table.\n        \n        Test Cases:\n            # Test Case 1: Normal case\n            create_table('users', 'name', 'age')\n\n            # Test Case 2: Table already exists\n            create_table('users', 'name', 'age')\n\n            # Test Case 3: Invalid key names\n            create_table('users', '1name', 'age$')\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n\n    def insert_into_database(self, table_name, data):\n        \"\"\"\n        Inserts the given data into the specified table in the SQLite database.\n\n        Parameters:\n            table_name (str): The name of the table to insert data into.\n            data (list of dict): The data to be inserted, represented as a list of dictionaries.\n        \n        Test Cases:\n            # Test Case 1: Normal case\n            insert_into_database('users', [{'name': 'John', 'age': 30}])\n\n            # Test Case 2: Table does not exist\n            insert_into_database('non_existent_table', [{'name': 'John', 'age': 30}])\n\n            # Test Case 3: Invalid data format\n            insert_into_database('users', [{'name': 'John', 'age': 'thirty'}])\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        for item in data:\n            insert_query = f\"INSERT INTO {table_name} (name, age) VALUES (?, ?)\"\n            cursor.execute(insert_query, (item['name'], item['age']))\n\n        conn.commit()\n        conn.close()\n\n    def search_database(self, table_name, name):\n        \"\"\"\n        Searches the specified table in the SQLite database for a record with the given name.\n\n        Parameters:\n            table_name (str): The name of the table to search.\n            name (str): The name to search for in the table.\n        \n        Returns:\n            list of tuple: A list of tuples (records) that match the search criteria, or None if no such records exist.\n        \n        Test Cases:\n            # Test Case 1: Normal case\n            search_database('users', 'John')\n\n            # Test Case 2: No matching records\n            search_database('users', 'Non_existent_name')\n\n            # Test Case 3: Table does not exist\n            search_database('non_existent_table', 'John')\n        \"\"\"\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = f\"SELECT * FROM {table_name} WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        if result:\n            return result\n        else:\n            return None\n\n    def delete_from_database(self, table_name, name):\n        \"\"\"\n        Deletes a record with the given name from the specified table in the SQLite database.\n\n        Parameters:\n            table_name (str): The name of the table to delete data from.\n            name (str): The name of the record to delete.\n        \n        Test Cases:\n            # Test Case 1: Normal case\n            delete_from_database('users', 'John')\n\n            # Test Case 2: No matching records\n            delete_from_database('users', 'Non_existent_name')\n\n            # Test Case 3: Table does not exist\n            delete_from_database('non_existent_table', 'John')\n        \"\"\"\n\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = f\"DELETE FROM {table_name} WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()"}}], "usage": {"completion_tokens": 969, "prompt_tokens": 1399, "total_tokens": 2368}, "feeType": "1", "consume": 1.454932}, "test_case_name": "DatabaseOperation.txt"}