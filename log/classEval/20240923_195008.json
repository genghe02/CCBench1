{"response body": {"id": "53d5a3fa-18a1-4a6c-b995-32b0bab759b8", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:50:08", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom PIL import Image, ImageEnhance, ImageChops\n\n# This is a class for processing images, including loading, saving, resizing, rotating and adjusting the brightness of images.\nclass ImageProcessor:\n    def __init__(self):\n        # This is a constructor which initializes the image attribute to None.\n        self.image = None\n\n    def load_image(self, image_path):\n        # This function loads an image from a given path.\n        # param image_path: str, the path where the image is located.\n        # >>> image_processor = ImageProcessor()\n        # >>> image_processor.load_image(\"path_to_image\")\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        # This function saves the current image to a specified path.\n        # param save_path: str, the path where the image will be saved.\n        # >>> image_processor = ImageProcessor()\n        # >>> image_processor.load_image(\"path_to_image\")\n        # >>> image_processor.save_image(\"path_to_save_image\")\n        if self.image:\n            self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        # This function resizes the current image to the given width and height.\n        # param width: int, the width to resize the image to.\n        # param height: int, the height to resize the image to.\n        # >>> image_processor = ImageProcessor()\n        # >>> image_processor.load_image(\"path_to_image\")\n        # >>> image_processor.resize_image(500, 500)\n        if self.image:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        # This function rotates the current image by the given number of degrees.\n        # param degrees: int, the number of degrees to rotate the image.\n        # >>> image_processor = ImageProcessor()\n        # >>> image_processor.load_image(\"path_to_image\")\n        # >>> image_processor.rotate_image(90)\n        if self.image:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        # This function adjusts the brightness of the current image by a given factor.\n        # param factor: float, the factor by which to adjust the image brightness.\n        # >>> image_processor = ImageProcessor()\n        # >>> image_processor.load_image(\"path_to_image\")\n        # >>> image_processor.adjust_brightness(1.5)\n        if self.image:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)\n```"}}], "usage": {"completion_tokens": 518, "prompt_tokens": 838, "total_tokens": 1356}, "feeType": "1", "consume": 0.817064}, "test_case_name": "ImageProcessor.txt"}