{"response body": {"id": "04f00141-d325-4f49-98cb-2c230e84f129", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:57:17", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n<description for whole class>\n# This class provides static methods for building SQL queries like SELECT, INSERT, DELETE, and UPDATE.\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        <description for whole function>\n        # Construct a SELECT query with optional columns and WHERE clause.\n        <description for all parameters>\n        # param table: str, the name of the table to query\n        # param columns: str or list, columns to select, default is '*', representing all columns\n        # param where: dict, key-value pairs for filtering results\n        <description for return statement>\n        # return: str, the constructed SQL SELECT query\n        <some test cases for the function>\n        # Test case 1: select specific columns\n        query = SQLQueryBuilder.select('users', ['name', 'email'], {'age': 30})\n        # Test case 2: select all columns with a WHERE clause\n        query = SQLQueryBuilder.select('orders', where={'status': 'pending'})\n\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        <description for whole function>\n        # Construct an INSERT query to add data into the specified table.\n        <description for all parameters>\n        # param table: str, the name of the table to insert data into\n        # param data: dict, key-value pairs of data to be inserted\n        <description for return statement>\n        # return: str, the constructed SQL INSERT query\n        <some test cases for the function>\n        # Test case 1: insert a new user record\n        query = SQLQueryBuilder.insert('users', {'name': 'Alice', 'age': 25})\n        # Test case 2: insert an order entry\n        query = SQLQueryBuilder.insert('orders', {'product': 'Laptop', 'quantity': 2})\n\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values}) \n\n    @staticmethod\n    def delete(table, where=None):\n        <description for whole function>\n        # Construct a DELETE query with an optional WHERE clause for deleting records.\n        <description for all parameters>\n        # param table: str, the name of the table to delete records from\n        # param where: dict, key-value pairs for filtering records to be deleted\n        <description for return statement>\n        # return: str, the constructed SQL DELETE query\n        <some test cases for the function>\n        # Test case 1: delete records based on a condition\n        query = SQLQueryBuilder.delete('users', {'age': 30})\n        # Test case 2: delete all records from the 'logs' table\n        query = SQLQueryBuilder.delete('logs')\n\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        <description for whole function>\n        # Construct an UPDATE query to modify records in the specified table.\n        <description for all parameters>\n        # param table: str, the name of the table to update records in\n        # param data: dict, key-value pairs of data to be updated\n        # param where: dict, key-value pairs for filtering records to be updated\n        <description for return statement>\n        # return: str, the constructed SQL UPDATE query\n        <some test cases for the function>\n        # Test case 1: update user information\n        query = SQLQueryBuilder.update('users', {'age': 26}, {'name': 'Alice'})\n        # Test case 2: update order status\n        query = SQLQueryBuilder.update('orders', {'status': 'shipped'}, {'id': 123})\n\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n```"}}], "usage": {"completion_tokens": 946, "prompt_tokens": 960, "total_tokens": 1906}, "feeType": "1", "consume": 0.013791859704}, "test_case_name": "SQLQueryBuilder.txt"}