{"response body": "{\n  \"id\": \"f5e2795e-d439-4341-9c8b-9ddca3b2bdc5\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents a Vending Machine that manages inventory, handles transactions, and allows users to purchase items.\\n\\\"\\\"\\\"\\n\\nclass VendingMachine:\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes a new VendingMachine instance with an empty inventory and zero balance.\\n        \\\"\\\"\\\"\\n        self.inventory = {}\\n        self.balance = 0\\n\\n    def add_item(self, item_name, price, quantity):\\n        \\\"\\\"\\\"\\n        Adds a new item to the vending machine inventory or restocks an existing item.\\n\\n        Parameters:\\n            item_name (str): The name of the item to add or restock.\\n            price (float): The price of the item.\\n            quantity (int): The quantity of the item to add.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Add a new item\\n            vending_machine = VendingMachine()\\n            vending_machine.add_item('Soda', 1.5, 10)\\n            assert vending_machine.inventory['Soda'] == {'price': 1.5, 'quantity': 10}\\n\\n            # Test case 2: Restock an existing item\\n            vending_machine.add_item('Soda', 1.5, 5)\\n            assert vending_machine.inventory['Soda'] == {'price': 1.5, 'quantity': 15}\\n\\n            # Test case 3: Add another new item\\n            vending_machine.add_item('Chips', 1.0, 20)\\n            assert vending_machine.inventory['Chips'] == {'price': 1.0, 'quantity': 20}\\n        \\\"\\\"\\\"\\n        if not self.restock_item(item_name, quantity):\\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}\\n\\n    def insert_coin(self, amount):\\n        \\\"\\\"\\\"\\n        Inserts a coin into the vending machine, increasing the balance.\\n\\n        Parameters:\\n            amount (float): The amount of money to insert.\\n\\n        Returns:\\n            float: The updated balance after inserting the coin.\\n\\n        Test cases:\\n            # Test case 1: Insert a coin\\n            vending_machine = VendingMachine()\\n            assert vending_machine.insert_coin(1.0) == 1.0\\n\\n            # Test case 2: Insert multiple coins\\n            assert vending_machine.insert_coin(0.5) == 1.5\\n\\n            # Test case 3: Insert a negative amount (invalid)\\n            assert vending_machine.insert_coin(-1.0) == 1.5  # Balance remains unchanged\\n        \\\"\\\"\\\"\\n        self.balance += amount\\n        return self.balance\\n\\n    def purchase_item(self, item_name):\\n        \\\"\\\"\\\"\\n        Purchases an item from the vending machine if available and sufficient balance.\\n\\n        Parameters:\\n            item_name (str): The name of the item to purchase.\\n\\n        Returns:\\n            float or bool: The updated balance after purchase if successful, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful purchase\\n            vending_machine = VendingMachine()\\n            vending_machine.add_item('Soda', 1.5, 10)\\n            vending_machine.insert_coin(2.0)\\n            assert vending_machine.purchase_item('Soda') == 0.5\\n\\n            # Test case 2: Insufficient balance\\n            vending_machine.insert_coin(1.0)\\n            assert vending_machine.purchase_item('Soda') == False\\n\\n            # Test case 3: Item out of stock\\n            vending_machine.add_item('Chips', 1.0, 0)\\n            assert vending_machine.purchase_item('Chips') == False\\n        \\\"\\\"\\\"\\n        if item_name in self.inventory:\\n            item = self.inventory[item_name]\\n            if item['quantity'] > 0 and self.balance >= item['price']:\\n                self.balance -= item['price']\\n                item['quantity'] -= 1\\n                return self.balance\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n    def restock_item(self, item_name, quantity):\\n        \\\"\\\"\\\"\\n        Restocks an existing item in the vending machine inventory.\\n\\n        Parameters:\\n            item_name (str): The name of the item to restock.\\n            quantity (int): The quantity to add to the existing stock.\\n\\n        Returns:\\n            bool: True if the item was restocked, False if the item does not exist.\\n\\n        Test cases:\\n            # Test case 1: Restock an existing item\\n            vending_machine = VendingMachine()\\n            vending_machine.add_item('Soda', 1.5, 10)\\n            assert vending_machine.restock_item('Soda', 5) == True\\n            assert vending_machine.inventory['Soda']['quantity'] == 15\\n\\n            # Test case 2: Restock a non-existent item\\n            assert vending_machine.restock_item('Chips', 10) == False\\n\\n            # Test case 3: Restock with zero quantity\\n            assert vending_machine.restock_item('Soda', 0) == True\\n            assert vending_machine.inventory['Soda']['quantity'] == 15\\n        \\\"\\\"\\\"\\n        if item_name in self.inventory:\\n            self.inventory[item_name]['quantity'] += quantity\\n            return True\\n        else:\\n            return False\\n\\n    def display_items(self):\\n        \\\"\\\"\\\"\\n        Displays all items in the vending machine inventory with their prices and quantities.\\n\\n        Returns:\\n            str or bool: A formatted string of all items if inventory is not empty, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Display items in a non-empty inventory\\n            vending_machine = VendingMachine()\\n            vending_machine.add_item('Soda', 1.5, 10)\\n            vending_machine.add_item('Chips', 1.0, 20)\\n            expected_output = \\\"Soda - $1.5 [10]\\\\nChips - $1.0 [20]\\\"\\n            assert vending_machine.display_items() == expected_output\\n\\n            # Test case 2: Display items in an empty inventory\\n            empty_vending_machine = VendingMachine()\\n            assert empty_vending_machine.display_items() == False\\n\\n            # Test case 3: Display items after restocking\\n            vending_machine.restock_item('Soda', 5)\\n            expected_output = \\\"Soda - $1.5 [15]\\\\nChips - $1.0 [20]\\\"\\n            assert vending_machine.display_items() == expected_output\\n        \\\"\\\"\\\"\\n        if not self.inventory:\\n            return False\\n        else:\\n            items = []\\n            for item_name, item_info in self.inventory.items():\\n                items.append(f\\\"{item_name} - ${item_info['price']} [{item_info['quantity']}]\\\")\\n            return \\\"\\\\n\\\".join(items)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735195268,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1475,\n    \"prompt_tokens\": 1415,\n    \"total_tokens\": 2890,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 455\n  }\n}", "test_case_name": "VendingMachine.txt"}