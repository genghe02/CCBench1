{"response body": "ChatCompletion(id='chatcmpl-AiOE8v7EaP1Bbgy4KBfJEmmHA4DKI', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a game of Mahjong Connect where players need to match pairs of identical icons on a board by drawing a path between them.\\n\\nThe class contains methods to create the game board, check for valid moves, find a path between two positions, remove matching icons, and determine if the game is over.\\n\"\"\"\\n\\nimport random\\n\\n\\nclass MahjongConnect:\\n    def __init__(self, BOARD_SIZE, ICONS):\\n        \"\"\"\\n        Initialize the Mahjong Connect game with the board size and available icons.\\n\\n        Parameters:\\n            BOARD_SIZE (tuple): Dimensions of the game board in rows and columns\\n            ICONS (list): List of icons available for matching pairs\\n\\n        Test cases:\\n            # Test case 1: Small board size\\n            game = MahjongConnect((4, 4), [\\'A\\', \\'B\\', \\'C\\'])\\n            \\n            # Test case 2: Large board size\\n            game = MahjongConnect((6, 6), [\\'1\\', \\'2\\', \\'3\\'])\\n            \\n            # Test case 3: Unique icons\\n            game = MahjongConnect((5, 5), [\\'X\\', \\'Y\\', \\'Z\\'])\\n        \"\"\"\\n        self.BOARD_SIZE = BOARD_SIZE\\n        self.ICONS = ICONS\\n        self.board = self.create_board()\\n\\n    def create_board(self):\\n        \"\"\"\\n        Create a new game board filled with randomly selected icons.\\n\\n        Returns:\\n            list: A 2D list representing the game board with icons in each cell\\n        \\n        Test cases:\\n            # Test case 1: Small board\\n            assert len(create_board()) == 4\\n            \\n            # Test case 2: Large board\\n            assert len(create_board()) == 6\\n            \\n            # Test case 3: Icon presence\\n            assert any(icon != \\' \\' for row in create_board() for icon in row)\\n        \"\"\"\\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\\n        return board\\n\\n    def is_valid_move(self, pos1, pos2):\\n        \"\"\"\\n        Check if a move between two positions is valid in the game.\\n\\n        Parameters:\\n            pos1 (tuple): First position as (row, column)\\n            pos2 (tuple): Second position as (row, column)\\n\\n        Returns:\\n            bool: True if the move is valid, False otherwise\\n\\n        Test cases:\\n            # Test case 1: Valid move\\n            assert is_valid_move((0, 0), (0, 1)) == True\\n            \\n            # Test case 2: Invalid move (same positions)\\n            assert is_valid_move((2, 2), (2, 2)) == False\\n            \\n            # Test case 3: Invalid move (different icons)\\n            assert is_valid_move((1, 1), (1, 2)) == False\\n        \"\"\"\\n        x1, y1 = pos1\\n        x2, y2 = pos2\\n\\n        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[0] and 0 <= y2 < self.BOARD_SIZE[1]):\\n            return False\\n\\n        if pos1 == pos2 or self.board[x1][y1] != self.board[x2][y2] or not self.has_path(pos1, pos2):\\n            return False\\n\\n        return True\\n\\n    def has_path(self, pos1, pos2):\\n        \"\"\"\\n        Check if there is a valid path between two positions on the board.\\n\\n        Parameters:\\n            pos1 (tuple): Starting position as (row, column)\\n            pos2 (tuple): Target position as (row, column)\\n\\n        Returns:\\n            bool: True if a valid path exists, False otherwise\\n\\n        Test cases:\\n            # Test case 1: Valid path\\n            assert has_path((0, 0), (1, 1)) == True\\n            \\n            # Test case 2: Invalid path (obstacle between)\\n            assert has_path((1, 1), (3, 3)) == False\\n            \\n            # Test case 3: No path available\\n            assert has_path((0, 0), (4, 4)) == False\\n        \"\"\"\\n        visited = set()\\n        stack = [pos1]\\n\\n        while stack:\\n            current_pos = stack.pop()\\n\\n            if current_pos == pos2:\\n                return True\\n\\n            if current_pos in visited:\\n                continue\\n\\n            visited.add(current_pos)\\n            x, y = current_pos\\n\\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\\n                new_x, new_y = x + dx, y + dy\\n                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:\\n                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:\\n                        stack.append((new_x, new_y))\\n\\n        return False\\n\\n    def remove_icons(self, pos1, pos2):\\n        \"\"\"\\n        Remove matching icons at two given positions from the board.\\n\\n        Parameters:\\n            pos1 (tuple): First position as (row, column)\\n            pos2 (tuple): Second position as (row, column)\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Remove icons\\n            remove_icons((0, 0), (0, 1))\\n            \\n            # Test case 2: Remove icons at different positions\\n            remove_icons((2, 2), (3, 3))\\n            \\n            # Test case 3: No icons removed\\n            remove_icons((1, 1), (2, 2))\\n        \"\"\"\\n        x1, y1 = pos1\\n        x2, y2 = pos2\\n        self.board[x1][y1] = \\' \\'\\n        self.board[x2][y2] = \\' \\'\\n\\n    def is_game_over(self):\\n        \"\"\"\\n        Check if the game is over.\\n\\n        Returns:\\n            bool: True if the game is over (board clear), False otherwise\\n\\n        Test cases:\\n            # Test case 1: Game over\\n            assert is_game_over() == True\\n            \\n            # Test case 2: Game still running\\n            assert is_game_over() == False\\n            \\n            # Test case 3: Game over with a few icons left\\n            assert is_game_over() == False\\n        \"\"\"\\n        for row in self.board:\\n            if any(icon != \\' \\' for icon in row):\\n                return False\\n        return True\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735142924, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1396, prompt_tokens=1706, total_tokens=3102, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "MahjongConnect.txt"}