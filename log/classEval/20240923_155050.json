{"response body": "{\n  \"id\": \"ee792921-2df5-4a06-8443-372a4abc38a2\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class is designed to check if a given expression has balanced brackets.\\nclass BalancedBrackets:\\n    def __init__(self, expr):\\n        # Initialize the class with the given expression and prepare the necessary data structures.\\n        # self.stack is a list used to store the left brackets as they are encountered.\\n        # self.left_brackets is a list of all left brackets.\\n        # self.right_brackets is a list of all right brackets.\\n        # self.expr is the expression to be checked for balanced brackets.\\n        self.stack = []\\n        self.left_brackets = [\\\"(\\\", \\\"{\\\", \\\"[\\\"]\\n        self.right_brackets = [\\\")\\\", \\\"}\\\", \\\"]\\\"]\\n        self.expr = expr\\n\\n    def clear_expr(self):\\n        # This function removes all characters from the expression that are not brackets.\\n        # param self: BalancedBrackets, the instance of the class.\\n        # return: None, modifies the instance's expr attribute in place.\\n        # >>> bb = BalancedBrackets(\\\"a(b{c[d]e}f)g\\\")\\n        # >>> bb.clear_expr()\\n        # >>> bb.expr\\n        # '({[]})'\\n        self.expr = ''.join(c for c in self.expr if (c in self.left_brackets or c in self.right_brackets))\\n\\n    def check_balanced_brackets(self):\\n        # This function checks if the expression has balanced brackets.\\n        # param self: BalancedBrackets, the instance of the class.\\n        # return: bool, True if the brackets are balanced, False otherwise.\\n        # >>> bb = BalancedBrackets(\\\"a(b{c[d]e}f)g\\\")\\n        # >>> bb.check_balanced_brackets()\\n        # True\\n        # >>> bb = BalancedBrackets(\\\"a(b{c[d}e]f)g\\\")\\n        # >>> bb.check_balanced_brackets()\\n        # False\\n        self.clear_expr()\\n        for Brkt in self.expr:\\n            if Brkt in self.left_brackets:\\n                self.stack.append(Brkt)\\n            else:\\n                Current_Brkt = self.stack.pop()\\n                if Current_Brkt == \\\"(\\\":\\n                    if Brkt != \\\")\\\":\\n                        return False\\n                if Current_Brkt == \\\"{\\\":\\n                    if Brkt != \\\"}\\\":\\n                        return False\\n                if Current_Brkt == \\\"[\\\":\\n                    if Brkt != \\\"]\\\":\\n                        return False\\n        if self.stack:\\n            return False\\n        return True\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727077821,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 602,\n    \"prompt_tokens\": 953,\n    \"total_tokens\": 1555,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 377\n  }\n}", "test_case_name": "BalancedBrackets.txt"}