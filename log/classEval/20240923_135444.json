{"response body": {"id": "58d7c215-d9bd-4cb7-a69e-aad738eef23f", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:54:44", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "class StockPortfolioTracker:\n    # This class represents a stock portfolio tracker that allows users to manage their stock portfolio.\n\n    def __init__(self, cash_balance):\n        # Initializes the StockPortfolioTracker with the given cash balance.\n        # cash_balance: float, the initial cash balance of the portfolio.\n\n        self.portfolio = []\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        # Adds a stock to the portfolio or increments the quantity if the stock is already present.\n        # stock: dict, contains information about the stock to be added.\n        #           Should have keys 'name', 'price', and 'quantity'.\n        # Test cases:\n        # 1. Add a new stock to the portfolio.\n        # 2. Increment the quantity of an existing stock.\n        for pf in self.portfolio:\n            if pf['name'] == stock['name']:\n                pf['quantity'] += stock['quantity']\n                return\n\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        # Removes a stock from the portfolio or decreases the quantity if sufficient quantity exists.\n        # stock: dict, contains information about the stock to be removed.\n        #           Should have keys 'name', 'price', and 'quantity'.\n        # Test cases:\n        # 1. Remove a stock with full quantity.\n        # 2. Reduce the quantity of an existing stock.\n        for pf in self.portfolio:\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\n                pf['quantity'] -= stock['quantity']\n                if pf['quantity'] == 0:\n                    self.portfolio.remove(pf)\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        # Buys a stock by adding it to the portfolio and updating the cash balance accordingly.\n        # stock: dict, contains information about the stock to be bought.\n        #           Should have keys 'name', 'price', and 'quantity'.\n        # Returns: bool, True if the stock is successfully bought, False if insufficient balance.\n        # Test cases:\n        # 1. Buy a stock with enough cash balance.\n        # 2. Attempt to buy a stock with insufficient cash balance.\n        if stock['price'] * stock['quantity'] > self.cash_balance:\n            return False\n        else:\n            self.add_stock(stock)\n            self.cash_balance -= stock['price'] * stock['quantity']\n            return True\n\n    def sell_stock(self, stock):\n        # Sells a stock by removing it from the portfolio and updating the cash balance accordingly.\n        # stock: dict, contains information about the stock to be sold.\n        #           Should have keys 'name', 'price', and 'quantity'.\n        # Returns: bool, True if the stock is successfully sold, False if stock not found or quantity exceeds.\n        # Test cases:\n        # 1. Sell a stock with enough quantity in the portfolio.\n        # 2. Attempt to sell a stock not in the portfolio or with excess quantity.\n        if self.remove_stock(stock) == False:\n            return False\n        self.cash_balance += stock['price'] * stock['quantity']\n        return True\n\n    def calculate_portfolio_value(self):\n        # Calculates the total value of the portfolio including cash balance and stock values.\n        # Returns: float, the total value of the portfolio.\n        # Test cases:\n        # 1. Calculate portfolio value with multiple stocks.\n        # 2. Calculate portfolio value with only cash balance.\n        total_value = self.cash_balance\n        for stock in self.portfolio:\n            total_value += stock['price'] * stock['quantity']\n        return total_value\n\n    def get_portfolio_summary(self):\n        # Generates a summary of the portfolio including individual stock values and total portfolio value.\n        # Returns: tuple, (portfolio_value, stock_summary).\n        # portfolio_value: float, the total value of the portfolio.\n        # stock_summary: list of dicts, contains stock name and value.\n        # Test cases:\n        # 1. Get summary with multiple stocks.\n        # 2. Get summary with only cash balance.\n        summary = []\n        for stock in self.portfolio:\n            value = self.get_stock_value(stock)\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\n        portfolio_value = self.calculate_portfolio_value()\n        return portfolio_value, summary\n\n    def get_stock_value(self, stock):\n        # Calculates the value of a specific stock in the portfolio.\n        # stock: dict, contains information about the stock.\n        #           Should have keys 'price' and 'quantity'.\n        # Returns: float, the total value of the stock.\n        # Test cases:\n        # 1. Calculate value of a stock with positive quantity.\n        # 2. Calculate value of a stock with zero quantity.\n        return stock['price'] * stock['quantity']"}}], "usage": {"completion_tokens": 1017, "prompt_tokens": 1118, "total_tokens": 2135}, "feeType": "1", "consume": 0.015139089812}, "test_case_name": "StockPortfolioTracker.txt"}