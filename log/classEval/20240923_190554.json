{"response body": {"id": "e49faebb-67f2-4b78-9e0c-606d920426bb", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:05:54", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom datetime import datetime\n\n# This class represents a Classroom with ability to manage courses.\nclass Classroom:\n    def __init__(self, id):\n        # Initial function for the classroom, setting id and an empty course list.\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        # This function adds a new course to the classroom.\n        # param course: dict, the course details including start_time and end_time.\n        # Test case: \n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'})\n        # >>> print(classroom.courses)  # [{'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'}]\n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        # This function removes a course from the classroom.\n        # param course: dict, the course details including start_time and end_time.\n        # Test case: \n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'})\n        # >>> classroom.remove_course({'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'})\n        # >>> print(classroom.courses)  # []\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        # This function checks if the classroom is free at a given time.\n        # param check_time: string, the time to check in the format 'HH:MM'.\n        # return: bool, True if the classroom is free, False otherwise.\n        # Test case: \n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'})\n        # >>> print(classroom.is_free_at('07:30'))  # True\n        # >>> print(classroom.is_free_at('08:30'))  # False\n        check_time = datetime.strptime(check_time, '%H:%M')\n\n        for course in self.courses:\n            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'], '%H:%M'):\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        # This function checks if a new course conflicts with any existing courses.\n        # param new_course: dict, the course details including start_time and end_time.\n        # return: bool, True if there is no conflict, False otherwise.\n        # Test case: \n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'name': 'Math', 'start_time': '08:00', 'end_time': '09:00'})\n        # >>> print(classroom.check_course_conflict({'name': 'English', 'start_time': '07:00', 'end_time': '08:00'}))  # True\n        # >>> print(classroom.check_course_conflict({'name': 'English', 'start_time': '08:30', 'end_time': '09:30'}))  # False\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n\n        flag = True\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if start_time <= new_start_time and end_time >= new_start_time:\n                flag = False\n            if start_time <= new_end_time and end_time >= new_end_time:\n                flag = False\n        return flag\n```\n"}}], "usage": {"completion_tokens": 846, "prompt_tokens": 960, "total_tokens": 1806}, "feeType": "1", "consume": 1.156272}, "test_case_name": "ClassroomManagement.txt"}