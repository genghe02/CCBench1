{"response body": "ChatCompletion(id='chatcmpl-AiKJd8bEOeQdQ52wD5orQi55sjHsy', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nSQLQueryBuilder provides a simple interface for generating SQL query strings.\\nIt supports common operations such as SELECT, INSERT, DELETE, and UPDATE.\\nThis class is useful for developers who need to programmatically construct SQL queries \\nwithout manually writing out the query strings, thus reducing the risk of syntax errors.\\n\\nDependencies:\\n- None. This class utilizes standard Python features.\\n\"\"\"\\n\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns=\\'*\\', where=None):\\n        \"\"\"\\n        Generates a SQL SELECT statement.\\n\\n        Parameters:\\n            table (str): The name of the table to query from.\\n            columns (str or list): The columns to select, defaults to \\'*\\' for all columns.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SQL SELECT statement.\\n\\n        Test cases:\\n            # Test case 1: Select all columns\\n            query = SQLQueryBuilder.select(\\'users\\')\\n            expected_output = \"SELECT * FROM users\"\\n            assert query == expected_output\\n            \\n            # Test case 2: Select specific columns\\n            query = SQLQueryBuilder.select(\\'users\\', [\\'id\\', \\'name\\'])\\n            expected_output = \"SELECT id, name FROM users\"\\n            assert query == expected_output\\n            \\n            # Test case 3: Select with where clause\\n            query = SQLQueryBuilder.select(\\'users\\', where={\\'status\\': \\'active\\'})\\n            expected_output = \"SELECT * FROM users WHERE status=\\'active\\'\"\\n            assert query == expected_output\\n        \"\"\"\\n        if columns != \\'*\\':\\n            columns = \\', \\'.join(columns)\\n        query = f\"SELECT {columns} FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        \"\"\"\\n        Generates a SQL INSERT statement.\\n\\n        Parameters:\\n            table (str): The name of the table to insert into.\\n            data (dict): A dictionary of column-value pairs for the insert.\\n\\n        Returns:\\n            str: The constructed SQL INSERT statement.\\n\\n        Test cases:\\n            # Test case 1: Insert with a single key-value pair\\n            query = SQLQueryBuilder.insert(\\'users\\', {\\'name\\': \\'John\\'})\\n            expected_output = \"INSERT INTO users (name) VALUES (\\'John\\')\"\\n            assert query == expected_output\\n            \\n            # Test case 2: Insert with multiple key-value pairs\\n            query = SQLQueryBuilder.insert(\\'users\\', {\\'name\\': \\'John\\', \\'age\\': 30})\\n            expected_output = \"INSERT INTO users (name, age) VALUES (\\'John\\', \\'30\\')\"\\n            assert query == expected_output\\n            \\n            # Test case 3: Insert with no data\\n            query = SQLQueryBuilder.insert(\\'users\\', {})\\n            expected_output = \"INSERT INTO users () VALUES ()\"\\n            assert query == expected_output\\n        \"\"\"\\n        keys = \\', \\'.join(data.keys())\\n        values = \\', \\'.join(f\"\\'{v}\\'\" for v in data.values())\\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        \"\"\"\\n        Generates a SQL DELETE statement.\\n\\n        Parameters:\\n            table (str): The name of the table to delete from.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SQL DELETE statement.\\n\\n        Test cases:\\n            # Test case 1: Delete without where clause\\n            query = SQLQueryBuilder.delete(\\'users\\')\\n            expected_output = \"DELETE FROM users\"\\n            assert query == expected_output\\n            \\n            # Test case 2: Delete with where clause\\n            query = SQLQueryBuilder.delete(\\'users\\', where={\\'id\\': 123})\\n            expected_output = \"DELETE FROM users WHERE id=\\'123\\'\"\\n            assert query == expected_output\\n            \\n            # Test case 3: Delete with multiple conditions\\n            query = SQLQueryBuilder.delete(\\'users\\', where={\\'status\\': \\'inactive\\', \\'role\\': \\'guest\\'})\\n            expected_output = \"DELETE FROM users WHERE status=\\'inactive\\' AND role=\\'guest\\'\"\\n            assert query == expected_output\\n        \"\"\"\\n        query = f\"DELETE FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        \"\"\"\\n        Generates a SQL UPDATE statement.\\n\\n        Parameters:\\n            table (str): The name of the table to update.\\n            data (dict): A dictionary of column-value pairs for the update.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SQL UPDATE statement.\\n\\n        Test cases:\\n            # Test case 1: Update a single column\\n            query = SQLQueryBuilder.update(\\'users\\', {\\'name\\': \\'John\\'}, where={\\'id\\': 1})\\n            expected_output = \"UPDATE users SET name=\\'John\\' WHERE id=\\'1\\'\"\\n            assert query == expected_output\\n            \\n            # Test case 2: Update multiple columns\\n            query = SQLQueryBuilder.update(\\'users\\', {\\'name\\': \\'John\\', \\'age\\': 30}, where={\\'id\\': 1})\\n            expected_output = \"UPDATE users SET name=\\'John\\', age=\\'30\\' WHERE id=\\'1\\'\"\\n            assert query == expected_output\\n            \\n            # Test case 3: Update without where clause\\n            query = SQLQueryBuilder.update(\\'users\\', {\\'status\\': \\'active\\'})\\n            expected_output = \"UPDATE users SET status=\\'active\\'\"\\n            assert query == expected_output\\n        \"\"\"\\n        update_str = \\', \\'.join(f\"{k}=\\'{v}\\'\" for k, v in data.items())\\n        query = f\"UPDATE {table} SET {update_str}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735127889, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1246, prompt_tokens=1632, total_tokens=2878, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLQueryBuilder.txt"}