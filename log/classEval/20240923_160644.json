{"response body": "{\n  \"id\": \"de941cbd-544d-4724-b918-99576dc385b2\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class implements the Boyer-Moore string search algorithm, which is an efficient string searching algorithm that skips sections of the text to be searched based on precomputed tables.\\nclass BoyerMooreSearch:\\n    def __init__(self, text, pattern):\\n        # Initialize the Boyer-Moore search algorithm with the given text and pattern.\\n        # param text: str, the text in which to search for the pattern.\\n        # param pattern: str, the pattern to search for in the text.\\n        self.text, self.pattern = text, pattern\\n        self.textLen, self.patLen = len(text), len(pattern)\\n\\n    def match_in_pattern(self, char):\\n        # Check if a given character exists in the pattern and return the index of its last occurrence.\\n        # param char: str, the character to search for in the pattern.\\n        # return: int, the index of the last occurrence of the character in the pattern, or -1 if not found.\\n        # >>> bms = BoyerMooreSearch(\\\"ABAAABCD\\\", \\\"ABC\\\")\\n        # >>> bms.match_in_pattern('A')\\n        # 2\\n        # >>> bms.match_in_pattern('D')\\n        # 2\\n        # >>> bms.match_in_pattern('E')\\n        # -1\\n        for i in range(self.patLen - 1, -1, -1):\\n            if char == self.pattern[i]:\\n                return i\\n        return -1\\n\\n    def mismatch_in_text(self, currentPos):\\n        # Check for a mismatch between the pattern and the text at a given position.\\n        # param currentPos: int, the starting position in the text to compare with the pattern.\\n        # return: int, the position of the first mismatch, or -1 if no mismatch is found.\\n        # >>> bms = BoyerMooreSearch(\\\"ABAAABCD\\\", \\\"ABC\\\")\\n        # >>> bms.mismatch_in_text(0)\\n        # 3\\n        # >>> bms.mismatch_in_text(4)\\n        # -1\\n        for i in range(self.patLen - 1, -1, -1):\\n            if self.pattern[i] != self.text[currentPos + i]:\\n                return currentPos + i\\n        return -1\\n\\n    def bad_character_heuristic(self):\\n        # Implement the bad character heuristic of the Boyer-Moore algorithm to find all occurrences of the pattern in the text.\\n        # return: list, a list of starting positions in the text where the pattern matches.\\n        # >>> bms = BoyerMooreSearch(\\\"ABAAABCD\\\", \\\"ABC\\\")\\n        # >>> bms.bad_character_heuristic()\\n        # [4]\\n        # >>> bms = BoyerMooreSearch(\\\"AAAAAA\\\", \\\"AA\\\")\\n        # >>> bms.bad_character_heuristic()\\n        # [0, 1, 2, 3, 4]\\n        positions = []\\n        for i in range(self.textLen - self.patLen + 1):\\n            mismatch_index = self.mismatch_in_text(i)\\n            if mismatch_index == -1:\\n                positions.append(i)\\n            else:\\n                match_index = self.match_in_pattern(self.text[mismatch_index])\\n                i = (mismatch_index - match_index)\\n        return positions\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078764,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 791,\n    \"prompt_tokens\": 1005,\n    \"total_tokens\": 1796,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 429\n  }\n}", "test_case_name": "BoyerMooreSearch.txt"}