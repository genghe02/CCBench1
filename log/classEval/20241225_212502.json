{"response body": "ChatCompletion(id='chatcmpl-AiLfCN4LAfkJuHyB4fuXF7meqFq1F', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class implements various discount strategies for customer orders based on predefined rules.\\nIt calculates the total price of the cart, applies discounts, and returns the amount due.\\n\"\"\"\\n\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        \"\"\"\\n        Initializes a DiscountStrategy instance with a customer, cart and optional promotion.\\n\\n        Parameters:\\n            customer (dict): A dictionary containing customer details such as \\'fidelity\\'.\\n            cart (list): A list of dictionaries representing items in the cart, each containing \\'product\\', \\'price\\', and \\'quantity\\'.\\n            promotion (callable, optional): A function that computes the discount applied to the order. Defaults to None.\\n        \"\"\"\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        \"\"\"\\n        Calculates the total price of the items in the cart.\\n\\n        Returns:\\n            float: The total price of the cart before any discounts are applied.\\n        \\n        Test cases:\\n            # Test case 1: Normal cart with multiple items\\n            cart1 = [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 2}, {\\'product\\': \\'item2\\', \\'price\\': 20.0, \\'quantity\\': 1}]\\n            order1 = DiscountStrategy({\\'fidelity\\': 500}, cart1)\\n            assert order1.total() == 40.0  # 10*2 + 20*1\\n            \\n            # Test case 2: Empty cart\\n            cart2 = []\\n            order2 = DiscountStrategy({\\'fidelity\\': 500}, cart2)\\n            assert order2.total() == 0.0  # No items in cart\\n            \\n            # Test case 3: Cart with one item\\n            cart3 = [{\\'product\\': \\'item3\\', \\'price\\': 5.0, \\'quantity\\': 5}]\\n            order3 = DiscountStrategy({\\'fidelity\\': 500}, cart3)\\n            assert order3.total() == 25.0  # 5*5\\n        \"\"\"\\n        self.__total = sum(item[\\'quantity\\'] * item[\\'price\\'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        \"\"\"\\n        Calculates the final amount due after applying any discounts.\\n\\n        Returns:\\n            float: The total amount due after applying applicable discounts.\\n        \\n        Test cases:\\n            # Test case 1: No promotion applied\\n            order1 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 2}])\\n            assert order1.due() == 20.0  # No discounts\\n            \\n            # Test case 2: Applying promotion\\n            order2 = DiscountStrategy({\\'fidelity\\': 1500}, [{\\'product\\': \\'item2\\', \\'price\\': 20.0, \\'quantity\\': 1}], DiscountStrategy.FidelityPromo)\\n            assert order2.due() == 15.0  # 20 * 0.05 = 1 ; 20 - 1 = 19\\n            \\n            # Test case 3: Cart with promotion that doesn\\'t apply\\n            order3 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item2\\', \\'price\\': 20.0, \\'quantity\\': 1}], DiscountStrategy.FidelityPromo)\\n            assert order3.due() == 20.0  # No promotion applied since fidelity < 1000\\n        \"\"\"\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        \"\"\"\\n        Calculates discount for customers with high fidelity points.\\n\\n        Parameters:\\n            order (DiscountStrategy): The DiscountStrategy order to assess for discount.\\n        \\n        Returns:\\n            float: The discount amount based on fidelity points.\\n        \\n        Test cases:\\n            # Test case 1: Customer meets fidelity requirement\\n            order1 = DiscountStrategy({\\'fidelity\\': 1000}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 1}])\\n            assert DiscountStrategy.FidelityPromo(order1) == 0.5  # 10 * 0.05\\n            \\n            # Test case 2: Customer does not meet fidelity requirement\\n            order2 = DiscountStrategy({\\'fidelity\\': 999}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 1}])\\n            assert DiscountStrategy.FidelityPromo(order2) == 0.0  # No discount\\n            \\n            # Test case 3: Customer with exactly 1000 fidelity\\n            order3 = DiscountStrategy({\\'fidelity\\': 1000}, [{\\'product\\': \\'item1\\', \\'price\\': 100.0, \\'quantity\\': 1}])\\n            assert DiscountStrategy.FidelityPromo(order3) == 5.0  # 100 * 0.05\\n        \"\"\"\\n        return order.total() * 0.05 if order.customer[\\'fidelity\\'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        \"\"\"\\n        Calculates discount for bulk item purchases.\\n\\n        Parameters:\\n            order (DiscountStrategy): The DiscountStrategy order to assess for discount.\\n        \\n        Returns:\\n            float: The total discount for bulk items in the cart.\\n        \\n        Test cases:\\n            # Test case 1: One bulk item\\n            order1 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 20}])\\n            assert DiscountStrategy.BulkItemPromo(order1) == 20.0  # 10 * 20 * 0.1\\n            \\n            # Test case 2: No bulk items\\n            order2 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item2\\', \\'price\\': 20.0, \\'quantity\\': 10}])\\n            assert DiscountStrategy.BulkItemPromo(order2) == 0.0  # No items > 20\\n            \\n            # Test case 3: Mixed quantities\\n            order3 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item3\\', \\'price\\': 50.0, \\'quantity\\': 25}])\\n            assert DiscountStrategy.BulkItemPromo(order3) == 125.0  # 50 * 25 * 0.1\\n        \"\"\"\\n        discount = 0\\n        for item in order.cart:\\n            if item[\\'quantity\\'] >= 20:\\n                discount += item[\\'quantity\\'] * item[\\'price\\'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        \"\"\"\\n        Calculates discount for large orders based on the number of distinct items.\\n\\n        Parameters:\\n            order (DiscountStrategy): The DiscountStrategy order to assess for discount.\\n        \\n        Returns:\\n            float: The discount amount for large orders.\\n        \\n        Test cases:\\n            # Test case 1: Large order with distinct items\\n            order1 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 1},\\n                                                           {\\'product\\': \\'item2\\', \\'price\\': 15.0, \\'quantity\\': 1},\\n                                                           {\\'product\\': \\'item3\\', \\'price\\': 20.0, \\'quantity\\': 1}])\\n            assert DiscountStrategy.LargeOrderPromo(order1) == 4.5  # 45 * 0.1\\n            \\n            # Test case 2: Small order with fewer distinct items\\n            order2 = DiscountStrategy({\\'fidelity\\': 500}, [{\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 1},\\n                                                           {\\'product\\': \\'item1\\', \\'price\\': 10.0, \\'quantity\\': 1}])\\n            assert DiscountStrategy.LargeOrderPromo(order2) == 0.0  # Not enough distinct items\\n            \\n            # Test case 3: Exactly 10 distinct items\\n            distinct_items = [{\\'product\\': f\\'item{i}\\', \\'price\\': 10.0, \\'quantity\\': 1} for i in range(10)]\\n            order3 = DiscountStrategy({\\'fidelity\\': 500}, distinct_items)\\n            assert DiscountStrategy.LargeOrderPromo(order3) == 7.0  # 70 * 0.1\\n        \"\"\"\\n        return order.total() * 0.07 if len({item[\\'product\\'] for item in order.cart}) >= 10 else 0\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735133070, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1788, prompt_tokens=1637, total_tokens=3425, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "DiscountStrategy.txt"}