{"response body": {"id": "d6f32aea-6187-4dcd-8399-1c411679fe84", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:10:46", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides static methods for building SQL queries for select, insert, delete, and update operations.\n\"\"\"\nclass SQLQueryBuilder:\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        \"\"\"\n        Constructs a SELECT SQL query.\n\n        Parameters:\n            table (str): The name of the table to select from.\n            columns (list or str, optional): The columns to select. Defaults to '*'.\n            where (dict, optional): The conditions for the WHERE clause. Defaults to None.\n\n        Returns:\n            str: The constructed SELECT SQL query.\n\n        Test cases:\n            # Test case 1: Select all columns from a table\n            assert SQLQueryBuilder.select('users') == 'SELECT * FROM users'\n\n            # Test case 2: Select specific columns from a table\n            assert SQLQueryBuilder.select('users', ['id', 'name']) == 'SELECT id, name FROM users'\n\n            # Test case 3: Select with WHERE clause\n            assert SQLQueryBuilder.select('users', where={'id': 1}) == \"SELECT * FROM users WHERE id='1'\"\n        \"\"\"\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        \"\"\"\n        Constructs an INSERT SQL query.\n\n        Parameters:\n            table (str): The name of the table to insert into.\n            data (dict): The data to insert, where keys are column names and values are the corresponding values.\n\n        Returns:\n            str: The constructed INSERT SQL query.\n\n        Test cases:\n            # Test case 1: Insert data into a table\n            assert SQLQueryBuilder.insert('users', {'name': 'John', 'age': 30}) == \"INSERT INTO users (name, age) VALUES ('John', '30')\"\n        \"\"\"\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        \"\"\"\n        Constructs a DELETE SQL query.\n\n        Parameters:\n            table (str): The name of the table to delete from.\n            where (dict, optional): The conditions for the WHERE clause. Defaults to None.\n\n        Returns:\n            str: The constructed DELETE SQL query.\n\n        Test cases:\n            # Test case 1: Delete all rows from a table\n            assert SQLQueryBuilder.delete('users') == 'DELETE FROM users'\n\n            # Test case 2: Delete with WHERE clause\n            assert SQLQueryBuilder.delete('users', where={'id': 1}) == \"DELETE FROM users WHERE id='1'\"\n        \"\"\"\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        \"\"\"\n        Constructs an UPDATE SQL query.\n\n        Parameters:\n            table (str): The name of the table to update.\n            data (dict): The data to update, where keys are column names and values are the new values.\n            where (dict, optional): The conditions for the WHERE clause. Defaults to None.\n\n        Returns:\n            str: The constructed UPDATE SQL query.\n\n        Test cases:\n            # Test case 1: Update data in a table\n            assert SQLQueryBuilder.update('users', {'name': 'John', 'age': 30}) == \"UPDATE users SET name='John', age='30'\"\n\n            # Test case 2: Update with WHERE clause\n            assert SQLQueryBuilder.update('users', {'name': 'John'}, where={'id': 1}) == \"UPDATE users SET name='John' WHERE id='1'\"\n        \"\"\"\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query"}}], "usage": {"completion_tokens": 904, "prompt_tokens": 1358, "total_tokens": 2262}, "feeType": "1", "consume": 1.380376}, "test_case_name": "SQLQueryBuilder.txt"}