{"response body": {"id": "100bfb04-c0a5-4c87-97f7-9b6ddba37185", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 18:52:37", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport numpy as np\n\n# This class provides methods for calculating Cohen's Kappa and Fleiss' Kappa, \n# which are statistical measures for inter-rater agreement.\nclass KappaCalculator:\n\n    # This method calculates Cohen's Kappa coefficient for the agreement between two raters.\n    # :param testData: 2D array-like, the confusion matrix where each row corresponds to the true classes and each column corresponds to the predicted classes.\n    # :param k: int, the number of categories/classes.\n    # :return: float, the Cohen's Kappa coefficient.\n    # Test case:\n    # >>> kappa_calculator = KappaCalculator()\n    # >>> kappa_calculator.kappa([[10, 2, 3], [2, 10, 3], [2, 2, 10]], 3)\n    @staticmethod\n    def kappa(testData, k):\n        dataMat = np.mat(testData)\n        P0 = 0.0\n        for i in range(k):\n            P0 += dataMat[i, i] * 1.0\n        xsum = np.sum(dataMat, axis=1)\n        ysum = np.sum(dataMat, axis=0)\n        sum = np.sum(dataMat)\n        Pe = float(ysum * xsum) / sum / sum\n        P0 = float(P0 / sum * 1.0)\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\n        return cohens_coefficient\n\n    # This method calculates Fleiss' Kappa for the agreement between multiple raters.\n    # :param testData: 2D array-like, the matrix where each row corresponds to an item and each column corresponds to a rater. \n    # :param N: int, the number of items.\n    # :param k: int, the number of categories/classes.\n    # :param n: int, the number of raters.\n    # :return: float, the Fleiss' Kappa coefficient.\n    # Test case:\n    # >>> kappa_calculator = KappaCalculator()\n    # >>> kappa_calculator.fleiss_kappa([[4, 0, 0], [2, 2, 0], [0, 2, 2], [0, 0, 4]], 4, 3, 4)\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        dataMat = np.mat(testData, float)\n        oneMat = np.ones((k, 1))\n        sum = 0.0\n        P0 = 0.0\n        for i in range(N):\n            temp = 0.0\n            for j in range(k):\n                sum += dataMat[i, j]\n                temp += 1.0 * dataMat[i, j] ** 2\n            temp -= n\n            temp /= (n - 1) * n\n            P0 += temp\n        P0 = 1.0 * P0 / N\n        ysum = np.sum(dataMat, axis=0)\n        for i in range(k):\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\n        Pe = ysum * oneMat * 1.0\n        ans = (P0 - Pe) / (1 - Pe)\n        return ans[0, 0]\n```"}}], "usage": {"completion_tokens": 724, "prompt_tokens": 1002, "total_tokens": 1726}, "feeType": "1", "consume": 1.0682}, "test_case_name": "KappaCalculator.txt"}