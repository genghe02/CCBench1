{"response body": "{\n  \"id\": \"d734c541-684b-4791-8b14-aed22c689b99\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class represents a hotel with methods to manage room bookings, check-ins, check-outs, and availability.\\nclass Hotel:\\n    def __init__(self, name, rooms):\\n        # Initialize the hotel with a name and a dictionary of available rooms.\\n        # Test cases for the function:\\n        # >>> hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n        # >>> hotel.available_rooms\\n        # {'single': 5, 'double': 3}\\n        # >>> hotel.booked_rooms\\n        # {}\\n        self.name = name\\n        self.available_rooms = rooms\\n        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}\\n        # available_rooms = {'single': 5, 'double': 3}\\n        self.booked_rooms = {}\\n        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}\\n        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}\\n\\n    def book_room(self, room_type, room_number, name):\\n        # Book a room of a specified type and number for a given name.\\n        # param room_type: str, the type of room to book (e.g., 'single', 'double')\\n        # param room_number: int, the number of rooms to book\\n        # param name: str, the name of the person booking the room\\n        # return: str, \\\"Success!\\\" if the booking is successful, int if partial booking, False otherwise\\n        # Test cases for the function:\\n        # >>> hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n        # >>> hotel.book_room('single', 2, 'John')\\n        # 'Success!'\\n        # >>> hotel.book_room('double', 4, 'Jane')\\n        # 3\\n        # >>> hotel.book_room('suite', 1, 'Alice')\\n        # False\\n        # Check if there are any rooms of the specified type available\\n        if room_type not in self.available_rooms.keys():\\n            return False\\n\\n        if room_number <= self.available_rooms[room_type]:\\n            # Book the room by adding it to the booked_rooms dictionary\\n            if room_type not in self.booked_rooms.keys():\\n                self.booked_rooms[room_type] = {}\\n            self.booked_rooms[room_type][name] = room_number\\n            self.available_rooms[room_type] -= room_number\\n            return \\\"Success!\\\"\\n        elif self.available_rooms[room_type] != 0:\\n            return self.available_rooms[room_type]\\n        else:\\n            return False\\n\\n    def check_in(self, room_type, room_number, name):\\n        # Check in a guest to a booked room of a specified type and number.\\n        # param room_type: str, the type of room to check in (e.g., 'single', 'double')\\n        # param room_number: int, the number of rooms to check in\\n        # param name: str, the name of the person checking in\\n        # return: bool, True if check-in is successful, False otherwise\\n        # Test cases for the function:\\n        # >>> hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n        # >>> hotel.book_room('single', 2, 'John')\\n        # 'Success!'\\n        # >>> hotel.check_in('single', 2, 'John')\\n        # True\\n        # >>> hotel.check_in('single', 1, 'John')\\n        # True\\n        # >>> hotel.check_in('single', 1, 'John')\\n        # False\\n        # Check if the room of the specified type and number is booked\\n        if room_type not in self.booked_rooms.keys():\\n            return False\\n        if name in self.booked_rooms[room_type]:\\n            if room_number > self.booked_rooms[room_type][name]:\\n                return False\\n            elif room_number == self.booked_rooms[room_type][name]:\\n                # Check in the room by removing it from the booked_rooms dictionary\\n                self.booked_rooms[room_type].pop(name)\\n            else:\\n                self.booked_rooms[room_type][name] -= room_number\\n\\n    def check_out(self, room_type, room_number):\\n        # Check out a room of a specified type and number, making it available again.\\n        # param room_type: str, the type of room to check out (e.g., 'single', 'double')\\n        # param room_number: int, the number of rooms to check out\\n        # Test cases for the function:\\n        # >>> hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n        # >>> hotel.check_out('single', 2)\\n        # >>> hotel.available_rooms\\n        # {'single': 7, 'double': 3}\\n        # >>> hotel.check_out('suite', 1)\\n        # >>> hotel.available_rooms\\n        # {'single': 7, 'double': 3, 'suite': 1}\\n        if room_type in self.available_rooms:\\n            self.available_rooms[room_type] += room_number\\n        else:\\n            self.available_rooms[room_type] = room_number\\n\\n    def get_available_rooms(self, room_type):\\n        # Get the number of available rooms of a specified type.\\n        # param room_type: str, the type of room to check availability (e.g., 'single', 'double')\\n        # return: int, the number of available rooms of the specified type\\n        # Test cases for the function:\\n        # >>> hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n        # >>> hotel.get_available_rooms('single')\\n        # 5\\n        # >>> hotel.get_available_rooms('double')\\n        # 3\\n        return self.available_rooms[room_type]\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078379,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1466,\n    \"prompt_tokens\": 1377,\n    \"total_tokens\": 2843,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 801\n  }\n}", "test_case_name": "Hotel.txt"}