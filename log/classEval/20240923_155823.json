{"response body": "{\n  \"id\": \"2fdceac7-1539-4810-aff8-fafc8387070f\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport re\\nimport string\\nimport gensim\\nfrom bs4 import BeautifulSoup\\n\\n\\nclass HtmlUtil:\\n    # A utility class for processing and extracting information from HTML text.\\n\\n    def __init__(self):\\n        # Initialize the class with various markers used for identifying different types of content in HTML.\\n        self.SPACE_MARK = '-SPACE-'\\n        self.JSON_MARK = '-JSON-'\\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\\n        self.URL_MARK = '-URL-'\\n        self.NUMBER_MARK = '-NUMBER-'\\n        self.TRACE_MARK = '-TRACE-'\\n        self.COMMAND_MARK = '-COMMAND-'\\n        self.COMMENT_MARK = '-COMMENT-'\\n        self.CODE_MARK = '-CODE-'\\n\\n    @staticmethod\\n    def __format_line_feed(text):\\n        # Replace multiple consecutive newline characters with a single newline.\\n        # param text: str, the input text to be formatted\\n        # return: str, the formatted text with single newlines\\n        return re.sub(re.compile(r'\\\\n+'), '\\\\n', text)\\n\\n    def format_line_html_text(self, html_text):\\n        # Process the HTML text to format line breaks, handle code tags, and punctuate list items and paragraphs.\\n        # param html_text: str, the input HTML text to be processed\\n        # return: str, the processed and formatted HTML text\\n        # >>> html_util = HtmlUtil()\\n        # >>> html_util.format_line_html_text('<p>Hello</p><pre>Code</pre>')\\n        # 'Hello.\\\\nCode'\\n        if html_text is None or len(html_text) == 0:\\n            return ''\\n        soup = BeautifulSoup(html_text, 'lxml')\\n\\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\\n        for tag in code_tag:\\n            tag.string = self.CODE_MARK\\n\\n        ul_ol_group = soup.find_all(name=['ul', 'ol'])\\n        for ul_ol_item in ul_ol_group:\\n            li_group = ul_ol_item.find_all('li')\\n            for li_item in li_group:\\n                li_item_text = li_item.get_text().strip()\\n                if len(li_item_text) == 0:\\n                    continue\\n                if li_item_text[-1] in string.punctuation:\\n                    li_item.string = '[{0}]{1}'.format('-', li_item_text)\\n                    continue\\n                li_item.string = '[{0}]{1}.'.format('-', li_item_text)\\n\\n        p_group = soup.find_all(name=['p'])\\n        for p_item in p_group:\\n            p_item_text = p_item.get_text().strip()\\n            if p_item_text:\\n                if p_item_text[-1] in string.punctuation:\\n                    p_item.string = p_item_text\\n                    continue\\n                next_sibling = p_item.find_next_sibling()\\n                if next_sibling and self.CODE_MARK in next_sibling.get_text():\\n                    p_item.string = p_item_text + ':'\\n                    continue\\n                p_item.string = p_item_text + '.'\\n\\n        clean_text = gensim.utils.decode_htmlentities(soup.get_text())\\n        return self.__format_line_feed(clean_text)\\n\\n    def extract_code_from_html_text(self, html_text):\\n        # Extract code snippets from the HTML text, identified by 'pre' and 'blockquote' tags.\\n        # param html_text: str, the input HTML text to extract code from\\n        # return: list, a list of extracted code snippets\\n        # >>> html_util = HtmlUtil()\\n        # >>> html_util.extract_code_from_html_text('<pre>Code1</pre><blockquote>Code2</blockquote>')\\n        # ['Code1', 'Code2']\\n        text_with_code_tag = self.format_line_html_text(html_text)\\n\\n        if self.CODE_MARK not in text_with_code_tag:\\n            return []\\n\\n        code_index_start = 0\\n        soup = BeautifulSoup(html_text, 'lxml')\\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\\n        code_count = text_with_code_tag.count(self.CODE_MARK)\\n        code_list = []\\n        for code_index in range(code_index_start, code_index_start + code_count):\\n            code = code_tag[code_index].get_text()\\n            if code:\\n                code_list.append(code)\\n        return code_list\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078245,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1137,\n    \"prompt_tokens\": 1553,\n    \"total_tokens\": 2690,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 977\n  }\n}", "test_case_name": "HtmlUtil.txt"}