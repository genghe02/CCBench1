{"response body": "ChatCompletion(id='chatcmpl-AiKK2ddgsTeao5zt0oxGhKCk8Tpqf', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nStatistics3 class provides statistical functions to compute various statistical measures such as median, mode, mean,\\ncorrelation, standard deviation, and z-score. It allows for the analysis of data sets to derive meaningful insights \\nand summarize key data properties.\\n\\nMain functionality includes:\\n- Calculating central tendency measurements (mean, median, mode)\\n- Assessing correlation between two datasets\\n- Obtaining the standard deviation and z-score of a dataset\\n\\nDependencies:\\n- Requires the `math` module for mathematical operations.\\n\\nUse cases:\\n- Perform data analysis in scientific research, business analytics, or any field where statistical evaluation is \\n  necessary.\\n\"\"\"\\n\\nimport math\\n\\nclass Statistics3:\\n    \\n    @staticmethod\\n    def median(data):\\n        \"\"\"\\n        Calculate the median of a list of numeric values.\\n\\n        Parameters:\\n            data (list of float): A list of numbers.\\n\\n        Returns:\\n            float: The median value of the data. If the list is empty, returns None.\\n\\n        Test cases:\\n            # Test case 1: Odd number of elements\\n            input_data = [1, 3, 2]\\n            expected_output = 2\\n            assert Statistics3.median(input_data) == expected_output\\n\\n            # Test case 2: Even number of elements\\n            input_data = [1, 3, 2, 4]\\n            expected_output = 2.5\\n            assert Statistics3.median(input_data) == expected_output\\n\\n            # Test case 3: Empty list\\n            input_data = []\\n            expected_output = None\\n            assert Statistics3.median(input_data) == expected_output\\n        \"\"\"\\n        sorted_data = sorted(data)\\n        n = len(sorted_data)\\n        if n % 2 == 1:\\n            return sorted_data[n // 2]\\n        else:\\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\\n\\n    @staticmethod\\n    def mode(data):\\n        \"\"\"\\n        Calculate the mode of a list of numeric values.\\n\\n        Parameters:\\n            data (list of float): A list of numbers.\\n\\n        Returns:\\n            list of float: A list of the most frequently occurring numbers in the data. \\n            If there are no repeating elements, returns an empty list.\\n\\n        Test cases:\\n            # Test case 1: Single mode\\n            input_data = [1, 2, 3, 2]\\n            expected_output = [2]\\n            assert Statistics3.mode(input_data) == expected_output\\n\\n            # Test case 2: Multiple modes\\n            input_data = [1, 2, 2, 3, 3]\\n            expected_output = [2, 3]\\n            assert Statistics3.mode(input_data) == expected_output\\n\\n            # Test case 3: No mode\\n            input_data = [1, 2, 3]\\n            expected_output = []\\n            assert Statistics3.mode(input_data) == expected_output\\n        \"\"\"\\n        counts = {}\\n        for value in data:\\n            counts[value] = counts.get(value, 0) + 1\\n        max_count = max(counts.values())\\n        mode_values = [value for value, count in counts.items() if count == max_count]\\n        return mode_values\\n\\n    @staticmethod\\n    def correlation(x, y):\\n        \"\"\"\\n        Calculate the Pearson correlation coefficient between two data sets.\\n\\n        Parameters:\\n            x (list of float): The first dataset.\\n            y (list of float): The second dataset.\\n\\n        Returns:\\n            float: The correlation coefficient ranging from -1 to 1. \\n            If the datasets are empty or have no correlation, returns None.\\n\\n        Test cases:\\n            # Test case 1: Perfect positive correlation\\n            input_x = [1, 2, 3]\\n            input_y = [1, 2, 3]\\n            expected_output = 1.0\\n            assert Statistics3.correlation(input_x, input_y) == expected_output\\n\\n            # Test case 2: Perfect negative correlation\\n            input_x = [1, 2, 3]\\n            input_y = [3, 2, 1]\\n            expected_output = -1.0\\n            assert Statistics3.correlation(input_x, input_y) == expected_output\\n\\n            # Test case 3: No correlation\\n            input_x = [1, 2, 3]\\n            input_y = [1, 1, 1]\\n            expected_output = 0.0\\n            assert Statistics3.correlation(input_x, input_y) == expected_output\\n        \"\"\"\\n        n = len(x)\\n        if n == 0 or len(y) == 0 or n != len(y):\\n            return None\\n        mean_x = sum(x) / n\\n        mean_y = sum(y) / n\\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\\n        if denominator == 0:\\n            return None\\n        return numerator / denominator\\n\\n    @staticmethod\\n    def mean(data):\\n        \"\"\"\\n        Calculate the mean of a list of numeric values.\\n\\n        Parameters:\\n            data (list of float): A list of numbers.\\n\\n        Returns:\\n            float: The mean value of the data. If the list is empty, returns None.\\n\\n        Test cases:\\n            # Test case 1: Normal case\\n            input_data = [1, 2, 3, 4]\\n            expected_output = 2.5\\n            assert Statistics3.mean(input_data) == expected_output\\n\\n            # Test case 2: Single element\\n            input_data = [5]\\n            expected_output = 5.0\\n            assert Statistics3.mean(input_data) == expected_output\\n\\n            # Test case 3: Empty list\\n            input_data = []\\n            expected_output = None\\n            assert Statistics3.mean(input_data) == expected_output\\n        \"\"\"\\n        if len(data) == 0:\\n            return None\\n        return sum(data) / len(data)\\n\\n    @staticmethod\\n    def correlation_matrix(data):\\n        \"\"\"\\n        Generate the correlation matrix for a dataset.\\n\\n        Parameters:\\n            data (list of list of float): 2D list where each sublist represents a dataset.\\n\\n        Returns:\\n            list of list of float: A matrix of correlation coefficients for each pair of datasets.\\n\\n        Test cases:\\n            # Test case 1: Simple correlation matrix\\n            input_data = [[1, 2], [2, 4], [3, 6]]\\n            expected_output = [[1.0, 1.0], [1.0, 1.0]]\\n            assert Statistics3.correlation_matrix(input_data) == expected_output\\n\\n            # Test case 2: Different lengths (should handle gracefully)\\n            input_data = [[1, 2], [1]]\\n            expected_output = None\\n            assert Statistics3.correlation_matrix(input_data) == expected_output  # Not enough data\\n\\n            # Test case 3: Two independent datasets\\n            input_data = [[1, 2, 3], [4, 5, 6]]\\n            expected_output = [[1.0, 0.0], [0.0, 1.0]]\\n            assert Statistics3.correlation_matrix(input_data) == expected_output\\n        \"\"\"\\n        matrix = []\\n        if not all(len(row) == len(data[0]) for row in data):\\n            return None  # Ensure each row is the same length\\n        for i in range(len(data[0])):\\n            row = []\\n            for j in range(len(data[0])):\\n                column1 = [row[i] for row in data]\\n                column2 = [row[j] for row in data]\\n                correlation = Statistics3.correlation(column1, column2)\\n                row.append(correlation)\\n            matrix.append(row)\\n        return matrix\\n\\n    @staticmethod\\n    def standard_deviation(data):\\n        \"\"\"\\n        Calculate the standard deviation of a list of numeric values.\\n\\n        Parameters:\\n            data (list of float): A list of numbers.\\n\\n        Returns:\\n            float: The standard deviation of the data. If the list has less than two elements, returns None.\\n\\n        Test cases:\\n            # Test case 1: Normal case\\n            input_data = [1, 2, 3, 4]\\n            expected_output = 1.29  # Approximate value due to rounding\\n            assert round(Statistics3.standard_deviation(input_data), 2) == round(expected_output, 2)\\n\\n            # Test case 2: Single element\\n            input_data = [5]\\n            expected_output = None\\n            assert Statistics3.standard_deviation(input_data) == expected_output\\n\\n            # Test case 3: Empty list\\n            input_data = []\\n            expected_output = None\\n            assert Statistics3.standard_deviation(input_data) == expected_output\\n        \"\"\"\\n        n = len(data)\\n        if n < 2:\\n            return None\\n        mean_value = Statistics3.mean(data)\\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\\n        return math.sqrt(variance)\\n\\n    @staticmethod\\n    def z_score(data):\\n        \"\"\"\\n        Calculate the z-scores for a list of numeric values.\\n\\n        Parameters:\\n            data (list of float): A list of numbers.\\n\\n        Returns:\\n            list of float: A list of z-scores corresponding to each value in the data. \\n            If the standard deviation is zero or the list is empty, returns None.\\n\\n        Test cases:\\n            # Test case 1: Normal data\\n            input_data = [1, 2, 3, 4]\\n            expected_output = [-1.34, -0.45, 0.45, 1.34]  # Approximate value due to rounding\\n            assert all(round(a, 2) == round(b, 2) for a, b in zip(Statistics3.z_score(input_data), expected_output))\\n\\n            # Test case 2: Single element\\n            input_data = [5]\\n            expected_output = None\\n            assert Statistics3.z_score(input_data) == expected_output\\n\\n            # Test case 3: Zero standard deviation\\n            input_data = [1, 1, 1]\\n            expected_output = None\\n            assert Statistics3.z_score(input_data) == expected_output\\n        \"\"\"\\n        mean = Statistics3.mean(data)\\n        std_deviation = Statistics3.standard_deviation(data)\\n        if std_deviation is None or std_deviation == 0:\\n            return None\\n        return [(x - mean) / std_deviation for x in data]\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735127914, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=2230, prompt_tokens=1981, total_tokens=4211, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Statistics3.txt"}