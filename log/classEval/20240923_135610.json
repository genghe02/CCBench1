{"response body": {"id": "ec5ec41c-58db-4c23-ada4-a033c9c07a3e", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:56:10", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "from datetime import datetime\nimport numpy as np\n\nclass MovieBookingSystem:\n    # This class represents a movie booking system that allows users to add movies, book tickets, and check available movies within a specified time range.\n\n    def __init__(self):\n        # Initializes the MovieBookingSystem with an empty list of movies.\n        self.movies = []\n\n    def add_movie(self, name, price, start_time, end_time, n):\n        # Adds a new movie to the system with the given details.\n        # param name: str, the name of the movie\n        # param price: float, the price of a ticket for the movie\n        # param start_time: str, the start time of the movie in format '%H:%M'\n        # param end_time: str, the end time of the movie in format '%H:%M'\n        # param n: int, the number of seats available for booking\n        # Creates a movie dictionary with provided details and adds it to the list of movies.\n        movie = {\n            'name': name,\n            'price': price,\n            'start_time': datetime.strptime(start_time, '%H:%M'),\n            'end_time': datetime.strptime(end_time, '%H:%M'),\n            'seats': np.zeros((n, n))\n        }\n        self.movies.append(movie)\n\n    def book_ticket(self, name, seats_to_book):\n        # Books tickets for a specific movie with the given seats.\n        # param name: str, the name of the movie to book tickets for\n        # param seats_to_book: list of tuples, each tuple representing a seat to book (row, column)\n        # return: str, \"Booking success.\" if tickets are successfully booked, \"Booking failed.\" if booking is unsuccessful, \"Movie not found.\" if movie is not in the system\n        # Checks if the movie exists in the system, books the requested seats if available, and returns the booking status.\n        for movie in self.movies:\n            if movie['name'] == name:\n                for seat in seats_to_book:\n                    if movie['seats'][seat[0]][seat[1]] == 0:\n                        movie['seats'][seat[0]][seat[1]] = 1\n                    else:\n                        return \"Booking failed.\"\n                return \"Booking success.\"\n        return \"Movie not found.\"\n\n    def available_movies(self, start_time, end_time):\n        # Returns a list of available movies within the specified time range.\n        # param start_time: str, the start time of the range in format '%H:%M'\n        # param end_time: str, the end time of the range in format '%H:%M'\n        # return: list of str, names of available movies within the given time range\n        # Filters the movies based on the start and end time criteria and returns the names of available movies.\n        start_time = datetime.strptime(start_time, '%H:%M')\n        end_time = datetime.strptime(end_time, '%H:%M')\n\n        available_movies = []\n        for movie in self.movies:\n            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:\n                available_movies.append(movie['name'])\n\n        return available_movies"}}], "usage": {"completion_tokens": 661, "prompt_tokens": 951, "total_tokens": 1612}, "feeType": "1", "consume": 0.010654375032}, "test_case_name": "MovieBookingSystem.txt"}