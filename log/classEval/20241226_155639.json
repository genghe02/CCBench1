{"response body": {"id": "44c75699-fd46-44af-aca3-bb9c3fa596bf", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:56:42", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class represents a database for managing movie ticket reservations.\n\"\"\"\n\nimport sqlite3\n\nclass MovieTicketDB:\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes a connection to the SQLite database and creates a new table if it does not exist.\n\n        Parameters:\n            db_name (str): The name of the SQLite database file.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        \"\"\"\n        Creates a new table in the database to store ticket reservations.\n        \n        The table has the following structure:\n            id (integer): The unique ticket ID.\n            movie_name (text): The name of the movie.\n            theater_name (text): The name of the theater.\n            seat_number (text): The number of the seat.\n            customer_name (text): The name of the customer.\n        \"\"\"\n        self.cursor.execute('''\n            CREATE TABLE IF NOT EXISTS tickets (\n                id INTEGER PRIMARY KEY,\n                movie_name TEXT,\n                theater_name TEXT,\n                seat_number TEXT,\n                customer_name TEXT\n            )\n        ''')\n        self.connection.commit()\n\n    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):\n        \"\"\"\n        Inserts a new ticket reservation into the database.\n\n        Parameters:\n            movie_name (str): The name of the movie.\n            theater_name (str): The name of the theater.\n            seat_number (str): The number of the seat.\n            customer_name (str): The name of the customer.\n        \n        Returns:\n            None\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)\n            VALUES (?, ?, ?, ?)\n        ''', (movie_name, theater_name, seat_number, customer_name))\n        self.connection.commit()\n\n    def search_tickets_by_customer(self, customer_name):\n        \"\"\"\n        Searches the database for ticket reservations by a specific customer.\n\n        Parameters:\n            customer_name (str): The name of the customer.\n        \n        Returns:\n            list: A list of tuples representing the ticket reservations.\n        \n        Test cases:\n            # Test case 1: Customer has reservations\n            assert search_tickets_by_customer('John Doe') != []\n\n            # Test case 2: Customer has no reservations\n            assert search_tickets_by_customer('Jane Doe') == []\n\n            # Test case 3: Customer name is not a string\n            assert search_tickets_by_customer(123) raises TypeError\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM tickets WHERE customer_name = ?\n        ''', (customer_name,))\n        tickets = self.cursor.fetchall()\n        return tickets\n\n    def delete_ticket(self, ticket_id):\n        \"\"\"\n        Deletes a ticket reservation from the database.\n\n        Parameters:\n            ticket_id (int): The ID of the ticket reservation.\n        \n        Returns:\n            None\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM tickets WHERE id = ?\n        ''', (ticket_id,))\n        self.connection.commit()"}}], "usage": {"completion_tokens": 617, "prompt_tokens": 1313, "total_tokens": 1930}, "feeType": "1", "consume": 1.110492}, "test_case_name": "MovieTicketDB.txt"}