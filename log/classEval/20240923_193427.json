{"response body": {"id": "db19534d-5487-403d-a903-a44a414b0bd7", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:34:27", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class is used for keeping track of a stock portfolio. It has functions to add, remove, purchase, and sell stocks, \n# as well as calculating the total portfolio value and providing a summary of the portfolio.\nclass StockPortfolioTracker:\n    # Initializes the StockPortfolioTracker class, takes cash_balance as an argument which represents the current cash balance of the portfolio.\n    def __init__(self, cash_balance):\n        # Initialize an empty list to store portfolio's stocks.\n        self.portfolio = []\n        # Initialize the cash balance as provided by the user.\n        self.cash_balance = cash_balance\n\n    # This function is for adding a new stock to the portfolio.\n    # Param stock: dict, the stock to be added. It should have 'name' and 'quantity' keys.\n    # >>> tracker = StockPortfolioTracker(10000)\n    # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10})\n    def add_stock(self, stock):\n        for pf in self.portfolio:\n            if pf['name'] == stock['name']:\n                pf['quantity'] += stock['quantity']\n                return\n        self.portfolio.append(stock)\n\n    # This function is for removing a stock from the portfolio.\n    # Param stock: dict, the stock to be removed. It should have 'name' and 'quantity' keys.\n    # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 5})\n    def remove_stock(self, stock):\n        for pf in self.portfolio:\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\n                pf['quantity'] -= stock['quantity']\n                if pf['quantity'] == 0:\n                    self.portfolio.remove(pf)\n                return True\n        return False\n\n    # This function is for buying a stock and adding it to the portfolio.\n    # Param stock: dict, the stock to be bought. It should have 'name', 'quantity', and 'price' keys.\n    # Returns: bool, True if the purchase is successful, False otherwise.\n    # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 5, 'price': 120})\n    def buy_stock(self, stock):\n        if stock['price'] * stock['quantity'] > self.cash_balance:\n            return False\n        else:\n            self.add_stock(stock)\n            self.cash_balance -= stock['price'] * stock['quantity']\n            return True\n\n    # This function is for selling a stock from the portfolio.\n    # Param stock: dict, the stock to be sold. It should have 'name', 'quantity', and 'price' keys.\n    # Returns: bool, True if the sale is successful, False otherwise.\n    # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 5, 'price': 120})\n    def sell_stock(self, stock):\n        if self.remove_stock(stock) == False:\n            return False\n        self.cash_balance += stock['price'] * stock['quantity']\n        return True\n\n    # This function is for calculating the total value of the portfolio.\n    # Returns: float, total value of the portfolio.\n    # >>> tracker.calculate_portfolio_value()\n    def calculate_portfolio_value(self):\n        total_value = self.cash_balance\n        for stock in self.portfolio:\n            total_value += stock['price'] * stock['quantity']\n        return total_value\n\n    # This function is for getting a summary of the portfolio.\n    # Returns: tuple, containing total portfolio value and a list of stocks with their individual values.\n    # >>> tracker.get_portfolio_summary()\n    def get_portfolio_summary(self):\n        summary = []\n        for stock in self.portfolio:\n            value = self.get_stock_value(stock)\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\n        portfolio_value = self.calculate_portfolio_value()\n        return portfolio_value, summary\n\n    # This function is for calculating the value of a particular stock in the portfolio.\n    # Param stock: dict, the stock whose value is to be calculated. It should have 'price' and 'quantity' keys.\n    # Returns: float, value of the stock.\n    # >>> tracker.get_stock_value({'name': 'AAPL', 'quantity': 10, 'price': 120})\n    def get_stock_value(self, stock):\n        return stock['price'] * stock['quantity']\n```"}}], "usage": {"completion_tokens": 917, "prompt_tokens": 1118, "total_tokens": 2035}, "feeType": "1", "consume": 1.287072}, "test_case_name": "StockPortfolioTracker.txt"}