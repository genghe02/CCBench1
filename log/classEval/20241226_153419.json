{"response body": {"id": "e9238828-7eb1-40a3-9f8c-ed9d1b3762b2", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:34:22", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n\"\"\"\nThis class provides methods to decrypt text that has been encrypted using Caesar cipher, \nVigenere cipher, or the Rail Fence cipher.\n\"\"\"\nclass DecryptionUtils:\n    def __init__(self, key):\n        \"\"\"\n        Initializes a new instance of the DecryptionUtils class.\n\n        Parameters:\n            key (str): The decryption key.\n        \"\"\"\n        self.key = key\n    \n    def caesar_decipher(self, ciphertext, shift):\n        \"\"\"\n        Decrypts a Caesar cipher encrypted text.\n\n        Parameters:\n            ciphertext (str): The encrypted text.\n            shift (int): The number of positions each letter has been shifted to the right.\n\n        Returns:\n            str: The decrypted plain text.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert caesar_decipher('KHOOR', 3) == 'HELLO'\n            \n            # Test case 2: Shift larger than alphabet size\n            assert caesar_decipher('KHOOR', 29) == 'HELLO'\n            \n            # Test case 3: Non-alphabetic characters\n            assert caesar_decipher('KH22RR', 3) == 'HE22LL'\n        \"\"\"\n        plaintext = \"\"\n        for char in ciphertext:\n            if char.isalpha():\n                if char.isupper():\n                    ascii_offset = 65\n                else:\n                    ascii_offset = 97\n                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)\n                plaintext += shifted_char\n            else:\n                plaintext += char\n        return plaintext\n    \n    def vigenere_decipher(self, ciphertext):\n        \"\"\"\n        Decrypts a Vigenere cipher encrypted text.\n\n        Parameters:\n            ciphertext (str): The encrypted text.\n\n        Returns:\n            str: The decrypted plain text.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert vigenere_decipher('KHOOR', 'key') == 'HELLO'\n            \n            # Test case 2: Key shorter than ciphertext\n            assert vigenere_decipher('KHOOR', 'k') == 'HELLO'\n            \n            # Test case 3: Non-alphabetic characters\n            assert vigenere_decipher('KH22RR', 'key') == 'HE22LL'\n        \"\"\"\n        decrypted_text = \"\"\n        key_index = 0\n        for char in ciphertext:\n            if char.isalpha():\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\n                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))\n                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char\n                key_index += 1\n            else:\n                decrypted_text += char\n        return decrypted_text\n    \n    def rail_fence_decipher(self, encrypted_text, rails):\n        \"\"\"\n        Decrypts a Rail Fence cipher encrypted text.\n\n        Parameters:\n            encrypted_text (str): The encrypted text.\n            rails (int): The number of horizontal lines used in the cipher.\n\n        Returns:\n            str: The decrypted plain text.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert rail_fence_decipher('HORELLO', 3) == 'HELLO'\n            \n            # Test case 2: More rails than characters\n            assert rail_fence_decipher('HELLO', 6) == 'HELLO'\n            \n            # Test case 3: Non-alphabetic characters\n            assert rail_fence_decipher('H2O2LLO', 3) == 'HE2LLO'\n        \"\"\"\n        fence = [['\\n' for _ in range(len(encrypted_text))] for _ in range(rails)]\n        direction = -1\n        row, col = 0, 0\n\n        for _ in range(len(encrypted_text)):\n            if row == 0 or row == rails - 1:\n                direction = -direction\n\n            fence[row][col] = ''\n            col += 1\n            row += direction\n\n        index = 0\n        for i in range(rails):\n            for j in range(len(encrypted_text)):\n                if fence[i][j] == '':\n                    fence[i][j] = encrypted_text[index]\n                    index += 1\n\n        plain_text = ''\n        direction = -1\n        row, col = 0, 0\n        for _ in range(len(encrypted_text)):\n            if row == 0 or row == rails - 1:\n                direction = -direction\n\n            plain_text += fence[row][col]\n            col += 1\n            row += direction\n\n        return plain_text\n```"}}], "usage": {"completion_tokens": 970, "prompt_tokens": 1528, "total_tokens": 2498}, "feeType": "1", "consume": 1.512048}, "test_case_name": "DecryptionUtils.txt"}