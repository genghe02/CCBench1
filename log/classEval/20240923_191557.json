{"response body": {"id": "56246ec9-9f70-4b76-80c7-ef4cde1945aa", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:15:57", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport re\nfrom collections import deque\nfrom decimal import Decimal\n\n\nclass ExpressionCalculator:\n    def __init__(self):\n        # Initialize the calculator class by setting up the deque for postfix expression and operator priority list\n        self.postfix_stack = deque()\n        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]\n\n    def calculate(self, expression):\n        # Function to calculate value of the given expression\n        # param expression: str, mathematical expression to calculate\n        # return: float, result of the calculated expression\n        # test cases for the function: \n        # >>> calculator = ExpressionCalculator()\n        # >>> calculator.calculate('3+2*2')\n        # >>> calculator.calculate('3/2')\n        # >>> calculator.calculate('3+5/2')\n        self.prepare(self.transform(expression))\n\n        result_stack = deque()\n        self.postfix_stack.reverse()\n\n        while self.postfix_stack:\n            current_op = self.postfix_stack.pop()\n            if not self.is_operator(current_op):\n                current_op = current_op.replace(\"~\", \"-\")\n                result_stack.append(current_op)\n            else:\n                second_value = result_stack.pop()\n                first_value = result_stack.pop()\n\n                first_value = first_value.replace(\"~\", \"-\")\n                second_value = second_value.replace(\"~\", \"-\")\n\n                temp_result = self._calculate(first_value, second_value, current_op)\n                result_stack.append(str(temp_result))\n\n        return float(eval(\"*\".join(result_stack)))\n\n    def prepare(self, expression):\n        # Function to prepare the postfix form of the given expression\n        # param expression: str, mathematical expression to convert into postfix form\n        # test cases for the function: \n        # >>> calculator = ExpressionCalculator()\n        # >>> calculator.prepare('3+2*2')\n        op_stack = deque([','])\n        arr = list(expression)\n        current_index = 0\n        count = 0\n\n        for i, current_op in enumerate(arr):\n            if self.is_operator(current_op):\n                if count > 0:\n                    self.postfix_stack.append(\"\".join(arr[current_index: current_index + count]))\n                peek_op = op_stack[-1]\n                if current_op == ')':\n                    while op_stack[-1] != '(':\n                        self.postfix_stack.append(str(op_stack.pop()))\n                    op_stack.pop()\n                else:\n                    while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):\n                        self.postfix_stack.append(str(op_stack.pop()))\n                        peek_op = op_stack[-1]\n                    op_stack.append(current_op)\n\n                count = 0\n                current_index = i + 1\n            else:\n                count += 1\n\n        if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):\n            self.postfix_stack.append(\"\".join(arr[current_index: current_index + count]))\n\n        while op_stack[-1] != ',':\n            self.postfix_stack.append(str(op_stack.pop()))\n\n    @staticmethod\n    def is_operator(c):\n        # Function to check if the given character is an operator or not\n        # param c: str, character to check\n        # return: bool, True if the character is an operator, False otherwise\n        # test cases for the function: \n        # >>> ExpressionCalculator.is_operator('+')\n        # >>> ExpressionCalculator.is_operator('3')\n        return c in {'+', '-', '*', '/', '(', ')', '%'}\n\n    def compare(self, cur, peek):\n        # Function to compare the priority of two operators\n        # param cur: str, current operator\n        # param peek: str, next operator\n        # return: bool, True if the priority of peek operator is greater or equal to current operator, False otherwise\n        # test cases for the function: \n        # >>> calculator = ExpressionCalculator()\n        # >>> calculator.compare('+', '-')\n        # >>> calculator.compare('*', '/')\n        if cur == '%':\n            cur = '/'\n        if peek == '%':\n            peek = '/'\n        return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]\n\n    @staticmethod\n    def _calculate(first_value, second_value, current_op):\n        # Function to calculate the result of two values with the given operator\n        # param first_value: str, the first number\n        # param second_value: str, the second number\n        # param current_op: str, operator to be used for calculation\n        # return: Decimal, result of the calculation\n        # test cases for the function: \n        # >>> ExpressionCalculator._calculate('3', '2', '+')\n        # >>> ExpressionCalculator._calculate('3', '2', '-')\n        if current_op == '+':\n            return Decimal(first_value) + Decimal(second_value)\n        elif current_op == '-':\n            return Decimal(first_value) - Decimal(second_value)\n        elif current_op == '*':\n            return Decimal(first_value) * Decimal(second_value)\n        elif current_op == '/':\n            return Decimal(first_value) / Decimal(second_value)\n        elif current_op == '%':\n            return Decimal(first_value) % Decimal(second_value)\n        else:\n            raise ValueError(\"Unexpected operator: {}\".format(current_op))\n\n    @staticmethod\n    def transform(expression):\n        # Function to transform the expression by removing spaces, equals sign and replacing negative sign with tilde\n        # param expression: str, expression to be transformed\n        # return: str, transformed expression\n        # test cases for the function: \n        # >>> ExpressionCalculator.transform('3 + 2 * 2')\n        # >>> ExpressionCalculator.transform('3 - 2 + 2')\n        expression = re.sub(r\"\\s+\", \"\", expression)\n        expression = re.sub(r\"=$\", \"\", expression)\n        arr = list(expression)\n\n        for i, c in enumerate(arr):\n            if c == '-':\n                if i == 0:\n                    arr[i] = '~'\n                else:\n                    prev_c = arr[i - 1]\n                    if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:\n                        arr[i] = '~'\n\n        if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):\n            arr[0] = '-'\n            return \"0\" + \"\".join(arr)\n        else:\n            return \"\".join(arr)\n```"}}], "usage": {"completion_tokens": 1332, "prompt_tokens": 1565, "total_tokens": 2897}, "feeType": "1", "consume": 1.843844}, "test_case_name": "ExpressionCalculator.txt"}