{"response body": {"id": "4d71e407-f063-4984-8219-e6b71b2f4734", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:55:33", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "import random\n\n\nclass Snake:\n    # This class represents the snake in the game.\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        # Initialize the Snake object with the provided parameters.\n        # param SCREEN_WIDTH: int, the width of the game screen\n        # param SCREEN_HEIGHT: int, the height of the game screen\n        # param BLOCK_SIZE: int, the size of each block in the game\n        # param food_position: tuple, the initial position of the food\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.food_position = food_position\n\n    def move(self, direction):\n        # Move the snake in the specified direction.\n        # param direction: tuple, the direction in which the snake should move\n        # return: None\n        # Test cases:\n        # move((0, -1))  # Move up\n        # move((1, 0))   # Move right\n        cur = self.positions[0]\n        x, y = direction\n\n        new = (\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\n        )\n\n        if new == self.food_position:\n            self.eat_food()\n\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def random_food_position(self):\n        # Generate a random position for the food that is not occupied by the snake.\n        # return: None\n        while self.food_position in self.positions:\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)\n\n    def reset(self):\n        # Reset the game state when the snake collides with itself.\n        # return: None\n        # Test cases:\n        # reset()  # Reset the game\n        self.length = 1\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.random_food_position()\n\n    def eat_food(self):\n        # Increase the length of the snake and update the score when it eats the food.\n        # return: None\n        # Test cases:\n        # eat_food()  # Snake eats the food\n        self.length += 1\n        self.score += 100\n        self.random_food_position()"}}], "usage": {"completion_tokens": 618, "prompt_tokens": 1037, "total_tokens": 1655}, "feeType": "1", "consume": 0.010498227068}, "test_case_name": "Snake.txt"}