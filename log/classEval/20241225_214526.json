{"response body": "ChatCompletion(id='chatcmpl-AiLzByRRS7xsITAfYIHxWZ4kZpPES', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class is responsible for constructing SQL queries for various database operations.\\n\"\"\"\\n\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns=\\'*\\', where=None):\\n        \"\"\"\\n        Builds a SELECT SQL query string.\\n\\n        Parameters:\\n            table (str): The name of the table from which to select data.\\n            columns (str or list): The columns to select (defaults to \\'*\\'). If a list is provided, it will be joined into a comma-separated string.\\n            where (dict, optional): A dictionary representing the WHERE clause conditions.\\n\\n        Returns:\\n            str: The constructed SELECT SQL query string.\\n\\n        Test cases:\\n            # Test case 1: Select all columns from a table\\n            input = (\\'users\\',)\\n            expected_output = \"SELECT * FROM users\"\\n\\n            # Test case 2: Select specific columns from a table\\n            input = (\\'users\\', [\\'id\\', \\'name\\'])\\n            expected_output = \"SELECT id, name FROM users\"\\n\\n            # Test case 3: Select with a WHERE condition\\n            input = (\\'users\\', [\\'id\\', \\'name\\'], {\\'active\\': 1})\\n            expected_output = \"SELECT id, name FROM users WHERE active=\\'1\\'\"\\n        \"\"\"\\n        if columns != \\'*\\':\\n            columns = \\', \\'.join(columns)\\n        query = f\"SELECT {columns} FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        \"\"\"\\n        Builds an INSERT SQL query string.\\n\\n        Parameters:\\n            table (str): The name of the table into which data will be inserted.\\n            data (dict): A dictionary containing the column-value pairs for the new record.\\n\\n        Returns:\\n            str: The constructed INSERT SQL query string.\\n\\n        Test cases:\\n            # Test case 1: Insert a single record into a table\\n            input = (\\'users\\', {\\'name\\': \\'John\\', \\'active\\': 1})\\n            expected_output = \"INSERT INTO users (name, active) VALUES (\\'John\\', \\'1\\')\"\\n\\n            # Test case 2: Insert a record with various data types\\n            input = (\\'products\\', {\\'name\\': \\'Laptop\\', \\'price\\': 799.99})\\n            expected_output = \"INSERT INTO products (name, price) VALUES (\\'Laptop\\', \\'799.99\\')\"\\n\\n            # Test case 3: Insert a record with missing values (assumes column defaults or null)\\n            input = (\\'orders\\', {\\'user_id\\': 2})\\n            expected_output = \"INSERT INTO orders (user_id) VALUES (\\'2\\')\"\\n        \"\"\"\\n        keys = \\', \\'.join(data.keys())\\n        values = \\', \\'.join(f\"\\'{v}\\'\" for v in data.values())\\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        \"\"\"\\n        Builds a DELETE SQL query string.\\n\\n        Parameters:\\n            table (str): The name of the table from which data will be deleted.\\n            where (dict, optional): A dictionary representing the WHERE clause conditions.\\n\\n        Returns:\\n            str: The constructed DELETE SQL query string.\\n\\n        Test cases:\\n            # Test case 1: Delete all records from a table\\n            input = (\\'users\\',)\\n            expected_output = \"DELETE FROM users\"\\n\\n            # Test case 2: Delete with a WHERE condition\\n            input = (\\'users\\', {\\'id\\': 1})\\n            expected_output = \"DELETE FROM users WHERE id=\\'1\\'\"\\n\\n            # Test case 3: Delete with multiple conditions\\n            input = (\\'users\\', {\\'active\\': 0, \\'age\\': 18})\\n            expected_output = \"DELETE FROM users WHERE active=\\'0\\' AND age=\\'18\\'\"\\n        \"\"\"\\n        query = f\"DELETE FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        \"\"\"\\n        Builds an UPDATE SQL query string.\\n\\n        Parameters:\\n            table (str): The name of the table to update.\\n            data (dict): A dictionary containing the column-value pairs to be updated.\\n            where (dict, optional): A dictionary representing the WHERE clause conditions.\\n\\n        Returns:\\n            str: The constructed UPDATE SQL query string.\\n\\n        Test cases:\\n            # Test case 1: Update a record in a table\\n            input = (\\'users\\', {\\'name\\': \\'John\\'}, {\\'id\\': 1})\\n            expected_output = \"UPDATE users SET name=\\'John\\' WHERE id=\\'1\\'\"\\n\\n            # Test case 2: Update with multiple columns\\n            input = (\\'users\\', {\\'name\\': \\'John\\', \\'active\\': 1}, {\\'id\\': 1})\\n            expected_output = \"UPDATE users SET name=\\'John\\', active=\\'1\\' WHERE id=\\'1\\'\"\\n\\n            # Test case 3: Update with no conditions\\n            input = (\\'users\\', {\\'active\\': 1})\\n            expected_output = \"UPDATE users SET active=\\'1\\'\"\\n        \"\"\"\\n        update_str = \\', \\'.join(f\"{k}=\\'{v}\\'\" for k, v in data.items())\\n        query = f\"UPDATE {table} SET {update_str}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735134309, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_d02d531b47', usage=CompletionUsage(completion_tokens=1142, prompt_tokens=1640, total_tokens=2782, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLQueryBuilder.txt"}