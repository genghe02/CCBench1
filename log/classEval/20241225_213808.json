{"response body": "ChatCompletion(id='chatcmpl-AiLsAeBai9lecQ9XbPxMVhPCssj5g', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class provides methods for converting numbers between different numeral systems:\\ndecimal, binary, octal, and hexadecimal.\\n\"\"\"\\n\\nclass NumberConverter:\\n    \\n    @staticmethod\\n    def decimal_to_binary(decimal_num):\\n        \"\"\"\\n        Convert a decimal number to its binary representation.\\n\\n        Parameters:\\n            decimal_num (int): The decimal number to convert.\\n\\n        Returns:\\n            str: The binary representation of the decimal number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = 10\\n            expected_output = \\'1010\\'\\n            \\n            # Test case 2: Edge case (0)\\n            input = 0\\n            expected_output = \\'0\\'\\n            \\n            # Test case 3: Negative number (raise ValueError)\\n            try:\\n                input = -5\\n                NumberConverter.decimal_to_binary(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if decimal_num < 0:\\n            raise ValueError(\"Input must be a non-negative integer.\")\\n        binary_num = bin(decimal_num)[2:]\\n        return binary_num\\n\\n    @staticmethod\\n    def binary_to_decimal(binary_num):\\n        \"\"\"\\n        Convert a binary number (as a string) to its decimal representation.\\n\\n        Parameters:\\n            binary_num (str): The binary number to convert.\\n\\n        Returns:\\n            int: The decimal representation of the binary number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = \\'1010\\'\\n            expected_output = 10\\n            \\n            # Test case 2: Edge case (empty string)\\n            input = \\'\\'\\n            expected_output = 0\\n            \\n            # Test case 3: Invalid binary string (raise ValueError)\\n            try:\\n                input = \\'102\\'\\n                NumberConverter.binary_to_decimal(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if not all(c in \\'01\\' for c in binary_num):\\n            raise ValueError(\"Input must be a binary string.\")\\n        decimal_num = int(binary_num, 2)\\n        return decimal_num\\n\\n    @staticmethod\\n    def decimal_to_octal(decimal_num):\\n        \"\"\"\\n        Convert a decimal number to its octal representation.\\n\\n        Parameters:\\n            decimal_num (int): The decimal number to convert.\\n\\n        Returns:\\n            str: The octal representation of the decimal number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = 10\\n            expected_output = \\'12\\'\\n            \\n            # Test case 2: Edge case (0)\\n            input = 0\\n            expected_output = \\'0\\'\\n            \\n            # Test case 3: Negative number (raise ValueError)\\n            try:\\n                input = -5\\n                NumberConverter.decimal_to_octal(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if decimal_num < 0:\\n            raise ValueError(\"Input must be a non-negative integer.\")\\n        octal_num = oct(decimal_num)[2:]\\n        return octal_num\\n\\n    @staticmethod\\n    def octal_to_decimal(octal_num):\\n        \"\"\"\\n        Convert an octal number (as a string) to its decimal representation.\\n\\n        Parameters:\\n            octal_num (str): The octal number to convert.\\n\\n        Returns:\\n            int: The decimal representation of the octal number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = \\'12\\'\\n            expected_output = 10\\n            \\n            # Test case 2: Edge case (empty string)\\n            input = \\'\\'\\n            expected_output = 0\\n            \\n            # Test case 3: Invalid octal string (raise ValueError)\\n            try:\\n                input = \\'8\\'\\n                NumberConverter.octal_to_decimal(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if not all(c in \\'01234567\\' for c in octal_num):\\n            raise ValueError(\"Input must be an octal string.\")\\n        decimal_num = int(octal_num, 8)\\n        return decimal_num\\n\\n    @staticmethod\\n    def decimal_to_hex(decimal_num):\\n        \"\"\"\\n        Convert a decimal number to its hexadecimal representation.\\n\\n        Parameters:\\n            decimal_num (int): The decimal number to convert.\\n\\n        Returns:\\n            str: The hexadecimal representation of the decimal number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = 255\\n            expected_output = \\'ff\\'\\n            \\n            # Test case 2: Edge case (0)\\n            input = 0\\n            expected_output = \\'0\\'\\n            \\n            # Test case 3: Negative number (raise ValueError)\\n            try:\\n                input = -10\\n                NumberConverter.decimal_to_hex(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if decimal_num < 0:\\n            raise ValueError(\"Input must be a non-negative integer.\")\\n        hex_num = hex(decimal_num)[2:].lower()\\n        return hex_num\\n\\n    @staticmethod\\n    def hex_to_decimal(hex_num):\\n        \"\"\"\\n        Convert a hexadecimal number (as a string) to its decimal representation.\\n\\n        Parameters:\\n            hex_num (str): The hexadecimal number to convert.\\n\\n        Returns:\\n            int: The decimal representation of the hexadecimal number.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            input = \\'ff\\'\\n            expected_output = 255\\n            \\n            # Test case 2: Edge case (empty string)\\n            input = \\'\\'\\n            expected_output = 0\\n            \\n            # Test case 3: Invalid hexadecimal string (raise ValueError)\\n            try:\\n                input = \\'gh\\'\\n                NumberConverter.hex_to_decimal(input)\\n            except ValueError as e:\\n                expected_output = \\'ValueError\\'\\n        \"\"\"\\n        if not all(c in \\'0123456789abcdefABCDEF\\' for c in hex_num):\\n            raise ValueError(\"Input must be a hexadecimal string.\")\\n        decimal_num = int(hex_num, 16)\\n        return decimal_num\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735133874, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1242, prompt_tokens=1575, total_tokens=2817, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "NumberConverter.txt"}