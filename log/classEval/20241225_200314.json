{"response body": "ChatCompletion(id='chatcmpl-AiKOFq3prFmWOvIQO5f0HAyPHG4D3', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nURLHandler class is designed to parse and extract various components from a given URL.\\nIt allows users to retrieve the scheme, host, path, query parameters, and fragment of a URL.\\nThe primary use cases include URL validation, web scraping, and web request handling.\\nDependencies include standard Python libraries as no external libraries are required.\\n\"\"\"\\n\\nclass URLHandler:\\n    def __init__(self, url):\\n        \"\"\"\\n        Initializes the URLHandler with the provided URL.\\n\\n        Parameters:\\n            url (str): The URL string to be parsed.\\n        \"\"\"\\n        self.url = url\\n\\n    def get_scheme(self):\\n        \"\"\"\\n        Extracts the scheme (e.g., http or https) from the URL.\\n\\n        Returns:\\n            str or None: The scheme if present, otherwise None.\\n\\n        Test cases:\\n            # Test case 1: Valid URL with scheme\\n            handler = URLHandler(\"https://example.com/path\")\\n            assert handler.get_scheme() == \"https\"\\n\\n            # Test case 2: Valid URL with scheme\\n            handler = URLHandler(\"http://example.com\")\\n            assert handler.get_scheme() == \"http\"\\n\\n            # Test case 3: URL without scheme\\n            handler = URLHandler(\"example.com/path\")\\n            assert handler.get_scheme() is None\\n        \"\"\"\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            return self.url[:scheme_end]\\n        return None\\n\\n    def get_host(self):\\n        \"\"\"\\n        Extracts the host from the URL.\\n\\n        Returns:\\n            str or None: The host if present, otherwise None.\\n\\n        Test cases:\\n            # Test case 1: Valid URL with host\\n            handler = URLHandler(\"https://example.com/path\")\\n            assert handler.get_host() == \"example.com\"\\n\\n            # Test case 2: Valid URL with host\\n            handler = URLHandler(\"http://example.com:8080/path\")\\n            assert handler.get_host() == \"example.com:8080\"\\n\\n            # Test case 3: URL without scheme\\n            handler = URLHandler(\"example.com/path\")\\n            assert handler.get_host() is None\\n        \"\"\"\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\"/\")\\n            if host_end != -1:\\n                return url_without_scheme[:host_end]\\n            return url_without_scheme\\n        return None\\n\\n    def get_path(self):\\n        \"\"\"\\n        Extracts the path from the URL.\\n\\n        Returns:\\n            str or None: The path if present, otherwise None.\\n\\n        Test cases:\\n            # Test case 1: Valid URL with path\\n            handler = URLHandler(\"https://example.com/path/to/resource\")\\n            assert handler.get_path() == \"/path/to/resource\"\\n\\n            # Test case 2: Valid URL with host but no path\\n            handler = URLHandler(\"https://example.com\")\\n            assert handler.get_path() is None\\n\\n            # Test case 3: URL without scheme\\n            handler = URLHandler(\"example.com/path/to/resource\")\\n            assert handler.get_path() is None\\n        \"\"\"\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\"/\")\\n            if host_end != -1:\\n                return url_without_scheme[host_end:]\\n        return None\\n\\n    def get_query_params(self):\\n        \"\"\"\\n        Extracts and parses the query parameters from the URL.\\n\\n        Returns:\\n            dict or None: A dictionary of query parameters if present, otherwise None.\\n\\n        Test cases:\\n            # Test case 1: Valid URL with query parameters\\n            handler = URLHandler(\"https://example.com/path?param1=value1&param2=value2\")\\n            assert handler.get_query_params() == {\"param1\": \"value1\", \"param2\": \"value2\"}\\n\\n            # Test case 2: Valid URL with no query parameters\\n            handler = URLHandler(\"https://example.com/path\")\\n            assert handler.get_query_params() is None\\n\\n            # Test case 3: URL with only fragment\\n            handler = URLHandler(\"https://example.com/path#fragment\")\\n            assert handler.get_query_params() is None\\n        \"\"\"\\n        query_start = self.url.find(\"?\")\\n        fragment_start = self.url.find(\"#\")\\n        if query_start != -1:\\n            query_string = self.url[query_start + 1:fragment_start]\\n            params = {}\\n            if len(query_string) > 0:\\n                param_pairs = query_string.split(\"&\")\\n                for pair in param_pairs:\\n                    key_value = pair.split(\"=\")\\n                    if len(key_value) == 2:\\n                        key, value = key_value\\n                        params[key] = value\\n            return params\\n        return None\\n\\n    def get_fragment(self):\\n        \"\"\"\\n        Extracts the fragment from the URL.\\n\\n        Returns:\\n            str or None: The fragment if present, otherwise None.\\n\\n        Test cases:\\n            # Test case 1: Valid URL with fragment\\n            handler = URLHandler(\"https://example.com/path#fragment\")\\n            assert handler.get_fragment() == \"fragment\"\\n\\n            # Test case 2: Valid URL without fragment\\n            handler = URLHandler(\"https://example.com/path\")\\n            assert handler.get_fragment() is None\\n\\n            # Test case 3: URL with only query parameters\\n            handler = URLHandler(\"https://example.com/path?param=value\")\\n            assert handler.get_fragment() is None\\n        \"\"\"\\n        fragment_start = self.url.find(\"#\")\\n        if fragment_start != -1:\\n            return self.url[fragment_start + 1:]\\n        return None\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735128175, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1180, prompt_tokens=1714, total_tokens=2894, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "URLHandler.txt"}