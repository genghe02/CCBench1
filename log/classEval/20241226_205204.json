{"response body": "ChatCompletion(id='chatcmpl-AihdEBF0iRwZgXbiyayEFfNNaWVKl', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class implements an SQL query builder that generates SQL SELECT, INSERT, DELETE, and UPDATE queries based on the input parameters.\\n\"\"\"\\n\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns=\\'*\\', where=None):\\n        \"\"\"\\n        Generate an SQL SELECT query.\\n\\n        Parameters:\\n            table (str): The name of the table to select from\\n            columns (str or list): The columns to select, \\'*\\' for all columns by default\\n            where (dict): A dictionary representing the WHERE clause conditions\\n\\n        Returns:\\n            str: SQL SELECT query string\\n        \\n        Test cases:\\n            # Test case 1: Select all columns\\n            assert select(\\'users\\') == \"SELECT * FROM users\"\\n            \\n            # Test case 2: Select specific columns with WHERE clause\\n            assert select(\\'orders\\', [\\'id\\', \\'product\\'], {\\'status\\': \\'shipped\\'}) == \"SELECT id, product FROM orders WHERE status=\\'shipped\\'\"\\n            \\n            # Test case 3: Edge case with empty WHERE clause\\n            assert select(\\'products\\', [\\'name\\', \\'price\\']) == \"SELECT name, price FROM products\"\\n    \"\"\"\\n\\n        if columns != \\'*\\':\\n            columns = \\', \\'.join(columns)\\n        query = f\"SELECT {columns} FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        \"\"\"\\n        Generate an SQL INSERT query.\\n\\n        Parameters:\\n            table (str): The name of the table to insert into\\n            data (dict): A dictionary representing the column-value pairs to insert\\n\\n        Returns:\\n            str: SQL INSERT query string\\n        \\n        Test cases:\\n            # Test case 1: Insert data into table\\n            assert insert(\\'customers\\', {\\'name\\': \\'Alice\\', \\'email\\': \\'alice@example.com\\'}) == \"INSERT INTO customers (name, email) VALUES (\\'Alice\\', \\'alice@example.com\\')\"\\n            \\n            # Test case 2: Insert with multiple columns\\n            assert insert(\\'orders\\', {\\'id\\': 123, \\'amount\\': 50}) == \"INSERT INTO orders (id, amount) VALUES (123, 50)\"\\n            \\n            # Test case 3: Insert with empty data\\n            assert insert(\\'users\\', {}) == \"INSERT INTO users () VALUES ()\"\\n    \"\"\"\\n\\n        keys = \\', \\'.join(data.keys())\\n        values = \\', \\'.join(f\"\\'{v}\\'\" for v in data.values())\\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        \"\"\"\\n        Generate an SQL DELETE query.\\n\\n        Parameters:\\n            table (str): The name of the table to delete from\\n            where (dict): A dictionary representing the WHERE clause conditions\\n\\n        Returns:\\n            str: SQL DELETE query string\\n        \\n        Test cases:\\n            # Test case 1: Delete all rows\\n            assert delete(\\'orders\\') == \"DELETE FROM orders\"\\n            \\n            # Test case 2: Delete with WHERE clause\\n            assert delete(\\'users\\', {\\'status\\': \\'inactive\\'}) == \"DELETE FROM users WHERE status=\\'inactive\\'\"\\n            \\n            # Test case 3: Edge case with empty WHERE\\n            assert delete(\\'products\\') == \"DELETE FROM products\"\\n    \"\"\"\\n\\n        query = f\"DELETE FROM {table}\"\\n        if where:\\n            query += \" WHERE \" + \\' AND \\'.join(f\"{k}=\\'{v}\\'\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        \"\"\"\\n        Generate an SQL UPDATE query.\\n\\n        Parameters:\\n            table (str): The name of the table to update\\n            data (dict): A dictionary representing the column-value pairs to update\\n            where (dict): A dictionary representing the WHERE clause conditions\\n\\n        Returns:\\n            str: SQL UPDATE query string \\n        \\n        Test cases:\\n            # Test case 1: Update data with WHERE clause\\n            assert update(\\'users\\', {\\'status\\': \\'active\\'}, {\\'id\\': 123}) == \"UPDATE users SET status=\\'active\\' WHERE id=\\'123\\'\"\\n            \\n            # Test case 2: Update multiple columns\\n            assert update(\\'products\\', {\\'price\\': 100, \\'stock\\': 50}) == \"UPDATE products SET price=\\'100\\', stock=\\'50\\'\"\\n            \\n            # Test case 3: Edge case with empty data and WHERE\\n            assert update(\\'customers\\', {}, {\\'level\\': \\'gold\\'}) == \"UPDATE customers SET  WHERE level=\\'gold\\'\"\\n    \"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735217516, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=942, prompt_tokens=1358, total_tokens=2300, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLQueryBuilder.txt"}