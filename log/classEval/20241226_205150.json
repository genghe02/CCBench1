{"response body": "ChatCompletion(id='chatcmpl-AihcxsTx4ezVF5KNcecs5SdZCRJ3L', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class defines an SQL generator that creates SQL queries for various operations on a specific table.\\n\"\"\"\\n\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        \"\"\"\\n        Initialize the SQLGenerator object with the specified table name.\\n\\n        Parameters:\\n            table_name (str): The name of the database table to operate on.\\n        \"\"\"\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        \"\"\"\\n        Generate a SELECT SQL query.\\n\\n        Parameters:\\n            fields (list): List of fields to select. If None, select all (*).\\n            condition (str): Conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SELECT query.\\n\\n        Test cases:\\n            # Test case 1: Select all fields\\n            assert select() == \"SELECT * FROM <table_name>;\"\\n\\n            # Test case 2: Select specific fields with condition\\n            assert select(fields=[\"name\", \"age\"], condition=\"age > 18\") == \"SELECT name, age FROM <table_name> WHERE age > 18;\"\\n\\n            # Test case 3: No condition provided\\n            assert select(fields=[\"name\"]) == \"SELECT name FROM <table_name>;\"\\n        \"\"\"\\n\\n        if fields is None:\\n            fields = \"*\"\\n        else:\\n            fields = \", \".join(fields)\\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\\n        if condition is not None:\\n            sql += f\" WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def insert(self, data):\\n        \"\"\"\\n        Generate an INSERT SQL query.\\n\\n        Parameters:\\n            data (dict): A dictionary of field-value pairs to insert.\\n\\n        Returns:\\n            str: The constructed INSERT query.\\n\\n        Test cases:\\n            # Test case 1: Insert data with multiple fields\\n            assert insert({\"name\": \"Alice\", \"age\": 25}) == \"INSERT INTO <table_name> (name, age) VALUES (\\'Alice\\', \\'25\\');\"\\n\\n            # Test case 2: Insert data with a single field\\n            assert insert({\"name\": \"Bob\"}) == \"INSERT INTO <table_name> (name) VALUES (\\'Bob\\');\"\\n\\n            # Test case 3: Insert empty data\\n            assert insert({}) == \"INSERT INTO <table_name> ();\"\\n        \"\"\"\\n\\n        fields = \", \".join(data.keys())\\n        values = \", \".join([f\"\\'{value}\\'\" for value in data.values()])\\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\\n        return sql + \";\"\\n\\n    def update(self, data, condition):\\n        \"\"\"\\n        Generate an UPDATE SQL query.\\n\\n        Parameters:\\n            data (dict): A dictionary of field-value pairs to update.\\n            condition (str): Conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed UPDATE query.\\n\\n        Test cases:\\n            # Test case 1: Update data with a single field\\n            assert update({\"age\": 30}, \"name = \\'Alice\\'\") == \"UPDATE <table_name> SET age = \\'30\\' WHERE name = \\'Alice\\';\"\\n\\n            # Test case 2: Update data with multiple fields \\n            assert update({\"name\": \"Bob\", \"age\": 22}, \"age > 18\") == \"UPDATE <table_name> SET name = \\'Bob\\', age = \\'22\\' WHERE age > 18;\"\\n\\n            # Test case 3: Update data with an empty field\\n            assert update({\"name\": \"\"}, \"age = 25\") == \"UPDATE <table_name> SET name = \\'\\' WHERE age = 25;\"\\n        \"\"\"\\n\\n        set_clause = \", \".join([f\"{field} = \\'{value}\\'\" for field, value in data.items()])\\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def delete(self, condition):\\n        \"\"\"\\n        Generate a DELETE SQL query.\\n\\n        Parameters:\\n            condition (str): Conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed DELETE query.\\n\\n        Test cases:\\n            # Test case 1: Delete all rows\\n            assert delete(\"\") == \"DELETE FROM <table_name> ;\"\\n\\n            # Test case 2: Delete rows with condition\\n            assert delete(\"age < 18\") == \"DELETE FROM <table_name> WHERE age < 18;\"\\n            \\n            # Test case 3: Delete rows with numeric condition\\n            assert delete(\"id = 10\") == \"DELETE FROM <table_name> WHERE id = 10;\"\\n        \"\"\"\\n\\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def select_female_under_age(self, age):\\n        \"\"\"\\n        Generate a SELECT SQL query for females under a certain age.\\n\\n        Parameters:\\n            age (int): The maximum age for females.\\n\\n        Returns:\\n            str: The constructed SELECT query.\\n\\n        Test cases:\\n            # Test case 1: Select females under the age limit\\n            assert select_female_under_age(25) == \"SELECT * FROM <table_name> WHERE age < 25 AND gender = \\'female\\';\"\\n            \\n            # Test case 2: Select females at the age limit\\n            assert select_female_under_age(18) == \"SELECT * FROM <table_name> WHERE age < 18 AND gender = \\'female\\';\"\\n\\n            # Test case 3: Select females over the age limit\\n            assert select_female_under_age(30) == \"SELECT * FROM <table_name> WHERE age < 30 AND gender = \\'female\\';\"\\n        \"\"\"\\n\\n        condition = f\"age < {age} AND gender = \\'female\\'\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        \"\"\"\\n        Generate a SELECT SQL query to select rows within a specific age range.\\n\\n        Parameters:\\n            min_age (int): The minimum age in the range.\\n            max_age (int): The maximum age in the range.\\n\\n        Returns:\\n            str: The constructed SELECT query.\\n\\n        Test cases:\\n            # Test case 1: Select by age range\\n            assert select_by_age_range(20, 30) == \"SELECT * FROM <table_name> WHERE age BETWEEN 20 AND 30;\"\\n            \\n            # Test case 2: Select by same age range\\n            assert select_by_age_range(25, 25) == \"SELECT * FROM <table_name> WHERE age BETWEEN 25 AND 25;\"\\n            \\n            # Test case 3: Select by invalid range\\n            assert select_by_age_range(30, 20) == \"SELECT * FROM <table_name> WHERE age BETWEEN 30 AND 20;\"\\n        \"\"\"\\n\\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\\n        return self.select(condition=condition)\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735217499, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1405, prompt_tokens=1473, total_tokens=2878, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLGenerator.txt"}