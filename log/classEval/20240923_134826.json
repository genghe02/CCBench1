{"response body": {"id": "eb19e782-fccc-4d37-8161-30ea442855cf", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:48:26", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "import random\n\n\nclass MahjongConnect:\n    # Class for implementing a Mahjong Connect game with various utility functions.\n\n    def __init__(self, BOARD_SIZE, ICONS):\n        # Initialize MahjongConnect class with the specified board size and icons.\n        # :param BOARD_SIZE: tuple, representing the size of the game board.\n        # :param ICONS: list, containing the icons that can appear on the board.\n        # :return: None\n        # Test case: MahjongConnect((4, 4), ['A', 'B', 'C', 'D'])\n        self.BOARD_SIZE = BOARD_SIZE\n        self.ICONS = ICONS\n        self.board = self.create_board()\n\n    def create_board(self):\n        # Create a random board filled with icons based on the specified size.\n        # :return: list, a 2D list representing the game board.\n        # Test case: create_board() -> [['A', 'B', 'C', 'D'], ['B', 'A', 'C', 'D'], ['C', 'D', 'A', 'B'], ['D', 'C', 'B', 'A']]\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\n        return board\n\n    def is_valid_move(self, pos1, pos2):\n        # Check if a move between two positions is valid.\n        # :param pos1: tuple, representing the coordinates of the first position.\n        # :param pos2: tuple, representing the coordinates of the second position.\n        # :return: bool, True if the move is valid, False otherwise.\n        # Test case: is_valid_move((0, 0), (1, 1)) -> True\n        x1, y1 = pos1\n        x2, y2 = pos2\n\n        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[\n            0] and 0 <= y2 <\n                self.BOARD_SIZE[1]):\n            return False\n\n        if pos1 == pos2:\n            return False\n\n        if self.board[x1][y1] != self.board[x2][y2]:\n            return False\n\n        if not self.has_path(pos1, pos2):\n            return False\n\n        return True\n\n    def has_path(self, pos1, pos2):\n        # Check if there is a valid path between two positions on the board.\n        # :param pos1: tuple, representing the coordinates of the first position.\n        # :param pos2: tuple, representing the coordinates of the second position.\n        # :return: bool, True if a valid path exists, False otherwise.\n        # Test case: has_path((0, 0), (3, 3)) -> True\n        visited = set()\n        stack = [pos1]\n\n        while stack:\n            current_pos = stack.pop()\n            if current_pos == pos2:\n                return True\n\n            if current_pos in visited:\n                continue\n\n            visited.add(current_pos)\n            x, y = current_pos\n\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:\n                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:\n                        stack.append((new_x, new_y))\n\n        return False\n\n    def remove_icons(self, pos1, pos2):\n        # Remove the icons at the specified positions from the board.\n        # :param pos1: tuple, representing the coordinates of the first position.\n        # :param pos2: tuple, representing the coordinates of the second position.\n        # :return: None\n        # Test case: remove_icons((0, 0), (1, 1))\n        x1, y1 = pos1\n        x2, y2 = pos2\n        self.board[x1][y1] = ' '\n        self.board[x2][y2] = ' '\n\n    def is_game_over(self):\n        # Check if the game is over by checking if the board is empty.\n        # :return: bool, True if the game is over, False otherwise.\n        # Test case: is_game_over() -> True\n        for row in self.board:\n            if any(icon != ' ' for icon in row):\n                return False\n        return True"}}], "usage": {"completion_tokens": 999, "prompt_tokens": 1301, "total_tokens": 2300}, "feeType": "1", "consume": 0.015607533704}, "test_case_name": "MahjongConnect.txt"}