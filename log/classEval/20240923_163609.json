{"response body": "{\n  \"id\": \"d7c3016c-c8b9-4929-b7c2-adec277e709e\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport re\\n\\n\\nclass RegexUtils:\\n    # A utility class for performing various regex operations such as matching, finding, splitting, and substituting.\\n\\n    def match(self, pattern, text):\\n        # Check if the given pattern matches the beginning of the text.\\n        # param pattern: str, the regex pattern to match against the text.\\n        # param text: str, the text to be checked for the pattern.\\n        # return: bool, True if the pattern matches the beginning of the text, False otherwise.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.match(r'\\\\d+', '123abc')\\n        # True\\n        # >>> regex_utils.match(r'\\\\d+', 'abc123')\\n        # False\\n        ans = re.match(pattern, text)\\n        if ans:\\n            return True\\n        else:\\n            return False\\n\\n    def findall(self, pattern, text):\\n        # Find all non-overlapping matches of the pattern in the text.\\n        # param pattern: str, the regex pattern to search for in the text.\\n        # param text: str, the text to be searched for the pattern.\\n        # return: list, a list of all non-overlapping matches in the text.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.findall(r'\\\\d+', '123abc456def')\\n        # ['123', '456']\\n        return re.findall(pattern, text)\\n\\n    def split(self, pattern, text):\\n        # Split the text by the occurrences of the pattern.\\n        # param pattern: str, the regex pattern to split the text by.\\n        # param text: str, the text to be split by the pattern.\\n        # return: list, a list of strings obtained by splitting the text by the pattern.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.split(r'\\\\s+', 'Hello   world this is a test')\\n        # ['Hello', 'world', 'this', 'is', 'a', 'test']\\n        return re.split(pattern, text)\\n\\n    def sub(self, pattern, replacement, text):\\n        # Replace all occurrences of the pattern in the text with the replacement string.\\n        # param pattern: str, the regex pattern to search for in the text.\\n        # param replacement: str, the string to replace the pattern with.\\n        # param text: str, the text to perform the substitution on.\\n        # return: str, the text with all occurrences of the pattern replaced by the replacement string.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.sub(r'\\\\d+', 'X', '123abc456def')\\n        # 'XabcXdef'\\n        return re.sub(pattern, replacement, text)\\n\\n    def generate_email_pattern(self):\\n        # Generate a regex pattern for matching email addresses.\\n        # return: str, the regex pattern for matching email addresses.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.generate_email_pattern()\\n        # r'\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b'\\n        pattern = r'\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b'\\n        return pattern\\n\\n    def generate_phone_number_pattern(self):\\n        # Generate a regex pattern for matching phone numbers in the format XXX-XXX-XXXX.\\n        # return: str, the regex pattern for matching phone numbers.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.generate_phone_number_pattern()\\n        # r'\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b'\\n        pattern = r'\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b'\\n        return pattern\\n\\n    def generate_split_sentences_pattern(self):\\n        # Generate a regex pattern for splitting text into sentences based on punctuation marks.\\n        # return: str, the regex pattern for splitting sentences.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.generate_split_sentences_pattern()\\n        # r'[.!?][\\\\s]{1,2}(?=[A-Z])'\\n        pattern = r'[.!?][\\\\s]{1,2}(?=[A-Z])'\\n        return pattern\\n\\n    def split_sentences(self, text):\\n        # Split the text into sentences based on punctuation marks.\\n        # param text: str, the text to be split into sentences.\\n        # return: list, a list of sentences obtained by splitting the text.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.split_sentences('Hello. This is a test. Another sentence!')\\n        # ['Hello', 'This is a test', 'Another sentence']\\n        pattern = self.generate_split_sentences_pattern()\\n        return self.split(pattern, text)\\n\\n    def validate_phone_number(self, phone_number):\\n        # Validate if the given phone number matches the format XXX-XXX-XXXX.\\n        # param phone_number: str, the phone number to be validated.\\n        # return: bool, True if the phone number is valid, False otherwise.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.validate_phone_number('123-456-7890')\\n        # True\\n        # >>> regex_utils.validate_phone_number('1234567890')\\n        # False\\n        pattern = self.generate_phone_number_pattern()\\n        return self.match(pattern, phone_number)\\n\\n    def extract_email(self, text):\\n        # Extract all email addresses from the given text.\\n        # param text: str, the text to extract email addresses from.\\n        # return: list, a list of email addresses found in the text.\\n        # >>> regex_utils = RegexUtils()\\n        # >>> regex_utils.extract_email('Contact us at test@example.com or info@example.com')\\n        # ['test@example.com', 'info@example.com']\\n        pattern = self.generate_email_pattern()\\n        return self.findall(pattern, text)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080490,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1504,\n    \"prompt_tokens\": 1307,\n    \"total_tokens\": 2811,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 731\n  }\n}", "test_case_name": "RegexUtils.txt"}