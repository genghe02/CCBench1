{"response body": {"id": "31f56390-dae3-4851-97bd-95fa96b5690e", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:47:12", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "class JobMarketplace:\n    # This class represents a job marketplace where job listings and resumes can be managed.\n\n    def __init__(self):\n        self.job_listings = []\n        self.resumes = []\n        \n    def post_job(self, job_title, company, requirements):\n        # Posts a job listing with the given job title, company, and requirements.\n        # param job_title: str, the title of the job\n        # param company: str, the company offering the job\n        # param requirements: list, the requirements for the job\n        # return: None\n        # Test Case: post_job(\"Software Developer\", \"ABC Inc.\", ['Python', 'Java'])\n        job = {\"job_title\": job_title, \"company\": company, \"requirements\": requirements}\n        self.job_listings.append(job)\n\n    def remove_job(self, job):\n        # Removes a job listing from the job marketplace.\n        # param job: dict, the job listing to be removed\n        # return: None\n        # Test Case: remove_job({\"job_title\": \"Software Developer\", \"company\": \"ABC Inc.\", \"requirements\": ['Python', 'Java']})\n        self.job_listings.remove(job)\n\n    def submit_resume(self, name, skills, experience):\n        # Submits a resume with the given name, skills, and experience.\n        # param name: str, the name of the applicant\n        # param skills: list, the skills of the applicant\n        # param experience: int, the years of experience of the applicant\n        # return: None\n        # Test Case: submit_resume(\"John Doe\", ['Python', 'Java'], 3)\n        resume = {\"name\": name, \"skills\": skills, \"experience\": experience}\n        self.resumes.append(resume)\n\n    def withdraw_resume(self, resume):\n        # Withdraws a previously submitted resume from the job marketplace.\n        # param resume: dict, the resume to be withdrawn\n        # return: None\n        # Test Case: withdraw_resume({\"name\": \"John Doe\", \"skills\": ['Python', 'Java'], \"experience\": 3})\n        self.resumes.remove(resume)\n\n    def search_jobs(self, criteria):\n        # Searches for jobs in the marketplace based on the given criteria.\n        # param criteria: str, the search criteria for job titles or requirements\n        # return: list, a list of job listings that match the criteria\n        # Test Case: search_jobs(\"Software\")\n        matching_jobs = []\n        for job_listing in self.job_listings:\n            if criteria.lower() in job_listing[\"job_title\"].lower() or criteria.lower() in [r.lower() for r in job_listing[\"requirements\"]]:\n                matching_jobs.append(job_listing)\n        return matching_jobs\n\n    def get_job_applicants(self, job):\n        # Retrieves applicants who match the requirements of a specific job listing.\n        # param job: dict, the job listing to match applicants against\n        # return: list, a list of resumes of applicants who match the job requirements\n        # Test Case: get_job_applicants({\"job_title\": \"Software Developer\", \"company\": \"ABC Inc.\", \"requirements\": ['Python', 'Java']})\n        applicants = []\n        for resume in self.resumes:\n            if self.matches_requirements(resume, job[\"requirements\"]):\n                applicants.append(resume)\n        return applicants\n\n    @staticmethod\n    def matches_requirements(resume, requirements):\n        # Checks if a resume's skills match the job requirements.\n        # param resume: dict, the resume to check\n        # param requirements: list, the requirements to match against\n        # return: bool, True if the resume matches the requirements, False otherwise\n        # Test Case: matches_requirements({\"name\": \"John Doe\", \"skills\": ['Python', 'Java'], \"experience\": 3}, ['Python', 'Java'])\n        for skill in resume[\"skills\"]:\n            if skill not in requirements:\n                return False\n        return True"}}], "usage": {"completion_tokens": 819, "prompt_tokens": 1068, "total_tokens": 1887}, "feeType": "1", "consume": 0.0128005017}, "test_case_name": "JobMarketplace.txt"}