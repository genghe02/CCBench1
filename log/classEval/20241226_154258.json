{"response body": {"id": "f6a74b89-37ae-4bce-92b8-1cabd0e0863b", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:43:02", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class represents a game of Gomoku (also known as Five in a Row), a strategy board game where players take turns placing symbols on a grid, aiming to get five of their symbols in a row.\n\"\"\"\n\nclass GomokuGame:\n    def __init__(self, board_size):\n        \"\"\"\n        Initializes a new game of Gomoku with an empty board and sets the current player to 'X'.\n        \n        Parameters:\n            board_size (int): The size of the game board. The board is a square grid, so this is both the number of rows and columns.\n        \"\"\"\n        self.board_size = board_size\n        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]\n        self.current_player = 'X'\n\n    def make_move(self, row, col):\n        \"\"\"\n        Makes a move by placing the current player's symbol at the specified cell. If the cell is already filled, the move is invalid and the method returns False.\n\n        Parameters:\n            row (int): The row index of the cell.\n            col (int): The column index of the cell.\n        \n        Returns:\n            bool: True if the move is valid and has been made, False otherwise.\n\n        Test cases:\n            # Test case 1: Making a valid move\n            game = GomokuGame(5)\n            assert game.make_move(0, 0) == True\n\n            # Test case 2: Making a move on an already filled cell\n            game = GomokuGame(5)\n            game.make_move(0, 0)\n            assert game.make_move(0, 0) == False\n\n            # Test case 3: Making a move outside the board\n            game = GomokuGame(5)\n            assert game.make_move(5, 5) == False\n        \"\"\"\n        if self.board[row][col] == ' ':\n            self.board[row][col] = self.current_player\n            self.current_player = 'O' if self.current_player == 'X' else 'X'\n            return True\n        return False\n\n    def check_winner(self):\n        \"\"\"\n        Checks if there's a winner in the current board state. A player is a winner if they have five of their symbols in a row in any direction.\n\n        Returns:\n            str or None: The symbol of the winning player if there's a winner, None otherwise.\n\n        Test cases:\n            # Test case 1: No winner yet\n            game = GomokuGame(5)\n            assert game.check_winner() == None\n\n            # Test case 2: Player 'X' is the winner\n            game = GomokuGame(5)\n            for i in range(5):\n                game.make_move(i, 0)\n            assert game.check_winner() == 'X'\n\n            # Test case 3: Player 'O' is the winner\n            game = GomokuGame(5)\n            for i in range(5):\n                game.make_move(0, i)\n                game.make_move(1, i)\n            assert game.check_winner() == 'O'\n        \"\"\"\n        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]\n        for row in range(self.board_size):\n            for col in range(self.board_size):\n                if self.board[row][col] != ' ':\n                    for direction in directions:\n                        if self._check_five_in_a_row(row, col, direction):\n                            return self.board[row][col]\n        return None\n\n    def _check_five_in_a_row(self, row, col, direction):\n        \"\"\"\n        Private helper method to check if there are five symbols in a row starting from the given cell.\n\n        Parameters:\n            row (int): The row index of the starting cell.\n            col (int): The column index of the starting cell.\n            direction (tuple): The direction to check in. This is a tuple of two integers representing the changes in the row and column indices respectively. For example, (1, 0) represents the down direction.\n        \n        Returns:\n            bool: True if there are five symbols in a row, False otherwise.\n\n        Test cases:\n            # Test case 1: Five 'X's in a row\n            game = GomokuGame(5)\n            for i in range(5):\n                game.make_move(i, 0)\n            assert game._check_five_in_a_row(0, 0, (1, 0)) == True\n\n            # Test case 2: Not enough symbols in a row\n            game = GomokuGame(5)\n            for i in range(4):\n                game.make_move(i, 0)\n            assert game._check_five_in_a_row(0, 0, (1, 0)) == False\n\n            # Test case 3: Five symbols in a row but not all are the same\n            game = GomokuGame(5)\n            for i in range(4):\n                game.make_move(i, 0)\n            game.make_move(4, 0)\n            assert game._check_five_in_a_row(0, 0, (1, 0)) == False\n        \"\"\"\n        dx, dy = direction\n        count = 1\n        symbol = self.board[row][col]\n        for i in range(1, 5):\n            new_row = row + dx * i\n            new_col = col + dy * i\n            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):\n                return False\n            if self.board[new_row][new_col] != symbol:\n                return False\n            count += 1\n        return count == 5\n"}}], "usage": {"completion_tokens": 1192, "prompt_tokens": 1392, "total_tokens": 2584}, "feeType": "1", "consume": 1.646336}, "test_case_name": "GomokuGame.txt"}