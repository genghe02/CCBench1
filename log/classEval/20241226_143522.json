{"response body": "{\n  \"id\": \"4c8982b0-bd4d-4a11-b688-f322adb44408\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents a Snake game entity, handling the snake's movement, food consumption, and game state management.\\n\\\"\\\"\\\"\\n\\nimport random\\n\\n\\nclass Snake:\\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\\n        \\\"\\\"\\\"\\n        Initializes the Snake object with the game screen dimensions, block size, and initial food position.\\n\\n        Parameters:\\n            SCREEN_WIDTH (int): The width of the game screen in pixels.\\n            SCREEN_HEIGHT (int): The height of the game screen in pixels.\\n            BLOCK_SIZE (int): The size of each block (snake segment and food) in pixels.\\n            food_position (tuple): The initial position of the food on the screen as a tuple (x, y).\\n\\n        Attributes:\\n            length (int): The current length of the snake.\\n            positions (list): A list of tuples representing the positions of the snake's segments.\\n            score (int): The current score of the game.\\n            food_position (tuple): The current position of the food on the screen.\\n        \\\"\\\"\\\"\\n        self.length = 1\\n        self.SCREEN_WIDTH = SCREEN_WIDTH\\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\\n        self.BLOCK_SIZE = BLOCK_SIZE\\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\\n        self.score = 0\\n        self.food_position = food_position\\n\\n    def move(self, direction):\\n        \\\"\\\"\\\"\\n        Moves the snake in the specified direction and updates its position.\\n\\n        Parameters:\\n            direction (tuple): A tuple (x, y) representing the direction of movement, where x and y are -1, 0, or 1.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Move right\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.move((1, 0))\\n            assert snake.positions[0] == (420, 300)\\n\\n            # Test case 2: Move down\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.move((0, 1))\\n            assert snake.positions[0] == (400, 320)\\n\\n            # Test case 3: Move left (edge case, wrapping around the screen)\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.move((-1, 0))\\n            assert snake.positions[0] == (380, 300)\\n        \\\"\\\"\\\"\\n        cur = self.positions[0]\\n        x, y = direction\\n\\n        new = (\\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\\n        )\\n\\n        if new == self.food_position:\\n            self.eat_food()\\n\\n        if len(self.positions) > 2 and new in self.positions[2:]:\\n            self.reset()\\n        else:\\n            self.positions.insert(0, new)\\n            if len(self.positions) > self.length:\\n                self.positions.pop()\\n\\n    def random_food_position(self):\\n        \\\"\\\"\\\"\\n        Randomly generates a new position for the food that is not occupied by the snake.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Food position is not on the snake\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.random_food_position()\\n            assert snake.food_position not in snake.positions\\n\\n            # Test case 2: Food position is within screen bounds\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.random_food_position()\\n            assert 0 <= snake.food_position[0] < 800 and 0 <= snake.food_position[1] < 600\\n\\n            # Test case 3: Food position is aligned with block size\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.random_food_position()\\n            assert snake.food_position[0] % 20 == 0 and snake.food_position[1] % 20 == 0\\n        \\\"\\\"\\\"\\n        while self.food_position in self.positions:\\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)\\n\\n    def reset(self):\\n        \\\"\\\"\\\"\\n        Resets the snake to its initial state, including length, position, and score.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Reset after collision\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.move((1, 0))\\n            snake.reset()\\n            assert snake.length == 1\\n            assert snake.positions == [(400, 300)]\\n            assert snake.score == 0\\n\\n            # Test case 2: Reset after eating food\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.eat_food()\\n            snake.reset()\\n            assert snake.length == 1\\n            assert snake.positions == [(400, 300)]\\n            assert snake.score == 0\\n\\n            # Test case 3: Reset without any movement\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.reset()\\n            assert snake.length == 1\\n            assert snake.positions == [(400, 300)]\\n            assert snake.score == 0\\n        \\\"\\\"\\\"\\n        self.length = 1\\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\\n        self.score = 0\\n        self.random_food_position()\\n\\n    def eat_food(self):\\n        \\\"\\\"\\\"\\n        Handles the snake eating the food, increasing its length and score, and generating a new food position.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Eating food increases length and score\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.eat_food()\\n            assert snake.length == 2\\n            assert snake.score == 100\\n\\n            # Test case 2: Eating food generates a new food position\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.eat_food()\\n            assert snake.food_position != (100, 100)\\n\\n            # Test case 3: Eating food does not place food on the snake\\n            snake = Snake(800, 600, 20, (100, 100))\\n            snake.eat_food()\\n            assert snake.food_position not in snake.positions\\n        \\\"\\\"\\\"\\n        self.length += 1\\n        self.score += 100\\n        self.random_food_position()\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194902,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1500,\n    \"prompt_tokens\": 1492,\n    \"total_tokens\": 2992,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 532\n  }\n}", "test_case_name": "Snake.txt"}