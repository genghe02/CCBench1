{"response body": "ChatCompletion(id='chatcmpl-AihSgU3PwGeb0g0nw7zKwUVfrCWOk', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class implements a discount strategy for a customer\\'s shopping cart based on different promotion schemes.\\n\\nThe DiscountStrategy class allows for the calculation of a discounted total price based on the items in the cart and the selected promotion.\\n\"\"\"\\n\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        \"\"\"\\n        Initialize the DiscountStrategy object with customer details, shopping cart items, and an optional promotion function.\\n\\n        Parameters:\\n            customer (dict): Customer information\\n            cart (list): List of items in the shopping cart\\n            promotion (function): Optional promotion function to calculate discounts\\n\\n        Test cases:\\n            # Test case 1: No promotion provided\\n            strategy = DiscountStrategy(customer={}, cart=[{\\'product\\': \\'item1\\', \\'quantity\\': 2, \\'price\\': 10}])\\n            assert strategy.__total == 20\\n\\n            # Test case 2: Promotion provided\\n            def dummy_promotion(order):\\n                return 5\\n            strategy = DiscountStrategy(customer={}, cart=[{\\'product\\': \\'item1\\', \\'quantity\\': 2, \\'price\\': 10}], promotion=dummy_promotion)\\n            assert strategy.__total == 20\\n\\n            # Test case 3: Empty cart\\n            strategy = DiscountStrategy(customer={}, cart=[])\\n            assert strategy.__total == 0\\n\\n        \"\"\"\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        \"\"\"\\n        Calculate the total price of all items in the shopping cart.\\n\\n        Returns:\\n            float: Total price of items in the cart\\n\\n        Test cases:\\n            # Test case 1: Positive values\\n            assert total() == 100\\n            \\n            # Test case 2: Zero total\\n            assert total() == 0\\n            \\n            # Test case 3: Negative values\\n            assert total() == -50\\n        \"\"\"\\n        self.__total = sum(item[\\'quantity\\'] * item[\\'price\\'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        \"\"\"\\n        Calculate the total amount due after applying any discounts based on the selected promotion.\\n\\n        Returns:\\n            float: Total amount due after applying discounts\\n\\n        Test cases:\\n            # Test case 1: No promotion\\n            strategy = DiscountStrategy(customer={}, cart=[{\\'product\\': \\'item1\\', \\'quantity\\': 2, \\'price\\': 10}])\\n            assert strategy.due() == 20\\n            \\n            # Test case 2: Applying promotion\\n            def dummy_promotion(order):\\n                return 5\\n            strategy = DiscountStrategy(customer={}, cart=[{\\'product\\': \\'item1\\', \\'quantity\\': 2, \\'price\\': 10}], promotion=dummy_promotion)\\n            assert strategy.due() == 15\\n            \\n            # Test case 3: Empty cart\\n            strategy = DiscountStrategy(customer={}, cart=[])\\n            assert strategy.due() == 0\\n        \"\"\"\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        \"\"\"\\n        Calculate the discount based on the customer\\'s fidelity level.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy object representing the order\\n\\n        Returns:\\n            float: Discount amount based on fidelity level\\n\\n        Test cases:\\n            # Test case 1: Low fidelity\\n            assert FidelityPromo(order) == 0\\n            \\n            # Test case 2: High fidelity\\n            assert FidelityPromo(order) == 10\\n            \\n            # Test case 3: Negative fidelity\\n            assert FidelityPromo(order) == 0\\n        \"\"\"\\n        return order.total() * 0.05 if order.customer.get(\\'fidelity\\', 0) >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        \"\"\"\\n        Calculate the discount based on bulk purchase of items.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy object representing the order\\n\\n        Returns:\\n            float: Discount amount based on bulk item purchase\\n\\n        Test cases:\\n            # Test case 1: No bulk discount\\n            assert BulkItemPromo(order) == 0\\n            \\n            # Test case 2: Bulk discount available\\n            assert BulkItemPromo(order) == 10\\n            \\n            # Test case 3: Negative quantity\\n            assert BulkItemPromo(order) == 0\\n        \"\"\"\\n        discount = 0\\n        for item in order.cart:\\n            if item[\\'quantity\\'] >= 20:\\n                discount += item[\\'quantity\\'] * item[\\'price\\'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        \"\"\"\\n        Calculate the discount based on the number of unique products in the order.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy object representing the order\\n\\n        Returns:\\n            float: Discount amount based on the size of the order\\n\\n        Test cases:\\n            # Test case 1: Small order\\n            assert LargeOrderPromo(order) == 0\\n            \\n            # Test case 2: Large order with discount\\n            assert LargeOrderPromo(order) == 15\\n            \\n            # Test case 3: Negative quantity\\n            assert LargeOrderPromo(order) == 0\\n        \"\"\"\\n        return order.total() * 0.07 if len({item[\\'product\\'] for item in order.cart}) >= 10 else 0\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735216862, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1135, prompt_tokens=1376, total_tokens=2511, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "DiscountStrategy.txt"}