{"response body": "{\n  \"id\": \"82b28af2-f461-4fee-af76-48438d2b1d37\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents a Fitness Tracker that calculates BMI, judges the user's physical condition, and estimates the daily calorie intake based on user's height, weight, age, and sex.\\n\\\"\\\"\\\"\\n\\nclass FitnessTracker:\\n    def __init__(self, height, weight, age, sex) -> None:\\n        \\\"\\\"\\\"\\n        Initializes the FitnessTracker with user's height, weight, age, and sex.\\n\\n        Parameters:\\n            height (float): The height of the user in meters.\\n            weight (float): The weight of the user in kilograms.\\n            age (int): The age of the user in years.\\n            sex (str): The sex of the user, either \\\"male\\\" or \\\"female\\\".\\n        \\\"\\\"\\\"\\n        self.height = height\\n        self.weight = weight\\n        self.age = age\\n        self.sex = sex\\n        self.BMI_std = [\\n            {\\\"male\\\": [20, 25]},\\n            {\\\"female\\\": [19, 24]}\\n        ]\\n\\n    def get_BMI(self):\\n        \\\"\\\"\\\"\\n        Calculates the Body Mass Index (BMI) of the user.\\n\\n        Returns:\\n            float: The calculated BMI value.\\n\\n        Test cases:\\n            # Test case 1: Normal BMI calculation\\n            tracker = FitnessTracker(1.75, 70, 25, \\\"male\\\")\\n            assert tracker.get_BMI() == 70 / (1.75 ** 2)\\n\\n            # Test case 2: Edge case with zero height (should raise ZeroDivisionError)\\n            tracker = FitnessTracker(0, 70, 25, \\\"male\\\")\\n            try:\\n                tracker.get_BMI()\\n            except ZeroDivisionError:\\n                pass\\n\\n            # Test case 3: Edge case with negative weight\\n            tracker = FitnessTracker(1.75, -70, 25, \\\"male\\\")\\n            assert tracker.get_BMI() < 0\\n        \\\"\\\"\\\"\\n        return self.weight / self.height ** 2\\n\\n    def condition_judge(self):\\n        \\\"\\\"\\\"\\n        Judges the user's physical condition based on BMI and sex.\\n\\n        Returns:\\n            int: \\n                -1 if the user is too thin,\\n                0 if the user is normal,\\n                1 if the user is too fat.\\n\\n        Test cases:\\n            # Test case 1: Normal BMI for male\\n            tracker = FitnessTracker(1.75, 70, 25, \\\"male\\\")\\n            assert tracker.condition_judge() == 0\\n\\n            # Test case 2: Too fat for female\\n            tracker = FitnessTracker(1.60, 80, 30, \\\"female\\\")\\n            assert tracker.condition_judge() == 1\\n\\n            # Test case 3: Too thin for male\\n            tracker = FitnessTracker(1.80, 50, 20, \\\"male\\\")\\n            assert tracker.condition_judge() == -1\\n        \\\"\\\"\\\"\\n        BMI = self.get_BMI()\\n        if self.sex == \\\"male\\\":\\n            BMI_range = self.BMI_std[0][\\\"male\\\"]\\n        else:\\n            BMI_range = self.BMI_std[1][\\\"female\\\"]\\n        if BMI > BMI_range[1]:\\n            # too fat\\n            return 1\\n        elif BMI < BMI_range[0]:\\n            # too thin\\n            return -1\\n        else:\\n            # normal\\n            return 0\\n\\n    def calculate_calorie_intake(self):\\n        \\\"\\\"\\\"\\n        Calculates the daily calorie intake based on user's BMR and physical condition.\\n\\n        Returns:\\n            float: The estimated daily calorie intake in calories.\\n\\n        Test cases:\\n            # Test case 1: Sedentary lifestyle for male\\n            tracker = FitnessTracker(1.75, 90, 25, \\\"male\\\")\\n            assert tracker.calculate_calorie_intake() == (10 * 90 + 6.25 * 175 - 5 * 25 + 5) * 1.2\\n\\n            # Test case 2: Active lifestyle for female\\n            tracker = FitnessTracker(1.60, 50, 30, \\\"female\\\")\\n            assert tracker.calculate_calorie_intake() == (10 * 50 + 6.25 * 160 - 5 * 30 - 161) * 1.6\\n\\n            # Test case 3: Moderate lifestyle for male\\n            tracker = FitnessTracker(1.80, 70, 20, \\\"male\\\")\\n            assert tracker.calculate_calorie_intake() == (10 * 70 + 6.25 * 180 - 5 * 20 + 5) * 1.4\\n        \\\"\\\"\\\"\\n        if self.sex == \\\"male\\\":\\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\\n        else:\\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\\n        if self.condition_judge() == 1:\\n            calorie_intake = BMR * 1.2  # Sedentary lifestyle\\n        elif self.condition_judge() == -1:\\n            calorie_intake = BMR * 1.6  # Active lifestyle\\n        else:\\n            calorie_intake = BMR * 1.4  # Moderate lifestyle\\n        return calorie_intake\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194170,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1115,\n    \"prompt_tokens\": 1416,\n    \"total_tokens\": 2531,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 456\n  }\n}", "test_case_name": "FitnessTracker.txt"}