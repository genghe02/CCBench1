{"response body": "ChatCompletion(id='chatcmpl-AiOJX3DmPf7oMGZdmEN6J7WkOyrDa', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class provides methods to generate SQL queries for different operations on a specified table.\\n\"\"\"\\n\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        \"\"\"\\n        Initialize the SQLGenerator object with the specified table name.\\n\\n        Parameters:\\n            table_name (str): The name of the table to operate on.\\n        \"\"\"\\n\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        \"\"\"\\n        Generate a SELECT SQL query based on the specified fields and condition.\\n\\n        Parameters:\\n            fields (list): List of field names to retrieve. If None, retrieves all fields.\\n            condition (str): The conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Retrieve all fields\\n            assert select() == \"SELECT * FROM table_name;\"\\n\\n            # Test case 2: Retrieve specific fields with condition\\n            assert select([\\'name\\', \\'age\\'], \\'gender = \"female\"\\') == \"SELECT name, age FROM table_name WHERE gender = female;\"\\n\\n            # Test case 3: No condition specified\\n            assert select([\\'id\\', \\'name\\']) == \"SELECT id, name FROM table_name;\"\\n        \"\"\"\\n        \\n        if fields is None:\\n            fields = \"*\"\\n        else:\\n            fields = \", \".join(fields)\\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\\n        if condition is not None:\\n            sql += f\" WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def insert(self, data):\\n        \"\"\"\\n        Generate an INSERT SQL query based on the data to be inserted.\\n\\n        Parameters:\\n            data (dict): A dictionary where keys represent column names and values the data to be inserted.\\n\\n        Returns:\\n            str: The generated INSERT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Insert single record\\n            assert insert({\\'name\\': \\'Alice\\', \\'age\\': 25}) == \"INSERT INTO table_name (name, age) VALUES (\\'Alice\\', \\'25\\');\"\\n\\n            # Test case 2: Insert multiple records\\n            assert insert({\\'name\\': \\'Bob\\', \\'age\\': 30, \\'gender\\': \\'male\\'}) == \"INSERT INTO table_name (name, age, gender) VALUES (\\'Bob\\', \\'30\\', \\'male\\');\"\\n\\n            # Test case 3: Insert empty data\\n            assert insert({}) == \"INSERT INTO table_name () VALUES ();\"\\n        \"\"\"\\n\\n        fields = \", \".join(data.keys())\\n        values = \", \".join([f\"\\'{value}\\'\" for value in data.values()])\\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\\n        return sql + \";\"\\n\\n    def update(self, data, condition):\\n        \"\"\"\\n        Generate an UPDATE SQL query based on the data to update and the condition.\\n\\n        Parameters:\\n            data (dict): A dictionary where keys represent column names and values the new data.\\n            condition (str): The conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The generated UPDATE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Update single field\\n            assert update({\\'age\\': 26}, \\'name = \"Alice\"\\') == \"UPDATE table_name SET age = \\'26\\' WHERE name = \\'Alice\\';\"\\n\\n            # Test case 2: Update multiple fields\\n            assert update({\\'age\\': 31, \\'gender\\': \\'female\\'}, \\'name = \"Alice\"\\') == \"UPDATE table_name SET age = \\'31\\', gender = \\'female\\' WHERE name = \\'Alice\\';\"\\n\\n            # Test case 3: Condition not provided\\n            assert update({\\'age\\': 40}, \\'\\') == \"UPDATE table_name SET age = \\'40\\' WHERE ;\"\\n        \"\"\"\\n\\n        set_clause = \", \".join([f\"{field} = \\'{value}\\'\" for field, value in data.items()])\\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def delete(self, condition):\\n        \"\"\"\\n        Generate a DELETE SQL query based on the specified condition.\\n\\n        Parameters:\\n            condition (str): The conditional expression for the WHERE clause.\\n\\n        Returns:\\n            str: The generated DELETE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Delete based on condition\\n            assert delete(\\'age > 30\\') == \"DELETE FROM table_name WHERE age > 30;\"\\n\\n            # Test case 2: Delete all records\\n            assert delete(\\'\\') == \"DELETE FROM table_name WHERE ;\"\\n\\n            # Test case 3: Delete with complex condition\\n            assert delete(\\'gender = \"female\" AND age > 25\\') == \"DELETE FROM table_name WHERE gender = \\'female\\' AND age > 25;\"\\n        \"\"\"\\n\\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def select_female_under_age(self, age):\\n        \"\"\"\\n        Generate a SELECT SQL query to retrieve females under a specific age.\\n\\n        Parameters:\\n            age (int): The maximum age threshold.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Get females under age 25\\n            assert select_female_under_age(25) == \"SELECT * FROM table_name WHERE age < 25 AND gender = \\'female\\';\"\\n\\n            # Test case 2: Get females under age 18\\n            assert select_female_under_age(18) == \"SELECT * FROM table_name WHERE age < 18 AND gender = \\'female\\';\"\\n\\n            # Test case 3: Edge case, age = 0\\n            assert select_female_under_age(0) == \"SELECT * FROM table_name WHERE age < 0 AND gender = \\'female\\';\"\\n        \"\"\"\\n\\n        condition = f\"age < {age} AND gender = \\'female\\'\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        \"\"\"\\n        Generate a SELECT SQL query to retrieve records within a specified age range.\\n\\n        Parameters:\\n            min_age (int): The minimum age threshold.\\n            max_age (int): The maximum age threshold.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Get records between ages 20 and 30\\n            assert select_by_age_range(20, 30) == \"SELECT * FROM table_name WHERE age BETWEEN 20 AND 30;\"\\n\\n            # Test case 2: Get records between ages 10 and 15\\n            assert select_by_age_range(10, 15) == \"SELECT * FROM table_name WHERE age BETWEEN 10 AND 15;\"\\n\\n            # Test case 3: Get records within same age range, min = max\\n            assert select_by_age_range(30, 30) == \"SELECT * FROM table_name WHERE age BETWEEN 30 AND 30;\"\\n        \"\"\"\\n\\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\\n        return self.select(condition=condition)\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735143259, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1449, prompt_tokens=1473, total_tokens=2922, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLGenerator.txt"}