{"response body": "{\n  \"id\": \"408932e9-0107-469a-acb9-62b64dbe47aa\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class provides functionality to convert amounts between different currencies using predefined exchange rates.\\nclass CurrencyConverter:\\n    def __init__(self):\\n        # Initialize the class with a dictionary of predefined currency exchange rates.\\n        self.rates = {\\n            'USD': 1.0,\\n            'EUR': 0.85,\\n            'GBP': 0.72,\\n            'JPY': 110.15,\\n            'CAD': 1.23,\\n            'AUD': 1.34,\\n            'CNY': 6.40,\\n        }\\n\\n    def convert(self, amount, from_currency, to_currency):\\n        # Convert an amount from one currency to another using the predefined exchange rates.\\n        # param amount: float, the amount to be converted\\n        # param from_currency: str, the currency code of the amount to be converted\\n        # param to_currency: str, the currency code to convert the amount to\\n        # return: float or bool, the converted amount if conversion is successful, False otherwise\\n        # >>> converter = CurrencyConverter()\\n        # >>> converter.convert(100, 'USD', 'EUR')\\n        # 85.0\\n        # >>> converter.convert(100, 'USD', 'USD')\\n        # 100.0\\n        # >>> converter.convert(100, 'USD', 'XYZ')\\n        # False\\n        if from_currency == to_currency:\\n            return amount\\n\\n        if from_currency not in self.rates or to_currency not in self.rates:\\n            return False\\n\\n        from_rate = self.rates[from_currency]\\n        to_rate = self.rates[to_currency]\\n\\n        converted_amount = (amount / from_rate) * to_rate\\n        return converted_amount\\n\\n    def get_supported_currencies(self):\\n        # Retrieve a list of all supported currencies.\\n        # return: list, a list of currency codes that are supported by the converter\\n        # >>> converter = CurrencyConverter()\\n        # >>> converter.get_supported_currencies()\\n        # ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']\\n        return list(self.rates.keys())\\n\\n    def add_currency_rate(self, currency, rate):\\n        # Add a new currency with its exchange rate to the converter.\\n        # param currency: str, the currency code to be added\\n        # param rate: float, the exchange rate of the new currency relative to USD\\n        # return: bool, True if the currency was added successfully, False if it already exists\\n        # >>> converter = CurrencyConverter()\\n        # >>> converter.add_currency_rate('XYZ', 0.5)\\n        # True\\n        # >>> converter.add_currency_rate('USD', 1.0)\\n        # False\\n        if currency in self.rates:\\n            return False\\n        self.rates[currency] = rate\\n\\n    def update_currency_rate(self, currency, new_rate):\\n        # Update the exchange rate of an existing currency.\\n        # param currency: str, the currency code to be updated\\n        # param new_rate: float, the new exchange rate of the currency relative to USD\\n        # return: bool, True if the currency rate was updated successfully, False if the currency does not exist\\n        # >>> converter = CurrencyConverter()\\n        # >>> converter.update_currency_rate('USD', 1.0)\\n        # True\\n        # >>> converter.update_currency_rate('XYZ', 0.5)\\n        # False\\n        if currency not in self.rates:\\n            return False\\n        self.rates[currency] = new_rate\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080182,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 853,\n    \"prompt_tokens\": 1063,\n    \"total_tokens\": 1916,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 487\n  }\n}", "test_case_name": "CurrencyConverter.txt"}