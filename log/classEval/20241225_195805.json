{"response body": "ChatCompletion(id='chatcmpl-AiKJIo6eEFFWqMe4dfQqQ5uDHSRr1', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nSQLGenerator Class\\n\\nThis class provides methods for generating SQL queries for a specified table.\\nIt supports the creation of SELECT, INSERT, UPDATE, and DELETE statements\\nalong with specialized queries such as selecting females under a specified age\\nand selecting records by age range.\\n\\nMain functionality includes:\\n- Building SQL query strings for different operations.\\n- Supporting optional SQL conditions to customize queries.\\n\\nDependencies:\\n- No external dependencies are required.\\n\"\"\"\\n\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        \"\"\"\\n        Initializes the SQLGenerator with a specified table name.\\n\\n        Parameters:\\n            table_name (str): The name of the table to generate queries for.\\n        \"\"\"\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        \"\"\"\\n        Generates a SELECT SQL query for the specified fields and conditions.\\n\\n        Parameters:\\n            fields (list, optional): A list of fields to select. If None, all fields are selected.\\n            condition (str, optional): A condition for the WHERE clause of the query.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Select all fields\\n            input = generator.select()\\n            expected_output = \"SELECT * FROM table_name;\"\\n\\n            # Test case 2: Select specific fields with condition\\n            input = generator.select(fields=[\\'name\\', \\'age\\'], condition=\"age > 20\")\\n            expected_output = \"SELECT name, age FROM table_name WHERE age > 20;\"\\n\\n            # Test case 3: Select with no condition\\n            input = generator.select(fields=[\\'name\\'])\\n            expected_output = \"SELECT name FROM table_name;\"\\n        \"\"\"\\n        if fields is None:\\n            fields = \"*\"\\n        else:\\n            fields = \", \".join(fields)\\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\\n        if condition is not None:\\n            sql += f\" WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def insert(self, data):\\n        \"\"\"\\n        Generates an INSERT SQL query for the specified data.\\n\\n        Parameters:\\n            data (dict): A dictionary containing field-value pairs to insert.\\n\\n        Returns:\\n            str: The generated INSERT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Insert single record\\n            input = generator.insert({\\'name\\': \\'John\\', \\'age\\': 30})\\n            expected_output = \"INSERT INTO table_name (name, age) VALUES (\\'John\\', \\'30\\');\"\\n\\n            # Test case 2: Insert with different data types\\n            input = generator.insert({\\'name\\': \\'Alice\\', \\'age\\': 25, \\'country\\': \\'USA\\'})\\n            expected_output = \"INSERT INTO table_name (name, age, country) VALUES (\\'Alice\\', \\'25\\', \\'USA\\');\"\\n\\n            # Test case 3: Insert empty data\\n            input = generator.insert({})\\n            expected_output = \"INSERT INTO table_name () VALUES ();\"\\n        \"\"\"\\n        fields = \", \".join(data.keys())\\n        values = \", \".join([f\"\\'{value}\\'\" for value in data.values()])\\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\\n        return sql + \";\"\\n\\n    def update(self, data, condition):\\n        \"\"\"\\n        Generates an UPDATE SQL query for the specified data and condition.\\n\\n        Parameters:\\n            data (dict): A dictionary containing field-value pairs to update.\\n            condition (str): A condition for the WHERE clause of the query.\\n\\n        Returns:\\n            str: The generated UPDATE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Update specific fields\\n            input = generator.update({\\'age\\': 31}, \"name = \\'John\\'\")\\n            expected_output = \"UPDATE table_name SET age = \\'31\\' WHERE name = \\'John\\';\"\\n\\n            # Test case 2: Update multiple fields\\n            input = generator.update({\\'age\\': 28, \\'country\\': \\'Canada\\'}, \"name = \\'Alice\\'\")\\n            expected_output = \"UPDATE table_name SET age = \\'28\\', country = \\'Canada\\' WHERE name = \\'Alice\\';\"\\n\\n            # Test case 3: Update with no condition (error case)\\n            input = generator.update({\\'age\\': 30}, \"\")\\n            expected_output = \"UPDATE table_name SET age = \\'30\\' WHERE ;\"\\n        \"\"\"\\n        set_clause = \", \".join([f\"{field} = \\'{value}\\'\" for field, value in data.items()])\\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def delete(self, condition):\\n        \"\"\"\\n        Generates a DELETE SQL query for the specified condition.\\n\\n        Parameters:\\n            condition (str): A condition for the WHERE clause of the query.\\n\\n        Returns:\\n            str: The generated DELETE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Delete with condition\\n            input = generator.delete(\"age < 18\")\\n            expected_output = \"DELETE FROM table_name WHERE age < 18;\"\\n\\n            # Test case 2: Delete with specific name\\n            input = generator.delete(\"name = \\'John\\'\")\\n            expected_output = \"DELETE FROM table_name WHERE name = \\'John\\';\"\\n\\n            # Test case 3: Delete with no condition (invalid case)\\n            input = generator.delete(\"\")\\n            expected_output = \"DELETE FROM table_name WHERE ;\"\\n        \"\"\"\\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def select_female_under_age(self, age):\\n        \"\"\"\\n        Selects all female records under a specified age.\\n\\n        Parameters:\\n            age (int): The age limit to filter the female records.\\n\\n        Returns:\\n            str: The generated SELECT SQL query for females under the specified age.\\n\\n        Test cases:\\n            # Test case 1: Select females under 30\\n            input = generator.select_female_under_age(30)\\n            expected_output = \"SELECT * FROM table_name WHERE age < 30 AND gender = \\'female\\';\"\\n\\n            # Test case 2: Select females under 18\\n            input = generator.select_female_under_age(18)\\n            expected_output = \"SELECT * FROM table_name WHERE age < 18 AND gender = \\'female\\';\"\\n\\n            # Test case 3: Select females with negative age (error case)\\n            input = generator.select_female_under_age(-5)\\n            expected_output = \"SELECT * FROM table_name WHERE age < -5 AND gender = \\'female\\';\"\\n        \"\"\"\\n        condition = f\"age < {age} AND gender = \\'female\\'\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        \"\"\"\\n        Selects records within a specified age range.\\n\\n        Parameters:\\n            min_age (int): The minimum age for filtering records.\\n            max_age (int): The maximum age for filtering records.\\n\\n        Returns:\\n            str: The generated SELECT SQL query for records within the specified age range.\\n\\n        Test cases:\\n            # Test case 1: Select age range 20 to 30\\n            input = generator.select_by_age_range(20, 30)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 20 AND 30;\"\\n\\n            # Test case 2: Select age range 15 to 25\\n            input = generator.select_by_age_range(15, 25)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 15 AND 25;\"\\n\\n            # Test case 3: Select with invalid range (error case)\\n            input = generator.select_by_age_range(30, 20)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 30 AND 20;\"\\n        \"\"\"\\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\\n        return self.select(condition=condition)\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735127868, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1606, prompt_tokens=1754, total_tokens=3360, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLGenerator.txt"}