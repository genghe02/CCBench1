{"response body": {"id": "960e6820-cb77-40fe-b0b0-a12e37ea1ed2", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:48:28", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class is designed to build SQL queries for various operations such as SELECT, INSERT, DELETE, and UPDATE.\nclass SQLQueryBuilder:\n\n    @staticmethod\n    # This function is used to create a SELECT query string for a specified table and columns. It also supports WHERE conditions.\n    # Params:\n    # table: string, name of the table to select from\n    # columns: string or list of strings, names of the columns to select. Defaults to '*'\n    # where: dict, conditions for the WHERE clause. Defaults to None\n    # Returns: string, a SQL SELECT query string\n    # Examples:\n    # >>> SQLQueryBuilder.select('users', ['name', 'email'], {'age': 18})\n    # \"SELECT name, email FROM users WHERE age='18'\"\n    def select(table, columns='*', where=None):\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    # This function is used to create an INSERT query string for a specified table and data.\n    # Params:\n    # table: string, name of the table to insert into\n    # data: dict, data to insert (key: column name, value: data)\n    # Returns: string, a SQL INSERT query string\n    # Examples:\n    # >>> SQLQueryBuilder.insert('users', {'name': 'John', 'email': 'john@doe.com'})\n    # \"INSERT INTO users (name, email) VALUES ('John', 'john@doe.com')\"\n    def insert(table, data):\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\n\n    @staticmethod\n    # This function is used to create a DELETE query string for a specified table. It also supports WHERE conditions.\n    # Params:\n    # table: string, name of the table to delete from\n    # where: dict, conditions for the WHERE clause. Defaults to None\n    # Returns: string, a SQL DELETE query string\n    # Examples:\n    # >>> SQLQueryBuilder.delete('users', {'name': 'John'})\n    # \"DELETE FROM users WHERE name='John'\"\n    def delete(table, where=None):\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    # This function is used to create an UPDATE query string for a specified table and data. It also supports WHERE conditions.\n    # Params:\n    # table: string, name of the table to update\n    # data: dict, data to update (key: column name, value: new data)\n    # where: dict, conditions for the WHERE clause. Defaults to None\n    # Returns: string, a SQL UPDATE query string\n    # Examples:\n    # >>> SQLQueryBuilder.update('users', {'email': 'john@new.com'}, {'name': 'John'})\n    # \"UPDATE users SET email='john@new.com' WHERE name='John'\"\n    def update(table, data, where=None):\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n```"}}], "usage": {"completion_tokens": 791, "prompt_tokens": 960, "total_tokens": 1751}, "feeType": "1", "consume": 1.108312}, "test_case_name": "SQLQueryBuilder.txt"}