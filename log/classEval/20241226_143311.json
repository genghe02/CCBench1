{"response body": "{\n  \"id\": \"92a203c4-8f0d-42f1-bd7f-3177937f2247\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class implements a simple Push Box game where the player moves around a map to push boxes onto target locations.\\nThe game is over when all boxes are on their respective targets.\\n\\\"\\\"\\\"\\n\\nclass PushBoxGame:\\n    def __init__(self, map):\\n        \\\"\\\"\\\"\\n        Initializes the PushBoxGame with the given map.\\n\\n        Parameters:\\n            map (list of list of str): A 2D list representing the game map. \\n                                      'O' represents the player, 'X' represents boxes, \\n                                      'G' represents targets, and '#' represents walls.\\n        \\n        Test cases:\\n            # Test case 1: Simple map with player, box, and target\\n            map = [\\n                ['O', '.', 'X'],\\n                ['.', '.', 'G']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.player_row == 0 and game.player_col == 0\\n            assert game.boxes == [(0, 2)]\\n            assert game.targets == [(1, 2)]\\n            \\n            # Test case 2: Map with multiple boxes and targets\\n            map = [\\n                ['O', '.', 'X'],\\n                ['.', 'X', 'G'],\\n                ['G', '.', '.']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.boxes == [(0, 2), (1, 1)]\\n            assert game.targets == [(1, 2), (2, 0)]\\n            \\n            # Test case 3: Map with no boxes or targets\\n            map = [\\n                ['O', '.', '.'],\\n                ['.', '.', '.']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.boxes == []\\n            assert game.targets == []\\n        \\\"\\\"\\\"\\n        self.map = map\\n        self.player_row = 0\\n        self.player_col = 0\\n        self.targets = []\\n        self.boxes = []\\n        self.target_count = 0\\n        self.is_game_over = False\\n\\n        self.init_game()\\n\\n    def init_game(self):\\n        \\\"\\\"\\\"\\n        Initializes the game state by scanning the map to locate the player, boxes, and targets.\\n        \\n        Test cases:\\n            # Test case 1: Player, box, and target are correctly identified\\n            map = [\\n                ['O', '.', 'X'],\\n                ['.', '.', 'G']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.player_row == 0 and game.player_col == 0\\n            assert game.boxes == [(0, 2)]\\n            assert game.targets == [(1, 2)]\\n            \\n            # Test case 2: Multiple boxes and targets are correctly identified\\n            map = [\\n                ['O', '.', 'X'],\\n                ['.', 'X', 'G'],\\n                ['G', '.', '.']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.boxes == [(0, 2), (1, 1)]\\n            assert game.targets == [(1, 2), (2, 0)]\\n            \\n            # Test case 3: No boxes or targets on the map\\n            map = [\\n                ['O', '.', '.'],\\n                ['.', '.', '.']\\n            ]\\n            game = PushBoxGame(map)\\n            assert game.boxes == []\\n            assert game.targets == []\\n        \\\"\\\"\\\"\\n        for row in range(len(self.map)):\\n            for col in range(len(self.map[row])):\\n                if self.map[row][col] == \\\"O\\\":\\n                    self.player_row = row\\n                    self.player_col = col\\n                elif self.map[row][col] == \\\"G\\\":\\n                    self.targets.append((row, col))\\n                    self.target_count += 1\\n                elif self.map[row][col] == \\\"X\\\":\\n                    self.boxes.append((row, col))\\n\\n    def check_win(self):\\n        \\\"\\\"\\\"\\n        Checks if all boxes are on their respective targets, indicating a win.\\n\\n        Returns:\\n            bool: True if all boxes are on targets, False otherwise.\\n        \\n        Test cases:\\n            # Test case 1: All boxes on targets\\n            game = PushBoxGame([\\n                ['O', '.', 'X'],\\n                ['.', '.', 'G']\\n            ])\\n            game.boxes = [(1, 2)]\\n            assert game.check_win() == True\\n            \\n            # Test case 2: Not all boxes on targets\\n            game = PushBoxGame([\\n                ['O', '.', 'X'],\\n                ['.', '.', 'G']\\n            ])\\n            game.boxes = [(0, 2)]\\n            assert game.check_win() == False\\n            \\n            # Test case 3: No boxes on targets\\n            game = PushBoxGame([\\n                ['O', '.', '.'],\\n                ['.', '.', '.']\\n            ])\\n            assert game.check_win() == False\\n        \\\"\\\"\\\"\\n        box_on_target_count = 0\\n        for box in self.boxes:\\n            if box in self.targets:\\n                box_on_target_count += 1\\n        if box_on_target_count == self.target_count:\\n            self.is_game_over = True\\n        return self.is_game_over\\n\\n    def move(self, direction):\\n        \\\"\\\"\\\"\\n        Moves the player in the specified direction and updates the game state.\\n\\n        Parameters:\\n            direction (str): The direction to move the player. \\n                             Valid values are 'w' (up), 's' (down), 'a' (left), 'd' (right).\\n        \\n        Returns:\\n            bool: True if the game is won after the move, False otherwise.\\n        \\n        Test cases:\\n            # Test case 1: Move player to an empty space\\n            game = PushBoxGame([\\n                ['O', '.', '.'],\\n                ['.', '.', '.']\\n            ])\\n            assert game.move('d') == False\\n            assert game.player_row == 0 and game.player_col == 1\\n            \\n            # Test case 2: Move player to push a box onto a target\\n            game = PushBoxGame([\\n                ['O', '.', 'X'],\\n                ['.', '.', 'G']\\n            ])\\n            assert game.move('d') == True\\n            assert game.player_row == 0 and game.player_col == 1\\n            assert game.boxes == [(0, 3)]\\n            \\n            # Test case 3: Move player into a wall\\n            game = PushBoxGame([\\n                ['O', '#', '.'],\\n                ['.', '.', '.']\\n            ])\\n            assert game.move('d') == False\\n            assert game.player_row == 0 and game.player_col == 0\\n        \\\"\\\"\\\"\\n        new_player_row = self.player_row\\n        new_player_col = self.player_col\\n\\n        if direction == \\\"w\\\":\\n            new_player_row -= 1\\n        elif direction == \\\"s\\\":\\n            new_player_row += 1\\n        elif direction == \\\"a\\\":\\n            new_player_col -= 1\\n        elif direction == \\\"d\\\":\\n            new_player_col += 1\\n\\n        if self.map[new_player_row][new_player_col] != \\\"#\\\":\\n            if (new_player_row, new_player_col) in self.boxes:\\n                new_box_row = new_player_row + (new_player_row - self.player_row)\\n                new_box_col = new_player_col + (new_player_col - self.player_col)\\n\\n                if self.map[new_box_row][new_box_col] != \\\"#\\\":\\n                    self.boxes.remove((new_player_row, new_player_col))\\n                    self.boxes.append((new_box_row, new_box_col))\\n                    self.player_row = new_player_row\\n                    self.player_col = new_player_col\\n            else:\\n                self.player_row = new_player_row\\n                self.player_col = new_player_col\\n\\n        return self.check_win()\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194770,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1622,\n    \"prompt_tokens\": 1549,\n    \"total_tokens\": 3171,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 589\n  }\n}", "test_case_name": "PushBoxGame.txt"}