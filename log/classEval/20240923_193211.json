{"response body": {"id": "ebc092e8-b933-4b14-aeb7-fbe7b6069d6a", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:32:10", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom datetime import datetime\n\n# This class represents an email client with address, capacity and an inbox\nclass EmailClient:\n    # This function initializes an EmailClient object with address, capacity and an empty inbox\n    # addr: string, the email address of the client\n    # capacity: int, the maximum size of the inbox\n    def __init__(self, addr, capacity) -> None:\n        self.addr = addr\n        self.capacity = capacity\n        self.inbox = []\n    \n    # This function sends an email to the receiver if the receiver's inbox has enough space. If not, it clears the sender's inbox\n    # recv: EmailClient, the receiver of the email\n    # content: string, the content of the email\n    # size: int, the size of the email\n    # Returns True if the email was sent successfully, False otherwise\n    # Test cases:\n    # >>> emailClient1 = EmailClient('a@a.com', 10)\n    # >>> emailClient2 = EmailClient('b@b.com', 5)\n    # >>> emailClient1.send_to(emailClient2, 'Hello', 3) -> True\n    # >>> emailClient1.send_to(emailClient2, 'Hello', 3) -> False\n    def send_to(self, recv, content, size):\n        if not recv.is_full_with_one_more_email(size):\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            email = {\n                \"sender\": self.addr,\n                \"receiver\": recv.addr,\n                \"content\": content,\n                \"size\": size,\n                \"time\": timestamp,\n                \"state\": \"unread\"\n            }\n            recv.inbox.append(email)\n            return True\n        else:\n            self.clear_inbox(size)\n            return False\n    \n    # This function fetches the first unread email in the inbox\n    # Returns the first unread email if it exists, None otherwise\n    # Test cases:\n    # >>> emailClient1 = EmailClient('a@a.com', 10)\n    # >>> emailClient1.fetch() -> None\n    # >>> emailClient2 = EmailClient('b@b.com', 5)\n    # >>> emailClient2.send_to(emailClient1, 'Hello', 3)\n    # >>> emailClient1.fetch() -> {'sender': 'b@b.com', 'receiver': 'a@a.com', 'content': 'Hello', 'size': 3, 'time': '2022-02-12 10:10:10', 'state': 'read'}\n    def fetch(self):\n        if len(self.inbox) == 0:\n            return None\n        for i in range(len(self.inbox)):\n            if self.inbox[i]['state'] == \"unread\":\n                self.inbox[i]['state'] = \"read\"\n                return self.inbox[i]\n        return None\n\n    # This function checks if the inbox will be full with one more email of a certain size\n    # size: int, the size of the email to be sent\n    # Returns True if the inbox will be full, False otherwise\n    # Test cases:\n    # >>> emailClient1 = EmailClient('a@a.com', 10)\n    # >>> emailClient1.is_full_with_one_more_email(5) -> False\n    # >>> emailClient1.send_to(emailClient1, 'Hello', 6)\n    # >>> emailClient1.is_full_with_one_more_email(5) -> True\n    def is_full_with_one_more_email(self, size):\n        occupied_size = self.get_occupied_size()\n        return True if occupied_size + size > self.capacity else False\n        \n    # This function calculates the occupied size of the inbox\n    # Returns the occupied size\n    # Test cases:\n    # >>> emailClient1 = EmailClient('a@a.com', 10)\n    # >>> emailClient1.get_occupied_size() -> 0\n    # >>> emailClient1.send_to(emailClient1, 'Hello', 6)\n    # >>> emailClient1.get_occupied_size() -> 6\n    def get_occupied_size(self):\n        occupied_size = 0\n        for email in self.inbox:\n            occupied_size += email[\"size\"]\n        return occupied_size\n\n    # This function clears the inbox by removing emails from oldest to newest until the the freed space is larger than or equal to the input size\n    # size: int, the size of the space to be freed\n    # Test cases:\n    # >>> emailClient1 = EmailClient('a@a.com', 10)\n    # >>> emailClient1.send_to(emailClient1, 'Hello', 6)\n    # >>> emailClient1.clear_inbox(6)\n    # >>> emailClient1.get_occupied_size() -> 0\n    def clear_inbox(self, size):\n        if len(self.addr) == 0:\n            return\n        freed_space = 0\n        while freed_space < size and self.inbox:\n            email = self.inbox[0]\n            freed_space += email['size']\n            del self.inbox[0]\n```"}}], "usage": {"completion_tokens": 1067, "prompt_tokens": 1063, "total_tokens": 2130}, "feeType": "1", "consume": 1.393892}, "test_case_name": "EmailClient.txt"}