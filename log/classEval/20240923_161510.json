{"response body": "{\n  \"id\": \"9a2c978e-fe95-4fbe-a6f1-36aca97ed577\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class manages student registration and class enrollment in a system.\\nclass ClassRegistrationSystem:\\n\\n    def __init__(self):\\n        # Initialize the system with empty lists for students and their registered classes.\\n        self.students = []\\n        self.students_registration_classes = {}\\n\\n    def register_student(self, student):\\n        # Register a new student if not already registered.\\n        if student in self.students:\\n            return 0  # Student is already registered.\\n        else:\\n            self.students.append(student)\\n            return 1  # Student successfully registered.\\n\\n    def register_class(self, student_name, class_name):\\n        # Register a class for a student.\\n        # param student_name: str, the name of the student to register the class for.\\n        # param class_name: str, the name of the class to be registered.\\n        # return: list, the list of classes the student is registered for.\\n        # >>> system = ClassRegistrationSystem()\\n        # >>> system.register_class('Alice', 'Math')\\n        # ['Math']\\n        # >>> system.register_class('Alice', 'Science')\\n        # ['Math', 'Science']\\n        if student_name in self.students_registration_classes:\\n            self.students_registration_classes[student_name].append(class_name)\\n        else:\\n            self.students_registration_classes[student_name] = [class_name]\\n        return self.students_registration_classes[student_name]\\n\\n    def get_students_by_major(self, major):\\n        # Get a list of students by their major.\\n        # param major: str, the major to filter students by.\\n        # return: list, a list of student names in the specified major.\\n        # >>> system = ClassRegistrationSystem()\\n        # >>> system.students = [{'name': 'Alice', 'major': 'Math'}, {'name': 'Bob', 'major': 'Science'}]\\n        # >>> system.get_students_by_major('Math')\\n        # ['Alice']\\n        student_list = []\\n        for student in self.students:\\n            if student[\\\"major\\\"] == major:\\n                student_list.append(student[\\\"name\\\"])\\n        return student_list\\n\\n    def get_all_major(self):\\n        # Get a list of all unique majors among registered students.\\n        # return: list, a list of all unique majors.\\n        # >>> system = ClassRegistrationSystem()\\n        # >>> system.students = [{'name': 'Alice', 'major': 'Math'}, {'name': 'Bob', 'major': 'Science'}]\\n        # >>> system.get_all_major()\\n        # ['Math', 'Science']\\n        major_list = []\\n        for student in self.students:\\n            if student[\\\"major\\\"] not in major_list:\\n                major_list.append(student[\\\"major\\\"])\\n        return major_list\\n\\n    def get_most_popular_class_in_major(self, major):\\n        # Get the most popular class in a given major.\\n        # return: str, the name of the most popular class in the specified major.\\n        # >>> system = ClassRegistrationSystem()\\n        # >>> system.students = [{'name': 'Alice', 'major': 'Math'}, {'name': 'Bob', 'major': 'Math'}]\\n        # >>> system.students_registration_classes = {'Alice': ['Math', 'Science'], 'Bob': ['Math']}\\n        # >>> system.get_most_popular_class_in_major('Math')\\n        # 'Math'\\n        class_list = []\\n        for student in self.students:\\n            if student[\\\"major\\\"] == major:\\n                class_list += self.students_registration_classes[student[\\\"name\\\"]]\\n        most_popular_class = max(set(class_list), key=class_list.count)\\n        return most_popular_class\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079267,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 900,\n    \"prompt_tokens\": 1126,\n    \"total_tokens\": 2026,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 550\n  }\n}", "test_case_name": "Class_Registration_System.txt"}