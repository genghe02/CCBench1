{"response body": {"id": "05e8626f-7cda-4044-b027-d29bcf22f004", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:07:12", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class represents a server that sends and receives messages. It maintains a whitelist of addresses and handles message communication with these addresses.\n\"\"\"\n\nclass Server:\n\n    def __init__(self):\n        \"\"\"\n        Initializes a new server object. Sets up the whitelist and the send and receive structures.\n        \"\"\"\n        self.white_list = []\n        self.send_struct = {}\n        self.receive_struct = {}\n\n    def add_white_list(self, addr):\n        \"\"\"\n        Adds an address to the whitelist.\n        \n        Parameters:\n            addr (str): The address to add to the whitelist.\n        \n        Returns:\n            list: The updated whitelist, or False if the address was already in the whitelist.\n        \n        Test cases:\n            # Test case 1: Adding an address that is not in the whitelist\n            assert add_white_list('192.168.1.1') == ['192.168.1.1']\n            \n            # Test case 2: Adding an address that is already in the whitelist\n            assert add_white_list('192.168.1.1') == False\n        \"\"\"\n        if addr in self.white_list:\n            return False\n        else:\n            self.white_list.append(addr)\n            return self.white_list\n\n    def del_white_list(self, addr):\n        \"\"\"\n        Deletes an address from the whitelist.\n        \n        Parameters:\n            addr (str): The address to remove from the whitelist.\n        \n        Returns:\n            list: The updated whitelist, or False if the address was not in the whitelist.\n        \n        Test cases:\n            # Test case 1: Deleting an address that is in the whitelist\n            assert del_white_list('192.168.1.1') == []\n            \n            # Test case 2: Deleting an address that is not in the whitelist\n            assert del_white_list('192.168.1.2') == False\n        \"\"\"\n        if addr not in self.white_list:\n            return False\n        else:\n            self.white_list.remove(addr)\n            return self.white_list\n\n    def recv(self, info):\n        \"\"\"\n        Receives a message from a whitelisted address.\n        \n        Parameters:\n            info (dict): Information about the message, including the sender's address and the content of the message.\n        \n        Returns:\n            str: The content of the received message, or -1 if the message structure is incorrect, or False if the address is not in the whitelist.\n        \n        Test cases:\n            # Test case 1: Receiving a message from a whitelisted address\n            assert recv({'addr': '192.168.1.1', 'content': 'Hello'}) == 'Hello'\n            \n            # Test case 2: Receiving a message with incorrect structure\n            assert recv({'addr': '192.168.1.1'}) == -1\n            \n            # Test case 3: Receiving a message from a non-whitelisted address\n            assert recv({'addr': '192.168.1.2', 'content': 'Hello'}) == False\n        \"\"\"\n        if not isinstance(info, dict) or \"addr\" not in info or \"content\" not in info:\n            return -1\n        addr = info[\"addr\"]\n        content = info[\"content\"]\n        if addr not in self.white_list:\n            return False\n        else:\n            self.receive_struct = {\"addr\": addr, \"content\": content}\n            return self.receive_struct[\"content\"]\n\n    def send(self, info):\n        \"\"\"\n        Sends a message to an address.\n        \n        Parameters:\n            info (dict): Information about the message, including the recipient's address and the content of the message.\n        \n        Returns:\n            str: A string indicating an error if the message structure is incorrect, or None if the message is sent successfully.\n        \n        Test cases:\n            # Test case 1: Sending a message with correct structure\n            assert send({'addr': '192.168.1.1', 'content': 'Hello'}) == None\n            \n            # Test case 2: Sending a message with incorrect structure\n            assert send({'addr': '192.168.1.1'}) == 'info structure is not correct'\n        \"\"\"\n        if not isinstance(info, dict) or \"addr\" not in info or \"content\" not in info:\n            return \"info structure is not correct\"\n        self.send_struct = {\"addr\": info[\"addr\"], \"content\": info[\"content\"]}\n\n    def show(self, type):\n        \"\"\"\n        Shows the last sent or received message.\n        \n        Parameters:\n            type (str): The type of message to show. Can be \"send\" or \"receive\".\n        \n        Returns:\n            dict: The last sent or received message, or False if the type is not valid.\n        \n        Test cases:\n            # Test case 1: Showing the last sent message\n            assert show('send') == {'addr': '192.168.1.1', 'content': 'Hello'}\n            \n            # Test case 2: Showing the last received message\n            assert show('receive') == {'addr': '192.168.1.1', 'content': 'Hello'}\n            \n            # Test case 3: Showing an invalid type\n            assert show('invalid') == False\n        \"\"\"\n        if type == \"send\":\n            return self.send_struct\n        elif type == \"receive\":\n            return self.receive_struct\n        else:\n            return False"}}], "usage": {"completion_tokens": 1107, "prompt_tokens": 1412, "total_tokens": 2519}, "feeType": "1", "consume": 1.580936}, "test_case_name": "Server.txt"}