{"response body": "ChatCompletion(id='chatcmpl-AihQDK4OfR0EaDXhIqRSWWLhaCHgx', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class handles student registrations for classes based on majors and tracks the most popular class in each major.\\n\"\"\"\\n\\nclass ClassRegistrationSystem:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize the Class Registration System.\\n        \\n        Initializes empty lists and dictionaries to store student and registration information.\\n        \"\"\"\\n        self.students = []\\n        self.students_registration_classes = {}\\n\\n    def register_student(self, student):\\n        \"\"\"\\n        Register a student.\\n\\n        Parameters:\\n            student (dict): Student information with name, major, etc.\\n\\n        Returns:\\n            int: 0 if the student is already registered, 1 if successfully registered\\n        \\n        Test cases:\\n            # Test case 1: Register new student\\n            student_info = {\"name\": \"Alice\", \"major\": \"Computer Science\"}\\n            assert register_student(student_info) == 1\\n            \\n            # Test case 2: Register existing student\\n            student_info = {\"name\": \"Bob\", \"major\": \"Physics\"}\\n            assert register_student(student_info) == 0\\n            \\n            # Test case 3: Register student with missing major\\n            student_info = {\"name\": \"Charlie\"}\\n            assert register_student(student_info) == 1\\n\\n        if student in self.students:\\n            return 0\\n        else:\\n            self.students.append(student)\\n            return 1\\n\\n    def register_class(self, student_name, class_name):\\n        \"\"\"\\n        Register a class for a student.\\n\\n        Parameters:\\n            student_name (str): Name of the student\\n            class_name (str): Name of the class to register\\n        \\n        Returns:\\n            list: List of classes registered by the student\\n        \\n        Test cases:\\n            # Test case 1: Register class for existing student\\n            assert register_class(\"Alice\", \"Math\") == [\"Math\"]\\n            \\n            # Test case 2: Register class for new student\\n            assert register_class(\"Bob\", \"Physics\") == [\"Physics\"]\\n            \\n            # Test case 3: Register another class for existing student\\n            assert register_class(\"Alice\", \"Physics\") == [\"Math\", \"Physics\"]\\n\\n        if student_name in self.students_registration_classes:\\n            self.students_registration_classes[student_name].append(class_name)\\n        else:\\n            self.students_registration_classes[student_name] = [class_name]\\n        return self.students_registration_classes[student_name]\\n\\n    def get_students_by_major(self, major):\\n        \"\"\"\\n        Get a list of students by their major.\\n\\n        Parameters:\\n            major (str): Major to filter students with\\n        \\n        Returns:\\n            list: List of names of students with the specified major\\n        \\n        Test cases:\\n            # Test case 1: Students in Computer Science\\n            assert get_students_by_major(\"Computer Science\") == [\"Alice\"]\\n            \\n            # Test case 2: Students in Physics\\n            assert get_students_by_major(\"Physics\") == [\"Bob\"]\\n            \\n            # Test case 3: Students in Mathematics\\n            assert get_students_by_major(\"Mathematics\") == []\\n\\n        student_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                student_list.append(student[\"name\"])\\n        return student_list\\n\\n    def get_all_major(self):\\n        \"\"\"\\n        Get a list of all majors represented by students.\\n\\n        Returns:\\n            list: List of unique majors across all students\\n        \\n        Test cases:\\n            # Test case 1: List of majors\\n            assert get_all_major() == [\"Computer Science\", \"Physics\"]\\n            \\n            # Test case 2: List of majors with duplicates\\n            assert get_all_major() == [\"Computer Science\", \"Physics\", \"Physics\"]\\n            \\n            # Test case 3: Empty list of majors\\n            assert get_all_major() == []\\n\\n        major_list = []\\n        for student in self.students:\\n            if student[\"major\"] not in major_list:\\n                major_list.append(student[\"major\"])\\n        return major_list\\n\\n    def get_most_popular_class_in_major(self, major):\\n        \"\"\"\\n        Get the most popular class in a major based on student registrations.\\n\\n        Parameters:\\n            major (str): Major to find the most popular class for\\n        \\n        Returns:\\n            str: Name of the most popular class in the major\\n        \\n        Test cases:\\n            # Test case 1: Most popular class in Computer Science\\n            assert get_most_popular_class_in_major(\"Computer Science\") == \"Math\"\\n            \\n            # Test case 2: Most popular class in Physics\\n            assert get_most_popular_class_in_major(\"Physics\") == \"Physics\"\\n            \\n            # Test case 3: Most popular class in a non-existent major\\n            assert get_most_popular_class_in_major(\"Mathematics\") == None\\n\\n        class_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                class_list += self.students_registration_classes[student[\"name\"]]\\n        if not class_list:\\n            return None\\n        most_popular_class = max(set(class_list), key=class_list.count)\\n        return most_popular_class\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735216709, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1015, prompt_tokens=1364, total_tokens=2379, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Class_Registration_System.txt"}