{"response body": "ChatCompletion(id='chatcmpl-A6GUo97LJShcXy9EYcGUxfx2eM2oT', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\nclass URLHandler:\\n    # This class handles parsing of URLs into their components such as scheme, host, path, query parameters, and fragments.\\n    def __init__(self, url):\\n        # Initializes the URLHandler with a URL string.\\n        # url: str, the URL to be parsed.\\n        self.url = url\\n\\n    def get_scheme(self):\\n        # Extracts the scheme (e.g., \\'http\\', \\'https\\') from the URL.\\n        # return: str or None, the scheme of the URL if present, otherwise None.\\n        # >>> url_handler = URLHandler(\\'http://example.com\\')\\n        # >>> url_handler.get_scheme()\\n        # \\'http\\'\\n        # >>> url_handler = URLHandler(\\'example.com\\')\\n        # >>> url_handler.get_scheme()\\n        # None\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            return self.url[:scheme_end]\\n        return None\\n\\n    def get_host(self):\\n        # Extracts the host (e.g., \\'example.com\\') from the URL.\\n        # return: str or None, the host of the URL if present, otherwise None.\\n        # >>> url_handler = URLHandler(\\'http://example.com/path\\')\\n        # >>> url_handler.get_host()\\n        # \\'example.com\\'\\n        # >>> url_handler = URLHandler(\\'https://www.example.com\\')\\n        # >>> url_handler.get_host()\\n        # \\'www.example.com\\'\\n        # >>> url_handler = URLHandler(\\'example.com/path\\')\\n        # >>> url_handler.get_host()\\n        # None\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\"/\")\\n            if host_end != -1:\\n                return url_without_scheme[:host_end]\\n            return url_without_scheme\\n        return None\\n\\n    def get_path(self):\\n        # Extracts the path (e.g., \\'/path\\') from the URL.\\n        # return: str or None, the path of the URL if present, otherwise None.\\n        # >>> url_handler = URLHandler(\\'http://example.com/path/to/resource\\')\\n        # >>> url_handler.get_path()\\n        # \\'/path/to/resource\\'\\n        # >>> url_handler = URLHandler(\\'https://example.com\\')\\n        # >>> url_handler.get_path()\\n        # None\\n        scheme_end = self.url.find(\"://\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\"/\")\\n            if host_end != -1:\\n                return url_without_scheme[host_end:]\\n        return None\\n\\n    def get_query_params(self):\\n        # Extracts the query parameters from the URL.\\n        # return: dict or None, a dictionary of query parameters if present, otherwise None.\\n        # >>> url_handler = URLHandler(\\'http://example.com/path?param1=value1&param2=value2\\')\\n        # >>> url_handler.get_query_params()\\n        # {\\'param1\\': \\'value1\\', \\'param2\\': \\'value2\\'}\\n        # >>> url_handler = URLHandler(\\'http://example.com/path\\')\\n        # >>> url_handler.get_query_params()\\n        # None\\n        query_start = self.url.find(\"?\")\\n        fragment_start = self.url.find(\"#\")\\n        if query_start != -1:\\n            query_string = self.url[query_start + 1:fragment_start] if fragment_start != -1 else self.url[query_start + 1:]\\n            params = {}\\n            if len(query_string) > 0:\\n                param_pairs = query_string.split(\"&\")\\n                for pair in param_pairs:\\n                    key_value = pair.split(\"=\")\\n                    if len(key_value) == 2:\\n                        key, value = key_value\\n                        params[key] = value\\n            return params\\n        return None\\n\\n    def get_fragment(self):\\n        # Extracts the fragment (e.g., \\'section1\\') from the URL.\\n        # return: str or None, the fragment of the URL if present, otherwise None.\\n        # >>> url_handler = URLHandler(\\'http://example.com/path#section1\\')\\n        # >>> url_handler.get_fragment()\\n        # \\'section1\\'\\n        # >>> url_handler = URLHandler(\\'http://example.com\\')\\n        # >>> url_handler.get_fragment()\\n        # None\\n        fragment_start = self.url.find(\"#\")\\n        if fragment_start != -1:\\n            return self.url[fragment_start + 1:]\\n        return None\\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056742, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=933, prompt_tokens=1178, total_tokens=2111))", "test_case_name": "URLHandler.txt"}