{"response body": "ChatCompletion(id='chatcmpl-A6GHCcZ0Oa1i6OS009NRFQiTrCe8Z', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"```python\\nimport numpy as np\\n\\n# This class provides methods to calculate Kappa statistics for assessing inter-rater agreement.\\nclass KappaCalculator:\\n\\n    @staticmethod\\n    def kappa(testData, k):\\n        # Calculate Cohen's Kappa coefficient for binary or categorical data.\\n        # param testData: list of lists, the confusion matrix of the test data\\n        # param k: int, the number of categories in the data\\n        # return: float, the calculated Kappa coefficient\\n        # >>> kappa_calc = KappaCalculator()\\n        # >>> kappa_calc.kappa([[5, 2], [1, 2]], 2)  # Expected: Kappa value based on the provided matrix.\\n        dataMat = np.mat(testData)\\n        P0 = 0.0\\n        for i in range(k):\\n            P0 += dataMat[i, i] * 1.0\\n        xsum = np.sum(dataMat, axis=1)\\n        ysum = np.sum(dataMat, axis=0)\\n        sum = np.sum(dataMat)\\n        Pe = float(ysum * xsum) / sum / sum\\n        P0 = float(P0 / sum * 1.0)\\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\\n        return cohens_coefficient\\n\\n    @staticmethod\\n    def fleiss_kappa(testData, N, k, n):\\n        # Calculate Fleiss' Kappa coefficient for multi-rater classification.\\n        # param testData: list of lists, the ratings given by different raters\\n        # param N: int, the number of subjects being rated\\n        # param k: int, the number of categories\\n        # param n: int, the number of raters per subject\\n        # return: float, the calculated Fleiss' Kappa coefficient\\n        # >>> kappa_calc = KappaCalculator()\\n        # >>> kappa_calc.fleiss_kappa([[1, 2, 1], [2, 0, 1]], 2, 3, 3)  # Expected: Fleiss' Kappa value based on the provided matrix.\\n        dataMat = np.mat(testData, float)\\n        oneMat = np.ones((k, 1))\\n        sum = 0.0\\n        P0 = 0.0\\n        for i in range(N):\\n            temp = 0.0\\n            for j in range(k):\\n                sum += dataMat[i, j]\\n                temp += 1.0 * dataMat[i, j] ** 2\\n            temp -= n\\n            temp /= (n - 1) * n\\n            P0 += temp\\n        P0 = 1.0 * P0 / N\\n        ysum = np.sum(dataMat, axis=0)\\n        for i in range(k):\\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\\n        Pe = ysum * oneMat * 1.0\\n        ans = (P0 - Pe) / (1 - Pe)\\n        return ans[0, 0]\\n```\", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726055898, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=663, prompt_tokens=1108, total_tokens=1771))", "test_case_name": "KappaCalculator.txt"}