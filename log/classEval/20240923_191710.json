{"response body": {"id": "85f8d4a4-fd4e-4c7b-b9f3-3aea0024eda7", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:17:10", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This is a class for performing Boyer-Moore string matching algorithm.\nclass BoyerMooreSearch:\n    def __init__(self, text, pattern):\n        # This is a constructor for the BoyerMooreSearch class.\n        # param text: str, the text in which we are searching\n        # param pattern: str, the pattern that we are searching for\n        self.text, self.pattern = text, pattern\n        self.textLen, self.patLen = len(text), len(pattern)\n\n    def match_in_pattern(self, char):\n        # This function searches for a character in the pattern from right to left.\n        # param char: str, the character that we are looking for in the pattern\n        # return: int, the index of the character if found, -1 otherwise\n        # Test case: \n        # bm = BoyerMooreSearch(\"hello\", \"lo\")\n        # bm.match_in_pattern(\"l\") => 1\n        for i in range(self.patLen - 1, -1, -1):\n            if char == self.pattern[i]:\n                return i\n        return -1\n\n    def mismatch_in_text(self, currentPos):\n        # This function finds the position of the mismatched character in the text.\n        # param currentPos: int, the current position in the text\n        # return: int, the index of the mismatched character if found, -1 otherwise\n        # Test case: \n        # bm = BoyerMooreSearch(\"hello\", \"lo\")\n        # bm.mismatch_in_text(3) => -1\n        for i in range(self.patLen - 1, -1, -1):\n            if self.pattern[i] != self.text[currentPos + i]:\n                return currentPos + i\n        return -1\n\n    def bad_character_heuristic(self):\n        # This function applies the bad character heuristic of the Boyer-Moore algorithm.\n        # return: list, a list of positions where pattern matches the text.\n        # Test case: \n        # bm = BoyerMooreSearch(\"hello\", \"lo\")\n        # bm.bad_character_heuristic() => [3]\n        positions = []\n        for i in range(self.textLen - self.patLen + 1):\n            mismatch_index = self.mismatch_in_text(i)\n            if mismatch_index == -1:\n                positions.append(i)\n            else:\n                match_index = self.match_in_pattern(self.text[mismatch_index])\n                i = (mismatch_index - match_index)\n        return positions\n```"}}], "usage": {"completion_tokens": 530, "prompt_tokens": 883, "total_tokens": 1413}, "feeType": "1", "consume": 0.847148}, "test_case_name": "BoyerMooreSearch.txt"}