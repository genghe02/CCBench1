{"response body": "{\n  \"id\": \"05385e86-446a-4e21-8c69-1df616590eea\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class implements a discount strategy system that calculates the total cost of a shopping cart and applies various promotional discounts based on customer fidelity, bulk item purchases, and large orders.\\n\\\"\\\"\\\"\\n\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        \\\"\\\"\\\"\\n        Initializes the DiscountStrategy instance with customer details, shopping cart, and an optional promotion.\\n\\n        Parameters:\\n            customer (dict): A dictionary containing customer information, including fidelity points.\\n            cart (list): A list of dictionaries, each representing an item in the cart with 'quantity', 'price', and 'product' keys.\\n            promotion (function, optional): A function that calculates the discount based on the order. Defaults to None.\\n\\n        Test cases:\\n            # Test case 1: Initialize with no promotion\\n            customer = {'fidelity': 500}\\n            cart = [{'quantity': 2, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy(customer, cart)\\n            assert order.total() == 20\\n\\n            # Test case 2: Initialize with FidelityPromo\\n            order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\\n            assert order.due() == 20\\n\\n            # Test case 3: Initialize with BulkItemPromo\\n            cart = [{'quantity': 25, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy(customer, cart, DiscountStrategy.BulkItemPromo)\\n            assert order.due() == 225\\n        \\\"\\\"\\\"\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        \\\"\\\"\\\"\\n        Calculates the total cost of the items in the cart without any discounts.\\n\\n        Returns:\\n            float: The total cost of the cart.\\n\\n        Test cases:\\n            # Test case 1: Single item\\n            cart = [{'quantity': 2, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert order.total() == 20\\n\\n            # Test case 2: Multiple items\\n            cart = [{'quantity': 2, 'price': 10, 'product': 'apple'}, {'quantity': 3, 'price': 5, 'product': 'banana'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert order.total() == 35\\n\\n            # Test case 3: Empty cart\\n            cart = []\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert order.total() == 0\\n        \\\"\\\"\\\"\\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        \\\"\\\"\\\"\\n        Calculates the final amount due after applying the promotion discount.\\n\\n        Returns:\\n            float: The amount due after discount.\\n\\n        Test cases:\\n            # Test case 1: No promotion\\n            cart = [{'quantity': 2, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert order.due() == 20\\n\\n            # Test case 2: FidelityPromo applied\\n            order = DiscountStrategy({'fidelity': 1000}, cart, DiscountStrategy.FidelityPromo)\\n            assert order.due() == 19\\n\\n            # Test case 3: BulkItemPromo applied\\n            cart = [{'quantity': 25, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart, DiscountStrategy.BulkItemPromo)\\n            assert order.due() == 225\\n        \\\"\\\"\\\"\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        \\\"\\\"\\\"\\n        Applies a 5% discount if the customer has 1000 or more fidelity points.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order instance to apply the discount to.\\n\\n        Returns:\\n            float: The discount amount.\\n\\n        Test cases:\\n            # Test case 1: Customer with 1000 fidelity points\\n            cart = [{'quantity': 2, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 1000}, cart)\\n            assert DiscountStrategy.FidelityPromo(order) == 1\\n\\n            # Test case 2: Customer with 500 fidelity points\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.FidelityPromo(order) == 0\\n\\n            # Test case 3: Empty cart\\n            cart = []\\n            order = DiscountStrategy({'fidelity': 1000}, cart)\\n            assert DiscountStrategy.FidelityPromo(order) == 0\\n        \\\"\\\"\\\"\\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        \\\"\\\"\\\"\\n        Applies a 10% discount on items with a quantity of 20 or more.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order instance to apply the discount to.\\n\\n        Returns:\\n            float: The discount amount.\\n\\n        Test cases:\\n            # Test case 1: Bulk item discount\\n            cart = [{'quantity': 25, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.BulkItemPromo(order) == 25\\n\\n            # Test case 2: No bulk item discount\\n            cart = [{'quantity': 10, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.BulkItemPromo(order) == 0\\n\\n            # Test case 3: Multiple items, one with bulk discount\\n            cart = [{'quantity': 25, 'price': 10, 'product': 'apple'}, {'quantity': 10, 'price': 5, 'product': 'banana'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.BulkItemPromo(order) == 25\\n        \\\"\\\"\\\"\\n        discount = 0\\n        for item in order.cart:\\n            if item['quantity'] >= 20:\\n                discount += item['quantity'] * item['price'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        \\\"\\\"\\\"\\n        Applies a 7% discount if the order contains 10 or more unique products.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order instance to apply the discount to.\\n\\n        Returns:\\n            float: The discount amount.\\n\\n        Test cases:\\n            # Test case 1: Large order discount\\n            cart = [{'quantity': 1, 'price': 10, 'product': f'product_{i}'} for i in range(10)]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.LargeOrderPromo(order) == 7\\n\\n            # Test case 2: No large order discount\\n            cart = [{'quantity': 1, 'price': 10, 'product': 'apple'}]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.LargeOrderPromo(order) == 0\\n\\n            # Test case 3: Edge case with exactly 10 unique products\\n            cart = [{'quantity': 1, 'price': 10, 'product': f'product_{i}'} for i in range(10)]\\n            order = DiscountStrategy({'fidelity': 500}, cart)\\n            assert DiscountStrategy.LargeOrderPromo(order) == 7\\n        \\\"\\\"\\\"\\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194009,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1724,\n    \"prompt_tokens\": 1393,\n    \"total_tokens\": 3117,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 433\n  }\n}", "test_case_name": "DiscountStrategy.txt"}