{"response body": {"id": "6baf608f-6579-4889-b10f-b1642e3746f9", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:42:08", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides functionality for a fitness tracker, allowing for the calculation of body mass index (BMI), \njudging the condition of the user based on BMI, and calculating the recommended calorie intake.\n\"\"\"\n\nclass FitnessTracker:\n    def __init__(self, height, weight, age, sex) -> None:\n        \"\"\"\n        Initializes the FitnessTracker class with necessary user data.\n\n        Parameters:\n            height (float): The height of the user in centimeters.\n            weight (float): The weight of the user in kilograms.\n            age (int): The age of the user in years.\n            sex (str): The sex of the user. Either 'male' or 'female'.\n        \"\"\"\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex\n        self.BMI_std = [\n            {\"male\": [20, 25]},\n            {\"female\": [19, 24]}\n        ]\n\n    def get_BMI(self):\n        \"\"\"\n        Calculates the body mass index (BMI) of the user.\n\n        Returns:\n            float: The body mass index of the user.\n\n        Test cases:\n            # Test case 1: Normal usage\n            tracker = FitnessTracker(180, 70, 25, 'male')\n            assert tracker.get_BMI() == 21.6\n\n            # Test case 2: Edge case with minimum values\n            tracker = FitnessTracker(1, 1, 0, 'male')\n            assert tracker.get_BMI() == 1000.0\n\n            # Test case 3: Error case with zero height\n            tracker = FitnessTracker(0, 1, 0, 'male')\n            try:\n                tracker.get_BMI()\n            except ZeroDivisionError:\n                print(\"Cannot calculate BMI with zero height.\")\n        \"\"\"\n        return self.weight / self.height ** 2\n\n    def condition_judge(self):\n        \"\"\"\n        Judges the condition of the user based on their BMI.\n\n        Returns:\n            int: Returns 1 if the user is overweight, -1 if underweight, and 0 if within normal range.\n\n        Test cases:\n            # Test case 1: Overweight condition\n            tracker = FitnessTracker(170, 80, 30, 'male')\n            assert tracker.condition_judge() == 1\n\n            # Test case 2: Underweight condition\n            tracker = FitnessTracker(180, 50, 20, 'female')\n            assert tracker.condition_judge() == -1\n\n            # Test case 3: Normal weight condition\n            tracker = FitnessTracker(180, 75, 25, 'male')\n            assert tracker.condition_judge() == 0\n        \"\"\"\n        BMI = self.get_BMI()\n        if self.sex == \"male\":\n            BMI_range = self.BMI_std[0][\"male\"]\n        else:\n            BMI_range = self.BMI_std[1][\"female\"]\n        if BMI > BMI_range[1]:\n            # too fat\n            return 1\n        elif BMI < BMI_range[0]:\n            # too thin\n            return -1\n        else:\n            # normal\n            return 0\n\n    def calculate_calorie_intake(self):\n        \"\"\"\n        Calculates the recommended daily calorie intake for the user based on their condition.\n\n        Returns:\n            float: The recommended daily calorie intake.\n\n        Test cases:\n            # Test case 1: Overweight condition\n            tracker = FitnessTracker(170, 80, 30, 'male')\n            assert tracker.calculate_calorie_intake() == 2283.0\n\n            # Test case 2: Underweight condition\n            tracker = FitnessTracker(180, 50, 20, 'female')\n            assert tracker.calculate_calorie_intake() == 2148.0\n\n            # Test case 3: Normal weight condition\n            tracker = FitnessTracker(180, 75, 25, 'male')\n            assert tracker.calculate_calorie_intake() == 2531.0\n        \"\"\"\n        if self.sex == \"male\":\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\n        else:\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\n        if self.condition_judge() == 1:\n            calorie_intake = BMR * 1.2  # Sedentary lifestyle\n        elif self.condition_judge() == -1:\n            calorie_intake = BMR * 1.6  # Active lifestyle\n        else:\n            calorie_intake = BMR * 1.4  # Moderate lifestyle\n        return calorie_intake"}}], "usage": {"completion_tokens": 977, "prompt_tokens": 1395, "total_tokens": 2372}, "feeType": "1", "consume": 1.460164}, "test_case_name": "FitnessTracker.txt"}