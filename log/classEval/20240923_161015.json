{"response body": "{\n  \"id\": \"86f26fd4-8456-4e49-9810-dd1bd832fd5f\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport math\\nfrom typing import List\\n\\nclass CombinationCalculator:\\n    # This class provides methods to calculate combinations and generate combinations from a list of strings.\\n    \\n    def __init__(self, datas: List[str]):\\n        # Initialize the CombinationCalculator with a list of strings.\\n        self.datas = datas\\n\\n    @staticmethod\\n    def count(n: int, m: int) -> int:\\n        # Calculate the number of combinations of n items taken m at a time.\\n        # param n: int, the total number of items.\\n        # param m: int, the number of items to choose.\\n        # return: int, the number of combinations.\\n        # >>> CombinationCalculator.count(5, 2)\\n        # 10\\n        # >>> CombinationCalculator.count(10, 0)\\n        # 1\\n        if m == 0 or n == m:\\n            return 1\\n        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))\\n\\n    @staticmethod\\n    def count_all(n: int) -> int:\\n        # Calculate the total number of combinations for all possible values of m from 0 to n.\\n        # param n: int, the total number of items.\\n        # return: int, the total number of combinations.\\n        # >>> CombinationCalculator.count_all(3)\\n        # 7\\n        # >>> CombinationCalculator.count_all(63)\\n        # inf\\n        if n < 0 or n > 63:\\n            return False\\n        return (1 << n) - 1 if n != 63 else float(\\\"inf\\\")\\n\\n    def select(self, m: int) -> List[List[str]]:\\n        # Generate all combinations of m items from the initialized list of strings.\\n        # param m: int, the number of items to choose.\\n        # return: List[List[str]], a list of all combinations.\\n        # >>> cc = CombinationCalculator(['A', 'B', 'C'])\\n        # >>> cc.select(2)\\n        # [['A', 'B'], ['A', 'C'], ['B', 'C']]\\n        result = []\\n        self._select(0, [None] * m, 0, result)\\n        return result\\n\\n    def select_all(self) -> List[List[str]]:\\n        # Generate all combinations for all possible values of m from 1 to the length of the initialized list.\\n        # return: List[List[str]], a list of all combinations.\\n        # >>> cc = CombinationCalculator(['A', 'B', 'C'])\\n        # >>> cc.select_all()\\n        # [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]\\n        result = []\\n        for i in range(1, len(self.datas) + 1):\\n            result.extend(self.select(i))\\n        return result\\n\\n    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):\\n        # Recursive helper function to generate combinations.\\n        # param dataIndex: int, the current index in the datas list.\\n        # param resultList: List[str], the current combination being built.\\n        # param resultIndex: int, the current index in the resultList.\\n        # param result: List[List[str]], the list to store all combinations.\\n        # return: None, modifies result in place.\\n        # >>> cc = CombinationCalculator(['A', 'B', 'C'])\\n        # >>> result = []\\n        # >>> cc._select(0, [None, None], 0, result)\\n        # >>> result\\n        # [['A', 'B'], ['A', 'C'], ['B', 'C']]\\n        resultLen = len(resultList)\\n        resultCount = resultIndex + 1\\n        if resultCount > resultLen:\\n            result.append(resultList.copy())\\n            return\\n\\n        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):\\n            resultList[resultIndex] = self.datas[i]\\n            self._select(i + 1, resultList, resultIndex + 1, result)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078966,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1008,\n    \"prompt_tokens\": 1185,\n    \"total_tokens\": 2193,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 609\n  }\n}", "test_case_name": "CombinationCalculator.txt"}