{"response body": {"id": "44977181-954b-4e23-b4ad-a17c0325a342", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:13:41", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class handles database operations related to student data in an SQLite database.\n\"\"\"\n\nimport sqlite3\n\n\nclass StudentDatabaseProcessor:\n\n    def __init__(self, database_name):\n        \"\"\"\n        Initializes the StudentDatabaseProcessor object with the given SQLite database name.\n\n        Parameters:\n            database_name (str): The name of the SQLite database to use\n        \"\"\"\n        self.database_name = database_name\n\n    def create_student_table(self):\n        \"\"\"\n        Creates a new students table in the SQLite database if it does not already exist.\n\n        Test cases:\n            # Test case 1: Successful creation of table\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            db_processor.create_student_table()\n            # Check if table 'students' exists in 'test.db'\n            \n            # Test case 2: Attempt to create table when it already exists\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            db_processor.create_student_table()\n            db_processor.create_student_table()\n            # Check if table 'students' still exists in 'test.db'\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        create_table_query = \"\"\"\n        CREATE TABLE IF NOT EXISTS students (\n            id INTEGER PRIMARY KEY,\n            name TEXT,\n            age INTEGER,\n            gender TEXT,\n            grade INTEGER\n        )\n        \"\"\"\n        cursor.execute(create_table_query)\n\n        conn.commit()\n        conn.close()\n\n    def insert_student(self, student_data):\n        \"\"\"\n        Inserts a new student record into the students table.\n\n        Parameters:\n            student_data (dict): A dictionary containing the student data to insert.\n                                 Must have 'name', 'age', 'gender', and 'grade' keys.\n\n        Test cases:\n            # Test case 1: Successful insertion of a student record\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            student_data = {'name': 'John Doe', 'age': 20, 'gender': 'Male', 'grade': 80}\n            db_processor.insert_student(student_data)\n            # Check if 'John Doe' exists in the 'students' table in 'test.db'\n            \n            # Test case 2: Attempt to insert a student record with missing keys\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            student_data = {'name': 'Jane Doe', 'age': 22}\n            try:\n                db_processor.insert_student(student_data)\n            except Exception as e:\n                print(str(e))\n            # Check if 'Jane Doe' does not exist in the 'students' table in 'test.db'\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        insert_query = \"\"\"\n        INSERT INTO students (name, age, gender, grade)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        cursor.execute(insert_query,\n                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))\n\n        conn.commit()\n        conn.close()\n\n    def search_student_by_name(self, name):\n        \"\"\"\n        Searches for a student record in the students table by the given name.\n\n        Parameters:\n            name (str): The name of the student to search for\n\n        Returns:\n            list: A list of tuples representing the matching student records\n\n        Test cases:\n            # Test case 1: Successful search for a student record\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            result = db_processor.search_student_by_name('John Doe')\n            print(result)\n            # Output should be a list of tuples representing student records with the name 'John Doe'\n            \n            # Test case 2: Search for a non-existent student record\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            result = db_processor.search_student_by_name('Non-existent student')\n            print(result)\n            # Output should be an empty list\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        select_query = \"SELECT * FROM students WHERE name = ?\"\n        cursor.execute(select_query, (name,))\n        result = cursor.fetchall()\n\n        conn.close()\n\n        return result\n\n    def delete_student_by_name(self, name):\n        \"\"\"\n        Deletes a student record from the students table by the given name.\n\n        Parameters:\n            name (str): The name of the student to delete\n\n        Test cases:\n            # Test case 1: Successful deletion of a student record\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            db_processor.delete_student_by_name('John Doe')\n            # Check if 'John Doe' does not exist in the 'students' table in 'test.db'\n            \n            # Test case 2: Attempt to delete a non-existent student record\n            db_processor = StudentDatabaseProcessor(\"test.db\")\n            db_processor.delete_student_by_name('Non-existent student')\n            # Check if 'Non-existent student' still does not exist in the 'students' table in 'test.db'\n        \"\"\"\n        conn = sqlite3.connect(self.database_name)\n        cursor = conn.cursor()\n\n        delete_query = \"DELETE FROM students WHERE name = ?\"\n        cursor.execute(delete_query, (name,))\n\n        conn.commit()\n        conn.close()"}}], "usage": {"completion_tokens": 1049, "prompt_tokens": 1406, "total_tokens": 2455}, "feeType": "1", "consume": 1.527744}, "test_case_name": "StudentDatabaseProcessor.txt"}