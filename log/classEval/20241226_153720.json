{"response body": {"id": "57f0e8ed-0d10-471f-90a3-e90d608fc093", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:37:23", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class handles reading and writing operations for Microsoft Word Document files.\n\"\"\"\n\nfrom docx import Document\nfrom docx.shared import Pt\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n\n\nclass DocFileHandler:\n    def __init__(self, file_path):\n        \"\"\"\n        Initializes the DocFileHandler with the given file path.\n        \n        Parameters:\n            file_path (str): The path to the .docx file to be processed\n        \"\"\"\n        self.file_path = file_path\n\n    def read_text(self):\n        \"\"\"\n        Reads the text content of the document.\n            \n        Returns:\n            str: The text content of the document\n        \n        Test cases:\n            # Test case 1: Normal usage\n            handler = DocFileHandler('test.docx')\n            print(handler.read_text())\n            \n            # Test case 2: File does not exist\n            handler = DocFileHandler('nonexistent.docx')\n            print(handler.read_text())  # Raises FileNotFoundError\n            \n            # Test case 3: File is not a .docx file\n            handler = DocFileHandler('test.txt')\n            print(handler.read_text())  # Raises UnidentifiedImageError\n        \"\"\"\n        doc = Document(self.file_path)\n        text = []\n        for paragraph in doc.paragraphs:\n            text.append(paragraph.text)\n        return \"\\n\".join(text)\n\n    def write_text(self, content, font_size=12, alignment='left'):\n        \"\"\"\n        Writes the specified text to the document with the specified font size and alignment.\n        \n        Parameters:\n            content (str): The text to write to the document\n            font_size (int, optional): The font size of the text\n            alignment (str, optional): The alignment of the text ('left', 'center', or 'right')\n            \n        Returns:\n            bool: True if the write operation was successful, False otherwise\n            \n        Test cases:\n            # Test case 1: Normal usage\n            handler = DocFileHandler('test.docx')\n            handler.write_text('Hello, world!', font_size=14, alignment='center')\n            \n            # Test case 2: Invalid alignment\n            handler = DocFileHandler('test.docx')\n            handler.write_text('Hello, world!', font_size=14, alignment='diagonal')  # Defaults to 'left'\n            \n            # Test case 3: File is read-only\n            handler = DocFileHandler('readonly.docx')\n            handler.write_text('Hello, world!', font_size=14, alignment='center')  # Returns False\n        \"\"\"\n        try:\n            doc = Document()\n            paragraph = doc.add_paragraph()\n            run = paragraph.add_run(content)\n            font = run.font\n            font.size = Pt(font_size)\n            alignment_value = self._get_alignment_value(alignment)\n            paragraph.alignment = alignment_value\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_heading(self, heading, level=1):\n        \"\"\"\n        Adds a heading to the document.\n        \n        Parameters:\n            heading (str): The text of the heading\n            level (int, optional): The level of the heading (1-9)\n            \n        Returns:\n            bool: True if the operation was successful, False otherwise\n            \n        Test cases:\n            # Test case 1: Normal usage\n            handler = DocFileHandler('test.docx')\n            handler.add_heading('Chapter 1', level=1)\n            \n            # Test case 2: Invalid level\n            handler = DocFileHandler('test.docx')\n            handler.add_heading('Chapter 1', level=10)  # Raises ValueError\n            \n            # Test case 3: File is read-only\n            handler = DocFileHandler('readonly.docx')\n            handler.add_heading('Chapter 1', level=1)  # Returns False\n        \"\"\"\n        try:\n            doc = Document(self.file_path)\n            doc.add_heading(heading, level)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_table(self, data):\n        \"\"\"\n        Adds a table to the document.\n        \n        Parameters:\n            data (list of list): The table data, where each sublist represents a row\n            \n        Returns:\n            bool: True if the operation was successful, False otherwise\n            \n        Test cases:\n            # Test case 1: Normal usage\n            handler = DocFileHandler('test.docx')\n            handler.add_table([['Name', 'Age'], ['Alice', '23'], ['Bob', '25']])\n            \n            # Test case 2: Empty data\n            handler = DocFileHandler('test.docx')\n            handler.add_table([])  # Returns False\n            \n            # Test case 3: File is read-only\n            handler = DocFileHandler('readonly.docx')\n            handler.add_table([['Name', 'Age'], ['Alice', '23'], ['Bob', '25']])  # Returns False\n        \"\"\"\n        try:\n            doc = Document(self.file_path)\n            table = doc.add_table(rows=len(data), cols=len(data[0]))\n            for i, row in enumerate(data):\n                for j, cell_value in enumerate(row):\n                    table.cell(i, j).text = str(cell_value)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def _get_alignment_value(self, alignment):\n        \"\"\"\n        Converts the specified alignment string to a WD_PARAGRAPH_ALIGNMENT value.\n        \n        Parameters:\n            alignment (str): The alignment string ('left', 'center', 'right')\n            \n        Returns:\n            WD_PARAGRAPH_ALIGNMENT: The corresponding alignment value\n        \"\"\"\n        alignment_options = {\n            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,\n            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,\n            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT\n        }\n        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)"}}], "usage": {"completion_tokens": 1218, "prompt_tokens": 1460, "total_tokens": 2678}, "feeType": "1", "consume": 1.698656}, "test_case_name": "DocFileHandler.txt"}