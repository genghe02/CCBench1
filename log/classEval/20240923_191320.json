{"response body": {"id": "2316e0dd-a96c-4728-931e-5c70f8f15cd9", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:13:20", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class represents a hotel with several types of rooms. It allows to book, check in, check out and get available rooms.\nclass Hotel:\n    # The constructor of the Hotel class initializes the hotel with a name and a dictionary of available rooms.\n    # Test Cases for the function:\n    # >>> hotel = Hotel(\"Hotel California\", {'single': 5, 'double': 3})\n    # >>> print(hotel.name) # Expected Output: 'Hotel California'\n    # >>> print(hotel.available_rooms) # Expected Output: {'single': 5, 'double': 3}\n    def __init__(self, name, rooms):\n        self.name = name\n        self.available_rooms = rooms\n        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}\n        # available_rooms = {'single': 5, 'double': 3}\n        self.booked_rooms = {}\n        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}\n        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}\n\n    # This method books a room in the hotel. It checks if there are enough rooms of the specified type available.\n    # Parameters:\n    # room_type (str): The type of room to book.\n    # room_number (int): The number of rooms to book.\n    # name (str): The name of the person who books the rooms.\n    # Return:\n    # It returns a success message if the booking is successful, the number of available rooms if not enough rooms are available, or False if no rooms of the specified type are available.\n    # Test Cases for the function:\n    # >>> hotel.book_room('single', 2, 'John') # Expected Output: 'Success!'\n    # >>> hotel.book_room('single', 4, 'Mary') # Expected Output: 3\n    # >>> hotel.book_room('triple', 1, 'Tom') # Expected Output: False\n    def book_room(self, room_type, room_number, name):\n        # Check if there are any rooms of the specified type available\n        if room_type not in self.available_rooms.keys():\n            return False\n\n        if room_number <= self.available_rooms[room_type]:\n            # Book the room by adding it to the booked_rooms dictionary\n            if room_type not in self.booked_rooms.keys():\n                self.booked_rooms[room_type] = {}\n            self.booked_rooms[room_type][name] = room_number\n            self.available_rooms[room_type] -= room_number\n            return \"Success!\"\n        elif self.available_rooms[room_type] != 0:\n            return self.available_rooms[room_type]\n        else:\n            return False\n\n    # This method is used for checking in to the hotel. It checks if the room of the specified type and number is booked.\n    # Parameters:\n    # room_type (str): The type of room to check in.\n    # room_number (int): The number of rooms to check in.\n    # name (str): The name of the person who checks in.\n    # Return:\n    # Returns False if the check in is not successful. Otherwise, it does not return any value.\n    # Test Cases for the function:\n    # >>> hotel.check_in('single', 2, 'John') # Expected Output: None\n    # >>> hotel.check_in('single', 1, 'Mary') # Expected Output: False\n    # >>> hotel.check_in('triple', 1, 'Tom') # Expected Output: False\n    def check_in(self, room_type, room_number, name):\n        # Check if the room of the specified type and number is booked\n        if room_type not in self.booked_rooms.keys():\n            return False\n        if name in self.booked_rooms[room_type]:\n            if room_number > self.booked_rooms[room_type][name]:\n                return False\n            elif room_number == self.booked_rooms[room_type][name]:\n                # Check in the room by removing it from the booked_rooms dictionary\n                self.booked_rooms[room_type].pop(name)\n            else:\n                self.booked_rooms[room_type][name] -= room_number\n\n    # This method is used for checking out from the hotel. It increases the number of available rooms of the specified type.\n    # Parameters:\n    # room_type (str): The type of room to check out.\n    # room_number (int): The number of rooms to check out.\n    # Test Cases for the function:\n    # >>> hotel.check_out('single', 2)\n    # >>> print(hotel.available_rooms['single']) # Expected Output: 5\n    def check_out(self, room_type, room_number):\n        if room_type in self.available_rooms:\n            self.available_rooms[room_type] += room_number\n        else:\n            self.available_rooms[room_type] = room_number\n\n    # This method returns the number of available rooms of the specified type.\n    # Parameter:\n    # room_type (str): The type of room to get the availability.\n    # Return:\n    # The number of available rooms of the specified type.\n    # Test Cases for the function:\n    # >>> hotel.get_available_rooms('single') # Expected Output: 5\n    # >>> hotel.get_available_rooms('double') # Expected Output: 3\n    def get_available_rooms(self, room_type):\n        return self.available_rooms[room_type]\n```"}}], "usage": {"completion_tokens": 1165, "prompt_tokens": 1182, "total_tokens": 2347}, "feeType": "1", "consume": 1.531232}, "test_case_name": "Hotel.txt"}