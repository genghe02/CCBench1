{"response body": {"id": "b71a09d8-3334-4b7b-b248-7148137a5759", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:36:31", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n\"\"\"\nThis class represents a strategy for calculating discounts on a shopping cart. \nIt supports different promotional discounts, such as fidelity, bulk item, and large order discounts.\n\"\"\"\n\nclass DiscountStrategy:\n    def __init__(self, customer, cart, promotion=None):\n        \"\"\"\n        Initializes a new instance of the DiscountStrategy class.\n        \n        Parameters:\n            customer (dict): A dictionary representing the customer. \n                It should contain a 'fidelity' key with an integer value representing the customer's fidelity points.\n            cart (list): A list of dictionaries, where each dictionary represents an item in the cart. \n                Each item should contain 'quantity' and 'price' keys with integer values.\n            promotion (function, optional): A function representing the promotional discount to apply. \n                If None, no promotional discount will be applied. Defaults to None.\n        \n        Test cases:\n            # Test case 1: Initialization with no promotion\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert ds.due() == 250\n            \n            # Test case 2: Initialization with a fidelity promotion\n            customer = {'fidelity': 1500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\n            assert ds.due() == 237.5\n            \n            # Test case 3: Initialization with an invalid promotion\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            try:\n                ds = DiscountStrategy(customer, cart, \"InvalidPromo\")\n                assert False, \"Expected ValueError\"\n            except ValueError:\n                pass\n        \"\"\"\n        self.customer = customer\n        self.cart = cart\n        self.promotion = promotion\n        self.__total = self.total()\n\n    def total(self):\n        \"\"\"\n        Calculates the total price of all items in the cart without any promotional discounts.\n\n        Returns:\n            int: The total price of all items in the cart.\n        \n        Test cases:\n            # Test case 1: Cart with multiple items\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 3, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert ds.total() == 350\n            \n            # Test case 2: Cart with a single item\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 1, 'price': 100}]\n            ds = DiscountStrategy(customer, cart)\n            assert ds.total() == 100\n            \n            # Test case 3: Empty cart\n            customer = {'fidelity': 500}\n            cart = []\n            ds = DiscountStrategy(customer, cart)\n            assert ds.total() == 0\n        \"\"\"\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\n        return self.__total\n\n    def due(self):\n        \"\"\"\n        Calculates the total price due after applying the promotional discount.\n\n        Returns:\n            int: The total price due after applying the promotional discount.\n        \n        Test cases:\n            # Test case 1: Cart with a fidelity promotion\n            customer = {'fidelity': 1500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\n            assert ds.due() == 237.5\n            \n            # Test case 2: Cart with no promotion\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert ds.due() == 250\n            \n            # Test case 3: Empty cart\n            customer = {'fidelity': 500}\n            cart = []\n            ds = DiscountStrategy(customer, cart)\n            assert ds.due() == 0\n        \"\"\"\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.__total - discount\n\n    @staticmethod\n    def FidelityPromo(order):\n        \"\"\"\n        Calculates the fidelity promotional discount.\n        \n        Parameters:\n            order (DiscountStrategy): A DiscountStrategy instance.\n        \n        Returns:\n            float: The promotional discount amount.\n        \n        Test cases:\n            # Test case 1: Customer with high fidelity\n            customer = {'fidelity': 1500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.FidelityPromo(ds) == 12.5\n            \n            # Test case 2: Customer with low fidelity\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.FidelityPromo(ds) == 0\n            \n            # Test case 3: Empty cart\n            customer = {'fidelity': 1500}\n            cart = []\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.FidelityPromo(ds) == 0\n        \"\"\"\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\n\n    @staticmethod\n    def BulkItemPromo(order):\n        \"\"\"\n        Calculates the bulk item promotional discount.\n        \n        Parameters:\n            order (DiscountStrategy): A DiscountStrategy instance.\n        \n        Returns:\n            float: The promotional discount amount.\n        \n        Test cases:\n            # Test case 1: Cart with bulk items\n            customer = {'fidelity': 1500}\n            cart = [{'quantity': 20, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.BulkItemPromo(ds) == 200\n            \n            # Test case 2: Cart without bulk items\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100}, {'quantity': 1, 'price': 50}]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.BulkItemPromo(ds) == 0\n            \n            # Test case 3: Empty cart\n            customer = {'fidelity': 1500}\n            cart = []\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.BulkItemPromo(ds) == 0\n        \"\"\"\n        discount = 0\n        for item in order.cart:\n            if item['quantity'] >= 20:\n                discount += item['quantity'] * item['price'] * 0.1\n        return discount\n\n    @staticmethod\n    def LargeOrderPromo(order):\n        \"\"\"\n        Calculates the large order promotional discount.\n        \n        Parameters:\n            order (DiscountStrategy): A DiscountStrategy instance.\n        \n        Returns:\n            float: The promotional discount amount.\n        \n        Test cases:\n            # Test case 1: Cart with a large variety of items\n            customer = {'fidelity': 1500}\n            cart = [{'quantity': 1, 'price': 100, 'product': i} for i in range(10)]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.LargeOrderPromo(ds) == 70\n            \n            # Test case 2: Cart without a large variety of items\n            customer = {'fidelity': 500}\n            cart = [{'quantity': 2, 'price': 100, 'product': 1}, {'quantity': 1, 'price': 50, 'product': 2}]\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.LargeOrderPromo(ds) == 0\n            \n            # Test case 3: Empty cart\n            customer = {'fidelity': 1500}\n            cart = []\n            ds = DiscountStrategy(customer, cart)\n            assert DiscountStrategy.LargeOrderPromo(ds) == 0\n        \"\"\"\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\n```"}}], "usage": {"completion_tokens": 1811, "prompt_tokens": 1376, "total_tokens": 3187}, "feeType": "1", "consume": 2.179128}, "test_case_name": "DiscountStrategy.txt"}