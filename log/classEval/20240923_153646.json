{"response body": "{\n  \"id\": \"9761d8e9-f510-40e1-9f88-6bbefa52d27c\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport numpy as np\\n\\n\\nclass KappaCalculator:\\n    # A class for calculating Cohen's Kappa and Fleiss' Kappa coefficients, which are used to measure inter-rater agreement.\\n\\n    @staticmethod\\n    def kappa(testData, k):\\n        # Calculate Cohen's Kappa coefficient for a given test data matrix and number of categories.\\n        # param testData: np.array, a square matrix where each element represents the number of raters who assigned the i-th subject to the j-th category.\\n        # param k: int, the number of categories.\\n        # return: float, the Cohen's Kappa coefficient.\\n        # >>> KappaCalculator.kappa(np.array([[10, 2], [2, 10]]), 2)\\n        # 0.6\\n        dataMat = np.mat(testData)\\n        P0 = 0.0\\n        for i in range(k):\\n            P0 += dataMat[i, i] * 1.0\\n        xsum = np.sum(dataMat, axis=1)\\n        ysum = np.sum(dataMat, axis=0)\\n        sum = np.sum(dataMat)\\n        Pe = float(ysum * xsum) / sum / sum\\n        P0 = float(P0 / sum * 1.0)\\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\\n        return cohens_coefficient\\n\\n    @staticmethod\\n    def fleiss_kappa(testData, N, k, n):\\n        # Calculate Fleiss' Kappa coefficient for a given test data matrix, number of subjects, categories, and raters.\\n        # param testData: np.array, a matrix where each row represents a subject and each column represents a category.\\n        # param N: int, the number of subjects.\\n        # param k: int, the number of categories.\\n        # param n: int, the number of raters.\\n        # return: float, the Fleiss' Kappa coefficient.\\n        # >>> KappaCalculator.fleiss_kappa(np.array([[0, 0, 0, 0, 14], [0, 2, 6, 4, 2], [0, 0, 3, 5, 6], [0, 3, 9, 2, 0], [2, 2, 8, 1, 1], [7, 7, 0, 0, 0], [3, 2, 6, 3, 0], [2, 5, 3, 2, 2], [6, 5, 2, 1, 0], [0, 2, 2, 3, 7]]), 10, 5, 14)\\n        # 0.20993070442195522\\n        dataMat = np.mat(testData, float)\\n        oneMat = np.ones((k, 1))\\n        sum = 0.0\\n        P0 = 0.0\\n        for i in range(N):\\n            temp = 0.0\\n            for j in range(k):\\n                sum += dataMat[i, j]\\n                temp += 1.0 * dataMat[i, j] ** 2\\n            temp -= n\\n            temp /= (n - 1) * n\\n            P0 += temp\\n        P0 = 1.0 * P0 / N\\n        ysum = np.sum(dataMat, axis=0)\\n        for i in range(k):\\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\\n        Pe = ysum * oneMat * 1.0\\n        ans = (P0 - Pe) / (1 - Pe)\\n        return ans[0, 0]\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727076962,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 903,\n    \"prompt_tokens\": 1104,\n    \"total_tokens\": 2007,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 528\n  }\n}", "test_case_name": "KappaCalculator.txt"}