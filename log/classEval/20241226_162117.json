{"response body": {"id": "588653e7-986f-46cb-a714-7540bd07e447", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:21:20", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class simulates a vending machine, allowing for the addition and purchase of items, restocking of items, and inserting coins.\n\"\"\"\n\nclass VendingMachine:\n    def __init__(self):\n        \"\"\"\n        Initialize the vending machine with an empty inventory and zero balance.\n        \"\"\"\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        \"\"\"\n        Adds an item to the vending machine's inventory.\n\n        Parameters:\n            item_name (str): Name of the item to add\n            price (float): Price of the item to add\n            quantity (int): Quantity of the item to add\n        \n        Test cases:\n            # Test case 1: Normal case\n            add_item('Coke', 1.50, 5)\n            assert 'Coke' in self.inventory\n            \n            # Test case 2: Duplicate item\n            add_item('Coke', 1.50, 5)\n            assert self.inventory['Coke']['quantity'] == 5\n            \n            # Test case 3: Negative quantity\n            add_item('Coke', 1.50, -5)\n            assert 'Coke' not in self.inventory\n        \"\"\"\n\n        if not self.restock_item(item_name, quantity):\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        \"\"\"\n        Increases the balance of the vending machine by the given amount.\n\n        Parameters:\n            amount (float): Amount to increase the balance by\n            \n        Returns:\n            float: The new balance after the coin is inserted\n            \n        Test cases:\n            # Test case 1: Normal case\n            insert_coin(1.00)\n            assert self.balance == 1.00\n            \n            # Test case 2: Negative amount\n            insert_coin(-1.00)\n            assert self.balance == 0\n            \n            # Test case 3: Non-numeric amount\n            insert_coin('one')\n            assert self.balance == 0\n        \"\"\"\n\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, item_name):\n        \"\"\"\n        Attempts to purchase an item from the vending machine.\n\n        Parameters:\n            item_name (str): Name of the item to purchase\n            \n        Returns:\n            float/bool: The new balance after the purchase, or False if the purchase was not successful\n            \n        Test cases:\n            # Test case 1: Sufficient balance and item quantity\n            purchase_item('Coke')\n            assert self.balance == 0 and self.inventory['Coke']['quantity'] == 4\n            \n            # Test case 2: Insufficient balance\n            purchase_item('Coke')\n            assert self.balance == 0 and self.inventory['Coke']['quantity'] == 4\n            \n            # Test case 3: Item does not exist\n            purchase_item('Pepsi')\n            assert self.balance == 0 and 'Pepsi' not in self.inventory\n        \"\"\"\n\n        if item_name in self.inventory:\n            item = self.inventory[item_name]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                self.balance -= item['price']\n                item['quantity'] -= 1\n                return self.balance\n            else:\n                return False\n        else:\n            return False\n\n    def restock_item(self, item_name, quantity):\n        \"\"\"\n        Attempts to restock an item in the vending machine.\n\n        Parameters:\n            item_name (str): Name of the item to restock\n            quantity (int): Quantity to add to the item's current stock\n            \n        Returns:\n            bool: True if the item was successfully restocked, False otherwise\n            \n        Test cases:\n            # Test case 1: Item exists in inventory\n            restock_item('Coke', 5)\n            assert self.inventory['Coke']['quantity'] == 9\n            \n            # Test case 2: Item does not exist in inventory\n            restock_item('Pepsi', 5)\n            assert 'Pepsi' not in self.inventory\n            \n            # Test case 3: Negative quantity\n            restock_item('Coke', -5)\n            assert self.inventory['Coke']['quantity'] == 9\n        \"\"\"\n\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        else:\n            return False\n\n    def display_items(self):\n        \"\"\"\n        Displays the items currently in the vending machine's inventory.\n\n        Returns:\n            str/bool: A string representation of the vending machine's inventory, or False if the inventory is empty\n\n        Test cases:\n            # Test case 1: Normal case\n            assert display_items() == 'Coke - $1.50 [9]'\n            \n            # Test case 2: Empty inventory\n            self.inventory = {}\n            assert display_items() == False\n            \n            # Test case 3: Multiple items in inventory\n            add_item('Pepsi', 1.75, 5)\n            assert display_items() == 'Coke - $1.50 [9]\\nPepsi - $1.75 [5]'\n        \"\"\"\n\n        if not self.inventory:\n            return False\n        else:\n            items = []\n            for item_name, item_info in self.inventory.items():\n                items.append(f\"{item_name} - ${item_info['price']} [{item_info['quantity']}]\")\n            return \"\\n\".join(items)"}}], "usage": {"completion_tokens": 1125, "prompt_tokens": 1387, "total_tokens": 2512}, "feeType": "1", "consume": 1.585732}, "test_case_name": "VendingMachine.txt"}