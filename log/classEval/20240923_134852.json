{"response body": {"id": "172bcb05-83c9-4b23-a5e7-42c141d5bf80", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:48:52", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "import math\n\nclass DataStatistics4:\n\n    @staticmethod\n    def correlation_coefficient(data1, data2):\n        # Calculate the correlation coefficient between two sets of data.\n        # param data1: list, first set of data\n        # param data2: list, second set of data\n        # return: float, the correlation coefficient value\n        # Some test cases for the function\n        # Test case 1: correlation_coefficient([1, 2, 3, 4], [1, 2, 3, 4]) -> 1.0\n        # Test case 2: correlation_coefficient([1, 2, 3, 4], [4, 3, 2, 1]) -> -1.0\n        # Test case 3: correlation_coefficient([1, 2, 3, 4], [1, 1, 1, 1]) -> 0.0\n        \n        n = len(data1)\n        mean1 = sum(data1) / n\n        mean2 = sum(data2) / n\n\n        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))\n        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))\n\n        return numerator / denominator if denominator != 0 else 0\n    \n    @staticmethod\n    def skewness(data):\n        # Calculate the skewness of a set of data.\n        # param data: list, the data for which skewness is calculated\n        # return: float, the skewness value\n        # Some test cases for the function\n        # Test case 1: skewness([1, 2, 3, 4]) -> 0.0\n        # Test case 2: skewness([1, 2, 3, 4, 5]) -> 0.0\n        # Test case 3: skewness([1, 1, 1, 1]) -> 0.0\n        \n        n = len(data)\n        mean = sum(data) / n\n        variance = sum((x - mean) ** 2 for x in data) / n\n        std_deviation = math.sqrt(variance)\n\n        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0\n\n        return skewness\n    \n    @staticmethod\n    def kurtosis(data):\n        # Calculate the kurtosis of a set of data.\n        # param data: list, the data for which kurtosis is calculated\n        # return: float, the kurtosis value\n        # Some test cases for the function\n        # Test case 1: kurtosis([1, 2, 3, 4]) -> -1.3\n        # Test case 2: kurtosis([1, 1, 1, 1]) -> 1.0\n        # Test case 3: kurtosis([1, 2, 3, 4, 5]) -> -1.2\n        \n        n = len(data)\n        mean = sum(data) / n\n        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)\n\n        if std_dev == 0:\n            return math.nan\n\n        centered_data = [(x - mean) for x in data]\n        fourth_moment = sum(x ** 4 for x in centered_data) / n\n\n        kurtosis_value = (fourth_moment / std_dev ** 4) - 3\n\n        return kurtosis_value\n    \n    @staticmethod\n    def pdf(data, mu, sigma):\n        # Calculate the probability density function (pdf) values for a set of data given mean and standard deviation.\n        # param data: list, the data points for which pdf is calculated\n        # param mu: float, the mean of the data\n        # param sigma: float, the standard deviation of the data\n        # return: list, the pdf values for each data point\n        # Some test cases for the function\n        # Test case 1: pdf([1, 2, 3, 4], 2, 1) -> [0.24197072451914337, 0.3989422804014327, 0.24197072451914337, 0.05399096651318806]\n        # Test case 2: pdf([1, 2, 3, 4, 5], 3, 1) -> [0.24197072451914337, 0.3989422804014327, 0.24197072451914337, 0.05399096651318806, 0.004431848411938007]\n        # Test case 3: pdf([1, 2, 3, 4], 2, 1.5) -> [0.2659617995551762, 0.2866515718799815, 0.2659617995551762, 0.1980288293120119]\n        \n        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]\n        return pdf_values"}}], "usage": {"completion_tokens": 1191, "prompt_tokens": 1120, "total_tokens": 2311}, "feeType": "1", "consume": 0.017041916164}, "test_case_name": "DataStatistics4.txt"}