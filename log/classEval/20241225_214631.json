{"response body": "ChatCompletion(id='chatcmpl-AiM00FWexfO4BlhKswpWaiPwV46XS', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class provides functionality to track a stock portfolio, allowing the addition,\\nremoval, buying, and selling of stocks, and the calculation of the overall portfolio value.\\n\"\"\"\\n\\nclass StockPortfolioTracker:\\n    def __init__(self, cash_balance):\\n        \"\"\"\\n        Initializes a StockPortfolioTracker instance with a given cash balance.\\n\\n        Parameters:\\n            cash_balance (float): The initial cash balance available for buying stocks.\\n        \"\"\"\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        \"\"\"\\n        Adds a stock to the portfolio. If the stock already exists, it updates the quantity.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock\\'s \\'name\\' and \\'quantity\\'.\\n\\n        Test cases:\\n            # Test case 1: Adding a new stock\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10})\\n            assert len(tracker.portfolio) == 1 and tracker.portfolio[0][\\'quantity\\'] == 10\\n            \\n            # Test case 2: Updating existing stock quantity\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5})\\n            assert tracker.portfolio[0][\\'quantity\\'] == 15\\n            \\n            # Test case 3: Adding another stock\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'quantity\\': 8})\\n            assert len(tracker.portfolio) == 2\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\']:\\n                pf[\\'quantity\\'] += stock[\\'quantity\\']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        \"\"\"\\n        Removes a stock from the portfolio. If the stock\\'s quantity becomes zero, it is deleted.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock\\'s \\'name\\' and \\'quantity\\'.\\n\\n        Returns:\\n            bool: True if the stock was successfully removed, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Removing existing stock\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10})\\n            assert tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5}) == True\\n            \\n            # Test case 2: Removing more than current quantity\\n            assert tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10}) == False\\n            \\n            # Test case 3: Removing stock with zero quantity\\n            tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5})\\n            assert len(tracker.portfolio) == 0\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\'] and pf[\\'quantity\\'] >= stock[\\'quantity\\']:\\n                pf[\\'quantity\\'] -= stock[\\'quantity\\']\\n                if pf[\\'quantity\\'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        \"\"\"\\n        Buys a specified stock if sufficient cash balance is available, adding it to the portfolio.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock\\'s \\'name\\', \\'quantity\\', and \\'price\\'.\\n\\n        Returns:\\n            bool: True if the stock was bought successfully, False if insufficient funds.\\n\\n        Test cases:\\n            # Test case 1: Successful purchase\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5, \\'price\\': 100}) == True\\n            \\n            # Test case 2: Insufficient funds\\n            assert tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 200}) == False\\n            \\n            # Test case 3: Buying stock exceeding current cash balance\\n            tracker = StockPortfolioTracker(100)\\n            assert tracker.buy_stock({\\'name\\': \\'GOOGL\\', \\'quantity\\': 1, \\'price\\': 1500}) == False\\n        \"\"\"\\n        if stock[\\'price\\'] * stock[\\'quantity\\'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock[\\'price\\'] * stock[\\'quantity\\']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        \"\"\"\\n        Sells a specified stock from the portfolio and updates the cash balance accordingly.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock\\'s \\'name\\' and \\'quantity\\'.\\n\\n        Returns:\\n            bool: True if the stock was sold successfully, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful sale\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 100})\\n            assert tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5, \\'price\\': 100}) == True\\n            \\n            # Test case 2: Selling stock not in portfolio\\n            assert tracker.sell_stock({\\'name\\': \\'TSLA\\', \\'quantity\\': 1, \\'price\\': 100}) == False\\n            \\n            # Test case 3: Selling more stock than available\\n            assert tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 100}) == False\\n        \"\"\"\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        \"\"\"\\n        Calculates the total value of the portfolio including cash balance and stock values.\\n\\n        Returns:\\n            float: The total value of the portfolio.\\n\\n        Test cases:\\n            # Test case 1: Empty portfolio\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.calculate_portfolio_value() == 1000\\n            \\n            # Test case 2: Portfolio with stocks\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 100})\\n            assert tracker.calculate_portfolio_value() == 2000  # 1000 cash + 1000 stock value\\n            \\n            # Test case 3: Portfolio with multiple stock types\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'quantity\\': 5, \\'price\\': 1500})\\n            assert tracker.calculate_portfolio_value() == 9500  # 1000 cash + (10*100 + 5*1500)\\n        \"\"\"\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        \"\"\"\\n        Provides a summary of the portfolio including the total value and details of each stock.\\n\\n        Returns:\\n            tuple: A tuple containing the total portfolio value and a summary of stocks.\\n\\n        Test cases:\\n            # Test case 1: Empty portfolio\\n            tracker = StockPortfolioTracker(1000)\\n            summary = tracker.get_portfolio_summary()\\n            assert summary[0] == 1000 and summary[1] == []\\n            \\n            # Test case 2: Portfolio with stocks\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 100})\\n            summary = tracker.get_portfolio_summary()\\n            assert summary[0] == 2000 and summary[1] == [{\\'name\\': \\'AAPL\\', \\'value\\': 1000}]\\n            \\n            # Test case 3: Portfolio with multiple stocks\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'quantity\\': 5, \\'price\\': 1500})\\n            summary = tracker.get_portfolio_summary()\\n            assert summary[0] == 9500 and len(summary[1]) == 2\\n        \"\"\"\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        \"\"\"\\n        Calculates the current value of a given stock in the portfolio.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing the stock\\'s \\'name\\', \\'quantity\\', and \\'price\\'.\\n\\n        Returns:\\n            float: The total value of the specified stock.\\n\\n        Test cases:\\n            # Test case 1: Single stock value\\n            assert get_stock_value({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 100}) == 1000\\n            \\n            # Test case 2: Stock with a different quantity\\n            assert get_stock_value({\\'name\\': \\'GOOGL\\', \\'quantity\\': 5, \\'price\\': 1500}) == 7500\\n            \\n            # Test case 3: Checking a stock\\'s value with zero quantity should return zero\\n            assert get_stock_value({\\'name\\': \\'TSLA\\', \\'quantity\\': 0, \\'price\\': 700}) == 0\\n        \"\"\"\\n        return stock[\\'price\\'] * stock[\\'quantity\\']\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735134360, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1874, prompt_tokens=1852, total_tokens=3726, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "StockPortfolioTracker.txt"}