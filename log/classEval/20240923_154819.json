{"response body": "{\n  \"id\": \"41e3b3cb-8626-40fb-8134-01f47f059ca6\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport math\\n\\nclass Statistics3:\\n    # A class containing various statistical methods for calculating median, mode, correlation, mean, correlation matrix, standard deviation, and z-scores.\\n\\n    @staticmethod\\n    def median(data):\\n        # Calculate the median of the given data.\\n        # param data: list, the data for which the median is to be calculated.\\n        # return: float or int, the median value of the data.\\n        # >>> Statistics3.median([1, 2, 3, 4, 5])\\n        # 3\\n        # >>> Statistics3.median([1, 2, 3, 4])\\n        # 2.5\\n        sorted_data = sorted(data)\\n        n = len(sorted_data)\\n        if n % 2 == 1:\\n            return sorted_data[n // 2]\\n        else:\\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\\n\\n    @staticmethod\\n    def mode(data):\\n        # Calculate the mode(s) of the given data.\\n        # param data: list, the data for which the mode(s) is/are to be calculated.\\n        # return: list, a list of mode values.\\n        # >>> Statistics3.mode([1, 2, 2, 3, 3, 3, 4])\\n        # [3]\\n        # >>> Statistics3.mode([1, 2, 2, 3, 3, 4, 4])\\n        # [2, 3, 4]\\n        counts = {}\\n        for value in data:\\n            counts[value] = counts.get(value, 0) + 1\\n        max_count = max(counts.values())\\n        mode_values = [value for value, count in counts.items() if count == max_count]\\n        return mode_values\\n\\n    @staticmethod\\n    def correlation(x, y):\\n        # Calculate the Pearson correlation coefficient between two datasets.\\n        # param x: list, the first dataset.\\n        # param y: list, the second dataset.\\n        # return: float or None, the correlation coefficient or None if the denominator is zero.\\n        # >>> Statistics3.correlation([1, 2, 3], [1, 2, 3])\\n        # 1.0\\n        # >>> Statistics3.correlation([1, 2, 3], [3, 2, 1])\\n        # -1.0\\n        n = len(x)\\n        mean_x = sum(x) / n\\n        mean_y = sum(y) / n\\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\\n        if denominator == 0:\\n            return None\\n        return numerator / denominator\\n\\n    @staticmethod\\n    def mean(data):\\n        # Calculate the mean of the given data.\\n        # param data: list, the data for which the mean is to be calculated.\\n        # return: float or None, the mean value of the data or None if the data is empty.\\n        # >>> Statistics3.mean([1, 2, 3, 4, 5])\\n        # 3.0\\n        # >>> Statistics3.mean([])\\n        # None\\n        if len(data) == 0:\\n            return None\\n        return sum(data) / len(data)\\n\\n    @staticmethod\\n    def correlation_matrix(data):\\n        # Calculate the correlation matrix for the given data.\\n        # param data: list of lists, the data for which the correlation matrix is to be calculated.\\n        # return: list of lists, the correlation matrix.\\n        # >>> Statistics3.correlation_matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]])\\n        # [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\\n        matrix = []\\n        for i in range(len(data[0])):\\n            row = []\\n            for j in range(len(data[0])):\\n                column1 = [row[i] for row in data]\\n                column2 = [row[j] for row in data]\\n                correlation = Statistics3.correlation(column1, column2)\\n                row.append(correlation)\\n            matrix.append(row)\\n        return matrix\\n\\n    @staticmethod\\n    def standard_deviation(data):\\n        # Calculate the standard deviation of the given data.\\n        # param data: list, the data for which the standard deviation is to be calculated.\\n        # return: float or None, the standard deviation value or None if the data has fewer than 2 elements.\\n        # >>> Statistics3.standard_deviation([1, 2, 3, 4, 5])\\n        # 1.5811388300841898\\n        # >>> Statistics3.standard_deviation([1])\\n        # None\\n        n = len(data)\\n        if n < 2:\\n            return None\\n        mean_value = Statistics3.mean(data)\\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\\n        return math.sqrt(variance)\\n\\n    @staticmethod\\n    def z_score(data):\\n        # Calculate the z-scores for the given data.\\n        # param data: list, the data for which the z-scores are to be calculated.\\n        # return: list or None, a list of z-scores or None if the standard deviation is zero or None.\\n        # >>> Statistics3.z_score([1, 2, 3, 4, 5])\\n        # [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]\\n        # >>> Statistics3.z_score([1, 1, 1])\\n        # None\\n        mean = Statistics3.mean(data)\\n        std_deviation = Statistics3.standard_deviation(data)\\n        if std_deviation is None or std_deviation == 0:\\n            return None\\n        return [(x - mean) / std_deviation for x in data]\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727077622,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1582,\n    \"prompt_tokens\": 1489,\n    \"total_tokens\": 3071,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 913\n  }\n}", "test_case_name": "Statistics3.txt"}