{"response body": {"id": "baa3f993-7322-48de-b1e8-165b74ea2538", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:51:44", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class is used for performing various encryption techniques on the provided text.\nclass EncryptionUtils:\n    def __init__(self, key):\n        # This function initializes the EncryptionUtils class with the provided key.\n        # The key is a string that is used for encrypting the text using different ciphers.\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        # This function encrypts the provided plaintext using the Caesar Cipher technique.\n        # The plaintext is a string that needs to be encrypted.\n        # The shift is an integer representing the number of places each letter in the plaintext is shifted down the alphabet.\n        # Returns the ciphertext obtained by shifting the letters of the plaintext down the alphabet by the shift value.\n        # Test case: assert EncryptionUtils('key').caesar_cipher('HELLO', 3) == 'KHOOR'\n        ciphertext = \"\"\n        for char in plaintext:\n            if char.isalpha():\n                if char.isupper():\n                    ascii_offset = 65\n                else:\n                    ascii_offset = 97\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                ciphertext += shifted_char\n            else:\n                ciphertext += char\n        return ciphertext\n    \n    def vigenere_cipher(self, plain_text):\n        # This function encrypts the provided plaintext using the Vigenere Cipher technique.\n        # The plain_text is a string that needs to be encrypted.\n        # Returns the encrypted text obtained by shifting each letter in the plaintext by a number of places determined by the key.\n        # Test case: assert EncryptionUtils('key').vigenere_cipher('HELLO') == 'RIJVS'\n        encrypted_text = \"\"\n        key_index = 0\n        for char in plain_text:\n            if char.isalpha():\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\n                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))\n                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char\n                key_index += 1\n            else:\n                encrypted_text += char\n        return encrypted_text\n\n    def rail_fence_cipher(self, plain_text, rails):\n        # This function encrypts the provided plaintext using the Rail Fence Cipher technique.\n        # The plain_text is a string that needs to be encrypted.\n        # The rails is an integer representing the number of rails in the fence.\n        # Returns the encrypted text obtained by arranging the letters of the plaintext in a zigzag pattern on a fence with the specified number of rails.\n        # Test case: assert EncryptionUtils('key').rail_fence_cipher('HELLO', 3) == 'HLELO'\n        fence = [['\\n' for _ in range(len(plain_text))] for _ in range(rails)]\n        direction = -1\n        row, col = 0, 0\n\n        for char in plain_text:\n            if row == 0 or row == rails-1:\n                direction = -direction\n\n            fence[row][col] = char\n            col += 1\n            row += direction\n\n        encrypted_text = ''\n        for i in range(rails):\n            for j in range(len(plain_text)):\n                if fence[i][j] != '\\n':\n                    encrypted_text += fence[i][j]\n\n        return encrypted_text\n```"}}], "usage": {"completion_tokens": 709, "prompt_tokens": 1040, "total_tokens": 1749}, "feeType": "1", "consume": 1.071688}, "test_case_name": "EncryptionUtils.txt"}