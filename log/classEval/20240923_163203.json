{"response body": "{\n  \"id\": \"2aea8656-1a25-4a6a-a9d4-5c92bd0be086\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport random\\n\\n\\nclass Snake:\\n    # This class represents the Snake game logic, including the snake's movement, food consumption, and game reset.\\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\\n        # Initialize the Snake object with screen dimensions, block size, and initial food position.\\n        # param SCREEN_WIDTH: int, the width of the game screen\\n        # param SCREEN_HEIGHT: int, the height of the game screen\\n        # param BLOCK_SIZE: int, the size of each block in the game\\n        # param food_position: tuple, the initial position of the food\\n        self.length = 1\\n        self.SCREEN_WIDTH = SCREEN_WIDTH\\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\\n        self.BLOCK_SIZE = BLOCK_SIZE\\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\\n        self.score = 0\\n        self.food_position = food_position\\n\\n    def move(self, direction):\\n        # Move the snake in the specified direction and handle food consumption and collision detection.\\n        # param direction: tuple, the direction in which the snake should move (e.g., (1, 0) for right)\\n        # return: None, updates the snake's position and handles game logic\\n        # >>> snake = Snake(400, 400, 20, (200, 200))\\n        # >>> snake.move((1, 0))\\n        # >>> snake.positions[0]\\n        # (220.0, 200.0)\\n        cur = self.positions[0]\\n        x, y = direction\\n\\n        new = (\\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\\n        )\\n\\n        if new == self.food_position:\\n            self.eat_food()\\n\\n        if len(self.positions) > 2 and new in self.positions[2:]:\\n            self.reset()\\n        else:\\n            self.positions.insert(0, new)\\n            if len(self.positions) > self.length:\\n                self.positions.pop()\\n\\n    def random_food_position(self):\\n        # Generate a new random position for the food that does not overlap with the snake's body.\\n        # return: None, updates the food_position attribute\\n        while self.food_position in self.positions:\\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)\\n\\n    def reset(self):\\n        # Reset the game state, including the snake's length, position, score, and food position.\\n        # return: None, resets the game state\\n        # >>> snake = Snake(400, 400, 20, (200, 200))\\n        # >>> snake.length = 5\\n        # >>> snake.positions = [(100, 100), (120, 100), (140, 100), (160, 100), (180, 100)]\\n        # >>> snake.score = 400\\n        # >>> snake.reset()\\n        # >>> snake.length\\n        # 1\\n        # >>> snake.positions\\n        # [(200.0, 200.0)]\\n        # >>> snake.score\\n        # 0\\n        self.length = 1\\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\\n        self.score = 0\\n        self.random_food_position()\\n\\n    def eat_food(self):\\n        # Handle the snake eating the food, increasing its length and score, and generating a new food position.\\n        # return: None, updates the snake's length, score, and food position\\n        # >>> snake = Snake(400, 400, 20, (200, 200))\\n        # >>> snake.eat_food()\\n        # >>> snake.length\\n        # 2\\n        # >>> snake.score\\n        # 100\\n        self.length += 1\\n        self.score += 100\\n        self.random_food_position()\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080266,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1087,\n    \"prompt_tokens\": 1212,\n    \"total_tokens\": 2299,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 636\n  }\n}", "test_case_name": "Snake.txt"}