{"response body": {"id": "a1aac3c1-91c2-456f-b2d0-f00e978c5909", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:14:07", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom datetime import datetime, timedelta\n\n# This class is a basic utility for managing a calendar of events, including adding and removing events, checking availability, and getting upcoming events.\nclass CalendarUtil:\n    def __init__(self):\n        # This function initializes an empty list of events to be managed by the calendar.\n        self.events = []\n\n    def add_event(self, event):\n        # This function appends an event to the events list.\n        # Param event: dict, the details of the event to be added. It should include keys like 'date', 'start_time', and 'end_time'.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.add_event({'date':datetime(2022, 12, 25), 'start_time':datetime(2022, 12, 25, 10, 0), 'end_time':datetime(2022, 12, 25, 11, 0)})\n        self.events.append(event)\n\n    def remove_event(self, event):\n        # This function removes an event from the events list if it exists.\n        # Param event: dict, the details of the event to be removed.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.remove_event({'date':datetime(2022, 12, 25), 'start_time':datetime(2022, 12, 25, 10, 0), 'end_time':datetime(2022, 12, 25, 11, 0)})\n        if event in self.events:\n            self.events.remove(event)\n\n    def get_events(self, date):\n        # This function returns a list of all events on a given date.\n        # Param date: datetime, the date to fetch events for.\n        # Return: list, the list of all events happening on the given date.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.get_events(datetime(2022, 12, 25))\n        events_on_date = []\n        for event in self.events:\n            if event['date'].date() == date.date():\n                events_on_date.append(event)\n        return events_on_date\n\n    def is_available(self, start_time, end_time):\n        # This function checks if the calendar is available between the given start_time and end_time.\n        # Param start_time: datetime, the starting time to check for availability.\n        # Param end_time: datetime, the ending time to check for availability.\n        # Return: bool, True if the calendar is available, False otherwise.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.is_available(datetime(2022, 12, 25, 10, 0), datetime(2022, 12, 25, 11, 0))\n        for event in self.events:\n            if start_time < event['end_time'] and end_time > event['start_time']:\n                return False\n        return True\n\n    def get_available_slots(self, date):\n        # This function returns a list of all available 60-minute slots on a given date.\n        # Param date: datetime, the date to fetch available slots for.\n        # Return: list, a list of tuples where each tuple represents an available time slot.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.get_available_slots(datetime(2022, 12, 25))\n        available_slots = []\n        start_time = datetime(date.year, date.month, date.day, 0, 0)\n        end_time = datetime(date.year, date.month, date.day, 23, 59)\n\n        while start_time < end_time:\n            slot_end_time = start_time + timedelta(minutes=60)\n            if self.is_available(start_time, slot_end_time):\n                available_slots.append((start_time, slot_end_time))\n            start_time += timedelta(minutes=60)\n\n        return available_slots\n\n    def get_upcoming_events(self, num_events):\n        # This function returns a list of the next num_events upcoming events.\n        # Param num_events: int, the number of upcoming events to fetch.\n        # Return: list, the list of upcoming events.\n        # Test case: >>> calendar = CalendarUtil()\n        #            >>> calendar.get_upcoming_events(5)\n        now = datetime.now()\n        upcoming_events = []\n        for event in self.events:\n            if event['start_time'] >= now:\n                upcoming_events.append(event)\n            if len(upcoming_events) == num_events:\n                break\n        return upcoming_events\n```"}}], "usage": {"completion_tokens": 944, "prompt_tokens": 1060, "total_tokens": 2004}, "feeType": "1", "consume": 1.285328}, "test_case_name": "CalendarUtil.txt"}