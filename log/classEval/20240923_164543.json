{"response body": "{\n  \"id\": \"8d7f44ed-1733-4393-8920-b73f4605ac99\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class provides static methods to build SQL queries for common operations like SELECT, INSERT, DELETE, and UPDATE.\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns='*', where=None):\\n        # Generate a SELECT SQL query string based on the provided table, columns, and optional WHERE clause.\\n        # param table: str, the name of the table to query.\\n        # param columns: list or str, the columns to select. Defaults to '*'.\\n        # param where: dict, optional, the conditions for the WHERE clause.\\n        # return: str, the generated SQL SELECT query string.\\n        # >>> SQLQueryBuilder.select('users', ['id', 'name'], {'id': '1', 'name': 'John'})\\n        # \\\"SELECT id, name FROM users WHERE id='1' AND name='John'\\\"\\n        # >>> SQLQueryBuilder.select('users')\\n        # \\\"SELECT * FROM users\\\"\\n        if columns != '*':\\n            columns = ', '.join(columns)\\n        query = f\\\"SELECT {columns} FROM {table}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        # Generate an INSERT SQL query string based on the provided table and data.\\n        # param table: str, the name of the table to insert into.\\n        # param data: dict, the data to insert, where keys are column names and values are the corresponding values.\\n        # return: str, the generated SQL INSERT query string.\\n        # >>> SQLQueryBuilder.insert('users', {'id': '1', 'name': 'John'})\\n        # \\\"INSERT INTO users (id, name) VALUES ('1', 'John')\\\"\\n        keys = ', '.join(data.keys())\\n        values = ', '.join(f\\\"'{v}'\\\" for v in data.values())\\n        return f\\\"INSERT INTO {table} ({keys}) VALUES ({values})\\\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        # Generate a DELETE SQL query string based on the provided table and optional WHERE clause.\\n        # param table: str, the name of the table to delete from.\\n        # param where: dict, optional, the conditions for the WHERE clause.\\n        # return: str, the generated SQL DELETE query string.\\n        # >>> SQLQueryBuilder.delete('users', {'id': '1'})\\n        # \\\"DELETE FROM users WHERE id='1'\\\"\\n        # >>> SQLQueryBuilder.delete('users')\\n        # \\\"DELETE FROM users\\\"\\n        query = f\\\"DELETE FROM {table}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        # Generate an UPDATE SQL query string based on the provided table, data, and optional WHERE clause.\\n        # param table: str, the name of the table to update.\\n        # param data: dict, the data to update, where keys are column names and values are the new values.\\n        # param where: dict, optional, the conditions for the WHERE clause.\\n        # return: str, the generated SQL UPDATE query string.\\n        # >>> SQLQueryBuilder.update('users', {'name': 'John'}, {'id': '1'})\\n        # \\\"UPDATE users SET name='John' WHERE id='1'\\\"\\n        # >>> SQLQueryBuilder.update('users', {'name': 'John'})\\n        # \\\"UPDATE users SET name='John'\\\"\\n        update_str = ', '.join(f\\\"{k}='{v}'\\\" for k, v in data.items())\\n        query = f\\\"UPDATE {table} SET {update_str}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727081094,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 918,\n    \"prompt_tokens\": 1075,\n    \"total_tokens\": 1993,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 499\n  }\n}", "test_case_name": "SQLQueryBuilder.txt"}