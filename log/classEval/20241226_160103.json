{"response body": {"id": "357cba52-3927-4d96-8387-e1ee734e21e5", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:01:06", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class is responsible for unescaping numeric HTML entities from a given string.\n\"\"\"\n\nclass NumericEntityUnescaper:\n    def __init__(self):\n        \"\"\"\n        Initializes the `NumericEntityUnescaper` class.\n        \"\"\"\n        pass\n\n    def replace(self, string):\n        \"\"\"\n        Replaces all numeric HTML entities in the given string with their corresponding characters.\n\n        Parameters:\n            string (str): The input string that may contain numeric HTML entities.\n\n        Returns:\n            str: A string with all numeric HTML entities replaced with their corresponding characters.\n\n        Test cases:\n\n            # Test case 1: Normal case with decimal entity\n            assert replace(\"Hello &#32; World\") == \"Hello  World\"\n\n            # Test case 2: Normal case with hexadecimal entity\n            assert replace(\"Hello &#x20; World\") == \"Hello  World\"\n\n            # Test case 3: Edge case with no entity in the string\n            assert replace(\"Hello World\") == \"Hello World\"\n        \"\"\"\n        out = []\n        pos = 0\n        length = len(string)\n\n        while pos < length - 2:\n            if string[pos] == '&' and string[pos + 1] == '#':\n                start = pos + 2\n                is_hex = False\n                first_char = string[start]\n\n                if first_char == 'x' or first_char == 'X':\n                    start += 1\n                    is_hex = True\n\n                if start == length:\n                    return ''.join(out)\n\n                end = start\n                while end < length and self.is_hex_char(string[end]):\n                    end += 1\n\n                if end < length and string[end] == ';':\n                    try:\n                        entity_value = int(string[start:end], 16 if is_hex else 10)\n                    except:\n                        return ''.join(out)\n\n                    out.append(chr(entity_value))\n                    pos = end + 1\n                    continue\n\n            out.append(string[pos])\n            pos += 1\n\n        return ''.join(out)\n\n    @staticmethod\n    def is_hex_char(char):\n        \"\"\"\n        Checks if a character is a hexadecimal digit.\n\n        Parameters:\n            char (str): The character to check.\n\n        Returns:\n            bool: True if the character is a hexadecimal digit, False otherwise.\n\n        Test cases:\n\n            # Test case 1: Normal case with hexadecimal digit\n            assert is_hex_char(\"A\") == True\n\n            # Test case 2: Normal case with decimal digit\n            assert is_hex_char(\"9\") == True\n\n            # Test case 3: Edge case with non-digit character\n            assert is_hex_char(\"Z\") == False\n        \"\"\"\n        return char.isdigit() or ('a' <= char.lower() <= 'f')"}}], "usage": {"completion_tokens": 559, "prompt_tokens": 1282, "total_tokens": 1841}, "feeType": "1", "consume": 1.0464}, "test_case_name": "NumericEntityUnescaper.txt"}