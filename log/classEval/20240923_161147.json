{"response body": "{\n  \"id\": \"5d20957a-4afd-4bba-9484-fe2ff2d32944\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class is designed to track fitness metrics such as BMI, condition judgment, and calorie intake based on user's height, weight, age, and sex.\\nclass FitnessTracker:\\n    def __init__(self, height, weight, age, sex) -> None:\\n        # Initialize the fitness tracker with user's height, weight, age, and sex, and set the standard BMI ranges for males and females.\\n        self.height = height\\n        self.weight = weight\\n        self.age = age\\n        self.sex = sex\\n        self.BMI_std = [\\n            {\\\"male\\\": [20, 25]},\\n            {\\\"female\\\": [19, 24]}\\n        ]\\n\\n    def get_BMI(self):\\n        # Calculate the Body Mass Index (BMI) based on the user's height and weight.\\n        # return: float, the calculated BMI value.\\n        # >>> tracker = FitnessTracker(1.75, 70, 30, \\\"male\\\")\\n        # >>> tracker.get_BMI()\\n        # 22.86\\n        return self.weight / self.height ** 2\\n\\n    def condition_judge(self):\\n        # Determine the user's fitness condition based on their BMI and sex, returning 1 for too fat, -1 for too thin, and 0 for normal.\\n        # return: int, 1 if too fat, -1 if too thin, 0 if normal.\\n        # >>> tracker = FitnessTracker(1.75, 70, 30, \\\"male\\\")\\n        # >>> tracker.condition_judge()\\n        # 0\\n        # >>> tracker = FitnessTracker(1.75, 90, 30, \\\"male\\\")\\n        # >>> tracker.condition_judge()\\n        # 1\\n        # >>> tracker = FitnessTracker(1.75, 50, 30, \\\"male\\\")\\n        # >>> tracker.condition_judge()\\n        # -1\\n        BMI = self.get_BMI()\\n        if self.sex == \\\"male\\\":\\n            BMI_range = self.BMI_std[0][\\\"male\\\"]\\n        else:\\n            BMI_range = self.BMI_std[1][\\\"female\\\"]\\n        if BMI > BMI_range[1]:\\n            # too fat\\n            return 1\\n        elif BMI < BMI_range[0]:\\n            # too thin\\n            return -1\\n        else:\\n            # normal\\n            return 0\\n\\n    def calculate_calorie_intake(self):\\n        # Calculate the recommended daily calorie intake based on the user's BMR (Basal Metabolic Rate) and their fitness condition.\\n        # return: float, the recommended daily calorie intake.\\n        # >>> tracker = FitnessTracker(1.75, 70, 30, \\\"male\\\")\\n        # >>> tracker.calculate_calorie_intake()\\n        # 2200.0\\n        # >>> tracker = FitnessTracker(1.75, 90, 30, \\\"male\\\")\\n        # >>> tracker.calculate_calorie_intake()\\n        # 2640.0\\n        # >>> tracker = FitnessTracker(1.75, 50, 30, \\\"male\\\")\\n        # >>> tracker.calculate_calorie_intake()\\n        # 2880.0\\n        if self.sex == \\\"male\\\":\\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\\n        else:\\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\\n        if self.condition_judge() == 1:\\n            calorie_intake = BMR * 1.2  # Sedentary lifestyle\\n        elif self.condition_judge() == -1:\\n            calorie_intake = BMR * 1.6  # Active lifestyle\\n        else:\\n            calorie_intake = BMR * 1.4  # Moderate lifestyle\\n        return calorie_intake\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079060,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 944,\n    \"prompt_tokens\": 1117,\n    \"total_tokens\": 2061,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 541\n  }\n}", "test_case_name": "FitnessTracker.txt"}