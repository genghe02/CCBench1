{"response body": {"id": "0aafd354-b1c4-48bf-bfce-52b96044b9d4", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:26:13", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class represents a classroom, maintaining a list of courses and providing methods to manage the courses and check \nscheduling conflicts.\n\"\"\"\n\nfrom datetime import datetime\n\n\nclass Classroom:\n    def __init__(self, id):\n        \"\"\"\n        Initialization method for the Classroom object.\n        \n        Parameters:\n            id (int): A unique identifier for the Classroom.\n        \"\"\"\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        \"\"\"\n        Add a new course to the classroom.\n        \n        Parameters:\n            course (dict): A dictionary representing a course. Should contain 'name', 'start_time', and 'end_time' fields.\n\n        Test cases:\n            # Test case 1: Adding a course to an empty classroom\n            classroom = Classroom(1)\n            classroom.add_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\n            assert classroom.courses == [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n\n            # Test case 2: Adding a course to a classroom with existing courses\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            classroom.add_course({'name': 'English', 'start_time': '10:30', 'end_time': '11:30'})\n            assert classroom.courses == [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}, {'name': 'English', 'start_time': '10:30', 'end_time': '11:30'}]\n\n            # Test case 3: Trying to add a duplicate course\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            classroom.add_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\n            assert classroom.courses == [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n        \"\"\"\n        \n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        \"\"\"\n        Remove a course from the classroom.\n        \n        Parameters:\n            course (dict): A dictionary representing the course to be removed. Should match one of the courses in the list.\n\n        Test cases:\n            # Test case 1: Removing a course from the classroom\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            classroom.remove_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\n            assert classroom.courses == []\n\n            # Test case 2: Trying to remove a course that isn't in the classroom\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            classroom.remove_course({'name': 'English', 'start_time': '10:30', 'end_time': '11:30'})\n            assert classroom.courses == [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n\n            # Test case 3: Trying to remove a course from an empty classroom\n            classroom = Classroom(1)\n            classroom.remove_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\n            assert classroom.courses == []\n        \"\"\"\n        \n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        \"\"\"\n        Check whether the classroom is free at a specific time.\n        \n        Parameters:\n            check_time (str): The time to check, in 'HH:MM' format.\n            \n        Returns:\n            bool: True if the classroom is free at the specified time, False otherwise.\n            \n        Test cases:\n            # Test case 1: Checking a time when the classroom is occupied\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            assert classroom.is_free_at('09:30') == False\n\n            # Test case 2: Checking a time when the classroom is free\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            assert classroom.is_free_at('10:30') == True\n\n            # Test case 3: Checking a time on an empty classroom\n            classroom = Classroom(1)\n            assert classroom.is_free_at('09:30') == True\n        \"\"\"\n\n        check_time = datetime.strptime(check_time, '%H:%M')\n\n        for course in self.courses:\n            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'], '%H:%M'):\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        \"\"\"\n        Check whether a new course conflicts with any existing courses in the classroom.\n        \n        Parameters:\n            new_course (dict): A dictionary representing the new course. Should contain 'start_time' and 'end_time' fields.\n            \n        Returns:\n            bool: True if the new course doesn't conflict with any existing courses, False otherwise.\n            \n        Test cases:\n            # Test case 1: Adding a course with no conflicts\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            assert classroom.check_course_conflict({'name': 'English', 'start_time': '10:30', 'end_time': '11:30'}) == True\n\n            # Test case 2: Adding a course that conflicts with an existing course\n            classroom = Classroom(1)\n            classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\n            assert classroom.check_course_conflict({'name': 'English', 'start_time': '09:30', 'end_time': '10:30'}) == False\n\n            # Test case 3: Adding a course to an empty classroom\n            classroom = Classroom(1)\n            assert classroom.check_course_conflict({'name': 'English', 'start_time': '09:30', 'end_time': '10:30'}) == True\n        \"\"\"\n        \n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n\n        flag = True\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if start_time <= new_start_time and end_time >= new_start_time:\n                flag = False\n            if start_time <= new_end_time and end_time >= new_end_time:\n                flag = False\n        return flag"}}], "usage": {"completion_tokens": 1562, "prompt_tokens": 1372, "total_tokens": 2934}, "feeType": "1", "consume": 1.960256}, "test_case_name": "ClassroomManagement.txt"}