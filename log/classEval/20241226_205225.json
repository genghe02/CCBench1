{"response body": "ChatCompletion(id='chatcmpl-AihdRtOGMMFuzBxh4tnled8AFeAuA', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class implements various statistical functions for analyzing data.\\n\\nIt includes methods like median, mode, correlation, mean, correlation matrix, standard deviation, and z-score calculations.\\n\"\"\"\\n\\nimport math\\n\\nclass Statistics3:\\n\\n    @staticmethod\\n    def median(data):\\n        \"\"\"\\n        Calculate the median value of a given dataset.\\n\\n        Parameters:\\n            data (list): A list of numerical values from which to calculate the median\\n\\n        Returns:\\n            float: The median value of the input data\\n\\n        Test cases:\\n            # Test case 1: Odd-length list\\n            assert Statistics3.median([1, 3, 5, 7, 9]) == 5.0\\n            \\n            # Test case 2: Even-length list\\n            assert Statistics3.median([2, 4, 6, 8]) == 5.0\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.median([]) is None\\n        \"\"\"\\n\\n        sorted_data = sorted(data)\\n        n = len(sorted_data)\\n        if n % 2 == 1:\\n            return sorted_data[n // 2]\\n        else:\\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\\n\\n    @staticmethod\\n    def mode(data):\\n        \"\"\"\\n        Find the mode value(s) of a given dataset.\\n\\n        Parameters:\\n            data (list): A list of values from which to find the mode\\n        \\n        Returns:\\n            list: A list of mode value(s) present in the input data\\n\\n        Test cases:\\n            # Test case 1: Single mode\\n            assert Statistics3.mode([1, 1, 1, 2, 2, 3]) == [1]\\n            \\n            # Test case 2: Multiple modes\\n            assert Statistics3.mode([1, 1, 2, 2, 3, 3, 3]) == [3]\\n            \\n            # Test case 3: No mode\\n            assert Statistics3.mode([1, 2, 3, 4, 5]) == []\\n        \"\"\"\\n\\n        counts = {}\\n        for value in data:\\n            counts[value] = counts.get(value, 0) + 1\\n        max_count = max(counts.values())\\n        mode_values = [value for value, count in counts.items() if count == max_count]\\n        return mode_values\\n\\n    @staticmethod\\n    def correlation(x, y):\\n        \"\"\"\\n        Calculate the correlation coefficient between two datasets.\\n\\n        Parameters:\\n            x (list): First list of numerical values\\n            y (list): Second list of numerical values\\n        \\n        Returns:\\n            float: The correlation coefficient between the two input datasets\\n                   Returns None if denominator is zero\\n\\n        Test cases:\\n            # Test case 1: Perfect correlation\\n            assert Statistics3.correlation([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == 1.0\\n\\n            # Test case 2: No correlation\\n            assert Statistics3.correlation([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) == 0.0\\n\\n            # Test case 3: Empty input\\n            assert Statistics3.correlation([], []) is None\\n        \"\"\"\\n\\n        n = len(x)\\n        mean_x = sum(x) / n\\n        mean_y = sum(y) / n\\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\\n        if denominator == 0:\\n            return None\\n        return numerator / denominator\\n\\n    @staticmethod\\n    def mean(data):\\n        \"\"\"\\n        Calculate the mean value of a given dataset.\\n\\n        Parameters:\\n            data (list): A list of numerical values to calculate the mean\\n        \\n        Returns:\\n            float: The mean value of the input data\\n                   Returns None for an empty input\\n\\n        Test cases:\\n            # Test case 1: Sample data\\n            assert Statistics3.mean([1, 2, 3, 4, 5]) == 3.0\\n\\n            # Test case 2: Empty list\\n            assert Statistics3.mean([]) is None\\n\\n            # Test case 3: Single value\\n            assert Statistics3.mean([42]) == 42.0\\n        \"\"\"\\n\\n        if len(data) == 0:\\n            return None\\n        return sum(data) / len(data)\\n\\n    @staticmethod\\n    def correlation_matrix(data):\\n        \"\"\"\\n        Generate a correlation matrix for a given multi-dimensional dataset.\\n\\n        Parameters:\\n            data (list): A 2D list of numerical values for which to calculate correlation\\n        \\n        Returns:\\n            list: A 2D matrix where each element is the correlation coefficient between two columns\\n                  Returns None if len(data) is less than 2\\n\\n        Test cases:\\n            # Test case 1: Simple case with two columns\\n            assert Statistics3.correlation_matrix([[1, 2, 3], [4, 5, 6]]) == [[1.0, 1.0], [1.0, 1.0]]\\n\\n            # Test case 2: Empty input\\n            assert Statistics3.correlation_matrix([]) == None\\n\\n            # Test case 3: Single column input\\n            assert Statistics3.correlation_matrix([[1, 2, 3]]) == None\\n        \"\"\"\\n\\n        matrix = []\\n        for i in range(len(data[0])):\\n            row = []\\n            for j in range(len(data[0])):\\n                column1 = [row[i] for row in data]\\n                column2 = [row[j] for row in data]\\n                correlation = Statistics3.correlation(column1, column2)\\n                row.append(correlation)\\n            matrix.append(row)\\n        return matrix\\n\\n    @staticmethod\\n    def standard_deviation(data):\\n        \"\"\"\\n        Calculate the standard deviation of a given dataset.\\n\\n        Parameters:\\n            data (list): A list of numerical values for which to calculate the standard deviation\\n        \\n        Returns:\\n            float: The standard deviation value of the input data\\n                   Returns None for a dataset with less than 2 elements\\n\\n        Test cases:\\n            # Test case 1: Standard case\\n            assert Statistics3.standard_deviation([1, 2, 3, 4, 5]) == 1.5811388300841898\\n\\n            # Test case 2: Empty input\\n            assert Statistics3.standard_deviation([]) is None\\n\\n            # Test case 3: Single value\\n            assert Statistics3.standard_deviation([42]) is None\\n        \"\"\"\\n\\n        n = len(data)\\n        if n < 2:\\n            return None\\n        mean_value = Statistics3.mean(data)\\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\\n        return math.sqrt(variance)\\n\\n    @staticmethod\\n    def z_score(data):\\n        \"\"\"\\n        Calculate the z-scores of a given dataset.\\n\\n        Parameters:\\n            data (list): A list of numerical values for which to calculate the z-scores\\n        \\n        Returns:\\n            list: A list of z-scores corresponding to the input data\\n                  Returns None if standard deviation is zero or dataset is empty\\n\\n        Test cases:\\n            # Test case 1: Standard case\\n            assert Statistics3.z_score([1, 2, 3, 4, 5]) == [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]\\n\\n            # Test case 2: Empty input\\n            assert Statistics3.z_score([]) is None\\n\\n            # Test case 3: No variability in data\\n            assert Statistics3.z_score([1, 1, 1, 1, 1]) is None\\n        \"\"\"\\n\\n        mean = Statistics3.mean(data)\\n        std_deviation = Statistics3.standard_deviation(data)\\n        if std_deviation is None or std_deviation == 0:\\n            return None\\n        return [(x - mean) / std_deviation for x in data]\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735217529, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1746, prompt_tokens=1696, total_tokens=3442, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Statistics3.txt"}