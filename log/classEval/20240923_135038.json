{"response body": {"id": "dc2ee5ed-9102-441b-b2c5-c06a271e4911", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:50:38", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "class Hotel:\n    # This class represents a hotel with available and booked rooms management.\n\n    def __init__(self, name, rooms):\n        # Initialize the Hotel object with a name and available rooms.\n        # name: str, the name of the hotel\n        # rooms: dict, the available rooms in the hotel\n        self.name = name\n        self.available_rooms = rooms\n        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}\n        # available_rooms = {'single': 5, 'double': 3}\n        self.booked_rooms = {}\n        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}\n        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}\n\n    def book_room(self, room_type, room_number, name):\n        # Book a room of a specific type for a guest if available.\n        # room_type: str, the type of room being booked\n        # room_number: int, the number of rooms to book\n        # name: str, the name of the guest booking the room\n        # return: str or bool, \"Success!\" if room is booked, number of available rooms if not enough, False if room type not available\n        # Booking a room and updating available and booked rooms accordingly.\n        if room_type not in self.available_rooms.keys():\n            return False\n\n        if room_number <= self.available_rooms[room_type]:\n            if room_type not in self.booked_rooms.keys():\n                self.booked_rooms[room_type] = {}\n            self.booked_rooms[room_type][name] = room_number\n            self.available_rooms[room_type] -= room_number\n            return \"Success!\"\n        elif self.available_rooms[room_type] != 0:\n            return self.available_rooms[room_type]\n        else:\n            return False\n\n    def check_in(self, room_type, room_number, name):\n        # Check-in a guest to a booked room if available.\n        # room_type: str, the type of room to check-in\n        # room_number: int, the number of rooms to check-in\n        # name: str, the name of the guest checking-in\n        # return: bool, True if check-in successful, False otherwise\n        # Checking-in a guest to a booked room and updating booked rooms information.\n        if room_type not in self.booked_rooms.keys():\n            return False\n        if name in self.booked_rooms[room_type]:\n            if room_number > self.booked_rooms[room_type][name]:\n                return False\n            elif room_number == self.booked_rooms[room_type][name]:\n                self.booked_rooms[room_type].pop(name)\n            else:\n                self.booked_rooms[room_type][name] -= room_number\n\n    def check_out(self, room_type, room_number):\n        # Check-out a guest from a booked room and update available room count.\n        # room_type: str, the type of room to check-out\n        # room_number: int, the number of rooms to check-out\n        # Check-out a guest and update the available room count.\n\n        if room_type in self.available_rooms:\n            self.available_rooms[room_type] += room_number\n        else:\n            self.available_rooms[room_type] = room_number\n\n    def get_available_rooms(self, room_type):\n        # Get the number of available rooms of a specific type.\n        # room_type: str, the type of room to get availability for\n        # return: int, number of available rooms for the specified room type\n        # Retrieve the count of available rooms for a specific type.\n        return self.available_rooms[room_type]"}}], "usage": {"completion_tokens": 793, "prompt_tokens": 1182, "total_tokens": 1975}, "feeType": "1", "consume": 0.012931230228}, "test_case_name": "Hotel.txt"}