{"response body": "ChatCompletion(id='chatcmpl-AiLfoNy4bHf9U61C0J4yUVGwDbnkU', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class provides an interface for handling operations on Word documents, including reading text, \\nwriting text, adding headings, and adding tables.\\n\"\"\"\\n\\nfrom docx import Document\\nfrom docx.shared import Pt\\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\\n\\nclass DocFileHandler:\\n    def __init__(self, file_path):\\n        \"\"\"\\n        Initializes the DocFileHandler with the given file path.\\n\\n        Parameters:\\n            file_path (str): The path to the Word document file to be handled.\\n        \"\"\"\\n        self.file_path = file_path\\n\\n    def read_text(self):\\n        \"\"\"\\n        Reads the text content from the Word document.\\n\\n        Returns:\\n            str: The combined text of all paragraphs in the document, separated by new lines.\\n\\n        Test cases:\\n            # Test case 1: Regular document with multiple paragraphs\\n            input = \\'test_document.docx\\'  # Assuming this file exists and has paragraphs\\n            expected_output = \"First paragraph text.\\\\nSecond paragraph text.\"\\n            \\n            # Test case 2: Document with no text\\n            input = \\'empty_document.docx\\'  # Assuming this file exists with no paragraphs\\n            expected_output = \"\"\\n            \\n            # Test case 3: Nonexistent document\\n            input = \\'nonexistent.docx\\'  # This file does not exist\\n            expected_output = FileNotFoundError\\n        \"\"\"\\n        doc = Document(self.file_path)\\n        text = []\\n        for paragraph in doc.paragraphs:\\n            text.append(paragraph.text)\\n        return \"\\\\n\".join(text)\\n\\n    def write_text(self, content, font_size=12, alignment=\\'left\\'):\\n        \"\"\"\\n        Writes text content to a new Word document, with specified font size and alignment.\\n\\n        Parameters:\\n            content (str): The text content to write to the document.\\n            font_size (int, optional): The font size of the text. Default is 12.\\n            alignment (str, optional): The text alignment (\\'left\\', \\'center\\', \\'right\\'). Default is \\'left\\'.\\n\\n        Returns:\\n            bool: True if text was written successfully, False if an error occurred.\\n\\n        Test cases:\\n            # Test case 1: Normal usage with valid content\\n            input = (\\'Hello World\\', 12, \\'center\\')\\n            expected_output = True\\n            \\n            # Test case 2: Edge case with empty content\\n            input = (\\'\\', 12, \\'left\\')\\n            expected_output = True  # Writing empty string should not raise an error\\n            \\n            # Test case 3: Edge case with invalid alignment\\n            input = (\\'Sample text\\', 12, \\'invalid\\')\\n            expected_output = True  # Should fall back to left alignment\\n        \"\"\"\\n        try:\\n            doc = Document()\\n            paragraph = doc.add_paragraph()\\n            run = paragraph.add_run(content)\\n            font = run.font\\n            font.size = Pt(font_size)\\n            alignment_value = self._get_alignment_value(alignment)\\n            paragraph.alignment = alignment_value\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def add_heading(self, heading, level=1):\\n        \"\"\"\\n        Adds a heading to the Word document.\\n\\n        Parameters:\\n            heading (str): The heading text to add.\\n            level (int, optional): The heading level (1-5). Default is 1.\\n\\n        Returns:\\n            bool: True if the heading was added successfully, False if an error occurred.\\n\\n        Test cases:\\n            # Test case 1: Normal heading addition\\n            input = (\\'Chapter 1\\', 1)\\n            expected_output = True\\n            \\n            # Test case 2: Adding a heading with a level greater than 5\\n            input = (\\'Invalid Heading\\', 6)\\n            expected_output = True  # Should default to level 1\\n            \\n            # Test case 3: Nonexistent document\\n            input = (\\'New Heading\\', 1)  # If file_path is invalid, we expect False\\n            expected_output = False\\n        \"\"\"\\n        try:\\n            doc = Document(self.file_path)\\n            doc.add_heading(heading, level)\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def add_table(self, data):\\n        \"\"\"\\n        Adds a table to the Word document.\\n\\n        Parameters:\\n            data (list of list): A two-dimensional list containing data to populate the table.\\n\\n        Returns:\\n            bool: True if the table was added successfully, False if an error occurred.\\n\\n        Test cases:\\n            # Test case 1: Normal table addition\\n            input = [[\\'Header 1\\', \\'Header 2\\'], [\\'Row 1 Col 1\\', \\'Row 1 Col 2\\']]\\n            expected_output = True\\n            \\n            # Test case 2: Empty table data\\n            input = [[]]\\n            expected_output = True  # Adding empty table should not raise an error\\n            \\n            # Test case 3: Nonexistent document\\n            input = [[\\'Invalid Header\\']]\\n            expected_output = False  # If file_path is invalid, we expect False\\n        \"\"\"\\n        try:\\n            doc = Document(self.file_path)\\n            table = doc.add_table(rows=len(data), cols=len(data[0]))\\n            for i, row in enumerate(data):\\n                for j, cell_value in enumerate(row):\\n                    table.cell(i, j).text = str(cell_value)\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def _get_alignment_value(self, alignment):\\n        \"\"\"\\n        Gets the alignment value for the specified alignment string.\\n\\n        Parameters:\\n            alignment (str): The alignment string (left, center, right).\\n\\n        Returns:\\n            WD_PARAGRAPH_ALIGNMENT: The corresponding alignment value for use in Word document.\\n\\n        Test cases:\\n            # Test case 1: Valid alignment string \\'left\\'\\n            input = \\'left\\'\\n            expected_output = WD_PARAGRAPH_ALIGNMENT.LEFT\\n            \\n            # Test case 2: Valid alignment string \\'center\\'\\n            input = \\'center\\'\\n            expected_output = WD_PARAGRAPH_ALIGNMENT.CENTER\\n            \\n            # Test case 3: Invalid alignment string \\'invalid\\'\\n            input = \\'invalid\\'\\n            expected_output = WD_PARAGRAPH_ALIGNMENT.LEFT  # Fallback to default\\n        \"\"\"\\n        alignment_options = {\\n            \\'left\\': WD_PARAGRAPH_ALIGNMENT.LEFT,\\n            \\'center\\': WD_PARAGRAPH_ALIGNMENT.CENTER,\\n            \\'right\\': WD_PARAGRAPH_ALIGNMENT.RIGHT\\n        }\\n        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735133108, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1335, prompt_tokens=1744, total_tokens=3079, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "DocFileHandler.txt"}