{"response body": {"id": "ca570a0a-cf8f-4905-92a9-5b4601a8d6b7", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:56:07", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class implements a movie booking system that allows users to add movies, book tickets and check available movies within a certain timeframe.\n\"\"\"\n\nfrom datetime import datetime\nimport numpy as np\n\nclass MovieBookingSystem:\n    def __init__(self):\n        \"\"\"\n        Initializes an instance of the MovieBookingSystem class with an empty list of movies.\n        \n        Test cases:\n            # Test case 1: Successful instantiation\n            mbs = MovieBookingSystem()\n            assert mbs.movies == []\n        \"\"\"\n        self.movies = []\n\n    def add_movie(self, name, price, start_time, end_time, n):\n        \"\"\"\n        Adds a movie to the list of available movies in the system.\n\n        Parameters:\n            name (str): The name of the movie.\n            price (float): The price of a ticket for the movie.\n            start_time (str): The start time of the movie in 'HH:MM' format.\n            end_time (str): The end time of the movie in 'HH:MM' format.\n            n (int): The number of seats in the theatre for the movie (the theatre is assumed to be a square with n rows and n columns).\n        \n        Test cases:\n            # Test case 1: Adding a movie\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            assert mbs.movies[0]['name'] == \"Inception\"\n            \n            # Test case 2: Adding two movies\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            mbs.add_movie(\"Interstellar\", 12.0, \"17:00\", \"20:00\", 5)\n            assert len(mbs.movies) == 2\n        \"\"\"\n        movie = {\n            'name': name,\n            'price': price,\n            'start_time': datetime.strptime(start_time, '%H:%M'),\n            'end_time': datetime.strptime(end_time, '%H:%M'),\n            'seats': np.zeros((n, n))\n        }\n        self.movies.append(movie)\n\n    def book_ticket(self, name, seats_to_book):\n        \"\"\"\n        Books a ticket for a specific movie and seat.\n\n        Parameters:\n            name (str): The name of the movie.\n            seats_to_book (list): A list of tuples representing the seats to be booked. Each tuple is in the format (row number, column number).\n\n        Returns:\n            str: A success message if the booking is successful, or an error message if the booking fails.\n            \n        Test cases:\n            # Test case 1: Successful booking\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            assert mbs.book_ticket(\"Inception\", [(1, 1)]) == \"Booking success.\"\n            \n            # Test case 2: Failed booking due to seat being taken\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            mbs.book_ticket(\"Inception\", [(1, 1)])\n            assert mbs.book_ticket(\"Inception\", [(1, 1)]) == \"Booking failed.\"\n            \n            # Test case 3: Failed booking due to movie not being found\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            assert mbs.book_ticket(\"Interstellar\", [(1, 1)]) == \"Movie not found.\"\n        \"\"\"\n        for movie in self.movies:\n            if movie['name'] == name:\n                for seat in seats_to_book:\n                    if movie['seats'][seat[0]][seat[1]] == 0:\n                        movie['seats'][seat[0]][seat[1]] = 1\n                    else:\n                        return \"Booking failed.\"\n                return \"Booking success.\"\n        return \"Movie not found.\"\n\n\n    def available_movies(self, start_time, end_time):\n        \"\"\"\n        Lists all the movies that are available within a certain timeframe.\n\n        Parameters:\n            start_time (str): The start of the timeframe in 'HH:MM' format.\n            end_time (str): The end of the timeframe in 'HH:MM' format.\n\n        Returns:\n            list: A list of movie names that are available within the given timeframe.\n            \n        Test cases:\n            # Test case 1: Finding available movies\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            mbs.add_movie(\"Interstellar\", 12.0, \"17:00\", \"20:00\", 5)\n            assert mbs.available_movies(\"13:00\", \"18:00\") == [\"Inception\"]\n            \n            # Test case 2: No available movies\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            mbs.add_movie(\"Interstellar\", 12.0, \"17:00\", \"20:00\", 5)\n            assert mbs.available_movies(\"10:00\", \"13:00\") == []\n            \n            # Test case 3: All movies are available\n            mbs = MovieBookingSystem()\n            mbs.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5)\n            mbs.add_movie(\"Interstellar\", 12.0, \"17:00\", \"20:00\", 5)\n            assert mbs.available_movies(\"10:00\", \"22:00\") == [\"Inception\", \"Interstellar\"]\n        \"\"\"\n        start_time = datetime.strptime(start_time, '%H:%M')\n        end_time = datetime.strptime(end_time, '%H:%M')\n\n        available_movies = []\n        for movie in self.movies:\n            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:\n                available_movies.append(movie['name'])\n\n        return available_movies"}}], "usage": {"completion_tokens": 1320, "prompt_tokens": 1356, "total_tokens": 2676}, "feeType": "1", "consume": 1.742256}, "test_case_name": "MovieBookingSystem.txt"}