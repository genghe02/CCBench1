{"response body": "ChatCompletion(id='chatcmpl-A6GJMvCNINnIeI7pI9Yy5wXhsKHVG', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"```python\\nimport random\\n\\n# This class represents the Mahjong Connect game mechanics, including board initialization and moves.\\nclass MahjongConnect:\\n    def __init__(self, BOARD_SIZE, ICONS):\\n        # Initialize the game board and icons\\n        # param BOARD_SIZE: tuple, the dimensions of the board (rows, columns)\\n        # param ICONS: list, the available icons to place on the board\\n        # >>> game = MahjongConnect((4, 4), ['A', 'B', 'C', 'D'])\\n        # >>> game.board  # Should print a 4x4 board with random icons\\n        self.BOARD_SIZE = BOARD_SIZE\\n        self.ICONS = ICONS\\n        self.board = self.create_board()\\n\\n    def create_board(self):\\n        # Create a board filled with random icons for the Mahjong game\\n        # return: list, the generated game board as a 2D array\\n        # >>> board = game.create_board()  \\n        # >>> len(board)  # Should equal BOARD_SIZE[0]\\n        # >>> len(board[0])  # Should equal BOARD_SIZE[1]\\n        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]\\n        return board\\n\\n    def is_valid_move(self, pos1, pos2):\\n        # Check if the selected move between two positions is valid\\n        # param pos1: tuple, the coordinates of the first position (x1, y1)\\n        # param pos2: tuple, the coordinates of the second position (x2, y2)\\n        # return: bool, True if the move is valid, False otherwise\\n        # >>> game.is_valid_move((0, 0), (1, 1))  # Example move\\n        # >>> game.is_valid_move((0, 0), (0, 0))  # Same position, should return False\\n        x1, y1 = pos1\\n        x2, y2 = pos2\\n\\n        # Check if positions are within the game board range\\n        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[0] and 0 <= y2 < self.BOARD_SIZE[1]):\\n            return False\\n\\n        # Check if the two positions are the same\\n        if pos1 == pos2:\\n            return False\\n\\n        # Check if the two positions have the same icon\\n        if self.board[x1][y1] != self.board[x2][y2]:\\n            return False\\n\\n        # Check if there is a valid path between the two positions\\n        if not self.has_path(pos1, pos2):\\n            return False\\n\\n        return True\\n\\n    def has_path(self, pos1, pos2):\\n        # Determine if there is a valid path between two positions on the board\\n        # param pos1: tuple, the coordinates of the first position\\n        # param pos2: tuple, the coordinates of the second position\\n        # return: bool, True if a path exists, False otherwise\\n        # >>> game.has_path((0, 0), (1, 1))  # Example positions\\n        # >>> game.has_path((0, 0), (2, 2))  # Check for valid path\\n        visited = set()\\n        stack = [pos1]\\n\\n        while stack:\\n            current_pos = stack.pop()\\n            if current_pos == pos2:\\n                return True\\n\\n            if current_pos in visited:\\n                continue\\n\\n            visited.add(current_pos)\\n            x, y = current_pos\\n\\n            # Check adjacent positions (up, down, left, right)\\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\\n                new_x, new_y = x + dx, y + dy\\n                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:\\n                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:\\n                        stack.append((new_x, new_y))\\n\\n        return False\\n\\n    def remove_icons(self, pos1, pos2):\\n        # Remove icons from the board at the specified positions\\n        # param pos1: tuple, the coordinates of the first position to clear\\n        # param pos2: tuple, the coordinates of the second position to clear\\n        # >>> game.remove_icons((0, 0), (0, 1))  # Should clear icons at those positions\\n        x1, y1 = pos1\\n        x2, y2 = pos2\\n        self.board[x1][y1] = ' '\\n        self.board[x2][y2] = ' '\\n\\n    def is_game_over(self):\\n        # Check if the game is over, meaning there are no icons left on the board\\n        # return: bool, True if the game is over, False otherwise\\n        # >>> game.is_game_over()  # Check if all icons are removed\\n        for row in self.board:\\n            if any(icon != ' ' for icon in row):\\n                return False\\n        return True\\n```\", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056032, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=1125, prompt_tokens=1462, total_tokens=2587))", "test_case_name": "MahjongConnect.txt"}