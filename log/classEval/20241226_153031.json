{"response body": {"id": "3dda18a4-3b93-450a-a1d3-9bf93d516ef9", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:30:34", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides functionality for converting between different currencies and managing exchange rates.\n\"\"\"\n\nclass CurrencyConverter:\n    def __init__(self):\n        \"\"\"\n        Initialize a new instance of the CurrencyConverter. Sets default exchange rates.\n        \"\"\"\n        self.rates = {\n            'USD': 1.0,\n            'EUR': 0.85,\n            'GBP': 0.72,\n            'JPY': 110.15,\n            'CAD': 1.23,\n            'AUD': 1.34,\n            'CNY': 6.40,\n        }\n\n    def convert(self, amount, from_currency, to_currency):\n        \"\"\"\n        Converts a given amount from one currency to another.\n\n        Parameters:\n            amount (float): The amount to be converted\n            from_currency (str): The currency to convert from\n            to_currency (str): The currency to convert to\n\n        Returns:\n            float: The converted amount in the target currency, False if conversion is not possible\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert convert(100, 'USD', 'EUR') == 85.0\n\n            # Test case 2: Conversion to the same currency\n            assert convert(100, 'USD', 'USD') == 100\n\n            # Test case 3: Conversion with unknown currency\n            assert convert(100, 'USD', 'XYZ') == False\n        \"\"\"\n        if from_currency == to_currency:\n            return amount\n\n        if from_currency not in self.rates or to_currency not in self.rates:\n            return False\n\n        from_rate = self.rates[from_currency]\n        to_rate = self.rates[to_currency]\n\n        converted_amount = (amount / from_rate) * to_rate\n        return converted_amount\n\n    def get_supported_currencies(self):\n        \"\"\"\n        Returns a list of supported currencies.\n\n        Returns:\n            list: A list of supported currency codes\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert get_supported_currencies() == ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']\n\n            # Test case 2: After adding a new currency\n            add_currency_rate('NZD', 1.40)\n            assert get_supported_currencies() == ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY', 'NZD']\n        \"\"\"\n        return list(self.rates.keys())\n\n    def add_currency_rate(self, currency, rate):\n        \"\"\"\n        Adds a new currency and its exchange rate.\n\n        Parameters:\n            currency (str): The currency code to be added\n            rate (float): The exchange rate of the new currency\n\n        Returns:\n            bool: False if the currency already exists, None otherwise\n\n        Test cases:\n            # Test case 1: Adding a new currency\n            assert add_currency_rate('NZD', 1.40) == None\n\n            # Test case 2: Adding an existing currency\n            assert add_currency_rate('USD', 1.0) == False\n        \"\"\"\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n\n    def update_currency_rate(self, currency, new_rate):\n        \"\"\"\n        Updates the exchange rate of an existing currency.\n\n        Parameters:\n            currency (str): The currency code to be updated\n            new_rate (float): The new exchange rate\n\n        Returns:\n            bool: False if the currency does not exist, None otherwise\n\n        Test cases:\n            # Test case 1: Updating an existing currency\n            assert update_currency_rate('USD', 1.1) == None\n\n            # Test case 2: Updating a non-existing currency\n            assert update_currency_rate('XYZ', 1.0) == False\n        \"\"\"\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate"}}], "usage": {"completion_tokens": 819, "prompt_tokens": 1341, "total_tokens": 2160}, "feeType": "1", "consume": 1.298844}, "test_case_name": "CurrencyConverter.txt"}