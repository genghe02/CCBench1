{"response body": "{\n  \"id\": \"4076e96e-11c9-4aee-9860-8b4ed2d4423a\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents a Movie Booking System that allows users to add movies, book tickets, and check available movies within a specified time range.\\n\\\"\\\"\\\"\\n\\nfrom datetime import datetime\\nimport numpy as np\\n\\nclass MovieBookingSystem:\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes the MovieBookingSystem with an empty list of movies.\\n        \\n        Test cases:\\n            # Test case 1: Initialize the system\\n            system = MovieBookingSystem()\\n            assert len(system.movies) == 0\\n        \\\"\\\"\\\"\\n        self.movies = []\\n\\n    def add_movie(self, name, price, start_time, end_time, n):\\n        \\\"\\\"\\\"\\n        Adds a new movie to the system with the specified details.\\n        \\n        Parameters:\\n            name (str): The name of the movie.\\n            price (float): The price of a ticket for the movie.\\n            start_time (str): The start time of the movie in 'HH:MM' format.\\n            end_time (str): The end time of the movie in 'HH:MM' format.\\n            n (int): The size of the seating matrix (n x n).\\n        \\n        Test cases:\\n            # Test case 1: Add a movie with valid details\\n            system = MovieBookingSystem()\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 5)\\n            assert len(system.movies) == 1\\n            \\n            # Test case 2: Add a movie with invalid time format (should raise ValueError)\\n            try:\\n                system.add_movie('Inception', 10.0, '14:00', '16:30:00', 5)\\n            except ValueError:\\n                pass\\n            \\n            # Test case 3: Add a movie with zero seats\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 0)\\n            assert len(system.movies) == 2\\n        \\\"\\\"\\\"\\n        movie = {\\n            'name': name,\\n            'price': price,\\n            'start_time': datetime.strptime(start_time, '%H:%M'),\\n            'end_time': datetime.strptime(end_time, '%H:%M'),\\n            'seats': np.zeros((n, n))\\n        }\\n        self.movies.append(movie)\\n\\n    def book_ticket(self, name, seats_to_book):\\n        \\\"\\\"\\\"\\n        Books tickets for a specified movie.\\n        \\n        Parameters:\\n            name (str): The name of the movie to book tickets for.\\n            seats_to_book (list of tuples): A list of seat coordinates to book, where each tuple is (row, column).\\n        \\n        Returns:\\n            str: A message indicating the result of the booking attempt.\\n        \\n        Test cases:\\n            # Test case 1: Successful booking\\n            system = MovieBookingSystem()\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 5)\\n            result = system.book_ticket('Inception', [(0, 0), (1, 1)])\\n            assert result == \\\"Booking success.\\\"\\n            \\n            # Test case 2: Booking failed due to already booked seats\\n            system = MovieBookingSystem()\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 5)\\n            system.book_ticket('Inception', [(0, 0)])\\n            result = system.book_ticket('Inception', [(0, 0)])\\n            assert result == \\\"Booking failed.\\\"\\n            \\n            # Test case 3: Movie not found\\n            system = MovieBookingSystem()\\n            result = system.book_ticket('Inception', [(0, 0)])\\n            assert result == \\\"Movie not found.\\\"\\n        \\\"\\\"\\\"\\n        for movie in self.movies:\\n            if movie['name'] == name:\\n                for seat in seats_to_book:\\n                    if movie['seats'][seat[0]][seat[1]] == 0:\\n                        movie['seats'][seat[0]][seat[1]] = 1\\n                    else:\\n                        return \\\"Booking failed.\\\"\\n                return \\\"Booking success.\\\"\\n        return \\\"Movie not found.\\\"\\n\\n    def available_movies(self, start_time, end_time):\\n        \\\"\\\"\\\"\\n        Returns a list of movies available within the specified time range.\\n        \\n        Parameters:\\n            start_time (str): The start time of the range in 'HH:MM' format.\\n            end_time (str): The end time of the range in 'HH:MM' format.\\n        \\n        Returns:\\n            list of str: A list of movie names available within the specified time range.\\n        \\n        Test cases:\\n            # Test case 1: Available movies within the range\\n            system = MovieBookingSystem()\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 5)\\n            system.add_movie('Interstellar', 12.0, '15:00', '17:30', 5)\\n            result = system.available_movies('13:00', '18:00')\\n            assert result == ['Inception', 'Interstellar']\\n            \\n            # Test case 2: No movies available within the range\\n            system = MovieBookingSystem()\\n            system.add_movie('Inception', 10.0, '14:00', '16:30', 5)\\n            result = system.available_movies('17:00', '18:00')\\n            assert result == []\\n            \\n            # Test case 3: Invalid time format (should raise ValueError)\\n            try:\\n                system.available_movies('13:00', '18:00:00')\\n            except ValueError:\\n                pass\\n        \\\"\\\"\\\"\\n        start_time = datetime.strptime(start_time, '%H:%M')\\n        end_time = datetime.strptime(end_time, '%H:%M')\\n\\n        available_movies = []\\n        for movie in self.movies:\\n            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:\\n                available_movies.append(movie['name'])\\n\\n        return available_movies\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194559,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1272,\n    \"prompt_tokens\": 1386,\n    \"total_tokens\": 2658,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 426\n  }\n}", "test_case_name": "MovieBookingSystem.txt"}