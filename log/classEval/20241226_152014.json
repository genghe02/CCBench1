{"response body": {"id": "902a811b-3810-4102-b750-a3fd10a5d1d0", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:20:18", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThe class BoyerMooreSearch implements the Boyer-Moore algorithm for string matching.\nThis algorithm finds the occurrences of a pattern in a text string.\n\"\"\"\n\nclass BoyerMooreSearch:\n    def __init__(self, text, pattern):\n        \"\"\"\n        Initializes the BoyerMooreSearch instance.\n\n        Parameters:\n            text (str): The input text in which to search for the pattern.\n            pattern (str): The pattern to search for within the text.\n        \"\"\"\n        self.text, self.pattern = text, pattern\n        self.textLen, self.patLen = len(text), len(pattern)\n\n    def match_in_pattern(self, char):\n        \"\"\"\n        Finds the last occurrence of the character in the pattern.\n\n        Parameters:\n            char (str): The character to find in the pattern.\n\n        Returns:\n            int: The index of the last occurrence of the character in the pattern, or -1 if the character is not found.\n\n        Test cases:\n            # Test case 1: Character is in the pattern\n            assert match_in_pattern('a') == 1\n\n            # Test case 2: Character is not in the pattern\n            assert match_in_pattern('b') == -1\n\n            # Test case 3: Character is the first character of the pattern\n            assert match_in_pattern('c') == 0\n        \"\"\"\n        for i in range(self.patLen - 1, -1, -1):\n            if char == self.pattern[i]:\n                return i\n        return -1\n\n    def mismatch_in_text(self, currentPos):\n        \"\"\"\n        Finds the first mismatching character from the end of the pattern in the text.\n\n        Parameters:\n            currentPos (int): The current position in the text.\n\n        Returns:\n            int: The index of the first mismatching character in the text, or -1 if there is no mismatch.\n\n        Test cases:\n            # Test case 1: There is a mismatch in the text\n            assert mismatch_in_text(2) == 3\n\n            # Test case 2: There is no mismatch in the text\n            assert mismatch_in_text(1) == -1\n\n            # Test case 3: The mismatch is at the first character of the pattern\n            assert mismatch_in_text(3) == 3\n        \"\"\"\n        for i in range(self.patLen - 1, -1, -1):\n            if self.pattern[i] != self.text[currentPos + i]:\n                return currentPos + i\n        return -1\n\n    def bad_character_heuristic(self):\n        \"\"\"\n        Implements the bad character heuristic of the Boyer-Moore algorithm.\n\n        Returns:\n            list: A list of all positions in the text where the pattern is found.\n\n        Test cases:\n            # Test case 1: The pattern is found in the text\n            assert bad_character_heuristic() == [1, 3]\n\n            # Test case 2: The pattern is not found in the text\n            assert bad_character_heuristic() == []\n\n            # Test case 3: The pattern is found at the beginning of the text\n            assert bad_character_heuristic() == [0]\n        \"\"\"\n        positions = []\n        for i in range(self.textLen - self.patLen + 1):\n            mismatch_index = self.mismatch_in_text(i)\n            if mismatch_index == -1:\n                positions.append(i)\n            else:\n                match_index = self.match_in_pattern(self.text[mismatch_index])\n                i = (mismatch_index - match_index)\n        return positions"}}], "usage": {"completion_tokens": 728, "prompt_tokens": 1288, "total_tokens": 2016}, "feeType": "1", "consume": 1.196384}, "test_case_name": "BoyerMooreSearch.txt"}