{"response body": {"id": "7482fc8e-8590-4034-bbb7-64768abcc6dc", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:36:16", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport numpy as np\nfrom gensim import matutils\nfrom numpy import dot, array\n\n# This class provides a collection of static methods for various vector operations, such as computing cosine similarities, normalizing vectors, and calculating IDF weights.\nclass VectorUtil:\n    @staticmethod\n    def similarity(vector_1, vector_2):\n        # This function calculates the cosine similarity between two vectors.\n        # :param vector_1: numpy array, the first vector\n        # :param vector_2: numpy array, the second vector\n        # :return: float, the cosine similarity between the two vectors.\n        # Testing the function with the same vectors should return a similarity of 1.0\n        # >>> VectorUtil.similarity(np.array([1, 2, 3]), np.array([1, 2, 3]))\n        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))\n\n    @staticmethod\n    def cosine_similarities(vector_1, vectors_all):\n        # This function calculates the cosine similarities between a vector and a collection of vectors.\n        # :param vector_1: numpy array, the vector to compare\n        # :param vectors_all: numpy array, the collection of vectors to compare with\n        # :return: numpy array, the cosine similarities between the vector and each of the vectors in the collection.\n        # Testing the function with the same vectors should return an array of similarities of 1.0\n        # >>> VectorUtil.cosine_similarities(np.array([1, 2, 3]), np.array([[1, 2, 3], [1, 2, 3]]))\n        norm = np.linalg.norm(vector_1)\n        all_norms = np.linalg.norm(vectors_all, axis=1)\n        dot_products = dot(vectors_all, vector_1)\n        similarities = dot_products / (norm * all_norms)\n        return similarities\n\n    @staticmethod\n    def n_similarity(vector_list_1, vector_list_2):\n        # This function calculates the cosine similarity between the means of two lists of vectors.\n        # :param vector_list_1: list of numpy arrays, the first list of vectors\n        # :param vector_list_2: list of numpy arrays, the second list of vectors\n        # :return: float, the cosine similarity between the mean vectors of the two lists.\n        # Testing the function with the same vectors should return a similarity of 1.0\n        # >>> VectorUtil.n_similarity([np.array([1, 2, 3])], [np.array([1, 2, 3])])\n        if not (len(vector_list_1) and len(vector_list_2)):\n            raise ZeroDivisionError('At least one of the passed list is empty.')\n\n        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),\n                   matutils.unitvec(array(vector_list_2).mean(axis=0)))\n\n    @staticmethod\n    def compute_idf_weight_dict(total_num, number_dict):\n        # This function calculates the IDF (Inverse Document Frequency) weights for a collection of terms.\n        # :param total_num: int, the total number of documents\n        # :param number_dict: dict, a dictionary where the keys are terms and the values are the number of documents in which each term appears\n        # :return: dict, a dictionary where the keys are terms and the values are the corresponding IDF weights.\n        # Testing the function with a total_num of 5 and number_dict {'a':3, 'b':2} should return a dictionary with keys 'a' and 'b' and their corresponding IDF weights.\n        # >>> VectorUtil.compute_idf_weight_dict(5, {'a':3, 'b':2})\n        index_2_key_map = {}\n\n        index = 0\n\n        count_list = []\n        for key, count in number_dict.items():\n            index_2_key_map[index] = key\n            count_list.append(count)\n            index = index + 1\n\n        a = np.array(count_list)\n        # smooth, in case the divide by zero error\n        a = np.log((total_num + 1) / (a + 1))\n        result = {}\n\n        for index, w in enumerate(a):\n            key = index_2_key_map[index]\n            result[key] = w\n\n        return result\n```"}}], "usage": {"completion_tokens": 916, "prompt_tokens": 1040, "total_tokens": 1956}, "feeType": "1", "consume": 1.252192}, "test_case_name": "VectorCalculator.txt"}