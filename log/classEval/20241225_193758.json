{"response body": "ChatCompletion(id='chatcmpl-AiJzfKPmPpOxrU1G0wghgU5m5JHk7', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class calculates the total price of items in a shopping cart and applies different discount strategies\\nbased on customer attributes and cart contents. It supports multiple promotional rules, including fidelity \\ndiscounts, bulk item discounts, and large order discounts. This class can be used in e-commerce applications \\nto manage checkout processes.\\n\\nDependencies:\\n- No external dependencies\\n\"\"\"\\n\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        \"\"\"\\n        Initializes the DiscountStrategy instance.\\n\\n        Parameters:\\n            customer (dict): A dictionary containing customer details such as \\'fidelity\\'.\\n            cart (list): A list of dictionaries representing items in the cart with keys \\'price\\' and \\'quantity\\'.\\n            promotion (callable, optional): A promotion function to calculate discounts. Defaults to None.\\n\\n        Test cases:\\n            # Test case 1: Basic customer and cart\\n            customer = {\\'fidelity\\': 1200}\\n            cart = [{\\'price\\': 50, \\'quantity\\': 2}, {\\'price\\': 30, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert discount_strategy.__total == 130\\n    \\n            # Test case 2: No promotion provided\\n            customer = {\\'fidelity\\': 500}\\n            cart = [{\\'price\\': 15, \\'quantity\\': 4}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert discount_strategy.__total == 60\\n\\n            # Test case 3: Promotion function provided\\n            customer = {\\'fidelity\\': 1500}\\n            cart = [{\\'price\\': 10, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\\n            assert discount_strategy.__total == 10\\n        \"\"\"\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        \"\"\"\\n        Calculates the total price of items in the cart.\\n\\n        Returns:\\n            float: The total amount calculated from the cart items.\\n\\n        Test cases:\\n            # Test case 1: Total calculation for multiple items\\n            cart = [{\\'price\\': 20, \\'quantity\\': 3}, {\\'price\\': 15, \\'quantity\\': 2}]\\n            discount_strategy = DiscountStrategy({\\'fidelity\\': 500}, cart)\\n            assert discount_strategy.total() == 90\\n            \\n            # Test case 2: Total for a single item\\n            cart = [{\\'price\\': 100, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy({\\'fidelity\\': 500}, cart)\\n            assert discount_strategy.total() == 100\\n            \\n            # Test case 3: Total with no items\\n            cart = []\\n            discount_strategy = DiscountStrategy({\\'fidelity\\': 500}, cart)\\n            assert discount_strategy.total() == 0.0\\n        \"\"\"\\n        self.__total = sum(item[\\'quantity\\'] * item[\\'price\\'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        \"\"\"\\n        Calculates the final amount due after applying any applicable discounts.\\n\\n        Returns:\\n            float: The amount due after applying discounts.\\n\\n        Test cases:\\n            # Test case 1: Due amount without promotions\\n            customer = {\\'fidelity\\': 500}\\n            cart = [{\\'price\\': 20, \\'quantity\\': 1}, {\\'price\\': 30, \\'quantity\\': 2}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert discount_strategy.due() == 80\\n            \\n            # Test case 2: Due amount with Fidelity promotion\\n            customer = {\\'fidelity\\': 1500}\\n            cart = [{\\'price\\': 10, \\'quantity\\': 1}, {\\'price\\': 50, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\\n            assert discount_strategy.due() == 57.5\\n            \\n            # Test case 3: Due amount with no items\\n            customer = {\\'fidelity\\': 500}\\n            cart = []\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert discount_strategy.due() == 0.0\\n        \"\"\"\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        \"\"\"\\n        Promotional strategy for customers with high fidelity points\\n        providing a discount of 5% on their total order.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order object containing customer and cart details.\\n\\n        Returns:\\n            float: The calculated discount amount based on fidelity points.\\n\\n        Test cases:\\n            # Test case 1: Eligible for fidelity promo\\n            customer = {\\'fidelity\\': 1200}\\n            cart = [{\\'price\\': 100, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.FidelityPromo(discount_strategy) == 5.0\\n            \\n            # Test case 2: Not eligible for fidelity promo\\n            customer = {\\'fidelity\\': 900}\\n            cart = [{\\'price\\': 100, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.FidelityPromo(discount_strategy) == 0\\n            \\n            # Test case 3: High total with eligible fidelity\\n            customer = {\\'fidelity\\': 2000}\\n            cart = [{\\'price\\': 200, \\'quantity\\': 1}]\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.FidelityPromo(discount_strategy) == 10.0\\n        \"\"\"\\n        return order.total() * 0.05 if order.customer[\\'fidelity\\'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        \"\"\"\\n        Promotional strategy for bulk purchases providing a discount of \\n        10% for each item if the quantity is 20 or more.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order object containing customer and cart details.\\n\\n        Returns:\\n            float: The calculated discount from bulk items.\\n\\n        Test cases:\\n            # Test case 1: Bulk items eligible for discount\\n            cart = [{\\'price\\': 10, \\'quantity\\': 20}]\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.BulkItemPromo(discount_strategy) == 20.0\\n            \\n            # Test case 2: No bulk items\\n            cart = [{\\'price\\': 10, \\'quantity\\': 19}]\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.BulkItemPromo(discount_strategy) == 0.0\\n            \\n            # Test case 3: Mixed quantity items\\n            cart = [{\\'price\\': 15, \\'quantity\\': 21}, {\\'price\\': 10, \\'quantity\\': 10}]\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.BulkItemPromo(discount_strategy) == 31.5\\n        \"\"\"\\n        discount = 0\\n        for item in order.cart:\\n            if item[\\'quantity\\'] >= 20:\\n                discount += item[\\'quantity\\'] * item[\\'price\\'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        \"\"\"\\n        Promotional strategy for large orders that offers a discount of \\n        7% if there are 10 or more unique products in the cart.\\n\\n        Parameters:\\n            order (DiscountStrategy): The order object containing customer and cart details.\\n\\n        Returns:\\n            float: The calculated discount from a large order.\\n\\n        Test cases:\\n            # Test case 1: Large order eligible for discount\\n            cart = [{\\'product\\': \\'A\\', \\'price\\': 10, \\'quantity\\': 1}, \\n                     {\\'product\\': \\'B\\', \\'price\\': 20, \\'quantity\\': 1},\\n                     {\\'product\\': \\'C\\', \\'price\\': 15, \\'quantity\\': 1},\\n                     {\\'product\\': \\'D\\', \\'price\\': 5, \\'quantity\\': 1},\\n                     {\\'product\\': \\'E\\', \\'price\\': 30, \\'quantity\\': 1},\\n                     {\\'product\\': \\'F\\', \\'price\\': 25, \\'quantity\\': 1},\\n                     {\\'product\\': \\'G\\', \\'price\\': 10, \\'quantity\\': 1},\\n                     {\\'product\\': \\'H\\', \\'price\\': 22, \\'quantity\\': 1},\\n                     {\\'product\\': \\'I\\', \\'price\\': 18, \\'quantity\\': 1},\\n                     {\\'product\\': \\'J\\', \\'price\\': 40, \\'quantity\\': 1}]\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.LargeOrderPromo(discount_strategy) == 18.5\\n            \\n            # Test case 2: Not a large order\\n            cart = [{\\'product\\': \\'A\\', \\'price\\': 10, \\'quantity\\': 1},\\n                     {\\'product\\': \\'B\\', \\'price\\': 20, \\'quantity\\': 1}]\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.LargeOrderPromo(discount_strategy) == 0.0\\n            \\n            # Test case 3: Exactly 10 unique products\\n            cart = [{\\'product\\': \\'A\\', \\'price\\': 10, \\'quantity\\': 1}] * 10\\n            customer = {\\'fidelity\\': 100}\\n            discount_strategy = DiscountStrategy(customer, cart)\\n            assert DiscountStrategy.LargeOrderPromo(discount_strategy) == 0.0\\n        \"\"\"\\n        return order.total() * 0.07 if len({item[\\'product\\'] for item in order.cart}) >= 10 else 0\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735126651, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=2025, prompt_tokens=1629, total_tokens=3654, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "DiscountStrategy.txt"}