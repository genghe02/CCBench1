{"response body": "{\n  \"id\": \"88dcfc76-d55b-4401-83af-e8a8196a3ded\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides a set of static methods to build SQL queries for common database operations such as SELECT, INSERT, DELETE, and UPDATE.\\n\\\"\\\"\\\"\\n\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns='*', where=None):\\n        \\\"\\\"\\\"\\n        Builds a SQL SELECT query.\\n\\n        Parameters:\\n            table (str): The name of the table to select from.\\n            columns (list or str, optional): The columns to select. Defaults to '*'.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.\\n\\n        Returns:\\n            str: The constructed SQL SELECT query.\\n\\n        Test cases:\\n            # Test case 1: Select all columns from a table\\n            assert SQLQueryBuilder.select('users') == \\\"SELECT * FROM users\\\"\\n\\n            # Test case 2: Select specific columns with a WHERE clause\\n            assert SQLQueryBuilder.select('users', ['name', 'age'], {'id': 1}) == \\\"SELECT name, age FROM users WHERE id='1'\\\"\\n\\n            # Test case 3: Select specific columns without a WHERE clause\\n            assert SQLQueryBuilder.select('users', ['name', 'age']) == \\\"SELECT name, age FROM users\\\"\\n        \\\"\\\"\\\"\\n        if columns != '*':\\n            columns = ', '.join(columns)\\n        query = f\\\"SELECT {columns} FROM {table}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def insert(table, data):\\n        \\\"\\\"\\\"\\n        Builds a SQL INSERT query.\\n\\n        Parameters:\\n            table (str): The name of the table to insert into.\\n            data (dict): A dictionary of column names and values to insert.\\n\\n        Returns:\\n            str: The constructed SQL INSERT query.\\n\\n        Test cases:\\n            # Test case 1: Insert a single row\\n            assert SQLQueryBuilder.insert('users', {'name': 'John', 'age': 30}) == \\\"INSERT INTO users (name, age) VALUES ('John', '30')\\\"\\n\\n            # Test case 2: Insert multiple columns\\n            assert SQLQueryBuilder.insert('users', {'name': 'Jane', 'age': 25, 'email': 'jane@example.com'}) == \\\"INSERT INTO users (name, age, email) VALUES ('Jane', '25', 'jane@example.com')\\\"\\n\\n            # Test case 3: Insert with empty data\\n            assert SQLQueryBuilder.insert('users', {}) == \\\"INSERT INTO users () VALUES ()\\\"\\n        \\\"\\\"\\\"\\n        keys = ', '.join(data.keys())\\n        values = ', '.join(f\\\"'{v}'\\\" for v in data.values())\\n        return f\\\"INSERT INTO {table} ({keys}) VALUES ({values})\\\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        \\\"\\\"\\\"\\n        Builds a SQL DELETE query.\\n\\n        Parameters:\\n            table (str): The name of the table to delete from.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.\\n\\n        Returns:\\n            str: The constructed SQL DELETE query.\\n\\n        Test cases:\\n            # Test case 1: Delete all rows\\n            assert SQLQueryBuilder.delete('users') == \\\"DELETE FROM users\\\"\\n\\n            # Test case 2: Delete with a WHERE clause\\n            assert SQLQueryBuilder.delete('users', {'id': 1}) == \\\"DELETE FROM users WHERE id='1'\\\"\\n\\n            # Test case 3: Delete with multiple conditions\\n            assert SQLQueryBuilder.delete('users', {'id': 1, 'name': 'John'}) == \\\"DELETE FROM users WHERE id='1' AND name='John'\\\"\\n        \\\"\\\"\\\"\\n        query = f\\\"DELETE FROM {table}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        \\\"\\\"\\\"\\n        Builds a SQL UPDATE query.\\n\\n        Parameters:\\n            table (str): The name of the table to update.\\n            data (dict): A dictionary of column names and new values.\\n            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.\\n\\n        Returns:\\n            str: The constructed SQL UPDATE query.\\n\\n        Test cases:\\n            # Test case 1: Update all rows\\n            assert SQLQueryBuilder.update('users', {'age': 31}) == \\\"UPDATE users SET age='31'\\\"\\n\\n            # Test case 2: Update with a WHERE clause\\n            assert SQLQueryBuilder.update('users', {'age': 31}, {'id': 1}) == \\\"UPDATE users SET age='31' WHERE id='1'\\\"\\n\\n            # Test case 3: Update multiple columns with multiple conditions\\n            assert SQLQueryBuilder.update('users', {'age': 31, 'name': 'John Doe'}, {'id': 1, 'name': 'John'}) == \\\"UPDATE users SET age='31', name='John Doe' WHERE id='1' AND name='John'\\\"\\n        \\\"\\\"\\\"\\n        update_str = ', '.join(f\\\"{k}='{v}'\\\" for k, v in data.items())\\n        query = f\\\"UPDATE {table} SET {update_str}\\\"\\n        if where:\\n            query += \\\" WHERE \\\" + ' AND '.join(f\\\"{k}='{v}'\\\" for k, v in where.items())\\n        return query\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194964,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1156,\n    \"prompt_tokens\": 1373,\n    \"total_tokens\": 2529,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 413\n  }\n}", "test_case_name": "SQLQueryBuilder.txt"}