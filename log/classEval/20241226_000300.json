{"response body": "ChatCompletion(id='chatcmpl-AiO8URtMbxa24vn2Tmx9KN50JyVy4', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class implements a currency converter which allows users to convert between different currencies based on exchange rates.\\n\"\"\"\\n\\nclass CurrencyConverter:\\n    def __init__(self):\\n        \"\"\"\\n        Initializes the CurrencyConverter class with exchange rates for different currencies.\\n        \"\"\"\\n\\n        self.rates = {\\n            \\'USD\\': 1.0,\\n            \\'EUR\\': 0.85,\\n            \\'GBP\\': 0.72,\\n            \\'JPY\\': 110.15,\\n            \\'CAD\\': 1.23,\\n            \\'AUD\\': 1.34,\\n            \\'CNY\\': 6.40,\\n        }\\n\\n    def convert(self, amount, from_currency, to_currency):\\n        \"\"\"\\n        Converts an amount from one currency to another based on the exchange rates.\\n\\n        Parameters:\\n            amount (float): The amount to be converted\\n            from_currency (str): The source currency code\\n            to_currency (str): The target currency code\\n\\n        Returns:\\n            float: The converted amount in the target currency\\n\\n        Test cases:\\n            # Test case 1: Convert USD to EUR\\n            assert convert(100, \\'USD\\', \\'EUR\\') == 85.0\\n            \\n            # Test case 2: Convert JPY to USD\\n            assert convert(1000, \\'JPY\\', \\'USD\\') == 9.08\\n            \\n            # Test case 3: Convert CAD to GBP\\n            assert convert(50, \\'CAD\\', \\'GBP\\') == 29.27\\n        \"\"\"\\n\\n        if from_currency == to_currency:\\n            return amount\\n\\n        if from_currency not in self.rates or to_currency not in self.rates:\\n            return False\\n\\n        from_rate = self.rates[from_currency]\\n        to_rate = self.rates[to_currency]\\n\\n        converted_amount = (amount / from_rate) * to_rate\\n        return converted_amount\\n\\n    def get_supported_currencies(self):\\n        \"\"\"\\n        Get the list of supported currencies for conversion.\\n\\n        Returns:\\n            list: A list of currency codes supported for conversion\\n\\n        Test cases:\\n            # Test case 1: Check supported currencies\\n            assert get_supported_currencies() == [\\'USD\\', \\'EUR\\', \\'GBP\\', \\'JPY\\', \\'CAD\\', \\'AUD\\', \\'CNY\\']\\n        \"\"\"\\n\\n        return list(self.rates.keys())\\n\\n    def add_currency_rate(self, currency, rate):\\n        \"\"\"\\n        Add a new currency with its exchange rate to the converter.\\n\\n        Parameters:\\n            currency (str): The currency code to be added\\n            rate (float): The exchange rate for the currency\\n\\n        Returns:\\n            bool: True if the currency was added successfully, False if currency already exists\\n\\n        Test cases:\\n            # Test case 1: Add new currency\\n            assert add_currency_rate(\\'EUR\\', 0.9) == False\\n            \\n            # Test case 2: Add new currency\\n            assert add_currency_rate(\\'INR\\', 75.0) == True\\n            \\n            # Test case 3: Add existing currency\\n            assert add_currency_rate(\\'USD\\', 1.0) == False\\n        \"\"\"\\n\\n        if currency in self.rates:\\n            return False\\n        self.rates[currency] = rate\\n\\n    def update_currency_rate(self, currency, new_rate):\\n        \"\"\"\\n        Update the exchange rate for a specific currency.\\n\\n        Parameters:\\n            currency (str): The currency code for which the rate needs to be updated\\n            new_rate (float): The new exchange rate for the currency\\n\\n        Returns:\\n            bool: True if the rate update was successful, False if currency does not exist\\n\\n        Test cases:\\n            # Test case 1: Update existing currency rate\\n            assert update_currency_rate(\\'GBP\\', 0.75) == True\\n            \\n            # Test case 2: Update non-existing currency rate\\n            assert update_currency_rate(\\'HKD\\', 7.8) == False\\n            \\n            # Test case 3: Update existing currency rate\\n            assert update_currency_rate(\\'USD\\', 1.15) == True\\n        \"\"\"\\n\\n        if currency not in self.rates:\\n            return False\\n        self.rates[currency] = new_rate\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735142574, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=845, prompt_tokens=1341, total_tokens=2186, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "CurrencyConverter.txt"}