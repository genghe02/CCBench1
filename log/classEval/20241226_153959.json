{"response body": {"id": "004f3a14-42cb-41b8-96d0-2db6be85cfa4", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:40:02", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides methods for encrypting text using three types of ciphers: Caesar, Vigenere, and Rail Fence.\n\"\"\"\n\nclass EncryptionUtils:\n    def __init__(self, key):\n        \"\"\"\n        Initializes the `EncryptionUtils` with a key.\n\n        Parameters:\n            key (str): The key used in the Vigenere cipher encryption process.\n        \"\"\"\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        \"\"\"\n        Encrypts the given plaintext using the Caesar cipher method.\n\n        Parameters:\n            plaintext (str): The text to be encrypted.\n            shift (int): The number of places each character in the plaintext is shifted down the alphabet.\n\n        Returns:\n            str: The encrypted ciphertext.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert caesar_cipher('HELLO', 3) == 'KHOOR'\n            \n            # Test case 2: Wrapping from 'Z' to 'A'\n            assert caesar_cipher('XYZ', 3) == 'ABC'\n            \n            # Test case 3: Non-alphabetic characters\n            assert caesar_cipher('HELLO, WORLD!', 3) == 'KHOOR, ZRUOG!'\n        \"\"\"\n        ciphertext = \"\"\n        for char in plaintext:\n            if char.isalpha():\n                if char.isupper():\n                    ascii_offset = 65\n                else:\n                    ascii_offset = 97\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                ciphertext += shifted_char\n            else:\n                ciphertext += char\n        return ciphertext\n    \n    def vigenere_cipher(self, plain_text):\n        \"\"\"\n        Encrypts the given plaintext using the Vigenere cipher method.\n\n        Parameters:\n            plain_text (str): The text to be encrypted.\n\n        Returns:\n            str: The encrypted ciphertext.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert vigenere_cipher('HELLO') == 'JGNNQ'\n            \n            # Test case 2: Key wrapping\n            assert vigenere_cipher('XYZXYZ') == 'ACYACY'\n            \n            # Test case 3: Non-alphabetic characters\n            assert vigenere_cipher('HELLO, WORLD!') == 'JGNNQ, YQTNF!'\n        \"\"\"\n        encrypted_text = \"\"\n        key_index = 0\n        for char in plain_text:\n            if char.isalpha():\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\n                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))\n                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char\n                key_index += 1\n            else:\n                encrypted_text += char\n        return encrypted_text\n\n    def rail_fence_cipher(self, plain_text, rails):\n        \"\"\"\n        Encrypts the given plaintext using the Rail Fence cipher method.\n\n        Parameters:\n            plain_text (str): The text to be encrypted.\n            rails (int): The number of rails in the fence.\n\n        Returns:\n            str: The encrypted ciphertext.\n\n        Test cases:\n            # Test case 1: Normal usage\n            assert rail_fence_cipher('HELLO WORLD', 3) == 'HOREL OLLWD'\n            \n            # Test case 2: More rails than characters\n            assert rail_fence_cipher('HI', 5) == 'HI'\n            \n            # Test case 3: Non-alphabetic characters\n            assert rail_fence_cipher('HELLO, WORLD!', 3) == 'HOREL, OLLWD!'\n        \"\"\"\n        fence = [['\\n' for _ in range(len(plain_text))] for _ in range(rails)]\n        direction = -1\n        row, col = 0, 0\n\n        for char in plain_text:\n            if row == 0 or row == rails-1:\n                direction = -direction\n\n            fence[row][col] = char\n            col += 1\n            row += direction\n\n        encrypted_text = ''\n        for i in range(rails):\n            for j in range(len(plain_text)):\n                if fence[i][j] != '\\n':\n                    encrypted_text += fence[i][j]\n\n        return encrypted_text\n"}}], "usage": {"completion_tokens": 896, "prompt_tokens": 1445, "total_tokens": 2341}, "feeType": "1", "consume": 1.411332}, "test_case_name": "EncryptionUtils.txt"}