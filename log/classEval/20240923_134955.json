{"response body": {"id": "ac768701-080f-4488-af78-c285f179b525", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:49:55", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# Class to calculate the total cost and discounts for a customer's shopping cart based on different promotion strategies.\nclass DiscountStrategy:\n    def __init__(self, customer, cart, promotion=None):\n        # Initialize DiscountStrategy with customer details, shopping cart items, and an optional promotion function.\n        # Parameters:\n        # customer: dict, details of the customer\n        # cart: list, items in the shopping cart\n        # promotion: function, optional promotion strategy function\n        # Test cases:\n        self.customer = customer\n        self.cart = cart\n        self.promotion = promotion\n        self.__total = self.total()\n\n    def total(self):\n        # Calculate the total cost of items in the shopping cart.\n        # Return the total cost.\n        # Test cases:\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\n        return self.__total\n\n    def due(self):\n        # Calculate the total amount due after applying any discounts based on the selected promotion.\n        # Return the total amount due.\n        # Test cases:\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.__total - discount\n\n    @staticmethod\n    def FidelityPromo(order):\n        # Apply a fidelity promotion discount based on the customer's fidelity points.\n        # Parameters:\n        # order: DiscountStrategy, the order for which the promotion is applied\n        # Return the fidelity promotion discount amount.\n        # Test cases:\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\n\n    @staticmethod\n    def BulkItemPromo(order):\n        # Apply a bulk item promotion discount for items in the shopping cart.\n        # Parameters:\n        # order: DiscountStrategy, the order for which the promotion is applied\n        # Return the bulk item promotion discount amount.\n        # Test cases:\n        discount = 0\n        for item in order.cart:\n            if item['quantity'] >= 20:\n                discount += item['quantity'] * item['price'] * 0.1\n        return discount\n\n    @staticmethod\n    def LargeOrderPromo(order):\n        # Apply a large order promotion discount based on the number of unique products in the shopping cart.\n        # Parameters:\n        # order: DiscountStrategy, the order for which the promotion is applied\n        # Return the large order promotion discount amount.\n        # Test cases:\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\n```"}}], "usage": {"completion_tokens": 547, "prompt_tokens": 971, "total_tokens": 1518}, "feeType": "1", "consume": 0.009485080976}, "test_case_name": "DiscountStrategy.txt"}