{"response body": "ChatCompletion(id='chatcmpl-AiOKMEaezXVRxfKcvL9L1WTN87KQY', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a Stock Portfolio Tracker that allows users to track, buy, sell, and analyze their stock portfolio.\\n\\nIt provides functionality to add stocks to the portfolio, remove stocks, buy new stocks, sell existing stocks, calculate the total value of the portfolio, and generate a summary of the portfolio with stock values.\\n\"\"\"\\n\\nclass StockPortfolioTracker:\\n    def __init__(self, cash_balance):\\n        \"\"\"\\n        Initializes the Stock Portfolio Tracker with the given cash balance.\\n\\n        Parameters:\\n            cash_balance (float): Initial cash balance for the portfolio\\n        \"\"\"\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        \"\"\"\\n        Adds a stock to the portfolio or updates its quantity if already present.\\n\\n        Parameters:\\n            stock (dict): Dictionary containing stock details including name, price, and quantity\\n\\n        Test cases:\\n            # Test case 1: Add new stock\\n            assert add_stock({\"name\": \"AAPL\", \"price\": 150.50, \"quantity\": 10})\\n            # Test case 2: Update existing stock quantity\\n            assert add_stock({\"name\": \"AAPL\", \"price\": 150.50, \"quantity\": 5})\\n            # Test case 3: Add stock multiple times\\n            assert add_stock({\"name\": \"GOOGL\", \"price\": 2500.00, \"quantity\": 30})\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\']:\\n                pf[\\'quantity\\'] += stock[\\'quantity\\']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        \"\"\"\\n        Removes stock from the portfolio or decreases its quantity.\\n\\n        Parameters:\\n            stock (dict): Dictionary containing stock details including name and quantity\\n\\n        Returns:\\n            bool: True if stock removed or quantity decreased successfully, False otherwise\\n\\n        Test cases:\\n            # Test case 1: Remove existing stock\\n            assert remove_stock({\"name\": \"AAPL\", \"quantity\": 5}) == True\\n            # Test case 2: Try to remove more quantity than available\\n            assert remove_stock({\"name\": \"GOOGL\", \"quantity\": 50}) == False\\n            # Test case 3: Remove all quantity of a stock\\n            assert remove_stock({\"name\": \"GOOGL\", \"quantity\": 30}) == True\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\'] and pf[\\'quantity\\'] >= stock[\\'quantity\\']:\\n                pf[\\'quantity\\'] -= stock[\\'quantity\\']\\n                if pf[\\'quantity\\'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        \"\"\"\\n        Buys a stock by adding it to the portfolio and updating cash balance.\\n\\n        Parameters:\\n            stock (dict): Dictionary containing stock details including name, price, and quantity\\n\\n        Returns:\\n            bool: True if stock purchased successfully, False otherwise\\n\\n        Test cases:\\n            # Test case 1: Buy stock within available cash\\n            assert buy_stock({\"name\": \"AAPL\", \"price\": 150.50, \"quantity\": 2}) == True\\n            # Test case 2: Try to buy stock exceeding available cash\\n            assert buy_stock({\"name\": \"GOOGL\", \"price\": 2500.00, \"quantity\": 5}) == False\\n            # Test case 3: Buy stock successfully\\n            assert buy_stock({\"name\": \"MSFT\", \"price\": 300.75, \"quantity\": 3}) == True\\n        \"\"\"\\n        if stock[\\'price\\'] * stock[\\'quantity\\'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock[\\'price\\'] * stock[\\'quantity\\']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        \"\"\"\\n        Sells a stock from the portfolio and updates cash balance.\\n\\n        Parameters:\\n            stock (dict): Dictionary containing stock details including name, price, and quantity\\n\\n        Returns:\\n            bool: True if stock sold successfully, False otherwise\\n\\n        Test cases:\\n            # Test case 1: Sell existing stock\\n            assert sell_stock({\"name\": \"AAPL\", \"price\": 150.50, \"quantity\": 2}) == True\\n            # Test case 2: Try to sell non-existing stock\\n            assert sell_stock({\"name\": \"TSLA\", \"price\": 700.25, \"quantity\": 1}) == False\\n            # Test case 3: Sell stock multiple times\\n            assert sell_stock({\"name\": \"MSFT\", \"price\": 300.75, \"quantity\": 3}) == True\\n        \"\"\"\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        \"\"\"\\n        Calculates the total value of the stock portfolio including cash balance.\\n\\n        Returns:\\n            float: Total value of the stock portfolio\\n\\n        Test cases:\\n            # Test case 1: Calculate total value with only cash\\n            assert calculate_portfolio_value() == cash_balance\\n            # Test case 2: Empty portfolio\\n            assert calculate_portfolio_value() == cash_balance\\n            # Test case 3: Calculate total value with multiple stocks\\n            assert calculate_portfolio_value() > cash_balance\\n        \"\"\"\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        \"\"\"\\n        Generates a summary of the stock portfolio.\\n\\n        Returns:\\n            tuple: Total portfolio value and list containing stock summaries\\n\\n        Test cases:\\n            # Test case 1: Summary with no stocks\\n            assert get_portfolio_summary() == (cash_balance, [])\\n            # Test case 2: Summary with multiple stocks\\n            assert get_portfolio_summary() == (total_portfolio_value, summary_list)\\n            # Test case 3: Summary includes cash balance\\n            assert get_portfolio_summary()[0] == get_portfolio_summary()[1][0][\"value\"]\\n        \"\"\"\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        \"\"\"\\n        Calculates the total value of a stock in the portfolio.\\n\\n        Parameters:\\n            stock (dict): Dictionary containing stock details including price and quantity\\n\\n        Returns:\\n            float: Value of the stock in the portfolio\\n\\n        Test cases:\\n            # Test case 1: Calculate stock value with default quantity\\n            assert get_stock_value({\"name\": \"AAPL\", \"price\": 150.50, \"quantity\": 1}) == 150.50\\n            # Test case 2: Calculate stock value with updated price\\n            assert get_stock_value({\"name\": \"GOOGL\", \"price\": 2500.00, \"quantity\": 2}) == 5000.00\\n            # Test case 3: Calculate stock value with zero quantity\\n            assert get_stock_value({\"name\": \"MSFT\", \"price\": 300.75, \"quantity\": 0}) == 0.00\\n        \"\"\"\\n        return stock[\\'price\\'] * stock[\\'quantity\\']\\n', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735143310, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1547, prompt_tokens=1523, total_tokens=3070, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "StockPortfolioTracker.txt"}