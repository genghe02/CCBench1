{"response body": "{\n  \"id\": \"01871331-0825-4005-a928-2796f3db244c\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nfrom datetime import datetime\\n\\n\\nclass Classroom:\\n    # This class represents a classroom that can manage courses and check for time conflicts.\\n    def __init__(self, id):\\n        # Initialize the classroom with a unique ID and an empty list of courses.\\n        self.id = id\\n        self.courses = []\\n\\n    def add_course(self, course):\\n        # Add a course to the classroom's list of courses if it is not already present.\\n        # param course: dict, the course details to be added\\n        # >>> classroom = Classroom(1)\\n        # >>> classroom.add_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\\n        # >>> classroom.courses\\n        # [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\\n        if course not in self.courses:\\n            self.courses.append(course)\\n\\n    def remove_course(self, course):\\n        # Remove a course from the classroom's list of courses if it exists.\\n        # param course: dict, the course details to be removed\\n        # >>> classroom = Classroom(1)\\n        # >>> classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\\n        # >>> classroom.remove_course({'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'})\\n        # >>> classroom.courses\\n        # []\\n        if course in self.courses:\\n            self.courses.remove(course)\\n\\n    def is_free_at(self, check_time):\\n        # Check if the classroom is free at a given time.\\n        # param check_time: str, the time to check in 'HH:MM' format\\n        # return: bool, True if the classroom is free, False otherwise\\n        # >>> classroom = Classroom(1)\\n        # >>> classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\\n        # >>> classroom.is_free_at('08:00')\\n        # True\\n        # >>> classroom.is_free_at('09:30')\\n        # False\\n        check_time = datetime.strptime(check_time, '%H:%M')\\n\\n        for course in self.courses:\\n            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'],\\n                                                                                                   '%H:%M'):\\n                return False\\n        return True\\n\\n    def check_course_conflict(self, new_course):\\n        # Check if adding a new course would cause a time conflict with existing courses.\\n        # param new_course: dict, the new course details to be checked\\n        # return: bool, True if there is no conflict, False otherwise\\n        # >>> classroom = Classroom(1)\\n        # >>> classroom.courses = [{'name': 'Math', 'start_time': '09:00', 'end_time': '10:00'}]\\n        # >>> classroom.check_course_conflict({'name': 'Science', 'start_time': '08:00', 'end_time': '09:30'})\\n        # False\\n        # >>> classroom.check_course_conflict({'name': 'Science', 'start_time': '10:30', 'end_time': '11:30'})\\n        # True\\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\\n\\n        flag = True\\n        for course in self.courses:\\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\\n            if start_time <= new_start_time and end_time >= new_start_time:\\n                flag = False\\n            if start_time <= new_end_time and end_time >= new_end_time:\\n                flag = False\\n        return flag\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727077851,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1015,\n    \"prompt_tokens\": 1115,\n    \"total_tokens\": 2130,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 539\n  }\n}", "test_case_name": "ClassroomManagement.txt"}