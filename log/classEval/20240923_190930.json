{"response body": {"id": "f93ff540-bed2-463f-bc55-890b64f9ac4a", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:09:30", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport PyPDF2\n\n# This class allows handling of PDF files, such as merging multiple PDFs into one and extracting text from PDF files.\nclass PDFHandler:\n    def __init__(self, filepaths):\n        # Initializes the PDFHandler class with the PDF file paths.\n        # :param filepaths: list, the paths of the PDF files that are going to be handled.\n        self.filepaths = filepaths\n        # Creates a list of PdfReader objects for each PDF file.\n        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]\n\n    def merge_pdfs(self, output_filepath):\n        # Merges all the PDFs given during the initialization into one PDF.\n        # :param output_filepath: str, the file path where the merged PDF will be saved.\n        # :return: str, a message indicating the successful merging and saving of the PDF files.\n        # >>> test = PDFHandler(['file1.pdf', 'file2.pdf'])\n        # >>> test.merge_pdfs('merged.pdf')\n        pdf_writer = PyPDF2.PdfWriter()\n\n        for reader in self.readers:\n            for page_num in range(len(reader.pages)):\n                page = reader.pages[page_num]\n                pdf_writer.add_page(page)\n\n        with open(output_filepath, 'wb') as out:\n            pdf_writer.write(out)\n        return f\"Merged PDFs saved at {output_filepath}\"\n\n    def extract_text_from_pdfs(self):\n        # Extracts and returns the text from all the PDFs given during the initialization.\n        # :return: list, a list of strings where each string is the text extracted from a page of the PDFs.\n        # >>> test = PDFHandler(['file1.pdf', 'file2.pdf'])\n        # >>> test.extract_text_from_pdfs()\n        pdf_texts = []\n        for reader in self.readers:\n            for page_num in range(len(reader.pages)):\n                page = reader.pages[page_num]\n                pdf_texts.append(page.extract_text())\n        return pdf_texts\n```"}}], "usage": {"completion_tokens": 420, "prompt_tokens": 919, "total_tokens": 1339}, "feeType": "1", "consume": 0.766924}, "test_case_name": "PDFHandler.txt"}