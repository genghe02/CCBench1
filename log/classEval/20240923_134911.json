{"response body": {"id": "d0c2855f-824e-45e6-a85f-c40878441ad5", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:49:11", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "from datetime import datetime\n\n\nclass Classroom:\n    # Class representing a classroom with courses scheduled.\n    def __init__(self, id):\n        # Initialize the classroom with an id and empty list of courses.\n        # param id: int, the unique identifier for the classroom\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        # Add a course to the classroom's schedule.\n        # param course: dict, the details of the course to be added\n        # some test cases for the function:\n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'course_name': 'Math', 'start_time': '09:00', 'end_time': '10:30'})\n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        # Remove a course from the classroom's schedule.\n        # param course: dict, the details of the course to be removed\n        # some test cases for the function:\n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'course_name': 'Math', 'start_time': '09:00', 'end_time': '10:30'})\n        # >>> classroom.remove_course({'course_name': 'Math', 'start_time': '09:00', 'end_time': '10:30'})\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        # Check if the classroom is free at a specific time.\n        # param check_time: str, the time to check in HH:MM format\n        # return: bool, True if the classroom is free, False if occupied\n        # some test cases for the function:\n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'course_name': 'Math', 'start_time': '09:00', 'end_time': '10:30'})\n        # >>> classroom.is_free_at('10:00')\n        check_time = datetime.strptime(check_time, '%H:%M')\n\n        for course in self.courses:\n            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'],\n                                                                                                   '%H:%M'):\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        # Check if adding a new course would conflict with existing courses in the classroom schedule.\n        # param new_course: dict, the details of the new course to be added\n        # return: bool, True if no conflict, False if there is a time conflict\n        # some test cases for the function:\n        # >>> classroom = Classroom(1)\n        # >>> classroom.add_course({'course_name': 'Math', 'start_time': '09:00', 'end_time': '10:30'})\n        # >>> classroom.check_course_conflict({'course_name': 'Science', 'start_time': '10:00', 'end_time': '11:00'})\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n\n        flag = True\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if start_time <= new_start_time and end_time >= new_start_time:\n                flag = False\n            if start_time <= new_end_time and end_time >= new_end_time:\n                flag = False\n        return flag"}}], "usage": {"completion_tokens": 752, "prompt_tokens": 960, "total_tokens": 1712}, "feeType": "1", "consume": 0.011678415168}, "test_case_name": "ClassroomManagement.txt"}