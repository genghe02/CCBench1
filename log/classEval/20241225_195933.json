{"response body": "ChatCompletion(id='chatcmpl-AiKKXcvDM7rbYDaAYXHbeWivcLHxt', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThe StockPortfolioTracker class is designed to manage a stock portfolio, allowing users to \\nadd, remove, buy, and sell stocks, as well as calculate the overall value of their portfolio. \\nIt maintains a list of stocks along with their quantities and prices, while also tracking the \\ncash balance available for transactions.\\n\\nMain functionality includes:\\n- Adding stocks to the portfolio\\n- Removing stocks or adjusting their quantities\\n- Buying stocks while ensuring sufficient cash balance\\n- Selling stocks and updating cash balance\\n- Calculating total portfolio value and providing a summary of holdings\\n\\nDependencies:\\n- Requires basic data structures like lists and dictionaries for managing stocks.\\n\"\"\"\\n\\nclass StockPortfolioTracker:\\n\\n    def __init__(self, cash_balance):\\n        \"\"\"\\n        Initializes the StockPortfolioTracker with an initial cash balance.\\n\\n        Parameters:\\n            cash_balance (float): The initial amount of cash available in the portfolio.\\n        \"\"\"\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        \"\"\"\\n        Adds a stock to the portfolio or increases its quantity if it already exists.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock details like \\'name\\', \\'price\\', and \\'quantity\\'.\\n\\n        Test cases:\\n            # Test case 1: Adding a new stock\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10})\\n            assert tracker.portfolio == [{\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10}]\\n            \\n            # Test case 2: Updating quantity of an existing stock\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 5})\\n            assert tracker.portfolio == [{\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 15}]\\n            \\n            # Test case 3: Adding a different stock\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'price\\': 1000, \\'quantity\\': 2})\\n            assert tracker.portfolio == [{\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 15}, {\\'name\\': \\'GOOGL\\', \\'price\\': 1000, \\'quantity\\': 2}]\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\']:\\n                pf[\\'quantity\\'] += stock[\\'quantity\\']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        \"\"\"\\n        Removes a specified quantity of a stock from the portfolio. If the quantity reaches zero, \\n        the stock is entirely removed from the portfolio.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock details like \\'name\\' and \\'quantity\\' to remove.\\n\\n        Returns:\\n            bool: True if the stock was successfully removed, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Removing a stock that exists\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10})\\n            assert tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5}) == True\\n            assert tracker.portfolio == [{\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 5}]\\n\\n            # Test case 2: Removing more quantity than available\\n            assert tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10}) == False\\n\\n            # Test case 3: Removing stock completely\\n            assert tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5}) == True\\n            assert tracker.portfolio == []\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\'] and pf[\\'quantity\\'] >= stock[\\'quantity\\']:\\n                pf[\\'quantity\\'] -= stock[\\'quantity\\']\\n                if pf[\\'quantity\\'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        \"\"\"\\n        Buys a specified stock by updating the portfolio and deducting from the cash balance,\\n        provided there is enough cash.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock details like \\'name\\', \\'price\\', and \\'quantity\\'.\\n\\n        Returns:\\n            bool: True if the stock was successfully bought, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful purchase\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 2}) == True\\n            assert tracker.cash_balance == 700\\n\\n            # Test case 2: Insufficient cash for purchase\\n            assert tracker.buy_stock({\\'name\\': \\'GOOGL\\', \\'price\\': 1000, \\'quantity\\': 1}) == False\\n            assert tracker.cash_balance == 700\\n\\n            # Test case 3: Buying and adding to existing stock\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 2})\\n            assert tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 1}) == True\\n            assert tracker.cash_balance == 550\\n        \"\"\"\\n        if stock[\\'price\\'] * stock[\\'quantity\\'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock[\\'price\\'] * stock[\\'quantity\\']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        \"\"\"\\n        Sells a specified quantity of a stock from the portfolio, updating the cash balance accordingly.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock details like \\'name\\', \\'price\\', and \\'quantity\\'.\\n\\n        Returns:\\n            bool: True if the stock was successfully sold, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful sale\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10})\\n            assert tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 5}) == True\\n            assert tracker.cash_balance == 1000 + 750  # cash increase by selling price * quantity\\n            \\n            # Test case 2: Attempt to sell more than owned\\n            assert tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10}) == False\\n            \\n            # Test case 3: Selling remaining stock\\n            assert tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 5}) == True\\n            assert tracker.cash_balance == 1000 + 750  # new cash balance after sale\\n        \"\"\"\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        \"\"\"\\n        Calculates the total value of the portfolio, including cash and the value of held stocks.\\n\\n        Returns:\\n            float: The total portfolio value.\\n\\n        Test cases:\\n            # Test case 1: Portfolio with stocks\\n            tracker = StockPortfolioTracker(1000)\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10})\\n            value = tracker.calculate_portfolio_value()\\n            assert value == 1000 + 1500  # cash + (price * quantity)\\n\\n            # Test case 2: Portfolio without stocks\\n            tracker = StockPortfolioTracker(1000)\\n            assert tracker.calculate_portfolio_value() == 1000  # only cash\\n\\n            # Test case 3: Portfolio with multiple stocks\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'price\\': 1000, \\'quantity\\': 2})\\n            value = tracker.calculate_portfolio_value()\\n            assert value == 1000 + 1500 + 2000  # cash + stocks\\' values\\n        \"\"\"\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        \"\"\"\\n        Provides a summary of the portfolio, including the total value and individual stock values.\\n\\n        Returns:\\n            tuple: A tuple containing total portfolio value and a list of stock summaries.\\n\\n        Test cases:\\n            # Test case 1: Empty portfolio summary\\n            tracker = StockPortfolioTracker(1000)\\n            value, summary = tracker.get_portfolio_summary()\\n            assert value == 1000\\n            assert summary == []\\n\\n            # Test case 2: Portfolio with one stock\\n            tracker.add_stock({\\'name\\': \\'AAPL\\', \\'price\\': 150, \\'quantity\\': 10})\\n            value, summary = tracker.get_portfolio_summary()\\n            assert value == 2500  # cash + (price * quantity)\\n            assert summary == [{\\'name\\': \\'AAPL\\', \\'value\\': 1500}]\\n\\n            # Test case 3: Portfolio with multiple stocks\\n            tracker.add_stock({\\'name\\': \\'GOOGL\\', \\'price\\': 1000, \\'quantity\\': 2})\\n            value, summary = tracker.get_portfolio_summary()\\n            assert value == 4500  # cash + stocks\\' values\\n            assert summary == [{\\'name\\': \\'AAPL\\', \\'value\\': 1500}, {\\'name\\': \\'GOOGL\\', \\'value\\': 2000}]\\n        \"\"\"\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        \"\"\"\\n        Calculates the total value of a given stock based on its price and quantity.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock details like \\'price\\' and \\'quantity\\'.\\n\\n        Returns:\\n            float: The total value of the stock.\\n\\n        Test cases:\\n            # Test case 1: Value of a stock\\n            assert self.get_stock_value({\\'price\\': 150, \\'quantity\\': 10}) == 1500\\n            \\n            # Test case 2: Value with zero quantity\\n            assert self.get_stock_value({\\'price\\': 200, \\'quantity\\': 0}) == 0\\n            \\n            # Test case 3: Value with single unit\\n            assert self.get_stock_value({\\'price\\': 120, \\'quantity\\': 1}) == 120\\n        \"\"\"\\n        return stock[\\'price\\'] * stock[\\'quantity\\']\\n``` \\n\\nThis comprehensive documentation explains the purpose of the StockPortfolioTracker class, details each method with parameter descriptions, return types, and includes multiple test cases to demonstrate functionality and edge cases.', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735127945, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_d02d531b47', usage=CompletionUsage(completion_tokens=2238, prompt_tokens=1844, total_tokens=4082, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "StockPortfolioTracker.txt"}