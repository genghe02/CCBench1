{"response body": "{\n  \"id\": \"59ec6b4a-7aa4-4eb8-b333-ea2861f34df2\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nfrom datetime import datetime\\nimport numpy as np\\n\\nclass MovieBookingSystem:\\n    # This class manages a movie booking system, allowing the addition of movies, booking of tickets, and checking available movies within a specified time range.\\n    def __init__(self):\\n        # Initialize the movie booking system with an empty list of movies.\\n        # >>> system = MovieBookingSystem()\\n        # >>> system.movies\\n        # []\\n        self.movies = []\\n\\n    def add_movie(self, name, price, start_time, end_time, n):\\n        # Add a new movie to the system with its details and initialize its seating arrangement.\\n        # param name: str, the name of the movie\\n        # param price: float, the price of the movie ticket\\n        # param start_time: str, the start time of the movie in 'HH:MM' format\\n        # param end_time: str, the end time of the movie in 'HH:MM' format\\n        # param n: int, the dimension of the seating arrangement (n x n)\\n        # >>> system = MovieBookingSystem()\\n        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)\\n        # >>> system.movies[0]['name']\\n        # 'MovieA'\\n        movie = {\\n            'name': name,\\n            'price': price,\\n            'start_time': datetime.strptime(start_time, '%H:%M'),\\n            'end_time': datetime.strptime(end_time, '%H:%M'),\\n            'seats': np.zeros((n, n))\\n        }\\n        self.movies.append(movie)\\n\\n    def book_ticket(self, name, seats_to_book):\\n        # Book tickets for a specific movie by marking the specified seats as booked.\\n        # param name: str, the name of the movie to book tickets for\\n        # param seats_to_book: list of tuples, each tuple represents a seat (row, column) to be booked\\n        # return: str, \\\"Booking success.\\\" if all seats are booked successfully, \\\"Booking failed.\\\" if any seat is already booked, or \\\"Movie not found.\\\" if the movie is not in the system\\n        # >>> system = MovieBookingSystem()\\n        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)\\n        # >>> system.book_ticket('MovieA', [(0, 0), (0, 1)])\\n        # 'Booking success.'\\n        # >>> system.book_ticket('MovieA', [(0, 0)])\\n        # 'Booking failed.'\\n        # >>> system.book_ticket('MovieB', [(0, 0)])\\n        # 'Movie not found.'\\n        for movie in self.movies:\\n            if movie['name'] == name:\\n                for seat in seats_to_book:\\n                    if movie['seats'][seat[0]][seat[1]] == 0:\\n                        movie['seats'][seat[0]][seat[1]] = 1\\n                    else:\\n                        return \\\"Booking failed.\\\"\\n                return \\\"Booking success.\\\"\\n        return \\\"Movie not found.\\\"\\n\\n    def available_movies(self, start_time, end_time):\\n        # Retrieve a list of movies that are available within the specified time range.\\n        # param start_time: str, the start time of the desired movie range in 'HH:MM' format\\n        # param end_time: str, the end time of the desired movie range in 'HH:MM' format\\n        # return: list of str, the names of movies available within the specified time range\\n        # >>> system = MovieBookingSystem()\\n        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)\\n        # >>> system.add_movie('MovieB', 12.0, '13:00', '15:00', 5)\\n        # >>> system.available_movies('11:00', '14:00')\\n        # ['MovieA']\\n        start_time = datetime.strptime(start_time, '%H:%M')\\n        end_time = datetime.strptime(end_time, '%H:%M')\\n\\n        available_movies = []\\n        for movie in self.movies:\\n            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:\\n                available_movies.append(movie['name'])\\n\\n        return available_movies\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080601,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1068,\n    \"prompt_tokens\": 1097,\n    \"total_tokens\": 2165,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 521\n  }\n}", "test_case_name": "MovieBookingSystem.txt"}