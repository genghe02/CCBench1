{"response body": {"id": "ed11b21c-07ff-4676-b064-3e3232357b03", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:41:10", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport re\n\n# This is a utility class for handling and manipulating strings using regular expressions.\nclass RegexUtils:\n\n    # This function checks if the provided text matches the given pattern.\n    # param pattern: str, the regex pattern to match.\n    # param text: str, the text to match against the pattern.\n    # return: bool, True if the text matches the pattern, False otherwise.\n    # >>> utils = RegexUtils()\n    # >>> utils.match(r'\\d+', '123')\n    def match(self, pattern, text):\n        ans = re.match(pattern, text)\n        if ans:\n            return True\n        else:\n            return False\n\n    # This function finds all occurrences of the given pattern in the text.\n    # param pattern: str, the regex pattern to find.\n    # param text: str, the text to find the pattern in.\n    # return: list, all occurrences of the pattern in the text.\n    # >>> utils = RegexUtils()\n    # >>> utils.findall(r'\\d+', '123 abc 456 def')\n    def findall(self, pattern, text):\n        return re.findall(pattern, text)\n\n    # This function splits the text by the given pattern.\n    # param pattern: str, the regex pattern to split by.\n    # param text: str, the text to split.\n    # return: list, the text split by the pattern.\n    # >>> utils = RegexUtils()\n    # >>> utils.split(r'\\s+', 'Hello, World!')\n    def split(self, pattern, text):\n        return re.split(pattern, text)\n\n    # This function replaces all occurrences of the pattern in the text with the replacement.\n    # param pattern: str, the regex pattern to replace.\n    # param replacement: str, the replacement for the pattern.\n    # param text: str, the text to replace in.\n    # return: str, the text with all occurrences of the pattern replaced with the replacement.\n    # >>> utils = RegexUtils()\n    # >>> utils.sub(r'\\d+', 'number', '123 abc 456 def')\n    def sub(self, pattern, replacement, text):\n        return re.sub(pattern, replacement, text)\n\n    # This function generates a regex pattern to match email addresses.\n    # return: str, a regex pattern to match email addresses.\n    # >>> utils = RegexUtils()\n    # >>> utils.generate_email_pattern()\n    def generate_email_pattern(self):\n        pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n        return pattern\n\n    # This function generates a regex pattern to match phone numbers.\n    # return: str, a regex pattern to match phone numbers.\n    # >>> utils = RegexUtils()\n    # >>> utils.generate_phone_number_pattern()\n    def generate_phone_number_pattern(self):\n        pattern = r'\\b\\d{3}-\\d{3}-\\d{4}\\b'\n        return pattern\n\n    # This function generates a regex pattern to split sentences.\n    # return: str, a regex pattern to split sentences.\n    # >>> utils = RegexUtils()\n    # >>> utils.generate_split_sentences_pattern()\n    def generate_split_sentences_pattern(self):\n        pattern = r'[.!?][\\s]{1,2}(?=[A-Z])'\n        return pattern\n\n    # This function splits the text into sentences.\n    # param text: str, the text to split into sentences.\n    # return: list, the text split into sentences.\n    # >>> utils = RegexUtils()\n    # >>> utils.split_sentences('Hello, World! How are you?')\n    def split_sentences(self, text):\n        pattern = self.generate_split_sentences_pattern()\n        return self.split(pattern, text)\n\n    # This function validates if the provided phone_number matches the phone number pattern.\n    # param phone_number: str, the phone number to validate.\n    # return: bool, True if the phone_number is valid, False otherwise.\n    # >>> utils = RegexUtils()\n    # >>> utils.validate_phone_number('123-456-7890')\n    def validate_phone_number(self, phone_number):\n        pattern = self.generate_phone_number_pattern()\n        return self.match(pattern, phone_number)\n\n    # This function extracts all email addresses from the text.\n    # param text: str, the text to extract email addresses from.\n    # return: list, all email addresses found in the text.\n    # >>> utils = RegexUtils()\n    # >>> utils.extract_email('test@test.com test2@test2.com')\n    def extract_email(self, text):\n        pattern = self.generate_email_pattern()\n        return self.findall(pattern, text)\n```"}}], "usage": {"completion_tokens": 967, "prompt_tokens": 1128, "total_tokens": 2095}, "feeType": "1", "consume": 1.335032}, "test_case_name": "RegexUtils.txt"}