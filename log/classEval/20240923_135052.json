{"response body": {"id": "620f0603-fa19-4933-97e2-af3477250527", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:50:52", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "from datetime import datetime, timedelta\n\nclass CalendarUtil:\n    # This class provides utility functions for managing calendar events.\n\n    def __init__(self):\n        # Initialize the CalendarUtil class with an empty list of events.\n        self.events = []\n\n    def add_event(self, event):\n        # Add a new event to the list of events.\n        # param event: dict, the event to be added\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        self.events.append(event)\n\n    def remove_event(self, event):\n        # Remove a specified event from the list of events.\n        # param event: dict, the event to be removed\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        # >>> util.remove_event({'event_name': 'Meeting'})\n        if event in self.events:\n            self.events.remove(event)\n\n    def get_events(self, date):\n        # Get all events happening on a specific date.\n        # param date: datetime, the date to filter events\n        # return: list, list of events on the specified date\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        # >>> util.get_events(datetime(2022, 12, 25, 0, 0))\n        events_on_date = []\n        for event in self.events:\n            if event['date'].date() == date.date():\n                events_on_date.append(event)\n        return events_on_date\n\n    def is_available(self, start_time, end_time):\n        # Check if there is availability between the specified start and end times.\n        # param start_time: datetime, start time of the availability slot\n        # param end_time: datetime, end time of the availability slot\n        # return: bool, True if available, False if not\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        # >>> util.is_available(datetime(2022, 12, 25, 16, 0), datetime(2022, 12, 25, 17, 0))\n        for event in self.events:\n            if start_time < event['end_time'] and end_time > event['start_time']:\n                return False\n        return True\n\n    def get_available_slots(self, date):\n        # Get available time slots on a specific date.\n        # param date: datetime, the date to check availability\n        # return: list, list of tuples representing available time slots\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        # >>> util.get_available_slots(datetime(2022, 12, 25, 0, 0))\n        available_slots = []\n        start_time = datetime(date.year, date.month, date.day, 0, 0)\n        end_time = datetime(date.year, date.month, date.day, 23, 59)\n\n        while start_time < end_time:\n            slot_end_time = start_time + timedelta(minutes=60)\n            if self.is_available(start_time, slot_end_time):\n                available_slots.append((start_time, slot_end_time))\n            start_time += timedelta(minutes=60)\n\n        return available_slots\n\n    def get_upcoming_events(self, num_events):\n        # Get the upcoming events based on the current date.\n        # param num_events: int, number of upcoming events to retrieve\n        # return: list, list of upcoming events\n        # >>> util = CalendarUtil()\n        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})\n        # >>> util.get_upcoming_events(1)\n        now = datetime.now()\n        upcoming_events = []\n        for event in self.events:\n            if event['start_time'] >= now:\n                upcoming_events.append(event)\n            if len(upcoming_events) == num_events:\n                break\n        return upcoming_events"}}], "usage": {"completion_tokens": 1184, "prompt_tokens": 1060, "total_tokens": 2244}, "feeType": "1", "consume": 0.016747776976}, "test_case_name": "CalendarUtil.txt"}