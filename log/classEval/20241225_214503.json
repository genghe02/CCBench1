{"response body": "ChatCompletion(id='chatcmpl-AiLypiLllcWJRQqNV73k22RsvV2U0', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class is responsible for generating SQL statements for various operations on a specified database table.\\n\"\"\"\\n\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        \"\"\"\\n        Initializes the SQLGenerator with the given table name.\\n\\n        Parameters:\\n            table_name (str): The name of the database table for which SQL statements are to be generated.\\n        \"\"\"\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        \"\"\"\\n        Generates a SQL SELECT statement.\\n\\n        Parameters:\\n            fields (list, optional): A list of fields to select from the table. If None, selects all fields.\\n            condition (str, optional): A SQL condition string for the WHERE clause. If None, no WHERE clause is added.\\n\\n        Returns:\\n            str: The constructed SQL SELECT statement.\\n\\n        Test cases:\\n            # Test case 1: Select all fields\\n            input = (None, None)\\n            expected_output = \"SELECT * FROM table_name;\"\\n            \\n            # Test case 2: Select specific fields\\n            input = ([\"name\", \"age\"], None)\\n            expected_output = \"SELECT name, age FROM table_name;\"\\n            \\n            # Test case 3: Select with a condition\\n            input = ([\"name\"], \"age > 30\")\\n            expected_output = \"SELECT name FROM table_name WHERE age > 30;\"\\n        \"\"\"\\n        if fields is None:\\n            fields = \"*\"\\n        else:\\n            fields = \", \".join(fields)\\n        sql = f\"SELECT {fields} FROM {self.table_name}\"\\n        if condition is not None:\\n            sql += f\" WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def insert(self, data):\\n        \"\"\"\\n        Generates a SQL INSERT statement.\\n\\n        Parameters:\\n            data (dict): A dictionary mapping column names to values to be inserted into the table.\\n\\n        Returns:\\n            str: The constructed SQL INSERT statement.\\n\\n        Test cases:\\n            # Test case 1: Insert single record\\n            input = {\\'name\\': \\'Alice\\', \\'age\\': 25}\\n            expected_output = \"INSERT INTO table_name (name, age) VALUES (\\'Alice\\', \\'25\\');\"\\n            \\n            # Test case 2: Insert multiple fields\\n            input = {\\'product\\': \\'Widget\\', \\'price\\': 19.99, \\'quantity\\': 100}\\n            expected_output = \"INSERT INTO table_name (product, price, quantity) VALUES (\\'Widget\\', \\'19.99\\', \\'100\\');\"\\n            \\n            # Test case 3: Empty data\\n            input = {}\\n            expected_output = \"INSERT INTO table_name () VALUES ();\"\\n        \"\"\"\\n        fields = \", \".join(data.keys())\\n        values = \", \".join([f\"\\\\\\'{value}\\\\\\'\" for value in data.values()])\\n        sql = f\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\"\\n        return sql + \";\"\\n\\n    def update(self, data, condition):\\n        \"\"\"\\n        Generates a SQL UPDATE statement.\\n\\n        Parameters:\\n            data (dict): A dictionary mapping column names to new values to be updated in the table.\\n            condition (str): A SQL condition string for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SQL UPDATE statement.\\n\\n        Test cases:\\n            # Test case 1: Basic update\\n            input = ({\\'age\\': 26}, \"name = \\'Alice\\'\")\\n            expected_output = \"UPDATE table_name SET age = \\'26\\' WHERE name = \\'Alice\\';\"\\n            \\n            # Test case 2: Update multiple fields\\n            input = ({\\'name\\': \\'Bob\\', \\'age\\': 30}, \"id = 1\")\\n            expected_output = \"UPDATE table_name SET name = \\'Bob\\', age = \\'30\\' WHERE id = 1;\"\\n            \\n            # Test case 3: No condition\\n            input = ({\\'age\\': 31}, \"\")\\n            expected_output = \"UPDATE table_name SET age = \\'31\\' WHERE ;\"\\n        \"\"\"\\n        set_clause = \", \".join([f\"{field} = \\\\\\'{value}\\\\\\'\" for field, value in data.items()])\\n        sql = f\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def delete(self, condition):\\n        \"\"\"\\n        Generates a SQL DELETE statement.\\n\\n        Parameters:\\n            condition (str): A SQL condition string for the WHERE clause.\\n\\n        Returns:\\n            str: The constructed SQL DELETE statement.\\n\\n        Test cases:\\n            # Test case 1: Basic delete\\n            input = \"id = 1\"\\n            expected_output = \"DELETE FROM table_name WHERE id = 1;\"\\n            \\n            # Test case 2: Delete with multiple conditions\\n            input = \"age < 18 AND gender = \\'female\\'\"\\n            expected_output = \"DELETE FROM table_name WHERE age < 18 AND gender = \\'female\\';\"\\n            \\n            # Test case 3: Delete without condition (deletes all records)\\n            input = \"\"\\n            expected_output = \"DELETE FROM table_name WHERE ;\"\\n        \"\"\"\\n        sql = f\"DELETE FROM {self.table_name} WHERE {condition}\"\\n        return sql + \";\"\\n\\n    def select_female_under_age(self, age):\\n        \"\"\"\\n        Generates a SQL SELECT statement to find female individuals under a certain age.\\n\\n        Parameters:\\n            age (int): The upper limit of age for selecting records.\\n\\n        Returns:\\n            str: The constructed SQL SELECT statement.\\n\\n        Test cases:\\n            # Test case 1: Select females under 30\\n            input = 30\\n            expected_output = \"SELECT * FROM table_name WHERE age < 30 AND gender = \\'female\\';\"\\n            \\n            # Test case 2: Select females under 18\\n            input = 18\\n            expected_output = \"SELECT * FROM table_name WHERE age < 18 AND gender = \\'female\\';\"\\n            \\n            # Test case 3: Edge case with age 0\\n            input = 0\\n            expected_output = \"SELECT * FROM table_name WHERE age < 0 AND gender = \\'female\\';\"\\n        \"\"\"\\n        condition = f\"age < {age} AND gender = \\'female\\'\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        \"\"\"\\n        Generates a SQL SELECT statement to find individuals within a certain age range.\\n\\n        Parameters:\\n            min_age (int): The minimum age for selecting records.\\n            max_age (int): The maximum age for selecting records.\\n\\n        Returns:\\n            str: The constructed SQL SELECT statement.\\n\\n        Test cases:\\n            # Test case 1: Valid age range\\n            input = (18, 30)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 18 AND 30;\"\\n            \\n            # Test case 2: Invalid age range (min > max)\\n            input = (30, 18)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 30 AND 18;\"\\n            \\n            # Test case 3: Edge case (both ages the same)\\n            input = (25, 25)\\n            expected_output = \"SELECT * FROM table_name WHERE age BETWEEN 25 AND 25;\"\\n        \"\"\"\\n        condition = f\"age BETWEEN {min_age} AND {max_age}\"\\n        return self.select(condition=condition)\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735134287, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1496, prompt_tokens=1762, total_tokens=3258, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLGenerator.txt"}