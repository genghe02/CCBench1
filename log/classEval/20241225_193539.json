{"response body": "ChatCompletion(id='chatcmpl-AiJxgFDmgjMqaQOLc98XfQX2lM4CU', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nCurrencyConverter class provides methods to convert amounts between different currencies\\nbased on predefined exchange rates. It also allows for retrieving supported currencies, \\nadding new currency rates, and updating existing rates.\\n\\nThe main functionalities of this class include:\\n1. Currency conversion between different supported currencies.\\n2. Listing all currencies that can be converted.\\n3. Adding new currency rates dynamically.\\n4. Updating existing currency rates.\\n\\nDependencies: None\\n\"\"\"\\n\\nclass CurrencyConverter:\\n    def __init__(self):\\n        \"\"\"\\n        Initializes the CurrencyConverter with predefined currency exchange rates.\\n        \"\"\"\\n        self.rates = {\\n            \\'USD\\': 1.0,\\n            \\'EUR\\': 0.85,\\n            \\'GBP\\': 0.72,\\n            \\'JPY\\': 110.15,\\n            \\'CAD\\': 1.23,\\n            \\'AUD\\': 1.34,\\n            \\'CNY\\': 6.40,\\n        }\\n\\n    def convert(self, amount, from_currency, to_currency):\\n        \"\"\"\\n        Converts the given amount from one currency to another based on the exchange rates.\\n\\n        Parameters:\\n            amount (float): The amount of money to convert.\\n            from_currency (str): The currency code of the amount to convert.\\n            to_currency (str): The currency code to convert the amount into.\\n\\n        Returns:\\n            float: The converted amount if successful, otherwise False if currencies are not supported.\\n\\n        Test cases:\\n            # Test case 1: Normal conversion\\n            input = (100, \\'USD\\', \\'EUR\\')\\n            expected_output = 85.0\\n            \\n            # Test case 2: Conversion with the same currency\\n            input = (50, \\'GBP\\', \\'GBP\\')\\n            expected_output = 50.0\\n            \\n            # Test case 3: Unsupported currency conversion\\n            input = (100, \\'USD\\', \\'XYZ\\')\\n            expected_output = False\\n        \"\"\"\\n        if from_currency == to_currency:\\n            return amount\\n\\n        if from_currency not in self.rates or to_currency not in self.rates:\\n            return False\\n\\n        from_rate = self.rates[from_currency]\\n        to_rate = self.rates[to_currency]\\n\\n        converted_amount = (amount / from_rate) * to_rate\\n        return converted_amount\\n\\n    def get_supported_currencies(self):\\n        \"\"\"\\n        Retrieves a list of all supported currencies for conversion.\\n\\n        Returns:\\n            list: A list of strings representing currency codes that are supported.\\n\\n        Test cases:\\n            # Test case 1: Retrieve supported currencies\\n            assert get_supported_currencies() == [\\'USD\\', \\'EUR\\', \\'GBP\\', \\'JPY\\', \\'CAD\\', \\'AUD\\', \\'CNY\\']\\n        \"\"\"\\n        return list(self.rates.keys())\\n\\n    def add_currency_rate(self, currency, rate):\\n        \"\"\"\\n        Adds a new currency and its associated rate to the converter.\\n\\n        Parameters:\\n            currency (str): The currency code to add.\\n            rate (float): The exchange rate for the new currency relative to USD.\\n\\n        Returns:\\n            bool: True if the currency was added successfully, False if it already exists.\\n\\n        Test cases:\\n            # Test case 1: Adding a new currency\\n            assert add_currency_rate(\\'INR\\', 75.0) == True\\n            \\n            # Test case 2: Adding an existing currency\\n            assert add_currency_rate(\\'USD\\', 1.0) == False\\n        \"\"\"\\n        if currency in self.rates:\\n            return False\\n        self.rates[currency] = rate\\n        return True\\n\\n    def update_currency_rate(self, currency, new_rate):\\n        \"\"\"\\n        Updates the exchange rate of an existing currency.\\n\\n        Parameters:\\n            currency (str): The currency code to update.\\n            new_rate (float): The new exchange rate for the currency.\\n\\n        Returns:\\n            bool: True if the rate was updated successfully, False if the currency does not exist.\\n\\n        Test cases:\\n            # Test case 1: Updating an existing currency rate\\n            assert update_currency_rate(\\'EUR\\', 0.90) == True\\n            \\n            # Test case 2: Updating a non-existing currency\\n            assert update_currency_rate(\\'XYZ\\', 1.0) == False\\n        \"\"\"\\n        if currency not in self.rates:\\n            return False\\n        self.rates[currency] = new_rate\\n        return True\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735126528, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=880, prompt_tokens=1594, total_tokens=2474, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "CurrencyConverter.txt"}