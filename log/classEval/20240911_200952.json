{"response body": "ChatCompletion(id='chatcmpl-A6GSDK6QOU8y9lu61LjMuhbyiIx5S', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\nclass StockPortfolioTracker:\\n    # This class tracks a stock portfolio, allowing operations such as adding, removing, buying, and selling stocks.\\n    def __init__(self, cash_balance):\\n        # Initializes the StockPortfolioTracker with a given cash balance.\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        # Adds a stock to the portfolio, or updates the quantity if it already exists.\\n        # param stock: dict, a dictionary containing stock details including \\'name\\' and \\'quantity\\'\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10})\\n        # >>> tracker.add_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5})  # This should increase the quantity of AAPL to 15\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\']:\\n                pf[\\'quantity\\'] += stock[\\'quantity\\']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        # Removes a stock from the portfolio, decreasing the quantity or removing it entirely if the quantity reaches zero.\\n        # param stock: dict, a dictionary containing stock details including \\'name\\' and \\'quantity\\'\\n        # >>> tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5})  # This should reduce the quantity of AAPL\\n        # >>> tracker.remove_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 15})  # This should return False if AAPL quantity is less than 15\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\'] and pf[\\'quantity\\'] >= stock[\\'quantity\\']:\\n                pf[\\'quantity\\'] -= stock[\\'quantity\\']\\n                if pf[\\'quantity\\'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        # Purchases a stock if there are sufficient funds available and adds it to the portfolio.\\n        # param stock: dict, a dictionary containing stock details including \\'name\\', \\'quantity\\', and \\'price\\'\\n        # return: bool, True if stock is bought successfully, False if not enough cash balance\\n        # >>> tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 150})  # Should return True if cash_balance is adequate\\n        # >>> tracker.buy_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 2000})  # Should return False if insufficient balance\\n        if stock[\\'price\\'] * stock[\\'quantity\\'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock[\\'price\\'] * stock[\\'quantity\\']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        # Sells a stock from the portfolio and updates the cash balance based on the sale price.\\n        # param stock: dict, a dictionary containing stock details including \\'name\\', \\'quantity\\', and \\'price\\'\\n        # return: bool, True if stock is sold successfully, False otherwise\\n        # >>> tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 5, \\'price\\': 150})  # Should return True if AAPL quantity is sufficient\\n        # >>> tracker.sell_stock({\\'name\\': \\'AAPL\\', \\'quantity\\': 15, \\'price\\': 150})  # Should return False if AAPL quantity is insufficient\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        # Calculates the total value of the portfolio including cash balance and stock values.\\n        # return: float, total value of the portfolio\\n        # >>> tracker.calculate_portfolio_value()  # Should return the total value including cash balance and stock values\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        # Provides a summary of the stocks in the portfolio including their values and the cash balance.\\n        # return: tuple, (total value of portfolio, summary of stocks with their name and value)\\n        # >>> tracker.get_portfolio_summary()  # Should return total portfolio value and details of each stock\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        # Calculates the value of a single stock based on its price and quantity.\\n        # param stock: dict, a dictionary containing stock details including \\'price\\' and \\'quantity\\'\\n        # return: float, calculated value of the stock\\n        # >>> tracker.get_stock_value({\\'name\\': \\'AAPL\\', \\'quantity\\': 10, \\'price\\': 150})  # Should return 1500\\n        return stock[\\'price\\'] * stock[\\'quantity\\']\\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056581, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=1077, prompt_tokens=1308, total_tokens=2385))", "test_case_name": "StockPortfolioTracker.txt"}