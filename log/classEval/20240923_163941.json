{"response body": "{\n  \"id\": \"0fa35611-84ad-4095-af58-ef1b67f06cc7\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nfrom docx import Document\\nfrom docx.shared import Pt\\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\\n\\n\\nclass DocFileHandler:\\n    # This class provides methods to handle operations on DOCX files, such as reading, writing, adding headings, and adding tables.\\n    def __init__(self, file_path):\\n        # Initialize the DocFileHandler with a file path.\\n        # param file_path: str, the path to the DOCX file.\\n        self.file_path = file_path\\n\\n    def read_text(self):\\n        # Read the text content from the DOCX file and return it as a single string.\\n        # return: str, the concatenated text content of the DOCX file.\\n        doc = Document(self.file_path)\\n        text = []\\n        for paragraph in doc.paragraphs:\\n            text.append(paragraph.text)\\n        return \\\"\\\\n\\\".join(text)\\n\\n    def write_text(self, content, font_size=12, alignment='left'):\\n        # Write the given content to a new DOCX file with specified font size and alignment.\\n        # param content: str, the text content to be written to the DOCX file.\\n        # param font_size: int, the font size for the text content. Default is 12.\\n        # param alignment: str, the alignment of the text content. Options are 'left', 'center', 'right'. Default is 'left'.\\n        # return: bool, True if the text was successfully written, False otherwise.\\n        try:\\n            doc = Document()\\n            paragraph = doc.add_paragraph()\\n            run = paragraph.add_run(content)\\n            font = run.font\\n            font.size = Pt(font_size)\\n            alignment_value = self._get_alignment_value(alignment)\\n            paragraph.alignment = alignment_value\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def add_heading(self, heading, level=1):\\n        # Add a heading to the existing DOCX file with the specified level.\\n        # param heading: str, the heading text to be added.\\n        # param level: int, the heading level (1 for main heading, 2 for subheading, etc.). Default is 1.\\n        # return: bool, True if the heading was successfully added, False otherwise.\\n        try:\\n            doc = Document(self.file_path)\\n            doc.add_heading(heading, level)\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def add_table(self, data):\\n        # Add a table to the existing DOCX file with the provided data.\\n        # param data: list of lists, the data to be added to the table. Each inner list represents a row.\\n        # return: bool, True if the table was successfully added, False otherwise.\\n        try:\\n            doc = Document(self.file_path)\\n            table = doc.add_table(rows=len(data), cols=len(data[0]))\\n            for i, row in enumerate(data):\\n                for j, cell_value in enumerate(row):\\n                    table.cell(i, j).text = str(cell_value)\\n            doc.save(self.file_path)\\n            return True\\n        except:\\n            return False\\n\\n    def _get_alignment_value(self, alignment):\\n        # Convert the alignment string to the corresponding WD_PARAGRAPH_ALIGNMENT value.\\n        # param alignment: str, the alignment string ('left', 'center', 'right').\\n        # return: WD_PARAGRAPH_ALIGNMENT, the corresponding alignment value.\\n        alignment_options = {\\n            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,\\n            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,\\n            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT\\n        }\\n        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080732,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 944,\n    \"prompt_tokens\": 1263,\n    \"total_tokens\": 2207,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 687\n  }\n}", "test_case_name": "DocFileHandler.txt"}