{"response body": "{\n  \"id\": \"76ffba2a-3d15-427c-b825-b7e73a0627fd\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides utility methods for managing cookies, including loading, saving, and setting cookies in HTTP requests.\\n\\\"\\\"\\\"\\n\\nimport json\\n\\nclass CookiesUtil:\\n    def __init__(self, cookies_file):\\n        \\\"\\\"\\\"\\n        Initializes the CookiesUtil class with a file path for storing cookies.\\n\\n        Parameters:\\n            cookies_file (str): The file path where cookies will be stored and loaded from.\\n        \\\"\\\"\\\"\\n        self.cookies_file = cookies_file\\n        self.cookies = None\\n\\n    def get_cookies(self, response):\\n        \\\"\\\"\\\"\\n        Extracts cookies from an HTTP response and saves them to the specified file.\\n\\n        Parameters:\\n            response (dict): The HTTP response containing the cookies.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            response = {'cookies': {'session_id': '12345', 'user': 'john_doe'}}\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.get_cookies(response)\\n            assert cookies_util.cookies == {'session_id': '12345', 'user': 'john_doe'}\\n\\n            # Test case 2: Empty cookies\\n            response = {'cookies': {}}\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.get_cookies(response)\\n            assert cookies_util.cookies == {}\\n\\n            # Test case 3: Missing 'cookies' key in response\\n            response = {}\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.get_cookies(response)\\n            assert cookies_util.cookies is None\\n        \\\"\\\"\\\"\\n        self.cookies = response['cookies']\\n        self._save_cookies()\\n\\n    def load_cookies(self):\\n        \\\"\\\"\\\"\\n        Loads cookies from the specified file.\\n\\n        Returns:\\n            dict: A dictionary containing the loaded cookies. Returns an empty dictionary if the file does not exist.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = {'session_id': '12345', 'user': 'john_doe'}\\n            cookies_util._save_cookies()\\n            assert cookies_util.load_cookies() == {'session_id': '12345', 'user': 'john_doe'}\\n\\n            # Test case 2: File does not exist\\n            cookies_util = CookiesUtil('nonexistent.json')\\n            assert cookies_util.load_cookies() == {}\\n\\n            # Test case 3: Corrupted file\\n            with open('corrupted.json', 'w') as file:\\n                file.write('invalid json')\\n            cookies_util = CookiesUtil('corrupted.json')\\n            assert cookies_util.load_cookies() == {}\\n        \\\"\\\"\\\"\\n        try:\\n            with open(self.cookies_file, 'r') as file:\\n                cookies_data = json.load(file)\\n                return cookies_data\\n        except FileNotFoundError:\\n            return {}\\n\\n    def _save_cookies(self):\\n        \\\"\\\"\\\"\\n        Saves the current cookies to the specified file.\\n\\n        Returns:\\n            bool: True if the cookies were successfully saved, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = {'session_id': '12345', 'user': 'john_doe'}\\n            assert cookies_util._save_cookies() == True\\n\\n            # Test case 2: Invalid file path\\n            cookies_util = CookiesUtil('/invalid/path/cookies.json')\\n            cookies_util.cookies = {'session_id': '12345', 'user': 'john_doe'}\\n            assert cookies_util._save_cookies() == False\\n\\n            # Test case 3: No cookies to save\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = None\\n            assert cookies_util._save_cookies() == False\\n        \\\"\\\"\\\"\\n        try:\\n            with open(self.cookies_file, 'w') as file:\\n                json.dump(self.cookies, file)\\n            return True\\n        except:\\n            return False\\n\\n    def set_cookies(self, request):\\n        \\\"\\\"\\\"\\n        Sets the cookies in an HTTP request.\\n\\n        Parameters:\\n            request (dict): The HTTP request to which the cookies will be added.\\n\\n        Returns:\\n            None\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = {'session_id': '12345', 'user': 'john_doe'}\\n            request = {}\\n            cookies_util.set_cookies(request)\\n            assert request['cookies'] == 'session_id=12345; user=john_doe'\\n\\n            # Test case 2: No cookies to set\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = None\\n            request = {}\\n            cookies_util.set_cookies(request)\\n            assert 'cookies' not in request\\n\\n            # Test case 3: Empty cookies\\n            cookies_util = CookiesUtil('cookies.json')\\n            cookies_util.cookies = {}\\n            request = {}\\n            cookies_util.set_cookies(request)\\n            assert request['cookies'] == ''\\n        \\\"\\\"\\\"\\n        if self.cookies:\\n            request['cookies'] = '; '.join([f'{key}={value}' for key, value in self.cookies.items()])\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735193868,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1139,\n    \"prompt_tokens\": 1248,\n    \"total_tokens\": 2387,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 288\n  }\n}", "test_case_name": "CookiesUtil.txt"}