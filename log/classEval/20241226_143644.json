{"response body": "{\n  \"id\": \"7789e35f-fea5-4acc-a9ba-bc9e74a9fdc4\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides a collection of static methods for performing various statistical calculations,\\nincluding measures of central tendency, dispersion, and correlation.\\n\\\"\\\"\\\"\\n\\nimport math\\n\\nclass Statistics3:\\n\\n    @staticmethod\\n    def median(data):\\n        \\\"\\\"\\\"\\n        Calculate the median of a list of numbers.\\n\\n        Parameters:\\n            data (list of float/int): A list of numerical values\\n\\n        Returns:\\n            float: The median value of the list\\n\\n        Test cases:\\n            # Test case 1: Odd number of elements\\n            assert Statistics3.median([1, 3, 5]) == 3\\n            \\n            # Test case 2: Even number of elements\\n            assert Statistics3.median([1, 3, 5, 7]) == 4.0\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.median([]) == None\\n        \\\"\\\"\\\"\\n        sorted_data = sorted(data)\\n        n = len(sorted_data)\\n        if n % 2 == 1:\\n            return sorted_data[n // 2]\\n        else:\\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\\n\\n    @staticmethod\\n    def mode(data):\\n        \\\"\\\"\\\"\\n        Find the mode(s) of a list of numbers.\\n\\n        Parameters:\\n            data (list of float/int): A list of numerical values\\n\\n        Returns:\\n            list: A list of mode values (can be multiple if there's a tie)\\n\\n        Test cases:\\n            # Test case 1: Single mode\\n            assert Statistics3.mode([1, 2, 2, 3]) == [2]\\n            \\n            # Test case 2: Multiple modes\\n            assert sorted(Statistics3.mode([1, 1, 2, 2, 3])) == [1, 2]\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.mode([]) == []\\n        \\\"\\\"\\\"\\n        counts = {}\\n        for value in data:\\n            counts[value] = counts.get(value, 0) + 1\\n        max_count = max(counts.values())\\n        mode_values = [value for value, count in counts.items() if count == max_count]\\n        return mode_values\\n\\n    @staticmethod\\n    def correlation(x, y):\\n        \\\"\\\"\\\"\\n        Calculate the Pearson correlation coefficient between two lists of numbers.\\n\\n        Parameters:\\n            x (list of float/int): First list of numerical values\\n            y (list of float/int): Second list of numerical values\\n\\n        Returns:\\n            float/None: The correlation coefficient, or None if calculation is not possible\\n\\n        Test cases:\\n            # Test case 1: Perfect positive correlation\\n            assert Statistics3.correlation([1, 2, 3], [1, 2, 3]) == 1.0\\n            \\n            # Test case 2: Perfect negative correlation\\n            assert Statistics3.correlation([1, 2, 3], [3, 2, 1]) == -1.0\\n            \\n            # Test case 3: Invalid input (different lengths)\\n            assert Statistics3.correlation([1, 2], [1, 2, 3]) == None\\n        \\\"\\\"\\\"\\n        n = len(x)\\n        if n != len(y) or n == 0:\\n            return None\\n        mean_x = sum(x) / n\\n        mean_y = sum(y) / n\\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\\n        if denominator == 0:\\n            return None\\n        return numerator / denominator\\n\\n    @staticmethod\\n    def mean(data):\\n        \\\"\\\"\\\"\\n        Calculate the arithmetic mean of a list of numbers.\\n\\n        Parameters:\\n            data (list of float/int): A list of numerical values\\n\\n        Returns:\\n            float/None: The mean value, or None for empty list\\n\\n        Test cases:\\n            # Test case 1: Normal case\\n            assert Statistics3.mean([1, 2, 3, 4]) == 2.5\\n            \\n            # Test case 2: Single value\\n            assert Statistics3.mean([5]) == 5.0\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.mean([]) == None\\n        \\\"\\\"\\\"\\n        if len(data) == 0:\\n            return None\\n        return sum(data) / len(data)\\n\\n    @staticmethod\\n    def correlation_matrix(data):\\n        \\\"\\\"\\\"\\n        Calculate the correlation matrix for a 2D dataset.\\n\\n        Parameters:\\n            data (list of list of float/int): A 2D list where each inner list represents a variable\\n\\n        Returns:\\n            list of list of float: The correlation matrix\\n\\n        Test cases:\\n            # Test case 1: Simple 2x2 matrix\\n            input_data = [[1, 2], [1, 2]]\\n            expected_output = [[1.0, 1.0], [1.0, 1.0]]\\n            assert Statistics3.correlation_matrix(input_data) == expected_output\\n            \\n            # Test case 2: Empty input\\n            assert Statistics3.correlation_matrix([]) == []\\n            \\n            # Test case 3: Invalid input (unequal lengths)\\n            input_data = [[1, 2], [1]]\\n            assert Statistics3.correlation_matrix(input_data) == []\\n        \\\"\\\"\\\"\\n        if not data or any(len(row) != len(data[0]) for row in data):\\n            return []\\n        matrix = []\\n        for i in range(len(data[0])):\\n            row = []\\n            for j in range(len(data[0])):\\n                column1 = [row[i] for row in data]\\n                column2 = [row[j] for row in data]\\n                correlation = Statistics3.correlation(column1, column2)\\n                row.append(correlation)\\n            matrix.append(row)\\n        return matrix\\n\\n    @staticmethod\\n    def standard_deviation(data):\\n        \\\"\\\"\\\"\\n        Calculate the sample standard deviation of a list of numbers.\\n\\n        Parameters:\\n            data (list of float/int): A list of numerical values\\n\\n        Returns:\\n            float/None: The standard deviation, or None if calculation is not possible\\n\\n        Test cases:\\n            # Test case 1: Normal case\\n            assert round(Statistics3.standard_deviation([1, 2, 3, 4, 5]), 2) == 1.58\\n            \\n            # Test case 2: Single value\\n            assert Statistics3.standard_deviation([5]) == None\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.standard_deviation([]) == None\\n        \\\"\\\"\\\"\\n        n = len(data)\\n        if n < 2:\\n            return None\\n        mean_value = Statistics3.mean(data)\\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\\n        return math.sqrt(variance)\\n\\n    @staticmethod\\n    def z_score(data):\\n        \\\"\\\"\\\"\\n        Calculate the z-scores for a list of numbers.\\n\\n        Parameters:\\n            data (list of float/int): A list of numerical values\\n\\n        Returns:\\n            list of float/None: A list of z-scores, or None if calculation is not possible\\n\\n        Test cases:\\n            # Test case 1: Normal case\\n            assert [round(z, 2) for z in Statistics3.z_score([1, 2, 3])] == [-1.22, 0.0, 1.22]\\n            \\n            # Test case 2: Single value\\n            assert Statistics3.z_score([5]) == None\\n            \\n            # Test case 3: Empty list\\n            assert Statistics3.z_score([]) == None\\n        \\\"\\\"\\\"\\n        mean = Statistics3.mean(data)\\n        std_deviation = Statistics3.standard_deviation(data)\\n        if std_deviation is None or std_deviation == 0:\\n            return None\\n        return [(x - mean) / std_deviation for x in data]\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194983,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1700,\n    \"prompt_tokens\": 1709,\n    \"total_tokens\": 3409,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 749\n  }\n}", "test_case_name": "Statistics3.txt"}