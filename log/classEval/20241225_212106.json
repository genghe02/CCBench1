{"response body": "ChatCompletion(id='chatcmpl-AiLbU5AtxLKbKmN43Tk4xrSxQ5HVo', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class manages student registration for classes and provides methods for querying \\nstudents by their major, the classes they are enrolled in, and other registration-related features.\\n\"\"\"\\n\\nclass ClassRegistrationSystem:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initializes a new instance of ClassRegistrationSystem.\\n        This method sets up two internal data structures: \\n        a list to hold student records and a dictionary to maintain \\n        the registration of classes for each student.\\n        \"\"\"\\n        self.students = []\\n        self.students_registration_classes = {}\\n\\n    def register_student(self, student):\\n        \"\"\"\\n        Registers a new student in the system.\\n\\n        Parameters:\\n            student (dict): A dictionary representing the student, \\n                            expected to contain at least the \\'name\\' key.\\n\\n        Returns:\\n            int: Returns 1 if the registration is successful (student was not already registered),\\n                 returns 0 if the student is already registered.\\n\\n        Test cases:\\n            # Test case 1: Normal registration\\n            student1 = {\"name\": \"Alice\", \"major\": \"Computer Science\"}\\n            assert register_student(student1) == 1\\n\\n            # Test case 2: Duplicate registration\\n            assert register_student(student1) == 0\\n\\n            # Test case 3: Registering another student\\n            student2 = {\"name\": \"Bob\", \"major\": \"Mathematics\"}\\n            assert register_student(student2) == 1\\n        \"\"\"\\n        if student in self.students:\\n            return 0\\n        else:\\n            self.students.append(student)\\n            return 1\\n\\n    def register_class(self, student_name, class_name):\\n        \"\"\"\\n        Registers a student for a specific class.\\n\\n        Parameters:\\n            student_name (str): The name of the student to register.\\n            class_name (str): The name of the class to register the student in.\\n\\n        Returns:\\n            list: Returns a list of classes the student is registered for \\n                  after the registration.\\n\\n        Test cases:\\n            # Test case 1: Register a class for a student\\n            register_student({\"name\": \"Alice\", \"major\": \"Computer Science\"})\\n            assert register_class(\"Alice\", \"CS101\") == [\"CS101\"]\\n\\n            # Test case 2: Register multiple classes for the same student\\n            assert register_class(\"Alice\", \"CS102\") == [\"CS101\", \"CS102\"]\\n\\n            # Test case 3: Register a class for a student not registered\\n            assert register_class(\"Charlie\", \"MATH101\") == [\"MATH101\"]\\n        \"\"\"\\n        if student_name in self.students_registration_classes:\\n            self.students_registration_classes[student_name].append(class_name)\\n        else:\\n            self.students_registration_classes[student_name] = [class_name]\\n        return self.students_registration_classes[student_name]\\n\\n    def get_students_by_major(self, major):\\n        \"\"\"\\n        Retrieves a list of student names based on their major.\\n\\n        Parameters:\\n            major (str): The major to filter students by.\\n\\n        Returns:\\n            list: A list of student names who are majoring in the specified major.\\n\\n        Test cases:\\n            # Test case 1: Retrieve students by major\\n            register_student({\"name\": \"Alice\", \"major\": \"Computer Science\"})\\n            register_student({\"name\": \"Bob\", \"major\": \"Mathematics\"})\\n            assert get_students_by_major(\"Computer Science\") == [\"Alice\"]\\n\\n            # Test case 2: Major with no students\\n            assert get_students_by_major(\"Biology\") == []\\n\\n            # Test case 3: Multiple students in the same major\\n            register_student({\"name\": \"Charlie\", \"major\": \"Computer Science\"})\\n            assert get_students_by_major(\"Computer Science\") == [\"Alice\", \"Charlie\"]\\n        \"\"\"\\n        student_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                student_list.append(student[\"name\"])\\n        return student_list\\n\\n    def get_all_major(self):\\n        \"\"\"\\n        Retrieves a list of all unique majors from the registered students.\\n\\n        Returns:\\n            list: A list of unique majors.\\n\\n        Test cases:\\n            # Test case 1: No students registered\\n            assert get_all_major() == []\\n\\n            # Test case 2: Students with different majors\\n            register_student({\"name\": \"Alice\", \"major\": \"Computer Science\"})\\n            register_student({\"name\": \"Bob\", \"major\": \"Mathematics\"})\\n            assert get_all_major() == [\"Computer Science\", \"Mathematics\"]\\n\\n            # Test case 3: Students with the same major\\n            register_student({\"name\": \"Charlie\", \"major\": \"Computer Science\"})\\n            assert get_all_major() == [\"Computer Science\", \"Mathematics\"]\\n        \"\"\"\\n        major_list = []\\n        for student in self.students:\\n            if student[\"major\"] not in major_list:\\n                major_list.append(student[\"major\"])\\n        return major_list\\n\\n    def get_most_popular_class_in_major(self, major):\\n        \"\"\"\\n        Determines the most popular class among students in a specified major.\\n\\n        Parameters:\\n            major (str): The major to filter students by.\\n\\n        Returns:\\n            str: The name of the most popular class among the specified major. \\n                  If no students in the major have registered for a class, returns None.\\n\\n        Test cases:\\n            # Test case 1: Popular class in a major\\n            register_student({\"name\": \"Alice\", \"major\": \"Computer Science\"})\\n            register_student({\"name\": \"Bob\", \"major\": \"Computer Science\"})\\n            register_class(\"Alice\", \"CS101\")\\n            register_class(\"Bob\", \"CS101\")\\n            assert get_most_popular_class_in_major(\"Computer Science\") == \"CS101\"\\n\\n            # Test case 2: No registered students in the major\\n            assert get_most_popular_class_in_major(\"Mathematics\") is None\\n            \\n            # Test case 3: Multiple classes\\n            register_student({\"name\": \"Charlie\", \"major\": \"Mathematics\"})\\n            register_class(\"Charlie\", \"MATH101\")\\n            register_class(\"Charlie\", \"MATH102\")\\n            register_class(\"Alice\", \"MATH101\")\\n            assert get_most_popular_class_in_major(\"Mathematics\") == \"MATH101\"\\n        \"\"\"\\n        class_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                class_list += self.students_registration_classes.get(student[\"name\"], [])\\n        if not class_list:\\n            return None\\n        most_popular_class = max(set(class_list), key=class_list.count)\\n        return most_popular_class\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735132840, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_d02d531b47', usage=CompletionUsage(completion_tokens=1350, prompt_tokens=1636, total_tokens=2986, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Class_Registration_System.txt"}