{"response body": {"id": "d3fad8c1-df98-4a5a-8a60-775463f78d95", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:46:29", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides methods to manipulate images using the Python Imaging Library (PIL).\n\"\"\"\n\nfrom PIL import Image, ImageEnhance, ImageChops\n\n\nclass ImageProcessor:\n    def __init__(self):\n        \"\"\"\n        Initialization method for the ImageProcessor class. Initializes the 'image' attribute to None.\n        \"\"\"\n        self.image = None\n\n    def load_image(self, image_path):\n        \"\"\"\n        Opens an image file from the given path and sets it to the 'image' attribute.\n\n        Parameters:\n            image_path (str): The path to the image file to load\n\n        Test cases:\n            # Test case 1: Load an existing image\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            assert processor.image is not None\n            \n            # Test case 2: Load a non-existing image (should raise an IOError)\n            processor = ImageProcessor()\n            with pytest.raises(IOError):\n                processor.load_image('non_existing_path.jpg')\n            \n            # Test case 3: Load with an invalid type (should raise a TypeError)\n            processor = ImageProcessor()\n            with pytest.raises(TypeError):\n                processor.load_image(123)\n        \"\"\"\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        \"\"\"\n        Saves the image currently loaded in the 'image' attribute to the given path.\n\n        Parameters:\n            save_path (str): The path where to save the image\n\n        Test cases:\n            # Test case 1: Save an image loaded in the ImageProcessor\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            processor.save_image('path_to_save_image.jpg')\n            \n            # Test case 2: Save an image without loading it first (should not save anything)\n            processor = ImageProcessor()\n            processor.save_image('path_to_save_image.jpg')\n            \n            # Test case 3: Save with an invalid type (should raise a TypeError)\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            with pytest.raises(TypeError):\n                processor.save_image(123)\n        \"\"\"\n        if self.image:\n            self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        \"\"\"\n        Resizes the image currently loaded in the 'image' attribute to the given dimensions.\n\n        Parameters:\n            width (int): The width to resize the image to\n            height (int): The height to resize the image to\n\n        Test cases:\n            # Test case 1: Resize an image loaded in the ImageProcessor\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            processor.resize_image(100, 100)\n            \n            # Test case 2: Resize an image without loading it first (should not resize anything)\n            processor = ImageProcessor()\n            processor.resize_image(100, 100)\n            \n            # Test case 3: Resize with invalid dimensions (should raise a ValueError)\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            with pytest.raises(ValueError):\n                processor.resize_image(-1, 100)\n        \"\"\"\n        if self.image:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        \"\"\"\n        Rotates the image currently loaded in the 'image' attribute by the given degrees.\n\n        Parameters:\n            degrees (float): The degrees to rotate the image by\n\n        Test cases:\n            # Test case 1: Rotate an image loaded in the ImageProcessor\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            processor.rotate_image(90)\n            \n            # Test case 2: Rotate an image without loading it first (should not rotate anything)\n            processor = ImageProcessor()\n            processor.rotate_image(90)\n            \n            # Test case 3: Rotate with invalid degrees (should raise a ValueError)\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            with pytest.raises(ValueError):\n                processor.rotate_image('90')\n        \"\"\"\n        if self.image:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        \"\"\"\n        Adjusts the brightness of the image currently loaded in the 'image' attribute by the given factor.\n\n        Parameters:\n            factor (float): The factor to adjust the brightness by. 1.0 gives the original image.\n\n        Test cases:\n            # Test case 1: Adjust the brightness of an image loaded in the ImageProcessor\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            processor.adjust_brightness(0.5)\n            \n            # Test case 2: Adjust the brightness of an image without loading it first (should not adjust anything)\n            processor = ImageProcessor()\n            processor.adjust_brightness(0.5)\n            \n            # Test case 3: Adjust with invalid factor (should raise a ValueError)\n            processor = ImageProcessor()\n            processor.load_image('path_to_image.jpg')\n            with pytest.raises(ValueError):\n                processor.adjust_brightness('0.5')\n        \"\"\"\n        if self.image:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)"}}], "usage": {"completion_tokens": 1058, "prompt_tokens": 1243, "total_tokens": 2301}, "feeType": "1", "consume": 1.464524}, "test_case_name": "ImageProcessor.txt"}