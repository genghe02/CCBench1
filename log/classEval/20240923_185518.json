{"response body": {"id": "4fd6cba8-9bed-44f4-bdb4-5af55a239903", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 18:55:18", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport datetime\nimport time\n\n# This class provides utility methods for handling and manipulating date and time objects\nclass TimeUtils:\n\n    # Initializes the TimeUtils class with the current system time\n    def __init__(self):\n        self.datetime = datetime.datetime.now()\n\n    # Returns the current system time in the format of hours, minutes and seconds (HH:MM:SS)\n    # Test case: \n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.get_current_time()) // Output will vary based on the current system time\n    def get_current_time(self):\n        format = \"%H:%M:%S\"\n        return self.datetime.strftime(format)\n\n    # Returns the current system date in the format of year, month and day (YYYY-MM-DD)\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.get_current_date()) // Output will vary based on the current system date\n    def get_current_date(self):\n        format = \"%Y-%m-%d\"\n        return self.datetime.strftime(format)\n\n    # Adds the specified number of seconds to the current system time and returns the result\n    # param seconds: int, the number of seconds to add to the current system time\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.add_seconds(120)) // Output will vary based on the current system time\n    def add_seconds(self, seconds):\n        new_datetime = self.datetime + datetime.timedelta(seconds=seconds)\n        format = \"%H:%M:%S\"\n        return new_datetime.strftime(format)\n\n    # Converts a string to a datetime object\n    # param string: str, a string representing a date and time\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.string_to_datetime(\"2022-01-01 12:00:00\")) // Output: 2022-01-01 12:00:00\n    def string_to_datetime(self, string):\n        return datetime.datetime.strptime(string, \"%Y-%m-%d %H:%M:%S\")\n\n    # Converts a datetime object to a string\n    # param datetime: datetime, a datetime object\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.datetime_to_string(datetime.datetime(2022, 1, 1, 12, 0, 0))) // Output: \"2022-01-01 12:00:00\"\n    def datetime_to_string(self, datetime):\n        return datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # Returns the absolute difference in minutes between two given times\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.get_minutes(\"2022-01-01 12:00:00\", \"2022-01-01 12:30:00\")) // Output: 30\n    def get_minutes(self, string_time1, string_time2):\n        time1 = self.string_to_datetime(string_time1)\n        time2 = self.string_to_datetime(string_time2)\n        return round((time2 - time1).seconds / 60)\n\n    # Returns a formatted string representing a specific date and time\n    # param year: int, the year\n    # param month: int, the month\n    # param day: int, the day\n    # param hour: int, the hour\n    # param minute: int, the minute\n    # param second: int, the second\n    # Test case:\n    # >>> time_util = TimeUtils()\n    # >>> print(time_util.get_format_time(2022, 1, 1, 12, 0, 0)) // Output: \"2022-01-01 12:00:00\"\n    def get_format_time(self, year, month, day, hour, minute, second):\n        format = \"%Y-%m-%d %H:%M:%S\"\n        time_item = datetime.datetime(year, month, day, hour, minute, second)\n        return time_item.strftime(format)\n```"}}], "usage": {"completion_tokens": 861, "prompt_tokens": 1036, "total_tokens": 1897}, "feeType": "1", "consume": 1.202488}, "test_case_name": "TimeUtils.txt"}