{"response body": {"id": "db520729-d53f-4f05-b4c6-661e227d768e", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:28:50", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom math import pi, fabs\n\n# This is a class designed to calculate trigonometric functions of a given angle using Taylor series expansions.\nclass TriCalculator:\n\n    def __init__(self):\n        pass\n\n    # This function calculates the cosine of a given angle.\n    # param x: float, the angle in degrees\n    # return: float, the cosine of the angle, rounded to 10 decimal places\n    # Test cases for this function:\n    # >>> calc = TriCalculator()\n    # >>> calc.cos(0)\n    # >>> calc.cos(90)\n    # >>> calc.cos(180)\n    def cos(self, x):\n        return round(self.taylor(x, 50), 10)\n\n    # This function calculates the factorial of a given number.\n    # param a: int, the input number for which the factorial is to be calculated\n    # return: int, the factorial of the input number\n    # Test cases for this function:\n    # >>> calc = TriCalculator()\n    # >>> calc.factorial(0)\n    # >>> calc.factorial(5)\n    # >>> calc.factorial(10)\n    def factorial(self, a):\n        b = 1\n        while a != 1:\n            b *= a\n            a -= 1\n        return b\n\n    # This function applies the Taylor series expansion to calculate cosine of a given angle.\n    # param x: float, the angle in degrees\n    # param n: int, the number of terms in the Taylor series expansion\n    # return: float, the cosine of the angle calculated using the Taylor series expansion\n    # Test cases for this function:\n    # >>> calc = TriCalculator()\n    # >>> calc.taylor(0, 50)\n    # >>> calc.taylor(90, 50)\n    # >>> calc.taylor(180, 50)\n    def taylor(self, x, n):\n        a = 1\n        x = x / 180 * pi\n        count = 1\n        for k in range(1, n):\n            if count % 2 != 0:\n                a -= (x ** (2 * k)) / self.factorial(2 * k)\n            else:\n                a += (x ** (2 * k)) / self.factorial(2 * k)\n            count += 1\n        return a\n\n    # This function calculates the sine of a given angle.\n    # param x: float, the angle in degrees\n    # return: float, the sine of the angle, rounded to 10 decimal places\n    # Test cases for this function:\n    # >>> calc = TriCalculator()\n    # >>> calc.sin(0)\n    # >>> calc.sin(30)\n    # >>> calc.sin(90)\n    def sin(self, x):\n        x = x / 180 * pi\n        g = 0\n        t = x\n        n = 1\n\n        while fabs(t) >= 1e-15:\n            g += t\n            n += 1\n            t = -t * x * x / (2 * n - 1) / (2 * n - 2)\n        return round(g, 10)\n\n    # This function calculates the tangent of a given angle.\n    # param x: float, the angle in degrees\n    # return: float, the tangent of the angle, rounded to 10 decimal places if cos(x) is not 0, otherwise returns False\n    # Test cases for this function:\n    # >>> calc = TriCalculator()\n    # >>> calc.tan(0)\n    # >>> calc.tan(45)\n    # >>> calc.tan(90)\n    def tan(self, x):\n        if self.cos(x) != 0:\n            result = self.sin(x) / self.cos(x)\n            return round(result, 10)\n        else:\n            return False\n```"}}], "usage": {"completion_tokens": 810, "prompt_tokens": 1029, "total_tokens": 1839}, "feeType": "1", "consume": 1.154964}, "test_case_name": "TriCalculator.txt"}