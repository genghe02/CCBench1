{"response body": {"id": "3bca3d43-b24b-4953-ba32-2a711d444f30", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:18:03", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThe class represents a Blackjack game, allowing to create a deck, calculate hand value and check the winner based on the hand values.\n\"\"\"\n\nimport random\n\n\nclass BlackjackGame:\n    def __init__(self):\n        \"\"\"\n        Initialization method for the BlackjackGame class.\n        Initializes the deck, player hand, and dealer hand.\n        \"\"\"\n        self.deck = self.create_deck()\n        self.player_hand = []\n        self.dealer_hand = []\n\n    def create_deck(self):\n        \"\"\"\n        Creates a deck of cards, shuffles it and returns.\n\n        Returns:\n            list: A shuffled deck of cards in the format 'RS' where R is the rank and S is the suit\n        \n        Test cases:\n            # Test case 1: Check if the deck has the correct number of cards\n            assert len(create_deck()) == 52\n\n            # Test case 2: Check if the deck has all the cards\n            assert set(create_deck()) == set(['AS', '2S', '3S', '4S', '5S', '6S', '7S', '8S', '9S', '10S', 'JS', 'QS', 'KS',\n                                              'AC', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C', 'JC', 'QC', 'KC',\n                                              'AD', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D', 'JD', 'QD', 'KD',\n                                              'AH', '2H', '3H', '4H', '5H', '6H', '7H', '8H', '9H', '10H', 'JH', 'QH', 'KH'])\n        \"\"\"\n        deck = []\n        suits = ['S', 'C', 'D', 'H']\n        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n        for suit in suits:\n            for rank in ranks:\n                deck.append(rank + suit)\n        random.shuffle(deck)\n        return deck\n\n    def calculate_hand_value(self, hand):\n        \"\"\"\n        Calculate the value of a given hand.\n\n        Parameters:\n            hand (list): A list of strings representing the cards in a hand\n        \n        Returns:\n            int: The calculated value of the hand\n            \n        Test cases:\n            # Test case 1: Hand with no Ace\n            assert calculate_hand_value(['2S', '3S', '10S', 'KS']) == 25\n\n            # Test case 2: Hand with one Ace and total value <= 21\n            assert calculate_hand_value(['2S', 'AS']) == 13\n            \n            # Test case 3: Hand with one Ace and total value > 21\n            assert calculate_hand_value(['KS', 'QS', 'AS']) == 21\n        \"\"\"\n\n        value = 0\n        num_aces = 0\n        for card in hand:\n            rank = card[:-1]\n            if rank.isdigit():\n                value += int(rank)\n            elif rank in ['J', 'Q', 'K']:\n                value += 10\n            elif rank == 'A':\n                value += 11\n                num_aces += 1\n        while value > 21 and num_aces > 0:\n            value -= 10\n            num_aces -= 1\n        return value\n\n    def check_winner(self, player_hand, dealer_hand):\n        \"\"\"\n        Check the winner between player and dealer based on the hand values.\n\n        Parameters:\n            player_hand (list): A list of strings representing the player's cards\n            dealer_hand (list): A list of strings representing the dealer's cards\n        \n        Returns:\n            str: The result of the game, 'Player wins' or 'Dealer wins'\n            \n        Test cases:\n            # Test case 1: Both player and dealer have same hand value\n            assert check_winner(['2S', '3S', '10S'], ['KS', '5S']) == 'Dealer wins'\n            \n            # Test case 2: Player has higher hand value\n            assert check_winner(['KS', 'QS', 'AS'], ['KS', 'QS']) == 'Player wins'\n            \n            # Test case 3: Dealer has higher hand value\n            assert check_winner(['2S', '3S'], ['KS', '5S']) == 'Dealer wins'\n        \"\"\"\n\n        player_value = self.calculate_hand_value(player_hand)\n        dealer_value = self.calculate_hand_value(dealer_hand)\n        if player_value > 21 and dealer_value > 21:\n            if player_value <= dealer_value:\n                return 'Player wins'\n            else:\n                return 'Dealer wins'\n        elif player_value > 21:\n            return 'Dealer wins'\n        elif dealer_value > 21:\n            return 'Player wins'\n        else:\n            if player_value <= dealer_value:\n                return 'Dealer wins'\n            else:\n                return 'Player wins'"}}], "usage": {"completion_tokens": 1081, "prompt_tokens": 1431, "total_tokens": 2512}, "feeType": "1", "consume": 1.566548}, "test_case_name": "BlackjackGame.txt"}