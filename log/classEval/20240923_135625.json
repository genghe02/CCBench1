{"response body": {"id": "529db17b-af1f-4eaa-9712-74ef86afb450", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:56:25", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "from docx import Document\nfrom docx.shared import Pt\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n\n\nclass DocFileHandler:\n    # Class for handling Word document files including reading, writing text, adding headings, and tables.\n\n    def __init__(self, file_path):\n        # Initialize the DocFileHandler with the given file_path.\n        # param file_path: str, the path to the Word document file.\n\n        self.file_path = file_path\n\n    def read_text(self):\n        # Read the text content from the Word document.\n        # return: str, the concatenated text from all paragraphs in the document.\n        doc = Document(self.file_path)\n        text = []\n        for paragraph in doc.paragraphs:\n            text.append(paragraph.text)\n        return \"\\n\".join(text)\n\n    def write_text(self, content, font_size=12, alignment='left'):\n        # Write the given content to the Word document with specified font size and alignment.\n        # param content: str, the text content to be written.\n        # param font_size: int, the font size for the text (default is 12).\n        # param alignment: str, the alignment of the text (options: 'left', 'center', 'right').\n        # return: bool, True if writing is successful, False otherwise.\n        try:\n            doc = Document()\n            paragraph = doc.add_paragraph()\n            run = paragraph.add_run(content)\n            font = run.font\n            font.size = Pt(font_size)\n            alignment_value = self._get_alignment_value(alignment)\n            paragraph.alignment = alignment_value\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_heading(self, heading, level=1):\n        # Add a heading to the Word document with the specified level.\n        # param heading: str, the text of the heading.\n        # param level: int, the level of the heading (default is 1).\n        # return: bool, True if adding heading is successful, False otherwise.\n        try:\n            doc = Document(self.file_path)\n            doc.add_heading(heading, level)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_table(self, data):\n        # Add a table to the Word document with the given data.\n        # param data: list of lists, the data to be inserted into the table.\n        # return: bool, True if adding table is successful, False otherwise.\n        try:\n            doc = Document(self.file_path)\n            table = doc.add_table(rows=len(data), cols=len(data[0]))\n            for i, row in enumerate(data):\n                for j, cell_value in enumerate(row):\n                    table.cell(i, j).text = str(cell_value)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def _get_alignment_value(self, alignment):\n        # Get the alignment value based on the alignment string.\n        # param alignment: str, the alignment string ('left', 'center', 'right').\n        # return: WD_PARAGRAPH_ALIGNMENT, the alignment value for Word document.\n        alignment_options = {\n            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,\n            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,\n            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT\n        }\n        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)"}}], "usage": {"completion_tokens": 705, "prompt_tokens": 1055, "total_tokens": 1760}, "feeType": "1", "consume": 0.01151137316}, "test_case_name": "DocFileHandler.txt"}