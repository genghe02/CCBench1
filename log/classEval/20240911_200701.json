{"response body": "ChatCompletion(id='chatcmpl-A6GPW1zHigYYbiZBBoCU2gm27xHbr', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n# This is a class for managing student registrations and class enrollment in a class registration system.\\nclass ClassRegistrationSystem:\\n\\n    def __init__(self):\\n        # Initialize the list of registered students and a dictionary to store the classes each student is registered in.\\n        self.students = []\\n        self.students_registration_classes = {}\\n\\n    def register_student(self, student):\\n        # Register a student in the system if they are not already registered.\\n        if student in self.students:\\n            return 0  # Return 0 if the student is already registered.\\n        else:\\n            self.students.append(student)  # Add the student to the registered list.\\n            return 1  # Return 1 indicating successful registration.\\n\\n    def register_class(self, student_name, class_name):\\n        # Register a class for a specific student.\\n        # :param student_name: str, the name of the student to register for the class\\n        # :param class_name: str, the name of the class to be registered\\n        # :return: list, the updated list of classes the student is registered in\\n        # >>> crs = ClassRegistrationSystem()\\n        # >>> crs.register_student(\\'Alice\\')\\n        # >>> crs.register_class(\\'Alice\\', \\'Math\\')\\n        # >>> crs.students_registration_classes\\n        # {\\'Alice\\': [\\'Math\\']}\\n        if student_name in self.students_registration_classes:\\n            self.students_registration_classes[student_name].append(class_name)  # Append class if student already exists.\\n        else:\\n            self.students_registration_classes[student_name] = [class_name]  # Create a new entry for the student.\\n        return self.students_registration_classes[student_name]  # Return the updated list of classes for the student.\\n\\n    def get_students_by_major(self, major):\\n        # Retrieve a list of student names who are registered under a specific major.\\n        # :param major: str, the major to filter students by\\n        # :return: list, a list of student names who have the specified major\\n        # >>> crs = ClassRegistrationSystem()\\n        # >>> crs.register_student({\\'name\\': \\'Alice\\', \\'major\\': \\'Math\\'})\\n        # >>> crs.get_students_by_major(\\'Math\\')\\n        # [\\'Alice\\']\\n        student_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                student_list.append(student[\"name\"])  # Add student\\'s name if they match the major.\\n        return student_list\\n\\n    def get_all_major(self):\\n        # Get a list of all unique majors from registered students.\\n        # :return: list, a list of unique majors\\n        # >>> crs = ClassRegistrationSystem()\\n        # >>> crs.register_student({\\'name\\': \\'Alice\\', \\'major\\': \\'Math\\'})\\n        # >>> crs.register_student({\\'name\\': \\'Bob\\', \\'major\\': \\'Science\\'})\\n        # >>> crs.get_all_major()\\n        # [\\'Math\\', \\'Science\\']\\n        major_list = []\\n        for student in self.students:\\n            if student[\"major\"] not in major_list:\\n                major_list.append(student[\"major\"])  # Only add unique majors.\\n        return major_list\\n\\n    def get_most_popular_class_in_major(self, major):\\n        # Determine the most popular class among students of a specific major.\\n        # :param major: str, the major to filter students by\\n        # :return: str, the name of the most popular class for the specified major\\n        # >>> crs = ClassRegistrationSystem()\\n        # >>> crs.register_student({\\'name\\': \\'Alice\\', \\'major\\': \\'Math\\'})\\n        # >>> crs.register_class(\\'Alice\\', \\'Calculus\\')\\n        # >>> crs.register_student({\\'name\\': \\'Bob\\', \\'major\\': \\'Math\\'})\\n        # >>> crs.register_class(\\'Bob\\', \\'Calculus\\')\\n        # >>> crs.register_class(\\'Bob\\', \\'Algebra\\')\\n        # >>> crs.get_most_popular_class_in_major(\\'Math\\')\\n        # \\'Calculus\\'\\n        class_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                class_list += self.students_registration_classes[student[\"name\"]]  # Collect all classes for matching major students.\\n        most_popular_class = max(set(class_list), key=class_list.count)  # Find the class that appears most frequently.\\n        return most_popular_class\\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056414, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=897, prompt_tokens=1092, total_tokens=1989))", "test_case_name": "Class_Registration_System.txt"}