{"response body": {"id": "1eeca6a2-6c72-4fd3-aa68-fd139b29e55c", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:18:58", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class manages a book inventory, allowing for the addition and removal of books, as well as querying the inventory.\n\"\"\"\n\nclass BookManagement:\n    def __init__(self):\n        \"\"\"\n        Initialization method that creates an empty inventory dictionary.\n        \"\"\"\n        self.inventory = {}\n\n    def add_book(self, title, quantity=1):\n        \"\"\"\n        Adds a book to the inventory. If the book already exists, it increments the quantity.\n\n        Parameters:\n            title (str): The title of the book to be added.\n            quantity (int, optional): The quantity of books to be added. Default is 1.\n        \n        Test cases:\n            # Test case 1: Adding a book that isn't in the inventory\n            add_book('To Kill a Mockingbird')\n            assert view_inventory() == {'To Kill a Mockingbird': 1}\n            \n            # Test case 2: Adding multiple copies of a book\n            add_book('To Kill a Mockingbird', 3)\n            assert view_inventory() == {'To Kill a Mockingbird': 4}\n            \n            # Test case 3: Adding a book that's already in the inventory\n            add_book('To Kill a Mockingbird')\n            assert view_inventory() == {'To Kill a Mockingbird': 5}\n        \"\"\"\n        if title in self.inventory:\n            self.inventory[title] += quantity\n        else:\n            self.inventory[title] = quantity\n\n    def remove_book(self, title, quantity):\n        \"\"\"\n        Removes a book from the inventory. If the quantity of the book is less than the quantity to be removed, it raises an error.\n\n        Parameters:\n            title (str): The title of the book to be removed.\n            quantity (int): The quantity of books to be removed.\n\n        Test cases:\n            # Test case 1: Removing a book that's in the inventory\n            remove_book('To Kill a Mockingbird', 1)\n            assert view_inventory() == {'To Kill a Mockingbird': 4}\n\n            # Test case 2: Removing a book that isn't in the inventory\n            try:\n                remove_book('The Great Gatsby', 1)\n            except:\n                assert True\n\n            # Test case 3: Removing more books than are in the inventory\n            try:\n                remove_book('To Kill a Mockingbird', 10)\n            except:\n                assert True\n        \"\"\"\n        if title not in self.inventory or self.inventory[title] < quantity:\n            raise False\n        self.inventory[title] -= quantity\n        if self.inventory[title] == 0:\n            del (self.inventory[title])\n\n    def view_inventory(self):\n        \"\"\"\n        Returns the current inventory of books.\n\n        Returns:\n            dict: The inventory of books, with book titles as keys and quantities as values.\n        \"\"\"\n        return self.inventory\n\n    def view_book_quantity(self, title):\n        \"\"\"\n        Returns the quantity of a specific book in the inventory.\n\n        Parameters:\n            title (str): The title of the book to query.\n\n        Returns:\n            int: The quantity of the specified book in the inventory.\n\n        Test cases:\n            # Test case 1: Querying a book that's in the inventory\n            assert view_book_quantity('To Kill a Mockingbird') == 4\n\n            # Test case 2: Querying a book that isn't in the inventory\n            assert view_book_quantity('The Great Gatsby') == 0\n        \"\"\"\n        if title not in self.inventory:\n            return 0\n        return self.inventory[title]"}}], "usage": {"completion_tokens": 739, "prompt_tokens": 1208, "total_tokens": 1947}, "feeType": "1", "consume": 1.171096}, "test_case_name": "BookManagement.txt"}