{"response body": "ChatCompletion(id='chatcmpl-AiO9iTULQhiyjmtRnjmlRtVs75qXn', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a discount strategy system that calculates and applies discounts based on various promotion schemes.\\n\\nThe class includes methods to calculate a total amount, calculate the amount due after discounts, and define different types of promotional discounts.\\n\"\"\"\\n\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        \"\"\"\\n        Initialize the DiscountStrategy instance with customer details, shopping cart items, and an optional promotion function.\\n\\n        Parameters:\\n            customer (dict): Dictionary containing customer details\\n            cart (list): List of items in the shopping cart where each item is a dictionary\\n            promotion (function): Optional promotion function that calculates discount based on the order\\n\\n        Test cases:\\n            # Test case 1: Minimal input\\n            DiscountStrategy({}, [])\\n            \\n            # Test case 2: With promotion function\\n            DiscountStrategy({\\'customer_id\\': 123, \\'fidelity\\': 1000}, [{\\'product\\': \\'A\\', \\'quantity\\': 5, \\'price\\': 10}], DiscountStrategy.FidelityPromo)\\n            \\n            # Test case 3: No promotion\\n            DiscountStrategy({\\'customer_id\\': 456, \\'fidelity\\': 500}, [{\\'product\\': \\'B\\', \\'quantity\\': 3, \\'price\\': 20}])\\n        \"\"\"\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        \"\"\"\\n        Calculate the total price of the items in the shopping cart.\\n\\n        Returns:\\n            float: Total price of the items in the cart\\n\\n        Test cases:\\n            # Test case 1: Basic cart items\\n            assert total() == 50.0\\n            \\n            # Test case 2: Empty cart\\n            assert total() == 0.0\\n            \\n            # Test case 3: Cart with multiple items\\n            assert total() == 140.0\\n        \"\"\"\\n        self.__total = sum(item[\\'quantity\\'] * item[\\'price\\'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        \"\"\"\\n        Calculate the amount due after applying any discounts.\\n\\n        Returns:\\n            float: Amount due after deducting applicable discounts\\n\\n        Test cases:\\n            # Test case 1: No promotion\\n            assert due() == 50.0\\n            \\n            # Test case 2: With FidelityPromo\\n            assert due() == 47.5\\n            \\n            # Test case 3: With BulkItemPromo\\n            assert due() == 126.0\\n        \"\"\"\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        \"\"\"\\n        Apply a fidelity discount to the order total.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy instance representing the order to apply discount to\\n\\n        Returns:\\n            float: Discount amount based on the fidelity of the customer\\n\\n        Test cases:\\n            # Test case 1: Fidelity below threshold\\n            assert FidelityPromo(DiscountStrategy({\\'customer_id\\': 123, \\'fidelity\\': 500}, [{\\'product\\': \\'A\\', \\'quantity\\': 5, \\'price\\': 10}])) == 0\\n            \\n            # Test case 2: Fidelity above threshold\\n            assert FidelityPromo(DiscountStrategy({\\'customer_id\\': 456, \\'fidelity\\': 1200}, [{\\'product\\': \\'B\\', \\'quantity\\': 3, \\'price\\': 20}])) == 60.0\\n            \\n            # Test case 3: Fidelity exactly at threshold\\n            assert FidelityPromo(DiscountStrategy({\\'customer_id\\': 789, \\'fidelity\\': 1000}, [{\\'product\\': \\'C\\', \\'quantity\\': 5, \\'price\\': 10}])) == 25.0\\n        \"\"\"\\n        return order.total() * 0.05 if order.customer[\\'fidelity\\'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        \"\"\"\\n        Apply a bulk item discount to the order total.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy instance representing the order to apply discount to\\n\\n        Returns:\\n            float: Discount amount based on bulk item purchase\\n\\n        Test cases:\\n            # Test case 1: No bulk items\\n            assert BulkItemPromo(DiscountStrategy({}, [{\\'product\\': \\'A\\', \\'quantity\\': 5, \\'price\\': 10}])) == 0.0\\n            \\n            # Test case 2: Bulk item discount applies\\n            assert BulkItemPromo(DiscountStrategy({}, [{\\'product\\': \\'B\\', \\'quantity\\': 20, \\'price\\': 5}])) == 20.0\\n            \\n            # Test case 3: Partial bulk quantity\\n            assert BulkItemPromo(DiscountStrategy({}, [{\\'product\\': \\'C\\', \\'quantity\\': 15, \\'price\\': 2}])) == 0.0\\n        \"\"\"\\n        discount = 0\\n        for item in order.cart:\\n            if item[\\'quantity\\'] >= 20:\\n                discount += item[\\'quantity\\'] * item[\\'price\\'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        \"\"\"\\n        Apply a large order discount to the order total.\\n\\n        Parameters:\\n            order (DiscountStrategy): DiscountStrategy instance representing the order to apply discount to\\n\\n        Returns:\\n            float: Discount amount based on the number of unique products in the order\\n\\n        Test cases:\\n            # Test case 1: Less than threshold unique products\\n            assert LargeOrderPromo(DiscountStrategy({}, [{\\'product\\': \\'A\\', \\'quantity\\': 5, \\'price\\': 10}, {\\'product\\': \\'B\\', \\'quantity\\': 3, \\'price\\': 7}])) == 0.0\\n            \\n            # Test case 2: Exactly at unique products threshold\\n            assert LargeOrderPromo(DiscountStrategy({}, [{\\'product\\': \\'A\\', \\'quantity\\': 2, \\'price\\': 8}, {\\'product\\': \\'B\\', \\'quantity\\': 3, \\'price\\': 5}, {\\'product\\': \\'C\\', \\'quantity\\': 4, \\'price\\': 6}, {\\'product\\': \\'D\\', \\'quantity\\': 1, \\'price\\': 3}, {\\'product\\': \\'E\\', \\'quantity\\': 5, \\'price\\': 2}])) == 9.8\\n            \\n            # Test case 3: Beyond unique products threshold\\n            assert LargeOrderPromo(DiscountStrategy({}, [{\\'product\\': \\'X\\', \\'quantity\\': 3, \\'price\\': 15}, {\\'product\\': \\'Y\\', \\'quantity\\': 2, \\'price\\': 20}, {\\'product\\': \\'Z\\', \\'quantity\\': 4, \\'price\\': 10}, {\\'product\\': \\'X\\', \\'quantity\\': 1, \\'price\\': 25}, {\\'product\\': \\'Y\\', \\'quantity\\': 3, \\'price\\': 10}])) == 0.0\\n        \"\"\"\\n        return order.total() * 0.07 if len({item[\\'product\\'] for item in order.cart}) >= 10 else 0\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735142650, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1478, prompt_tokens=1376, total_tokens=2854, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "DiscountStrategy.txt"}