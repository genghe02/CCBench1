{"response body": {"id": "7d42212b-620d-4675-97e5-77177222768e", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:43:56", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom docx import Document\nfrom docx.shared import Pt\nfrom docx.enum.text import WD_PARAGRAPH_ALIGNMENT\n\n# This is a class for handling MS Word Document files using python-docx module \nclass DocFileHandler:\n    def __init__(self, file_path):\n        # Constructor method to initialize the file_path\n        # param file_path: str, the path to the document file\n        self.file_path = file_path\n\n    def read_text(self):\n        # This function reads the text from the document file\n        # return: str, the text content of the document\n        doc = Document(self.file_path)\n        text = []\n        for paragraph in doc.paragraphs:\n            text.append(paragraph.text)\n        return \"\\n\".join(text)\n\n    def write_text(self, content, font_size=12, alignment='left'):\n        # This function writes text to the document file with given font size and alignment\n        # param content: str, the text to be written to the document\n        # param font_size: int, the font size of the text\n        # param alignment: str, the alignment of the text. It can be 'left', 'center' or 'right'\n        # return: bool, True if the write operation is successful, False otherwise\n        try:\n            doc = Document()\n            paragraph = doc.add_paragraph()\n            run = paragraph.add_run(content)\n            font = run.font\n            font.size = Pt(font_size)\n            alignment_value = self._get_alignment_value(alignment)\n            paragraph.alignment = alignment_value\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_heading(self, heading, level=1):\n        # This function adds a heading to the document file\n        # param heading: str, the heading to be added\n        # param level: int, the level of the heading\n        # return: bool, True if the heading is added successfully, False otherwise\n        try:\n            doc = Document(self.file_path)\n            doc.add_heading(heading, level)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def add_table(self, data):\n        # This function adds a table to the document file\n        # param data: list of lists, the data to be added in the table\n        # return: bool, True if the table is added successfully, False otherwise\n        try:\n            doc = Document(self.file_path)\n            table = doc.add_table(rows=len(data), cols=len(data[0]))\n            for i, row in enumerate(data):\n                for j, cell_value in enumerate(row):\n                    table.cell(i, j).text = str(cell_value)\n            doc.save(self.file_path)\n            return True\n        except:\n            return False\n\n    def _get_alignment_value(self, alignment):\n        # This private function returns the alignment value corresponding to the alignment string\n        # param alignment: str, the alignment of the text. It can be 'left', 'center' or 'right'\n        # return: WD_PARAGRAPH_ALIGNMENT, the alignment value corresponding to the alignment string\n        alignment_options = {\n            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,\n            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,\n            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT\n        }\n        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)\n```\n"}}], "usage": {"completion_tokens": 707, "prompt_tokens": 1055, "total_tokens": 1762}, "feeType": "1", "consume": 1.076484}, "test_case_name": "DocFileHandler.txt"}