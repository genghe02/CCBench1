{"response body": {"id": "c8b342c2-7d1a-4752-9eea-f72c6b029739", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:48:40", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport math\n\nclass Statistics3:\n    # A class that provides various statistical functions such as median, mode, correlation, mean, correlation matrix, standard deviation, and z-score.\n\n    @staticmethod\n    def median(data):\n        # Calculate the median value from a given list of data.\n        # param data: list, the input data for which the median needs to be calculated\n        # return: float, the median value of the input data\n        # Test cases: median([1, 2, 3, 4, 5]) => 3\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        if n % 2 == 1:\n            return sorted_data[n // 2]\n        else:\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\n\n    @staticmethod\n    def mode(data):\n        # Find the mode(s) of a given list of data.\n        # param data: list, the input data for which the mode needs to be calculated\n        # return: list, the mode value(s) of the input data\n        # Test cases: mode([1, 2, 2, 3, 3, 3, 4]) => [3]\n        counts = {}\n        for value in data:\n            counts[value] = counts.get(value, 0) + 1\n        max_count = max(counts.values())\n        mode_values = [value for value, count in counts.items() if count == max_count]\n        return mode_values\n\n    @staticmethod\n    def correlation(x, y):\n        # Calculate the correlation coefficient between two lists of data.\n        # param x: list, the first input data for correlation calculation\n        # param y: list, the second input data for correlation calculation\n        # return: float, the correlation coefficient between the two input data sets\n        # Test cases: correlation([1, 2, 3], [4, 5, 6]) => 1.0\n        n = len(x)\n        mean_x = sum(x) / n\n        mean_y = sum(y) / n\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\n        if denominator == 0:\n            return None\n        return numerator / denominator\n\n    @staticmethod\n    def mean(data):\n        # Calculate the mean value of a given list of data.\n        # param data: list, the input data for which the mean needs to be calculated\n        # return: float, the mean value of the input data\n        # Test cases: mean([1, 2, 3, 4, 5]) => 3.0\n        if len(data) == 0:\n            return None\n        return sum(data) / len(data)\n\n    @staticmethod\n    def correlation_matrix(data):\n        # Generate a correlation matrix for a list of data sets.\n        # param data: list of lists, the input data sets for correlation matrix computation\n        # return: list of lists, the correlation matrix for the input data sets\n        # Test cases: correlation_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n        matrix = []\n        for i in range(len(data[0])):\n            row = []\n            for j in range(len(data[0])):\n                column1 = [row[i] for row in data]\n                column2 = [row[j] for row in data]\n                correlation = Statistics3.correlation(column1, column2)\n                row.append(correlation)\n            matrix.append(row)\n        return matrix\n\n    @staticmethod\n    def standard_deviation(data):\n        # Calculate the standard deviation of a given list of data.\n        # param data: list, the input data for which the standard deviation needs to be calculated\n        # return: float, the standard deviation of the input data\n        # Test cases: standard_deviation([1, 2, 3, 4, 5]) => 1.5811388300841898\n        n = len(data)\n        if n < 2:\n            return None\n        mean_value = Statistics3.mean(data)\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\n        return math.sqrt(variance)\n\n    @staticmethod\n    def z_score(data):\n        # Calculate the z-scores of a given list of data.\n        # param data: list, the input data for which the z-scores need to be calculated\n        # return: list, the z-scores of the input data\n        # Test cases: z_score([1, 2, 3, 4, 5]) => [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]\n        mean = Statistics3.mean(data)\n        std_deviation = Statistics3.standard_deviation(data)\n        if std_deviation is None or std_deviation == 0:\n            return None\n        return [(x - mean) / std_deviation for x in data]\n```"}}], "usage": {"completion_tokens": 1192, "prompt_tokens": 1291, "total_tokens": 2483}, "feeType": "1", "consume": 0.017673770716}, "test_case_name": "Statistics3.txt"}