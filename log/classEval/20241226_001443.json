{"response body": "ChatCompletion(id='chatcmpl-AiOJofNK7Q2WKtf2TcgRQ7MVfsbaF', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class implements an SQL query builder that provides methods to dynamically construct SQL queries for CRUD operations.\\n\\nThe class provides static methods for selecting, inserting, deleting, and updating records in a database table.\\n\"\"\"\\n\\nclass SQLQueryBuilder:\\n\\n    @staticmethod\\n    def select(table, columns=\\'*\\', where=None):\\n        \"\"\"\\n        Construct a SELECT query.\\n\\n        Parameters:\\n            table (str): The name of the table to select from\\n            columns (str or list): The columns to select (default is \\'*\\')\\n            where (dict): A dictionary of column-value pairs for the WHERE clause\\n\\n        Returns:\\n            str: The generated SELECT query string\\n\\n        Test cases:\\n            # Test case 1: Select all columns without WHERE clause\\n            assert select(\\'users\\') == \"SELECT * FROM users\"\\n            \\n            # Test case 2: Select specific columns with WHERE clause\\n            assert select(\\'users\\', [\\'id\\', \\'name\\'], {\\'status\\': \\'active\\'}) == \"SELECT id, name FROM users WHERE status=\\'active\\'\"\\n            \\n            # Test case 3: Select with dynamic WHERE clause\\n            assert select(\\'products\\', where={\\'price\\': 100, \\'category\\': \\'electronics\\'}) == \"SELECT * FROM products WHERE price=\\'100\\' AND category=\\'electronics\\'\"\\n\\n    @staticmethod\\n    def insert(table, data):\\n        \"\"\"\\n        Construct an INSERT query.\\n\\n        Parameters:\\n            table (str): The name of the table to insert into\\n            data (dict): A dictionary of column-value pairs to insert\\n\\n        Returns:\\n            str: The generated INSERT query string\\n\\n        Test cases:\\n            # Test case 1: Insert single record\\n            assert insert(\\'products\\', {\\'name\\': \\'Laptop\\', \\'price\\': 1200}) == \"INSERT INTO products (name, price) VALUES (\\'Laptop\\', \\'1200\\')\"\\n            \\n            # Test case 2: Insert with multiple values\\n            assert insert(\\'orders\\', {\\'order_date\\': \\'2022-01-01\\', \\'total_amount\\': 500}) == \"INSERT INTO orders (order_date, total_amount) VALUES (\\'2022-01-01\\', \\'500\\')\"\\n            \\n            # Test case 3: Insert with empty dictionary\\n            assert insert(\\'customers\\', {}) == \"INSERT INTO customers () VALUES ()\"\\n\\n    @staticmethod\\n    def delete(table, where=None):\\n        \"\"\"\\n        Construct a DELETE query.\\n\\n        Parameters:\\n            table (str): The name of the table to delete from\\n            where (dict): A dictionary of column-value pairs for the WHERE clause\\n\\n        Returns:\\n            str: The generated DELETE query string\\n\\n        Test cases:\\n            # Test case 1: Delete all records from table\\n            assert delete(\\'products\\') == \"DELETE FROM products\"\\n            \\n            # Test case 2: Delete with WHERE clause\\n            assert delete(\\'users\\', {\\'status\\': \\'inactive\\'}) == \"DELETE FROM users WHERE status=\\'inactive\\'\"\\n            \\n            # Test case 3: Delete without WHERE clause\\n            assert delete(\\'orders\\') == \"DELETE FROM orders\"\\n\\n    @staticmethod\\n    def update(table, data, where=None):\\n        \"\"\"\\n        Construct an UPDATE query.\\n\\n        Parameters:\\n            table (str): The name of the table to update\\n            data (dict): A dictionary of column-value pairs to update\\n            where (dict): A dictionary of column-value pairs for the WHERE clause\\n\\n        Returns:\\n            str: The generated UPDATE query string\\n\\n        Test cases:\\n            # Test case 1: Update records with WHERE clause\\n            assert update(\\'products\\', {\\'price\\': 1300}, {\\'category\\': \\'electronics\\'}) == \"UPDATE products SET price=\\'1300\\' WHERE category=\\'electronics\\'\"\\n            \\n            # Test case 2: Update all records\\n            assert update(\\'orders\\', {\\'status\\': \\'shipped\\'}) == \"UPDATE orders SET status=\\'shipped\\'\"\\n            \\n            # Test case 3: Update without WHERE clause\\n            assert update(\\'users\\', {\\'status\\': \\'active\\'}) == \"UPDATE users SET status=\\'active\\'\"\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735143276, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=819, prompt_tokens=1358, total_tokens=2177, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "SQLQueryBuilder.txt"}