{"response body": "{\n  \"id\": \"95210ce6-36a5-4fe6-b263-081da9cb551b\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport numpy as np\\nfrom gensim import matutils\\nfrom numpy import dot, array\\n\\n\\nclass VectorUtil:\\n    # This class provides utility functions for computing similarity measures between vectors.\\n\\n    @staticmethod\\n    def similarity(vector_1, vector_2):\\n        # Compute the cosine similarity between two vectors.\\n        # param vector_1: numpy.ndarray, the first vector.\\n        # param vector_2: numpy.ndarray, the second vector.\\n        # return: float, the cosine similarity between the two vectors.\\n        # >>> VectorUtil.similarity(np.array([1, 0]), np.array([0, 1]))\\n        # 0.0\\n        # >>> VectorUtil.similarity(np.array([1, 1]), np.array([1, 1]))\\n        # 1.0\\n        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))\\n\\n    @staticmethod\\n    def cosine_similarities(vector_1, vectors_all):\\n        # Compute the cosine similarity between a single vector and a list of vectors.\\n        # param vector_1: numpy.ndarray, the single vector.\\n        # param vectors_all: numpy.ndarray, the list of vectors.\\n        # return: numpy.ndarray, the cosine similarities between the single vector and each vector in the list.\\n        # >>> VectorUtil.cosine_similarities(np.array([1, 0]), np.array([[0, 1], [1, 1]]))\\n        # array([0. , 0.70710678])\\n        norm = np.linalg.norm(vector_1)\\n        all_norms = np.linalg.norm(vectors_all, axis=1)\\n        dot_products = dot(vectors_all, vector_1)\\n        similarities = dot_products / (norm * all_norms)\\n        return similarities\\n\\n    @staticmethod\\n    def n_similarity(vector_list_1, vector_list_2):\\n        # Compute the cosine similarity between the mean vectors of two lists of vectors.\\n        # param vector_list_1: list of numpy.ndarray, the first list of vectors.\\n        # param vector_list_2: list of numpy.ndarray, the second list of vectors.\\n        # return: float, the cosine similarity between the mean vectors of the two lists.\\n        # >>> VectorUtil.n_similarity([np.array([1, 0]), np.array([0, 1])], [np.array([1, 1]), np.array([1, 1])])\\n        # 0.0\\n        # >>> VectorUtil.n_similarity([np.array([1, 1]), np.array([1, 1])], [np.array([1, 1]), np.array([1, 1])])\\n        # 1.0\\n        if not (len(vector_list_1) and len(vector_list_2)):\\n            raise ZeroDivisionError('At least one of the passed list is empty.')\\n\\n        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),\\n                   matutils.unitvec(array(vector_list_2).mean(axis=0)))\\n\\n    @staticmethod\\n    def compute_idf_weight_dict(total_num, number_dict):\\n        # Compute the Inverse Document Frequency (IDF) weights for a given dictionary of counts.\\n        # param total_num: int, the total number of documents.\\n        # param number_dict: dict, a dictionary where keys are terms and values are their counts in the corpus.\\n        # return: dict, a dictionary where keys are terms and values are their computed IDF weights.\\n        # >>> VectorUtil.compute_idf_weight_dict(10, {'term1': 2, 'term2': 5})\\n        # {'term1': 1.3862943611198906, 'term2': 0.6931471805599453}\\n        index_2_key_map = {}\\n\\n        index = 0\\n\\n        count_list = []\\n        for key, count in number_dict.items():\\n            index_2_key_map[index] = key\\n            count_list.append(count)\\n            index = index + 1\\n\\n        a = np.array(count_list)\\n        ## smooth, in case the divide by zero error\\n        a = np.log((total_num + 1) / (a + 1))\\n        result = {}\\n\\n        for index, w in enumerate(a):\\n            key = index_2_key_map[index]\\n            result[key] = w\\n\\n        return result\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080088,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1113,\n    \"prompt_tokens\": 1206,\n    \"total_tokens\": 2319,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 630\n  }\n}", "test_case_name": "VectorCalculator.txt"}