{"response body": "{\n  \"id\": \"249190af-c5af-4593-9973-7d64bf51ff3c\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class provides utility methods for various encryption techniques.\\nclass EncryptionUtils:\\n    def __init__(self, key):\\n        # Initialize the EncryptionUtils object with a key.\\n        # param key: str, the encryption key used for various cipher methods.\\n        self.key = key\\n\\n    def caesar_cipher(self, plaintext, shift):\\n        # Encrypt the given plaintext using the Caesar cipher with a specified shift.\\n        # param plaintext: str, the text to be encrypted.\\n        # param shift: int, the number of positions to shift each letter.\\n        # return: str, the encrypted text.\\n        # >>> utils = EncryptionUtils(\\\"key\\\")\\n        # >>> utils.caesar_cipher(\\\"Hello\\\", 3)\\n        # 'Khoor'\\n        # >>> utils.caesar_cipher(\\\"Hello\\\", -3)\\n        # 'Ebiil'\\n        ciphertext = \\\"\\\"\\n        for char in plaintext:\\n            if char.isalpha():\\n                if char.isupper():\\n                    ascii_offset = 65\\n                else:\\n                    ascii_offset = 97\\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\\n                ciphertext += shifted_char\\n            else:\\n                ciphertext += char\\n        return ciphertext\\n    \\n    def vigenere_cipher(self, plain_text):\\n        # Encrypt the given plaintext using the Vigen\u00e8re cipher with the key provided during initialization.\\n        # param plain_text: str, the text to be encrypted.\\n        # return: str, the encrypted text.\\n        # >>> utils = EncryptionUtils(\\\"lemon\\\")\\n        # >>> utils.vigenere_cipher(\\\"ATTACKATDAWN\\\")\\n        # 'LXFOPVEFRNHR'\\n        # >>> utils.vigenere_cipher(\\\"attackatdawn\\\")\\n        # 'lxfopvefrnhr'\\n        encrypted_text = \\\"\\\"\\n        key_index = 0\\n        for char in plain_text:\\n            if char.isalpha():\\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\\n                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))\\n                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char\\n                key_index += 1\\n            else:\\n                encrypted_text += char\\n        return encrypted_text\\n\\n    def rail_fence_cipher(self, plain_text, rails):\\n        # Encrypt the given plaintext using the Rail Fence cipher with a specified number of rails.\\n        # param plain_text: str, the text to be encrypted.\\n        # param rails: int, the number of rails to use in the cipher.\\n        # return: str, the encrypted text.\\n        # >>> utils = EncryptionUtils(\\\"key\\\")\\n        # >>> utils.rail_fence_cipher(\\\"WEAREDISCOVEREDFLEEATONCE\\\", 3)\\n        # 'WECRLTEERDSOEEFEAOCAIVDEN'\\n        # >>> utils.rail_fence_cipher(\\\"Hello, World!\\\", 2)\\n        # 'Hlo ol!el,Wrd'\\n        fence = [['\\\\n' for _ in range(len(plain_text))] for _ in range(rails)]\\n        direction = -1\\n        row, col = 0, 0\\n\\n        for char in plain_text:\\n            if row == 0 or row == rails-1:\\n                direction = -direction\\n\\n            fence[row][col] = char\\n            col += 1\\n            row += direction\\n\\n        encrypted_text = ''\\n        for i in range(rails):\\n            for j in range(len(plain_text)):\\n                if fence[i][j] != '\\\\n':\\n                    encrypted_text += fence[i][j]\\n\\n        return encrypted_text\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727081371,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 911,\n    \"prompt_tokens\": 1193,\n    \"total_tokens\": 2104,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 617\n  }\n}", "test_case_name": "EncryptionUtils.txt"}