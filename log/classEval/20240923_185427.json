{"response body": {"id": "c2916b79-14f0-4184-ad1f-0c2733a739ed", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 18:54:27", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class represents a simple job marketplace where jobs can be posted and resumes can be submitted. \nclass JobMarketplace:\n    def __init__(self):\n        # List to hold the job listings\n        self.job_listings = []\n        # List to hold the resumes submitted\n        self.resumes = []\n\n    # This function allows a job to be posted on the marketplace.\n    # :param job_title: str, the title of the job\n    # :param company: str, the company that is posting the job\n    # :param requirements: list of str, the requirements for the job\n    # No return value\n    def post_job(self, job_title, company, requirements):\n        # Test cases:\n        # >>> marketplace = JobMarketplace()\n        # >>> marketplace.post_job(\"Software Engineer\", \"Google\", [\"Python\", \"Java\"])\n        job = {\"job_title\": job_title, \"company\": company, \"requirements\": requirements}\n        self.job_listings.append(job)\n\n    # This function removes a job from the marketplace.\n    # :param job: dict, the job to be removed\n    # No return value\n    def remove_job(self, job):\n        # Test cases:\n        # >>> marketplace = JobMarketplace()\n        # >>> job = {\"job_title\": \"Software Engineer\", \"company\": \"Google\", \"requirements\": [\"Python\", \"Java\"]}\n        # >>> marketplace.post_job(job)\n        # >>> marketplace.remove_job(job)\n        self.job_listings.remove(job)\n\n    # This function allows a resume to be submitted to the marketplace.\n    # :param name: str, the name of the job applicant\n    # :param skills: list of str, the skills of the job applicant\n    # :param experience: int, the number of years of experience of the job applicant\n    # No return value\n    def submit_resume(self, name, skills, experience):\n        # Test case:\n        # >>> marketplace = JobMarketplace()\n        # >>> marketplace.submit_resume(\"John Doe\", [\"Python\", \"Java\"], 5)\n        resume = {\"name\": name, \"skills\": skills, \"experience\": experience}\n        self.resumes.append(resume)\n\n    # This function removes a resume from the marketplace.\n    # :param resume: dict, the resume to be removed\n    # No return value\n    def withdraw_resume(self, resume):\n        # Test cases:\n        # >>> marketplace = JobMarketplace()\n        # >>> resume = {\"name\": \"John Doe\", \"skills\": [\"Python\", \"Java\"], \"experience\": 5}\n        # >>> marketplace.submit_resume(resume)\n        # >>> marketplace.withdraw_resume(resume)\n        self.resumes.remove(resume)\n\n    # This function searches for jobs on the marketplace based on a given criteria.\n    # :param criteria: str, the criteria to search for (can be part of job title or requirement)\n    # :return: list of dict, the jobs that match the criteria\n    def search_jobs(self, criteria):\n        # Test cases:\n        # >>> marketplace = JobMarketplace()\n        # >>> marketplace.post_job(\"Software Engineer\", \"Google\", [\"Python\", \"Java\"])\n        # >>> marketplace.search_jobs(\"Python\")\n        matching_jobs = []\n        for job_listing in self.job_listings:\n            if criteria.lower() in job_listing[\"job_title\"].lower() or criteria.lower() in [r.lower() for r in job_listing[\"requirements\"]]:\n                matching_jobs.append(job_listing)\n        return matching_jobs\n\n    # This function returns the resumes that match the requirements of a given job.\n    # :param job: dict, the job to find applicants for\n    # :return: list of dict, the applicants that match the job requirements\n    def get_job_applicants(self, job):\n        # Test cases:\n        # >>> marketplace = JobMarketplace()\n        # >>> marketplace.post_job(\"Software Engineer\", \"Google\", [\"Python\", \"Java\"])\n        # >>> marketplace.submit_resume(\"John Doe\", [\"Python\", \"Java\"], 5)\n        # >>> job = marketplace.search_jobs(\"Software Engineer\")[0]\n        # >>> marketplace.get_job_applicants(job)\n        applicants = []\n        for resume in self.resumes:\n            if self.matches_requirements(resume, job[\"requirements\"]):\n                applicants.append(resume)\n        return applicants\n\n    # This function checks if a resume matches a list of requirements.\n    # :param resume: dict, the resume to check\n    # :param requirements: list of str, the requirements to check against\n    # :return: bool, True if the resume matches all requirements, False otherwise\n    @staticmethod\n    def matches_requirements(resume, requirements):\n        # Test case:\n        # >>> resume = {\"name\": \"John Doe\", \"skills\": [\"Python\", \"Java\"], \"experience\": 5}\n        # >>> requirements = [\"Python\", \"Java\"]\n        # >>> JobMarketplace.matches_requirements(resume, requirements)\n        for skill in resume[\"skills\"]:\n            if skill not in requirements:\n                return False\n        return True\n```"}}], "usage": {"completion_tokens": 1048, "prompt_tokens": 1068, "total_tokens": 2116}, "feeType": "1", "consume": 1.379504}, "test_case_name": "JobMarketplace.txt"}