{"response body": "{\n  \"id\": \"4af564cf-6773-4dc8-8fce-2f1d4039d105\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents a hotel management system that handles room booking, check-in, check-out, and availability checks.\\n\\\"\\\"\\\"\\n\\nclass Hotel:\\n    def __init__(self, name, rooms):\\n        \\\"\\\"\\\"\\n        Initializes a Hotel instance with a name and available rooms.\\n\\n        Parameters:\\n            name (str): The name of the hotel.\\n            rooms (dict): A dictionary where keys are room types (str) and values are the number of available rooms (int).\\n\\n        Test cases:\\n            # Test case 1: Initialize with valid name and rooms\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.name == \\\"Grand Hotel\\\"\\n            assert hotel.available_rooms == {'single': 5, 'double': 3}\\n\\n            # Test case 2: Initialize with empty rooms\\n            hotel = Hotel(\\\"Empty Hotel\\\", {})\\n            assert hotel.available_rooms == {}\\n\\n            # Test case 3: Initialize with invalid room types\\n            hotel = Hotel(\\\"Invalid Hotel\\\", {'suite': 0})\\n            assert hotel.available_rooms == {'suite': 0}\\n        \\\"\\\"\\\"\\n        self.name = name\\n        self.available_rooms = rooms\\n        self.booked_rooms = {}\\n\\n    def book_room(self, room_type, room_number, name):\\n        \\\"\\\"\\\"\\n        Books a specified number of rooms of a given type for a guest.\\n\\n        Parameters:\\n            room_type (str): The type of room to book.\\n            room_number (int): The number of rooms to book.\\n            name (str): The name of the guest booking the rooms.\\n\\n        Returns:\\n            str or int or bool: \\\"Success!\\\" if booking is successful, the remaining available rooms if partial booking is possible, or False if booking is not possible.\\n\\n        Test cases:\\n            # Test case 1: Successful booking\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.book_room('single', 2, 'Alice') == \\\"Success!\\\"\\n            assert hotel.available_rooms == {'single': 3, 'double': 3}\\n\\n            # Test case 2: Partial booking\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 1, 'double': 3})\\n            assert hotel.book_room('single', 2, 'Bob') == 1\\n            assert hotel.available_rooms == {'single': 1, 'double': 3}\\n\\n            # Test case 3: Unavailable room type\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.book_room('suite', 1, 'Charlie') == False\\n        \\\"\\\"\\\"\\n        if room_type not in self.available_rooms.keys():\\n            return False\\n\\n        if room_number <= self.available_rooms[room_type]:\\n            if room_type not in self.booked_rooms.keys():\\n                self.booked_rooms[room_type] = {}\\n            self.booked_rooms[room_type][name] = room_number\\n            self.available_rooms[room_type] -= room_number\\n            return \\\"Success!\\\"\\n        elif self.available_rooms[room_type] != 0:\\n            return self.available_rooms[room_type]\\n        else:\\n            return False\\n\\n    def check_in(self, room_type, room_number, name):\\n        \\\"\\\"\\\"\\n        Checks in a specified number of rooms of a given type for a guest.\\n\\n        Parameters:\\n            room_type (str): The type of room to check in.\\n            room_number (int): The number of rooms to check in.\\n            name (str): The name of the guest checking in.\\n\\n        Returns:\\n            bool: True if check-in is successful, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Successful check-in\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            hotel.book_room('single', 2, 'Alice')\\n            assert hotel.check_in('single', 2, 'Alice') == True\\n            assert hotel.booked_rooms == {'single': {}}\\n\\n            # Test case 2: Partial check-in\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            hotel.book_room('single', 3, 'Bob')\\n            assert hotel.check_in('single', 2, 'Bob') == True\\n            assert hotel.booked_rooms == {'single': {'Bob': 1}}\\n\\n            # Test case 3: Invalid check-in\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.check_in('single', 2, 'Charlie') == False\\n        \\\"\\\"\\\"\\n        if room_type not in self.booked_rooms.keys():\\n            return False\\n        if name in self.booked_rooms[room_type]:\\n            if room_number > self.booked_rooms[room_type][name]:\\n                return False\\n            elif room_number == self.booked_rooms[room_type][name]:\\n                self.booked_rooms[room_type].pop(name)\\n            else:\\n                self.booked_rooms[room_type][name] -= room_number\\n            return True\\n        return False\\n\\n    def check_out(self, room_type, room_number):\\n        \\\"\\\"\\\"\\n        Checks out a specified number of rooms of a given type.\\n\\n        Parameters:\\n            room_type (str): The type of room to check out.\\n            room_number (int): The number of rooms to check out.\\n\\n        Test cases:\\n            # Test case 1: Successful check-out\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            hotel.check_out('single', 2)\\n            assert hotel.available_rooms == {'single': 7, 'double': 3}\\n\\n            # Test case 2: Check-out with new room type\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            hotel.check_out('suite', 1)\\n            assert hotel.available_rooms == {'single': 5, 'double': 3, 'suite': 1}\\n\\n            # Test case 3: Check-out with zero rooms\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            hotel.check_out('single', 0)\\n            assert hotel.available_rooms == {'single': 5, 'double': 3}\\n        \\\"\\\"\\\"\\n        if room_type in self.available_rooms:\\n            self.available_rooms[room_type] += room_number\\n        else:\\n            self.available_rooms[room_type] = room_number\\n\\n    def get_available_rooms(self, room_type):\\n        \\\"\\\"\\\"\\n        Retrieves the number of available rooms of a specified type.\\n\\n        Parameters:\\n            room_type (str): The type of room to check availability for.\\n\\n        Returns:\\n            int: The number of available rooms of the specified type.\\n\\n        Test cases:\\n            # Test case 1: Available rooms\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.get_available_rooms('single') == 5\\n\\n            # Test case 2: Unavailable room type\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 5, 'double': 3})\\n            assert hotel.get_available_rooms('suite') == None\\n\\n            # Test case 3: Zero available rooms\\n            hotel = Hotel(\\\"Grand Hotel\\\", {'single': 0, 'double': 3})\\n            assert hotel.get_available_rooms('single') == 0\\n        \\\"\\\"\\\"\\n        return self.available_rooms.get(room_type, None)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194207,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1614,\n    \"prompt_tokens\": 1634,\n    \"total_tokens\": 3248,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 674\n  }\n}", "test_case_name": "Hotel.txt"}