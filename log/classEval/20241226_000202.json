{"response body": "ChatCompletion(id='chatcmpl-AiO7Voqf7O2O8AdJeoVSHSX7JGYLQ', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a Class Registration System that manages student registration and class enrollment.\\n\\nIt allows users to register students, classes, retrieve students by major, list all majors, and find the most popular class within a major.\\n\"\"\"\\n\\nclass ClassRegistrationSystem:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initializes the ClassRegistrationSystem with empty student list and class registration mapping.\\n        \"\"\"\\n        self.students = []\\n        self.students_registration_classes = {}\\n\\n    def register_student(self, student):\\n        \"\"\"\\n        Register a new student if not already registered.\\n\\n        Parameters:\\n            student (dict): Dictionary containing student details\\n        \\n        Returns:\\n            int: 1 if successful registration, 0 if student already exists\\n        \\n        Test cases:\\n            # Test case 1: Register a new student\\n            assert register_student({\"name\": \"Alice\", \"major\": \"Computer Science\"}) == 1\\n            \\n            # Test case 2: Attempt to register an existing student\\n            assert register_student({\"name\": \"Bob\", \"major\": \"Math\"}) == 0\\n            \\n            # Test case 3: Register a student with unique details\\n            assert register_student({\"name\": \"Charlie\", \"major\": \"Physics\"}) == 1\\n        \"\"\"\\n        if student in self.students:\\n            return 0\\n        else:\\n            self.students.append(student)\\n            return 1\\n\\n    def register_class(self, student_name, class_name):\\n        \"\"\"\\n        Register a class for a specific student.\\n\\n        Parameters:\\n            student_name (str): Name of the student\\n            class_name (str): Name of the class to register\\n        \\n        Returns:\\n            list: List of classes registered by the student\\n        \\n        Test cases:\\n            # Test case 1: Register a class for an existing student\\n            assert register_class(\"Alice\", \"Mathematics\") == [\"Mathematics\"]\\n            \\n            # Test case 2: Register a class for a new student\\n            assert register_class(\"Bob\", \"Biology\") == [\"Biology\"]\\n            \\n            # Test case 3: Register another class for an existing student\\n            assert register_class(\"Alice\", \"Physics\") == [\"Mathematics\", \"Physics\"]\\n        \"\"\"\\n        if student_name in self.students_registration_classes:\\n            self.students_registration_classes[student_name].append(class_name)\\n        else:\\n            self.students_registration_classes[student_name] = [class_name]\\n        return self.students_registration_classes[student_name]\\n\\n    def get_students_by_major(self, major):\\n        \"\"\"\\n        Retrieve a list of students with a specific major.\\n\\n        Parameters:\\n            major (str): Major name to filter students\\n        \\n        Returns:\\n            list: List of student names with the specified major\\n        \\n        Test cases:\\n            # Test case 1: Retrieve students with Computer Science major\\n            assert get_students_by_major(\"Computer Science\") == [\"Alice\"]\\n            \\n            # Test case 2: Retrieve students with Psychology major\\n            assert get_students_by_major(\"Psychology\") == []\\n            \\n            # Test case 3: Retrieve students with Math major\\n            assert get_students_by_major(\"Math\") == [\"Bob\"]\\n        \"\"\"\\n        student_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                student_list.append(student[\"name\"])\\n        return student_list\\n\\n    def get_all_major(self):\\n        \"\"\"\\n        Retrieve a list of all unique majors among registered students.\\n\\n        Returns:\\n            list: List of unique major names\\n        \\n        Test cases:\\n            # Test case 1: Get list of all majors\\n            assert get_all_major() == [\"Computer Science\", \"Math\", \"Physics\"]\\n            \\n            # Test case 2: Get list of majors with no students\\n            assert get_all_major() == []\\n            \\n            # Test case 3: Get list of unique majors\\n            assert get_all_major() == [\"Chemistry\", \"Biology\"]\\n        \"\"\"\\n        major_list = []\\n        for student in self.students:\\n            if student[\"major\"] not in major_list:\\n                major_list.append(student[\"major\"])\\n        return major_list\\n\\n    def get_most_popular_class_in_major(self, major):\\n        \"\"\"\\n        Retrieve the most popular class within a specific major based on student enrollments.\\n\\n        Parameters:\\n            major (str): Major name to filter classes\\n        \\n        Returns:\\n            str: Name of the most popular class within the major\\n        \\n        Test cases:\\n            # Test case 1: Get most popular class in Computer Science major\\n            assert get_most_popular_class_in_major(\"Computer Science\") == \"Algorithms\"\\n            \\n            # Test case 2: Get most popular class in Physics major\\n            assert get_most_popular_class_in_major(\"Physics\") == \"Quantum Mechanics\"\\n            \\n            # Test case 3: Get most popular class in Biology major\\n            assert get_most_popular_class_in_major(\"Biology\") == \"Microbiology\"\\n        \"\"\"\\n        class_list = []\\n        for student in self.students:\\n            if student[\"major\"] == major:\\n                class_list += self.students_registration_classes[student[\"name\"]]\\n        most_popular_class = max(set(class_list), key=class_list.count)\\n        return most_popular_class\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735142513, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1050, prompt_tokens=1364, total_tokens=2414, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Class_Registration_System.txt"}