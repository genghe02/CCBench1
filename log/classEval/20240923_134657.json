{"response body": {"id": "41c156c7-24a2-4ca8-a658-9a914d6d12b0", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:46:57", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "import numpy as np\n\n\nclass KappaCalculator:\n\n    @staticmethod\n    def kappa(testData, k):\n        # Calculate Cohen's coefficient for inter-rater agreement using given testData and k.\n        # param testData: numpy array, the data matrix with ratings\n        # param k: int, the number of raters\n        # return: float, Cohen's coefficient representing agreement between raters\n        # Test cases can include scenarios with varying k and diverse testData samples.\n        dataMat = np.mat(testData)\n        P0 = 0.0\n        for i in range(k):\n            P0 += dataMat[i, i] * 1.0\n        xsum = np.sum(dataMat, axis=1)\n        ysum = np.sum(dataMat, axis=0)\n        sum = np.sum(dataMat)\n        Pe = float(ysum * xsum) / sum / sum\n        P0 = float(P0 / sum * 1.0)\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\n        return cohens_coefficient\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        # Calculate Fleiss' Kappa for agreement among raters using testData, N, k, and n.\n        # param testData: numpy array, the data matrix with ratings\n        # param N: int, the number of subjects\n        # param k: int, the number of categories\n        # param n: int, the number of raters\n        # return: float, Fleiss' Kappa coefficient indicating agreement among raters\n        # Test cases can involve different values for N, k, and n along with various testData configurations.\n        dataMat = np.mat(testData, float)\n        oneMat = np.ones((k, 1))\n        sum = 0.0\n        P0 = 0.0\n        for i in range(N):\n            temp = 0.0\n            for j in range(k):\n                sum += dataMat[i, j]\n                temp += 1.0 * dataMat[i, j] ** 2\n            temp -= n\n            temp /= (n - 1) * n\n            P0 += temp\n        P0 = 1.0 * P0 / N\n        ysum = np.sum(dataMat, axis=0)\n        for i in range(k):\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\n        Pe = ysum * oneMat * 1.0\n        ans = (P0 - Pe) / (1 - Pe)\n        return ans[0, 0]"}}], "usage": {"completion_tokens": 568, "prompt_tokens": 1002, "total_tokens": 1570}, "feeType": "1", "consume": 0.009826427688}, "test_case_name": "KappaCalculator.txt"}