{"response body": "{\n  \"id\": \"4c860a11-3e35-4bcb-8bdb-d05e9c94c4a0\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class represents a discount strategy for calculating the total and due amounts after applying promotions.\\nclass DiscountStrategy:\\n    def __init__(self, customer, cart, promotion=None):\\n        # Initialize the discount strategy with customer details, cart items, and an optional promotion.\\n        # param customer: dict, details of the customer\\n        # param cart: list, list of items in the cart with details like quantity and price\\n        # param promotion: function, optional promotion function to apply discounts\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}], DiscountStrategy.FidelityPromo)\\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        # Calculate the total cost of items in the cart.\\n        # return: float, the total cost of items in the cart\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}])\\n        # >>> strategy.total()\\n        # 500.0\\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        # Calculate the final amount due after applying the promotion.\\n        # return: float, the final amount due after discount\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}], DiscountStrategy.FidelityPromo)\\n        # >>> strategy.due()\\n        # 475.0\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        # Apply a 5% discount if the customer's fidelity points are 1000 or more.\\n        # param order: DiscountStrategy, the order object\\n        # return: float, the discount amount\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}])\\n        # >>> DiscountStrategy.FidelityPromo(strategy)\\n        # 25.0\\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        # Apply a 10% discount for each item in the cart if its quantity is 20 or more.\\n        # param order: DiscountStrategy, the order object\\n        # return: float, the total discount amount\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 20, 'price': 10}])\\n        # >>> DiscountStrategy.BulkItemPromo(strategy)\\n        # 20.0\\n        discount = 0\\n        for item in order.cart:\\n            if item['quantity'] >= 20:\\n                discount += item['quantity'] * item['price'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        # Apply a 7% discount if the cart contains 10 or more unique products.\\n        # param order: DiscountStrategy, the order object\\n        # return: float, the discount amount\\n        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'product': 'A', 'quantity': 1}, {'product': 'B', 'quantity': 1}, {'product': 'C', 'quantity': 1}, {'product': 'D', 'quantity': 1}, {'product': 'E', 'quantity': 1}, {'product': 'F', 'quantity': 1}, {'product': 'G', 'quantity': 1}, {'product': 'H', 'quantity': 1}, {'product': 'I', 'quantity': 1}, {'product': 'J', 'quantity': 1}])\\n        # >>> DiscountStrategy.LargeOrderPromo(strategy)\\n        # 0.0\\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078126,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 996,\n    \"prompt_tokens\": 1083,\n    \"total_tokens\": 2079,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 507\n  }\n}", "test_case_name": "DiscountStrategy.txt"}