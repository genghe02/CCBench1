{"response body": "ChatCompletion(id='chatcmpl-AiLWXFNo3dhr9piVkcZgIGLSYncUG', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\n\"\"\"\\nThis class implements the Boyer-Moore Search algorithm for finding occurrences of a pattern within a given text.\\n\"\"\"\\n\\nclass BoyerMooreSearch:\\n    def __init__(self, text, pattern):\\n        \"\"\"\\n        Initializes the Boyer-Moore Search algorithm with the given text and pattern.\\n\\n        Parameters:\\n            text (str): The text in which pattern matching will be performed.\\n            pattern (str): The pattern that needs to be searched within the text.\\n        \"\"\"\\n        self.text, self.pattern = text, pattern\\n        self.textLen, self.patLen = len(text), len(pattern)\\n\\n    def match_in_pattern(self, char):\\n        \"\"\"\\n        Checks for the occurrence of a character in the pattern and returns its index.\\n\\n        Parameters:\\n            char (str): The character to check in the pattern.\\n\\n        Returns:\\n            int: The index of the character in the pattern if found, otherwise -1.\\n\\n        Test cases:\\n            # Test case 1: Character found in pattern\\n            assert self.match_in_pattern(\\'a\\') == 0\\n            # Test case 2: Character not found in pattern\\n            assert self.match_in_pattern(\\'z\\') == -1\\n            # Test case 3: Character found at last position\\n            assert self.match_in_pattern(\\'d\\') == 3  # given pattern \"abcd\"\\n        \"\"\"\\n        for i in range(self.patLen - 1, -1, -1):\\n            if char == self.pattern[i]:\\n                return i\\n        return -1\\n\\n    def mismatch_in_text(self, currentPos):\\n        \"\"\"\\n        Checks for mismatches of the pattern with the text starting at the given position.\\n\\n        Parameters:\\n            currentPos (int): The starting position in the text to check for a mismatch.\\n\\n        Returns:\\n            int: The index of the character in the text at which the mismatch occurs, or -1 if no mismatches.\\n\\n        Test cases:\\n            # Test case 1: No mismatch\\n            assert self.mismatch_in_text(0) == -1  # for text \"abc\" and pattern \"abc\"\\n            # Test case 2: Mismatch occurs\\n            assert self.mismatch_in_text(1) == 2  # for text \"abc\" and pattern \"abd\"\\n            # Test case 3: Out of bounds position\\n            assert self.mismatch_in_text(3) == -1  # valid case for end of string\\n        \"\"\"\\n        for i in range(self.patLen - 1, -1, -1):\\n            if self.pattern[i] != self.text[currentPos + i]:\\n                return currentPos + i\\n        return -1\\n\\n    def bad_character_heuristic(self):\\n        \"\"\"\\n        Applies the bad character heuristic of the Boyer-Moore Search algorithm to find all occurrences of the pattern.\\n\\n        Returns:\\n            list: A list of starting indices where the pattern is found in the text.\\n\\n        Test cases:\\n            # Test case 1: Pattern found once\\n            assert self.bad_character_heuristic() == [0]  # text \"abcd\" and pattern \"a\"\\n            # Test case 2: Pattern found multiple times\\n            assert self.bad_character_heuristic() == [0, 2]  # text \"ababab\" and pattern \"ab\"\\n            # Test case 3: Pattern not found\\n            assert self.bad_character_heuristic() == []  # text \"xyz\" and pattern \"abc\"\\n        \"\"\"\\n        positions = []\\n        for i in range(self.textLen - self.patLen + 1):\\n            mismatch_index = self.mismatch_in_text(i)\\n            if mismatch_index == -1:\\n                positions.append(i)\\n            else:\\n                match_index = self.match_in_pattern(self.text[mismatch_index])\\n                i = (mismatch_index - match_index)\\n        return positions\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735132533, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=797, prompt_tokens=1545, total_tokens=2342, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "BoyerMooreSearch.txt"}