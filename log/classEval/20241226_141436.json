{"response body": "{\n  \"id\": \"cdf45ab7-9ab9-4ae4-b361-f7078aab4bcc\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class manages a simple book management system using SQLite database.\\nIt provides functionalities to add, remove, borrow, return, and search books.\\n\\\"\\\"\\\"\\n\\nimport sqlite3\\n\\nclass BookManagementDB:\\n    def __init__(self, db_name):\\n        \\\"\\\"\\\"\\n        Initializes the database connection and creates the books table if it doesn't exist.\\n        \\n        Parameters:\\n            db_name (str): The name of the SQLite database file to connect to.\\n        \\\"\\\"\\\"\\n        self.connection = sqlite3.connect(db_name)\\n        self.cursor = self.connection.cursor()\\n        self.create_table()\\n\\n    def create_table(self):\\n        \\\"\\\"\\\"\\n        Creates the 'books' table if it doesn't already exist.\\n        The table has columns: id (primary key), title, author, and available.\\n        \\n        Test cases:\\n            # Test case 1: Table creation\\n            db = BookManagementDB(':memory:')\\n            db.cursor.execute(\\\"SELECT name FROM sqlite_master WHERE type='table' AND name='books'\\\")\\n            assert db.cursor.fetchone() is not None\\n            \\n            # Test case 2: Table already exists\\n            db = BookManagementDB(':memory:')\\n            db.create_table()  # Should not raise an error\\n            \\n            # Test case 3: Verify table structure\\n            db.cursor.execute(\\\"PRAGMA table_info(books)\\\")\\n            columns = db.cursor.fetchall()\\n            assert len(columns) == 4\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            CREATE TABLE IF NOT EXISTS books (\\n                id INTEGER PRIMARY KEY,\\n                title TEXT,\\n                author TEXT,\\n                available INTEGER\\n            )\\n        ''')\\n        self.connection.commit()\\n\\n    def add_book(self, title, author):\\n        \\\"\\\"\\\"\\n        Adds a new book to the database with the given title and author.\\n        The book is marked as available by default.\\n        \\n        Parameters:\\n            title (str): The title of the book to add.\\n            author (str): The author of the book to add.\\n        \\n        Test cases:\\n            # Test case 1: Add a new book\\n            db = BookManagementDB(':memory:')\\n            db.add_book('1984', 'George Orwell')\\n            db.cursor.execute(\\\"SELECT * FROM books WHERE title='1984'\\\")\\n            assert db.cursor.fetchone() is not None\\n            \\n            # Test case 2: Add a book with empty title\\n            db.add_book('', 'Unknown')\\n            db.cursor.execute(\\\"SELECT * FROM books WHERE title=''\\\")\\n            assert db.cursor.fetchone() is not None\\n            \\n            # Test case 3: Add a book with empty author\\n            db.add_book('Untitled', '')\\n            db.cursor.execute(\\\"SELECT * FROM books WHERE author=''\\\")\\n            assert db.cursor.fetchone() is not None\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            INSERT INTO books (title, author, available)\\n            VALUES (?, ?, 1)\\n        ''', (title, author))\\n        self.connection.commit()\\n\\n    def remove_book(self, book_id):\\n        \\\"\\\"\\\"\\n        Removes a book from the database based on its ID.\\n        \\n        Parameters:\\n            book_id (int): The ID of the book to remove.\\n        \\n        Test cases:\\n            # Test case 1: Remove an existing book\\n            db = BookManagementDB(':memory:')\\n            db.add_book('1984', 'George Orwell')\\n            db.remove_book(1)\\n            db.cursor.execute(\\\"SELECT * FROM books WHERE id=1\\\")\\n            assert db.cursor.fetchone() is None\\n            \\n            # Test case 2: Remove a non-existent book\\n            db.remove_book(999)  # Should not raise an error\\n            \\n            # Test case 3: Remove a book with invalid ID\\n            db.remove_book('invalid')  # Should not raise an error\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            DELETE FROM books WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def borrow_book(self, book_id):\\n        \\\"\\\"\\\"\\n        Marks a book as borrowed by setting its available status to 0.\\n        \\n        Parameters:\\n            book_id (int): The ID of the book to borrow.\\n        \\n        Test cases:\\n            # Test case 1: Borrow an available book\\n            db = BookManagementDB(':memory:')\\n            db.add_book('1984', 'George Orwell')\\n            db.borrow_book(1)\\n            db.cursor.execute(\\\"SELECT available FROM books WHERE id=1\\\")\\n            assert db.cursor.fetchone()[0] == 0\\n            \\n            # Test case 2: Borrow a non-existent book\\n            db.borrow_book(999)  # Should not raise an error\\n            \\n            # Test case 3: Borrow an already borrowed book\\n            db.borrow_book(1)  # Should not raise an error\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            UPDATE books SET available = 0 WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def return_book(self, book_id):\\n        \\\"\\\"\\\"\\n        Marks a book as returned by setting its available status to 1.\\n        \\n        Parameters:\\n            book_id (int): The ID of the book to return.\\n        \\n        Test cases:\\n            # Test case 1: Return a borrowed book\\n            db = BookManagementDB(':memory:')\\n            db.add_book('1984', 'George Orwell')\\n            db.borrow_book(1)\\n            db.return_book(1)\\n            db.cursor.execute(\\\"SELECT available FROM books WHERE id=1\\\")\\n            assert db.cursor.fetchone()[0] == 1\\n            \\n            # Test case 2: Return a non-existent book\\n            db.return_book(999)  # Should not raise an error\\n            \\n            # Test case 3: Return an already available book\\n            db.return_book(1)  # Should not raise an error\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            UPDATE books SET available = 1 WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def search_books(self):\\n        \\\"\\\"\\\"\\n        Retrieves all books from the database.\\n        \\n        Returns:\\n            list: A list of tuples representing all books in the database.\\n        \\n        Test cases:\\n            # Test case 1: Search in an empty database\\n            db = BookManagementDB(':memory:')\\n            assert db.search_books() == []\\n            \\n            # Test case 2: Search with one book\\n            db.add_book('1984', 'George Orwell')\\n            assert len(db.search_books()) == 1\\n            \\n            # Test case 3: Search with multiple books\\n            db.add_book('Animal Farm', 'George Orwell')\\n            assert len(db.search_books()) == 2\\n        \\\"\\\"\\\"\\n        self.cursor.execute('''\\n            SELECT * FROM books\\n        ''')\\n        books = self.cursor.fetchall()\\n        return books\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735193658,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1448,\n    \"prompt_tokens\": 1431,\n    \"total_tokens\": 2879,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 471\n  }\n}", "test_case_name": "BookManagementDB.txt"}