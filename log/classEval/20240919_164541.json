{"response body": [{"generated_text": [{"role": "user", "content": "You are an expert in Python annotation writing. Here is a simple Python code, I need you to add comments in the<>area.\nFor example:<description for whole class>:This is a class for parsing command line arguments to a dictionary.\n<description for whole function>\uff1aFilter the incoming request based on certain rules and conditions.\n<description for all parameters>:param request: dict, the incoming request details\n<description for return statement>:return: bool, True if the request is allowed, False otherwise\n<some test cases for the function> >>> filter = AccessGatewayFilter()\n                                   >>> filter.filter({'path': '/login', 'method': 'POST'})\n<description for parameters in init method>: self.arguments is a dict that stores the args in a command line\n                                        self.requried is a set that stores the required arguments\n                                        self.types is a dict that stores type of every arguments.\nIn addition, when designing test samples, please try to cover all branches and situations of the function with as few samples as possible.\n<> The internal content is the requirement for this annotation.\nIn the task, you should delete all \"<>\" and replace them like the real comments.\nNote: It's not about telling me how to design, but about you designing specific test cases based on your own understanding, like the example I provided above.\nNote: Do not add content where there is no '<>' symbol, simply replace '<>' with internal requirements where there is'<>'.\nNote that you should not do anything expect fill the requirements in '<>' with comments, you should not explain anything or do something else.\n\nHere are an example:\n\nUser:\n```python\nimport numpy as np\n\na = np.array([1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 3, 4, 3, 4, 3, 4, 5, 5, 5])\n<Requirements for the code>\nresult = np.where(a[1:] != a[:-1])[0]\n```\n\nWhat you should respond:\n```python\nimport numpy as np\n\na = np.array([1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 3, 4, 3, 4, 3, 4, 5, 5, 5])\n# Find each index where the value changes in an efficient way using numpy by comparing each element with its neighbor and utilizing np.where(condition).\nresult = np.where(a[1:] != a[:-1])[0]\n```\n\nNext, please complete the annotation writing task:\n\n<description for whole class>\nclass SQLQueryBuilder:\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        <description for whole function>\n        <description for all parameters>\n        <description for return statement>\n        <some test cases for the function>\n        if columns != '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        <description for whole function>\n        <description for all parameters>\n        <description for return statement>\n        <some test cases for the function>\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        <description for whole function>\n        <description for all parameters>\n        <description for return statement>\n        <some test cases for the function>\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        <description for whole function>\n        <description for all parameters>\n        <description for return statement>\n        <some test cases for the function>\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" + ' AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n"}, {"role": "assistant", "content": " class SQLQueryBuilder:\n\n    # A static class for building SQL queries using given inputs\n    <description for whole class>\n\n    @staticmethod\n    def select(table, columns='*', where=None):\n        # Builds and returns a SELECT query based on the given table name, columns to select, and optional filtering condition\n        <description for whole function>\n        <description for parameters>\n        :param table: str, name of the table to query\n        :param columns: str or list, columns to select. Default is '*' for all columns\n        :param where: dict or None, optional filtering condition as key-value pairs\n        <description for return statement>\n        :return: str, the generated SQL query\n\n        if columns!= '*':\n            columns = ', '.join(columns)\n        query = f\"SELECT {columns} FROM {table}\"\n        if where:\n            query += \" WHERE \" +'AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def insert(table, data):\n        # Builds and returns an INSERT query based on the given table name and data to be inserted\n        <description for whole function>\n        <description for parameters>\n        :param table: str, name of the table to insert data into\n        :param data: dict, key-value pairs of data to be inserted\n        <description for return statement>\n        :return: str, the generated SQL query\n\n        keys = ', '.join(data.keys())\n        values = ', '.join(f\"'{v}'\" for v in data.values())\n        return f\"INSERT INTO {table} ({keys}) VALUES ({values})\"\n\n    @staticmethod\n    def delete(table, where=None):\n        # Builds and returns a DELETE query based on the given table name and optional filtering condition\n        <description for whole function>\n        <description for parameters>\n        :param table: str, name of the table to delete data from\n        :param where: dict or None, optional filtering condition as key-value pairs\n        <description for return statement>\n        :return: str, the generated SQL query\n\n        query = f\"DELETE FROM {table}\"\n        if where:\n            query += \" WHERE \" +'AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query\n\n    @staticmethod\n    def update(table, data, where=None):\n        # Builds and returns an UPDATE query based on the given table name, data to be updated, and optional filtering condition\n        <description for whole function>\n        <description for parameters>\n        :param table: str, name of the table to update\n        :param data: dict, key-value pairs of data to be updated\n        :param where: dict or None, optional filtering condition as key-value pairs\n        <description for return statement>\n        :return: str, the generated SQL query\n\n        update_str = ', '.join(f\"{k}='{v}'\" for k, v in data.items())\n        query = f\"UPDATE {table} SET {update_str}\"\n        if where:\n            query += \" WHERE \" +'AND '.join(f\"{k}='{v}'\" for k, v in where.items())\n        return query"}]}], "test_case_name": "SQLQueryBuilder.txt"}