{"response body": {"id": "3dfe4dcc-0911-410e-8de5-3f7cfbad93f6", "object": "chat.completion", "model": "gpt-35-turbo", "created": "2024-09-23 13:51:25", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nimport re\nfrom collections import deque\nfrom decimal import Decimal\n\n\nclass ExpressionCalculator:\n    # Class for performing arithmetic calculations on expressions in a postfix notation\n    def __init__(self):\n        # Initialize an empty stack for the postfix expression and set operator priorities\n        self.postfix_stack = deque()\n        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]\n\n    def calculate(self, expression):\n        # Calculate the result of the expression in postfix notation\n        # param expression: str, arithmetic expression to evaluate\n        # return: float, result of the arithmetic expression\n        # Test cases: calculate(\"3+4*2\") should return 11.0, calculate(\"5*(2+3)\") should return 25.0\n        self.prepare(self.transform(expression))\n\n        result_stack = deque()\n        self.postfix_stack.reverse()\n\n        while self.postfix_stack:\n            current_op = self.postfix_stack.pop()\n            if not self.is_operator(current_op):\n                current_op = current_op.replace(\"~\", \"-\")\n                result_stack.append(current_op)\n            else:\n                second_value = result_stack.pop()\n                first_value = result_stack.pop()\n\n                first_value = first_value.replace(\"~\", \"-\")\n                second_value = second_value.replace(\"~\", \"-\")\n\n                temp_result = self._calculate(first_value, second_value, current_op)\n                result_stack.append(str(temp_result))\n\n        return float(eval(\"*\".join(result_stack)))\n\n    def prepare(self, expression):\n        # Convert infix expression to postfix notation\n        # param expression: str, infix arithmetic expression\n        # Test cases: prepare(\"3+4*2\") should update self.postfix_stack to ['3', '4', '2', '*', '+']\n        op_stack = deque([','])\n        arr = list(expression)\n        current_index = 0\n        count = 0\n\n        for i, current_op in enumerate(arr):\n            if self.is_operator(current_op):\n                if count > 0:\n                    self.postfix_stack.append(\"\".join(arr[current_index: current_index + count]))\n                peek_op = op_stack[-1]\n                if current_op == ')':\n                    while op_stack[-1] != '(':\n                        self.postfix_stack.append(str(op_stack.pop()))\n                    op_stack.pop()\n                else:\n                    while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):\n                        self.postfix_stack.append(str(op_stack.pop()))\n                        peek_op = op_stack[-1]\n                    op_stack.append(current_op)\n\n                count = 0\n                current_index = i + 1\n            else:\n                count += 1\n\n        if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):\n            self.postfix_stack.append(\"\".join(arr[current_index: current_index + count]))\n\n        while op_stack[-1] != ',':\n            self.postfix_stack.append(str(op_stack.pop()))\n\n    @staticmethod\n    def is_operator(c):\n        # Check if a character is an operator\n        # param c: str, character to check\n        # return: bool, True if the character is an operator, False otherwise\n        # Test cases: is_operator('+') should return True, is_operator('3') should return False\n        return c in {'+', '-', '*', '/', '(', ')', '%'}\n\n    def compare(self, cur, peek):\n        # Compare operator precedence for two operators\n        # param cur: str, current operator\n        # param peek: str, operator at the top of the stack\n        # return: bool, True if current operator has higher precedence, False otherwise\n        # Test cases: compare('*', '+') should return True, compare(')', '(') should return False\n        if cur == '%':\n            cur = '/'\n        if peek == '%':\n            peek = '/'\n        return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]\n\n    @staticmethod\n    def _calculate(first_value, second_value, current_op):\n        # Perform arithmetic calculation based on operator\n        # param first_value: str, first operand\n        # param second_value: str, second operand\n        # param current_op: str, operator\n        # return: Decimal, result of the arithmetic operation\n        # Test cases: _calculate('3', '4', '+') should return Decimal('7'), _calculate('5', '2', '*') should return Decimal('10')\n        if current_op == '+':\n            return Decimal(first_value) + Decimal(second_value)\n        elif current_op == '-':\n            return Decimal(first_value) - Decimal(second_value)\n        elif current_op == '*':\n            return Decimal(first_value) * Decimal(second_value)\n        elif current_op == '/':\n            return Decimal(first_value) / Decimal(second_value)\n        elif current_op == '%':\n            return Decimal(first_value) % Decimal(second_value)\n        else:\n            raise ValueError(\"Unexpected operator: {}\".format(current_op))\n\n    @staticmethod\n    def transform(expression):\n        # Transform the expression to handle unary minus operators\n        # param expression: str, input arithmetic expression\n        # return: str, transformed expression with unary minus handled\n        # Test cases: transform(\"3+-2\") should return \"3+~2\", transform(\"-(3+2)\") should return \"0-(3+2)\"\n        expression = re.sub(r\"\\s+\", \"\", expression)\n        expression = re.sub(r\"=$\", \"\", expression)\n        arr = list(expression)\n\n        for i, c in enumerate(arr):\n            if c == '-':\n                if i == 0:\n                    arr[i] = '~'\n                else:\n                    prev_c = arr[i - 1]\n                    if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:\n                        arr[i] = '~'\n\n        if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):\n            arr[0] = '-'\n            return \"0\" + \"\".join(arr)\n        else:\n            return \"\".join(arr)\n```"}}], "usage": {"completion_tokens": 1273, "prompt_tokens": 1565, "total_tokens": 2838}, "feeType": "1", "consume": 0.019551177632}, "test_case_name": "ExpressionCalculator.txt"}