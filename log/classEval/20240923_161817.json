{"response body": "{\n  \"id\": \"9db78daa-b401-4e35-9c5a-f38da697f623\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class manages student records, including adding students, adding course scores, calculating GPAs, and retrieving various statistics.\\nclass AssessmentSystem:\\n    def __init__(self):\\n        # Initialize the student records system with an empty dictionary to store student information.\\n        self.students = {}\\n\\n    def add_student(self, name, grade, major):\\n        # Add a new student to the system with their name, grade, major, and an empty dictionary for courses.\\n        # param name: str, the name of the student\\n        # param grade: str, the grade of the student (e.g., \\\"Freshman\\\", \\\"Sophomore\\\")\\n        # param major: str, the major of the student\\n        # return: None\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        self.students[name] = {'name': name, 'grade': grade, 'major': major, 'courses': {}}\\n\\n    def add_course_score(self, name, course, score):\\n        # Add a course score for a specific student.\\n        # param name: str, the name of the student\\n        # param course: str, the name of the course\\n        # param score: int, the score of the student in the course\\n        # return: None\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Math\\\", 85)\\n        if name in self.students:\\n            self.students[name]['courses'][course] = score\\n\\n    def get_gpa(self, name):\\n        # Calculate the GPA for a specific student based on their course scores.\\n        # param name: str, the name of the student\\n        # return: float, the GPA of the student, or None if the student has no courses\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Math\\\", 85)\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Science\\\", 90)\\n        # >>> system.get_gpa(\\\"Alice\\\")\\n        if name in self.students and self.students[name]['courses']:\\n            return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])\\n        else:\\n            return None\\n\\n    def get_all_students_with_fail_course(self):\\n        # Retrieve a list of students who have failed at least one course (score < 60).\\n        # return: list, a list of student names who have failed at least one course\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Math\\\", 55)\\n        # >>> system.get_all_students_with_fail_course()\\n        students = []\\n        for name, student in self.students.items():\\n            for course, score in student['courses'].items():\\n                if score < 60:\\n                    students.append(name)\\n                    break\\n        return students\\n\\n    def get_course_average(self, course):\\n        # Calculate the average score for a specific course across all students.\\n        # param course: str, the name of the course\\n        # return: float, the average score for the course, or None if no scores are available\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Math\\\", 85)\\n        # >>> system.add_student(\\\"Bob\\\", \\\"Senior\\\", \\\"Physics\\\")\\n        # >>> system.add_course_score(\\\"Bob\\\", \\\"Math\\\", 90)\\n        # >>> system.get_course_average(\\\"Math\\\")\\n        total = 0\\n        count = 0\\n        for student in self.students.values():\\n            if course in student['courses']:\\n                score = student['courses'][course]\\n                if score is not None:\\n                    total += score\\n                    count += 1\\n        return total / count if count > 0 else None\\n\\n    def get_top_student(self):\\n        # Retrieve the name of the student with the highest GPA.\\n        # return: str, the name of the student with the highest GPA, or None if no students are available\\n        # >>> system = AssessmentSystem()\\n        # >>> system.add_student(\\\"Alice\\\", \\\"Junior\\\", \\\"Computer Science\\\")\\n        # >>> system.add_course_score(\\\"Alice\\\", \\\"Math\\\", 85)\\n        # >>> system.add_student(\\\"Bob\\\", \\\"Senior\\\", \\\"Physics\\\")\\n        # >>> system.add_course_score(\\\"Bob\\\", \\\"Math\\\", 90)\\n        # >>> system.get_top_student()\\n        top_student = None\\n        top_gpa = 0\\n        for name, student in self.students.items():\\n            gpa = self.get_gpa(name)\\n            if gpa is not None and gpa > top_gpa:\\n                top_gpa = gpa\\n                top_student = name\\n        return top_student\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079440,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1221,\n    \"prompt_tokens\": 1240,\n    \"total_tokens\": 2461,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 664\n  }\n}", "test_case_name": "AssessmentSystem.txt"}