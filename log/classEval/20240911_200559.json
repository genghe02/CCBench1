{"response body": "ChatCompletion(id='chatcmpl-A6GOWi8xAykZao6Eg2Q5T5PmUXG6b', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\\nimport math\\nfrom typing import List\\n\\n# This class provides methods for calculating combinations and selecting items from a list.\\nclass CombinationCalculator:\\n    \\n    def __init__(self, datas: List[str]):\\n        # Initialize with a list of data items.\\n        self.datas = datas\\n\\n    @staticmethod\\n    def count(n: int, m: int) -> int:\\n        # Calculate the number of combinations of n items taken m at a time.\\n        # param n: int, total number of items\\n        # param m: int, number of items to choose\\n        # return: int, the number of combinations\\n        # >>> CombinationCalculator.count(5, 3)  # Should return 10\\n        # >>> CombinationCalculator.count(5, 0)  # Should return 1\\n        # >>> CombinationCalculator.count(5, 5)  # Should return 1\\n        if m == 0 or n == m:\\n            return 1\\n        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))\\n\\n    @staticmethod\\n    def count_all(n: int) -> int:\\n        # Calculate the total number of subsets of n items.\\n        # param n: int, the number of items \\n        # return: int, the total number of subsets\\n        # >>> CombinationCalculator.count_all(3)  # Should return 7 (2^3 - 1)\\n        # >>> CombinationCalculator.count_all(0)  # Should return 0\\n        # >>> CombinationCalculator.count_all(63)  # Should return float(\"inf\")\\n        if n < 0 or n > 63:\\n            return False\\n        return (1 << n) - 1 if n != 63 else float(\"inf\")\\n\\n    def select(self, m: int) -> List[List[str]]:\\n        # Generate all combinations of m items from the list of data.\\n        # param m: int, the number of items to select\\n        # return: List[List[str]], a list of combinations\\n        # >>> calc = CombinationCalculator([\\'a\\', \\'b\\', \\'c\\', \\'d\\'])\\n        # >>> calc.select(2)  # Should return all pairs: [[\\'a\\', \\'b\\'], [\\'a\\', \\'c\\'], ...]\\n        result = []\\n        self._select(0, [None] * m, 0, result)\\n        return result\\n\\n    def select_all(self) -> List[List[str]]:\\n        # Generate all combinations of all possible sizes from the list of data.\\n        # return: List[List[str]], a list of all combinations\\n        # >>> calc = CombinationCalculator([\\'a\\', \\'b\\'])\\n        # >>> calc.select_all()  # Should return all combinations including [], [\\'a\\'], [\\'b\\'], [\\'a\\', \\'b\\']\\n        result = []\\n        for i in range(1, len(self.datas) + 1):\\n            result.extend(self.select(i))\\n        return result\\n\\n    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):\\n        # Helper function to recursively generate combinations.\\n        # param dataIndex: int, current index in the data list\\n        # param resultList: List[str], currently constructed combination\\n        # param resultIndex: int, current length of the constructed combination\\n        # param result: List[List[str]], list of all found combinations\\n        # return: None\\n        # >>> calc = CombinationCalculator([\\'a\\', \\'b\\', \\'c\\'])\\n        # >>> res = []\\n        # >>> calc._select(0, [None]*2, 0, res)  # Should perform the recursive selection process\\n        resultLen = len(resultList)\\n        resultCount = resultIndex + 1\\n        if resultCount > resultLen:\\n            result.append(resultList.copy())\\n            return\\n\\n        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):\\n            resultList[resultIndex] = self.datas[i]\\n            self._select(i + 1, resultList, resultIndex + 1, result)\\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056352, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=849, prompt_tokens=1174, total_tokens=2023))", "test_case_name": "CombinationCalculator.txt"}