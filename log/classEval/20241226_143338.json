{"response body": "{\n  \"id\": \"15491097-510d-4f9a-96b8-beac43a5f2c6\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides utility methods for working with regular expressions, including matching, finding, splitting, and substituting text based on patterns. It also includes methods for generating common regex patterns and validating or extracting specific data types like email addresses and phone numbers.\\n\\\"\\\"\\\"\\n\\nimport re\\n\\n\\nclass RegexUtils:\\n\\n    def match(self, pattern, text):\\n        \\\"\\\"\\\"\\n        Checks if the given pattern matches the beginning of the text.\\n\\n        Parameters:\\n            pattern (str): The regular expression pattern to match.\\n            text (str): The text to check against the pattern.\\n\\n        Returns:\\n            bool: True if the pattern matches the beginning of the text, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Matching a simple pattern\\n            assert match(r'hello', 'hello world') == True\\n\\n            # Test case 2: Pattern does not match\\n            assert match(r'world', 'hello world') == False\\n\\n            # Test case 3: Empty pattern\\n            assert match(r'', 'hello world') == True\\n        \\\"\\\"\\\"\\n        ans = re.match(pattern, text)\\n        if ans:\\n            return True\\n        else:\\n            return False\\n\\n    def findall(self, pattern, text):\\n        \\\"\\\"\\\"\\n        Finds all non-overlapping matches of the pattern in the text.\\n\\n        Parameters:\\n            pattern (str): The regular expression pattern to search for.\\n            text (str): The text to search within.\\n\\n        Returns:\\n            list: A list of all matches found in the text.\\n\\n        Test cases:\\n            # Test case 1: Finding all digits\\n            assert findall(r'\\\\d+', 'There are 3 apples and 5 oranges') == ['3', '5']\\n\\n            # Test case 2: No matches found\\n            assert findall(r'\\\\d+', 'No numbers here') == []\\n\\n            # Test case 3: Finding all words\\n            assert findall(r'\\\\w+', 'Hello world!') == ['Hello', 'world']\\n        \\\"\\\"\\\"\\n        return re.findall(pattern, text)\\n\\n    def split(self, pattern, text):\\n        \\\"\\\"\\\"\\n        Splits the text by the occurrences of the pattern.\\n\\n        Parameters:\\n            pattern (str): The regular expression pattern to split by.\\n            text (str): The text to split.\\n\\n        Returns:\\n            list: A list of substrings resulting from the split.\\n\\n        Test cases:\\n            # Test case 1: Splitting by spaces\\n            assert split(r'\\\\s+', 'Hello world') == ['Hello', 'world']\\n\\n            # Test case 2: Splitting by commas\\n            assert split(r',', 'apple,banana,cherry') == ['apple', 'banana', 'cherry']\\n\\n            # Test case 3: Splitting by a non-existent pattern\\n            assert split(r'\\\\d+', 'Hello world') == ['Hello world']\\n        \\\"\\\"\\\"\\n        return re.split(pattern, text)\\n\\n    def sub(self, pattern, replacement, text):\\n        \\\"\\\"\\\"\\n        Replaces all occurrences of the pattern in the text with the replacement string.\\n\\n        Parameters:\\n            pattern (str): The regular expression pattern to replace.\\n            replacement (str): The string to replace the pattern with.\\n            text (str): The text to perform the replacement on.\\n\\n        Returns:\\n            str: The text with all occurrences of the pattern replaced.\\n\\n        Test cases:\\n            # Test case 1: Replacing digits with 'X'\\n            assert sub(r'\\\\d+', 'X', 'There are 3 apples and 5 oranges') == 'There are X apples and X oranges'\\n\\n            # Test case 2: Replacing a word\\n            assert sub(r'world', 'Python', 'Hello world') == 'Hello Python'\\n\\n            # Test case 3: Replacing a non-existent pattern\\n            assert sub(r'\\\\d+', 'X', 'No numbers here') == 'No numbers here'\\n        \\\"\\\"\\\"\\n        return re.sub(pattern, replacement, text)\\n\\n    def generate_email_pattern(self):\\n        \\\"\\\"\\\"\\n        Generates a regular expression pattern for matching email addresses.\\n\\n        Returns:\\n            str: A regex pattern for matching email addresses.\\n\\n        Test cases:\\n            # Test case 1: Valid email\\n            pattern = generate_email_pattern()\\n            assert match(pattern, 'test@example.com') == True\\n\\n            # Test case 2: Invalid email\\n            assert match(pattern, 'test@example') == False\\n\\n            # Test case 3: Empty string\\n            assert match(pattern, '') == False\\n        \\\"\\\"\\\"\\n        pattern = r'\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b'\\n        return pattern\\n\\n    def generate_phone_number_pattern(self):\\n        \\\"\\\"\\\"\\n        Generates a regular expression pattern for matching US phone numbers in the format XXX-XXX-XXXX.\\n\\n        Returns:\\n            str: A regex pattern for matching phone numbers.\\n\\n        Test cases:\\n            # Test case 1: Valid phone number\\n            pattern = generate_phone_number_pattern()\\n            assert match(pattern, '123-456-7890') == True\\n\\n            # Test case 2: Invalid phone number\\n            assert match(pattern, '123-456-789') == False\\n\\n            # Test case 3: Empty string\\n            assert match(pattern, '') == False\\n        \\\"\\\"\\\"\\n        pattern = r'\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b'\\n        return pattern\\n\\n    def generate_split_sentences_pattern(self):\\n        \\\"\\\"\\\"\\n        Generates a regular expression pattern for splitting text into sentences.\\n\\n        Returns:\\n            str: A regex pattern for splitting sentences.\\n\\n        Test cases:\\n            # Test case 1: Splitting sentences\\n            pattern = generate_split_sentences_pattern()\\n            assert split(pattern, 'Hello world! How are you?') == ['Hello world', 'How are you']\\n\\n            # Test case 2: No sentence boundaries\\n            assert split(pattern, 'Hello world') == ['Hello world']\\n\\n            # Test case 3: Empty string\\n            assert split(pattern, '') == ['']\\n        \\\"\\\"\\\"\\n        pattern = r'[.!?][\\\\s]{1,2}(?=[A-Z])'\\n        return pattern\\n\\n    def split_sentences(self, text):\\n        \\\"\\\"\\\"\\n        Splits the given text into sentences using a predefined pattern.\\n\\n        Parameters:\\n            text (str): The text to split into sentences.\\n\\n        Returns:\\n            list: A list of sentences.\\n\\n        Test cases:\\n            # Test case 1: Multiple sentences\\n            assert split_sentences('Hello world! How are you?') == ['Hello world', 'How are you']\\n\\n            # Test case 2: Single sentence\\n            assert split_sentences('Hello world') == ['Hello world']\\n\\n            # Test case 3: Empty string\\n            assert split_sentences('') == ['']\\n        \\\"\\\"\\\"\\n        pattern = self.generate_split_sentences_pattern()\\n        return self.split(pattern, text)\\n\\n    def validate_phone_number(self, phone_number):\\n        \\\"\\\"\\\"\\n        Validates if the given phone number matches the US phone number format.\\n\\n        Parameters:\\n            phone_number (str): The phone number to validate.\\n\\n        Returns:\\n            bool: True if the phone number is valid, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Valid phone number\\n            assert validate_phone_number('123-456-7890') == True\\n\\n            # Test case 2: Invalid phone number\\n            assert validate_phone_number('123-456-789') == False\\n\\n            # Test case 3: Empty string\\n            assert validate_phone_number('') == False\\n        \\\"\\\"\\\"\\n        pattern = self.generate_phone_number_pattern()\\n        return self.match(pattern, phone_number)\\n\\n    def extract_email(self, text):\\n        \\\"\\\"\\\"\\n        Extracts all email addresses from the given text.\\n\\n        Parameters:\\n            text (str): The text to extract email addresses from.\\n\\n        Returns:\\n            list: A list of all email addresses found in the text.\\n\\n        Test cases:\\n            # Test case 1: Text with emails\\n            assert extract_email('Contact us at test@example.com or support@example.com') == ['test@example.com', 'support@example.com']\\n\\n            # Test case 2: Text without emails\\n            assert extract_email('No emails here') == []\\n\\n            # Test case 3: Empty string\\n            assert extract_email('') == []\\n        \\\"\\\"\\\"\\n        pattern = self.generate_email_pattern()\\n        return self.findall(pattern, text)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194794,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1771,\n    \"prompt_tokens\": 1555,\n    \"total_tokens\": 3326,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 595\n  }\n}", "test_case_name": "RegexUtils.txt"}