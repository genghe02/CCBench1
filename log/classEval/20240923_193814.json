{"response body": {"id": "e03300d0-4646-410c-80d0-08c17d9a3d8b", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:38:14", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This is a class for creating a snake for snake game.\nimport random\n\n\nclass Snake:\n    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):\n        # This function is the constructor of the Snake class where the initial attributes are defined.\n        # param SCREEN_WIDTH: int, the width of the screen\n        # param SCREEN_HEIGHT: int, the height of the screen\n        # param BLOCK_SIZE: int, the size of the block\n        # param food_position: tuple, the position of the food\n        self.length = 1\n        self.SCREEN_WIDTH = SCREEN_WIDTH\n        self.SCREEN_HEIGHT = SCREEN_HEIGHT\n        self.BLOCK_SIZE = BLOCK_SIZE\n        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.food_position = food_position\n\n    def move(self, direction):\n        # This function is for moving the snake in a specific direction.\n        # param direction: tuple, the direction in which the snake has to move\n        # return: None, it just updates the position of the snake.\n        # >>> snake = Snake(500, 500, 20, (100, 100))\n        # >>> snake.move((10, 10))\n        cur = self.positions[0]\n        x, y = direction\n\n        new = (\n            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),\n            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,\n        )\n\n        if new == self.food_position:\n            self.eat_food()\n\n        if len(self.positions) > 2 and new in self.positions[2:]:\n            self.reset()\n        else:\n            self.positions.insert(0, new)\n            if len(self.positions) > self.length:\n                self.positions.pop()\n\n    def random_food_position(self):\n        # This function is for generating a random position for the food.\n        # return: None, it just updates the food_position attribute.\n        while self.food_position in self.positions:\n            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,\n                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)\n\n    def reset(self):\n        # This function is for resetting the snake's attributes to their initial values when the snake hits itself.\n        # return: None, it just resets the attributes to their initial values.\n        # >>> snake = Snake(500, 500, 20, (100, 100))\n        # >>> snake.reset()\n        self.length = 1\n        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]\n        self.score = 0\n        self.random_food_position()\n\n    def eat_food(self):\n        # This function is for increasing the snake's length and score when it eats food.\n        # return: None, it just increases the length and score attributes.\n        # >>> snake = Snake(500, 500, 20, (100, 100))\n        # >>> snake.eat_food()\n        self.length += 1\n        self.score += 100\n        self.random_food_position()\n```"}}], "usage": {"completion_tokens": 693, "prompt_tokens": 1037, "total_tokens": 1730}, "feeType": "1", "consume": 1.056428}, "test_case_name": "Snake.txt"}