{"response body": "{\n  \"id\": \"dc6e4fb3-0827-4378-99d0-77e3abaa7e0f\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class provides a dictionary-like interface where keys are converted to camelCase before being stored or retrieved.\\nclass CamelCaseMap:\\n    def __init__(self):\\n        # Initialize the internal dictionary to store key-value pairs.\\n        self._data = {}\\n\\n    def __getitem__(self, key):\\n        # Retrieve the value associated with the given key after converting it to camelCase.\\n        # param key: str, the key to retrieve the value for\\n        # return: any, the value associated with the converted key\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map['some_key'] = 'value'\\n        # >>> camel_map['someKey']\\n        # 'value'\\n        return self._data[self._convert_key(key)]\\n\\n    def __setitem__(self, key, value):\\n        # Set the value for the given key after converting it to camelCase.\\n        # param key: str, the key to set the value for\\n        # param value: any, the value to be set\\n        # return: None\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map['some_key'] = 'value'\\n        # >>> camel_map['someKey']\\n        # 'value'\\n        self._data[self._convert_key(key)] = value\\n\\n    def __delitem__(self, key):\\n        # Delete the key-value pair associated with the given key after converting it to camelCase.\\n        # param key: str, the key to delete\\n        # return: None\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map['some_key'] = 'value'\\n        # >>> del camel_map['someKey']\\n        # >>> 'someKey' in camel_map\\n        # False\\n        del self._data[self._convert_key(key)]\\n\\n    def __iter__(self):\\n        # Return an iterator over the keys in the internal dictionary.\\n        # return: iterator, an iterator over the keys in the internal dictionary\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map['some_key'] = 'value'\\n        # >>> list(camel_map)\\n        # ['someKey']\\n        return iter(self._data)\\n\\n    def __len__(self):\\n        # Return the number of key-value pairs in the internal dictionary.\\n        # return: int, the number of key-value pairs in the internal dictionary\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map['some_key'] = 'value'\\n        # >>> len(camel_map)\\n        # 1\\n        return len(self._data)\\n\\n    def _convert_key(self, key):\\n        # Convert the given key to camelCase if it is a string.\\n        # param key: any, the key to be converted\\n        # return: any, the converted key\\n        # >>> camel_map = CamelCaseMap()\\n        # >>> camel_map._convert_key('some_key')\\n        # 'someKey'\\n        if isinstance(key, str):\\n            return self._to_camel_case(key)\\n        return key\\n\\n    @staticmethod\\n    def _to_camel_case(key):\\n        # Convert a given string key to camelCase.\\n        # param key: str, the key to be converted\\n        # return: str, the key converted to camelCase\\n        # >>> CamelCaseMap._to_camel_case('some_key')\\n        # 'someKey'\\n        parts = key.split('_')\\n        return parts[0] + ''.join(part.title() for part in parts[1:])\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078085,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 844,\n    \"prompt_tokens\": 1064,\n    \"total_tokens\": 1908,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 488\n  }\n}", "test_case_name": "CamelCaseMap.txt"}