{"response body": "{\n  \"id\": \"f6e6ad8a-22d4-4b28-9e76-31c22233635e\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class is designed to generate SQL queries for various operations on a specified table.\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        # Initialize the SQLGenerator with a table name.\\n        # param table_name: str, the name of the table to generate SQL queries for.\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        # Generate a SELECT SQL query with optional fields and condition.\\n        # param fields: list of str, optional, the fields to select. If None, all fields are selected.\\n        # param condition: str, optional, the condition to filter the results.\\n        # return: str, the generated SELECT SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.select(fields=[\\\"name\\\", \\\"age\\\"], condition=\\\"age > 25\\\")\\n        # 'SELECT name, age FROM users WHERE age > 25;'\\n        # >>> sql_gen.select()\\n        # 'SELECT * FROM users;'\\n        if fields is None:\\n            fields = \\\"*\\\"\\n        else:\\n            fields = \\\", \\\".join(fields)\\n        sql = f\\\"SELECT {fields} FROM {self.table_name}\\\"\\n        if condition is not None:\\n            sql += f\\\" WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def insert(self, data):\\n        # Generate an INSERT SQL query with the provided data.\\n        # param data: dict, the data to insert into the table. Keys are field names, values are field values.\\n        # return: str, the generated INSERT SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.insert({\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30})\\n        # \\\"INSERT INTO users (name, age) VALUES ('Alice', '30');\\\"\\n        fields = \\\", \\\".join(data.keys())\\n        values = \\\", \\\".join([f\\\"'{value}'\\\" for value in data.values()])\\n        sql = f\\\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\\\"\\n        return sql + \\\";\\\"\\n\\n    def update(self, data, condition):\\n        # Generate an UPDATE SQL query with the provided data and condition.\\n        # param data: dict, the data to update in the table. Keys are field names, values are new field values.\\n        # param condition: str, the condition to filter the rows to update.\\n        # return: str, the generated UPDATE SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.update({\\\"age\\\": 31}, \\\"name = 'Alice'\\\")\\n        # \\\"UPDATE users SET age = '31' WHERE name = 'Alice';\\\"\\n        set_clause = \\\", \\\".join([f\\\"{field} = '{value}'\\\" for field, value in data.items()])\\n        sql = f\\\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def delete(self, condition):\\n        # Generate a DELETE SQL query with the provided condition.\\n        # param condition: str, the condition to filter the rows to delete.\\n        # return: str, the generated DELETE SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.delete(\\\"age > 50\\\")\\n        # \\\"DELETE FROM users WHERE age > 50;\\\"\\n        sql = f\\\"DELETE FROM {self.table_name} WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def select_female_under_age(self, age):\\n        # Generate a SELECT SQL query to retrieve female users under a specified age.\\n        # param age: int, the maximum age for female users to be selected.\\n        # return: str, the generated SELECT SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.select_female_under_age(30)\\n        # \\\"SELECT * FROM users WHERE age < 30 AND gender = 'female';\\\"\\n        condition = f\\\"age < {age} AND gender = 'female'\\\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        # Generate a SELECT SQL query to retrieve users within a specified age range.\\n        # param min_age: int, the minimum age for users to be selected.\\n        # param max_age: int, the maximum age for users to be selected.\\n        # return: str, the generated SELECT SQL query.\\n        # >>> sql_gen = SQLGenerator(\\\"users\\\")\\n        # >>> sql_gen.select_by_age_range(20, 30)\\n        # \\\"SELECT * FROM users WHERE age BETWEEN 20 AND 30;\\\"\\n        condition = f\\\"age BETWEEN {min_age} AND {max_age}\\\"\\n        return self.select(condition=condition)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727077766,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1137,\n    \"prompt_tokens\": 1216,\n    \"total_tokens\": 2353,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 640\n  }\n}", "test_case_name": "SQLGenerator.txt"}