{"response body": {"id": "3bd728d8-dbf4-4a43-801f-914eaf496903", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:17:20", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThe class TriCalculator is designed to compute the values of trigonometric functions - cosine, sine and tangent. \nIt uses Taylor series to compute the cosine and sine, and their quotient to compute the tangent.\n\"\"\"\n\nfrom math import pi, fabs\n\n\nclass TriCalculator:\n\n    def __init__(self):\n        \"\"\"\n        This is the initialization method for the TriCalculator class.\n        \"\"\"\n        pass\n\n    def cos(self, x):\n        \"\"\"\n        Computes the cosine of the input angle using the Taylor series.\n        \n        Parameters:\n            x (int/float): The angle in degrees.\n        \n        Returns:\n            float: The cosine of the input angle.\n        \n        Test cases:\n            # Test case 1: Normal case\n            assert cos(60) == 0.5\n\n            # Test case 2: Edge case\n            assert cos(0) == 1.0\n            \n            # Test case 3: Error case\n            assert cos('a') == Error\n        \"\"\"\n        return round(self.taylor(x, 50), 10)\n\n    def factorial(self, a):\n        \"\"\"\n        Computes the factorial of the input number.\n        \n        Parameters:\n            a (int): The number to compute the factorial of.\n            \n        Returns:\n            int: The factorial of the input number.\n            \n        Test cases:\n            # Test case 1: Normal case\n            assert factorial(5) == 120\n            \n            # Test case 2: Edge case\n            assert factorial(0) == 1\n            \n            # Test case 3: Error case\n            assert factorial(-1) == Error\n        \"\"\"\n        b = 1\n        while a != 1:\n            b *= a\n            a -= 1\n        return b\n\n    def taylor(self, x, n):\n        \"\"\"\n        Computes the Taylor series of cosine.\n        \n        Parameters:\n            x (int/float): The angle in degrees.\n            n (int): The number of terms in the Taylor series.\n            \n        Returns:\n            float: The sum of the first 'n' terms of the Taylor series.\n            \n        Test cases:\n            # Test case 1: Normal case\n            assert taylor(60, 5) == an appropriate float number\n            \n            # Test case 2: Edge case\n            assert taylor(0, 5) == 1.0\n            \n            # Test case 3: Error case\n            assert taylor('a', 5) == Error\n        \"\"\"\n        a = 1\n        x = x / 180 * pi\n        count = 1\n        for k in range(1, n):\n            if count % 2 != 0:\n                a -= (x ** (2 * k)) / self.factorial(2 * k)\n            else:\n                a += (x ** (2 * k)) / self.factorial(2 * k)\n            count += 1\n        return a\n\n    def sin(self, x):\n        \"\"\"\n        Computes the sine of the input angle using the Taylor series.\n        \n        Parameters:\n            x (int/float): The angle in degrees.\n            \n        Returns:\n            float: The sine of the input angle.\n            \n        Test cases:\n            # Test case 1: Normal case\n            assert sin(30) == 0.5\n            \n            # Test case 2: Edge case\n            assert sin(0) == 0.0\n            \n            # Test case 3: Error case\n            assert sin('a') == Error\n        \"\"\"\n        x = x / 180 * pi\n        g = 0\n        t = x\n        n = 1\n\n        while fabs(t) >= 1e-15:\n            g += t\n            n += 1\n            t = -t * x * x / (2 * n - 1) / (2 * n - 2)\n        return round(g, 10)\n\n    def tan(self, x):\n        \"\"\"\n        Computes the tangent of the input angle as the quotient of sine and cosine.\n        \n        Parameters:\n            x (int/float): The angle in degrees.\n            \n        Returns:\n            float: The tangent of the input angle if cosine is not equal to zero.\n            bool: False if cosine of the input angle is equal to zero.\n            \n        Test cases:\n            # Test case 1: Normal case\n            assert tan(45) == 1.0\n            \n            # Test case 2: Edge case\n            assert tan(0) == 0.0\n            \n            # Test case 3: Error case\n            assert tan(90) == False\n        \"\"\"\n        if self.cos(x) != 0:\n            result = self.sin(x) / self.cos(x)\n            return round(result, 10)\n        else:\n            return False"}}], "usage": {"completion_tokens": 998, "prompt_tokens": 1434, "total_tokens": 2432}, "feeType": "1", "consume": 1.49548}, "test_case_name": "TriCalculator.txt"}