{"response body": "{\n  \"id\": \"d77bc052-27c7-4a0f-8d1a-07fcd4be4b6e\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides utility functions for processing and extracting information from HTML text.\\nIt includes methods for formatting HTML text, extracting code blocks, and handling special markers.\\n\\\"\\\"\\\"\\n\\nimport re\\nimport string\\nimport gensim\\nfrom bs4 import BeautifulSoup\\n\\n\\nclass HtmlUtil:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes the HtmlUtil class with special markers for different types of content.\\n        \\\"\\\"\\\"\\n        self.SPACE_MARK = '-SPACE-'\\n        self.JSON_MARK = '-JSON-'\\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\\n        self.URL_MARK = '-URL-'\\n        self.NUMBER_MARK = '-NUMBER-'\\n        self.TRACE_MARK = '-TRACE-'\\n        self.COMMAND_MARK = '-COMMAND-'\\n        self.COMMENT_MARK = '-COMMENT-'\\n        self.CODE_MARK = '-CODE-'\\n\\n    @staticmethod\\n    def __format_line_feed(text):\\n        \\\"\\\"\\\"\\n        Formats the text by replacing multiple line feeds with a single line feed.\\n\\n        Parameters:\\n            text (str): The input text to be formatted\\n\\n        Returns:\\n            str: The formatted text with single line feeds\\n        \\\"\\\"\\\"\\n        return re.sub(re.compile(r'\\\\n+'), '\\\\n', text)\\n\\n    def format_line_html_text(self, html_text):\\n        \\\"\\\"\\\"\\n        Formats the HTML text by cleaning and structuring it for readability.\\n        It handles code blocks, lists, and paragraphs, ensuring proper punctuation and structure.\\n\\n        Parameters:\\n            html_text (str): The HTML text to be formatted\\n\\n        Returns:\\n            str: The cleaned and formatted text\\n\\n        Test cases:\\n            # Test case 1: Simple HTML with paragraphs\\n            html = '<p>Hello world</p><p>This is a test.</p>'\\n            expected_output = 'Hello world.\\\\nThis is a test.\\\\n'\\n            assert format_line_html_text(html) == expected_output\\n\\n            # Test case 2: HTML with code block\\n            html = '<p>Code example:</p><pre>print(\\\"Hello\\\")</pre>'\\n            expected_output = 'Code example:\\\\n-CODE-\\\\n'\\n            assert format_line_html_text(html) == expected_output\\n\\n            # Test case 3: Empty HTML\\n            html = ''\\n            expected_output = ''\\n            assert format_line_html_text(html) == expected_output\\n        \\\"\\\"\\\"\\n        if html_text is None or len(html_text) == 0:\\n            return ''\\n        soup = BeautifulSoup(html_text, 'lxml')\\n\\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\\n        for tag in code_tag:\\n            tag.string = self.CODE_MARK\\n\\n        ul_ol_group = soup.find_all(name=['ul', 'ol'])\\n        for ul_ol_item in ul_ol_group:\\n            li_group = ul_ol_item.find_all('li')\\n            for li_item in li_group:\\n                li_item_text = li_item.get_text().strip()\\n                if len(li_item_text) == 0:\\n                    continue\\n                if li_item_text[-1] in string.punctuation:\\n                    li_item.string = '[{0}]{1}'.format('-', li_item_text)\\n                    continue\\n                li_item.string = '[{0}]{1}.'.format('-', li_item_text)\\n\\n        p_group = soup.find_all(name=['p'])\\n        for p_item in p_group:\\n            p_item_text = p_item.get_text().strip()\\n            if p_item_text:\\n                if p_item_text[-1] in string.punctuation:\\n                    p_item.string = p_item_text\\n                    continue\\n                next_sibling = p_item.find_next_sibling()\\n                if next_sibling and self.CODE_MARK in next_sibling.get_text():\\n                    p_item.string = p_item_text + ':'\\n                    continue\\n                p_item.string = p_item_text + '.'\\n\\n        clean_text = gensim.utils.decode_htmlentities(soup.get_text())\\n        return self.__format_line_feed(clean_text)\\n\\n    def extract_code_from_html_text(self, html_text):\\n        \\\"\\\"\\\"\\n        Extracts code blocks from the HTML text.\\n\\n        Parameters:\\n            html_text (str): The HTML text containing code blocks\\n\\n        Returns:\\n            list: A list of extracted code blocks\\n\\n        Test cases:\\n            # Test case 1: HTML with single code block\\n            html = '<pre>print(\\\"Hello\\\")</pre>'\\n            expected_output = ['print(\\\"Hello\\\")']\\n            assert extract_code_from_html_text(html) == expected_output\\n\\n            # Test case 2: HTML with multiple code blocks\\n            html = '<pre>print(\\\"Hello\\\")</pre><blockquote>print(\\\"World\\\")</blockquote>'\\n            expected_output = ['print(\\\"Hello\\\")', 'print(\\\"World\\\")']\\n            assert extract_code_from_html_text(html) == expected_output\\n\\n            # Test case 3: HTML without code blocks\\n            html = '<p>No code here</p>'\\n            expected_output = []\\n            assert extract_code_from_html_text(html) == expected_output\\n        \\\"\\\"\\\"\\n        text_with_code_tag = self.format_line_html_text(html_text)\\n\\n        if self.CODE_MARK not in text_with_code_tag:\\n            return []\\n\\n        code_index_start = 0\\n        soup = BeautifulSoup(html_text, 'lxml')\\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\\n        code_count = text_with_code_tag.count(self.CODE_MARK)\\n        code_list = []\\n        for code_index in range(code_index_start, code_index_start + code_count):\\n            code = code_tag[code_index].get_text()\\n            if code:\\n                code_list.append(code)\\n        return code_list\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194255,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1202,\n    \"prompt_tokens\": 1729,\n    \"total_tokens\": 2931,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 769\n  }\n}", "test_case_name": "HtmlUtil.txt"}