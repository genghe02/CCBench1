{"response body": "{\n  \"id\": \"0c08f2d2-f6b9-48ec-9637-e0bf03063b7f\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nfrom math import pi, fabs\\n\\n\\nclass TriCalculator:\\n    # A class for calculating trigonometric functions using Taylor series approximations.\\n\\n    def __init__(self):\\n        pass\\n\\n    def cos(self, x):\\n        # Calculate the cosine of an angle using a Taylor series approximation.\\n        # param x: float, the angle in degrees.\\n        # return: float, the cosine of the angle rounded to 10 decimal places.\\n        # >>> calc = TriCalculator()\\n        # >>> calc.cos(0)\\n        # 1.0\\n        # >>> calc.cos(90)\\n        # 0.0\\n        # >>> calc.cos(180)\\n        # -1.0\\n        return round(self.taylor(x, 50), 10)\\n\\n    def factorial(self, a):\\n        # Calculate the factorial of a given number.\\n        # param a: int, the number to calculate the factorial of.\\n        # return: int, the factorial of the number.\\n        # >>> calc = TriCalculator()\\n        # >>> calc.factorial(5)\\n        # 120\\n        # >>> calc.factorial(0)\\n        # 1\\n        b = 1\\n        while a != 1:\\n            b *= a\\n            a -= 1\\n        return b\\n\\n    def taylor(self, x, n):\\n        # Calculate the Taylor series approximation for cosine.\\n        # param x: float, the angle in degrees.\\n        # param n: int, the number of terms in the Taylor series.\\n        # return: float, the Taylor series approximation for cosine.\\n        # >>> calc = TriCalculator()\\n        # >>> calc.taylor(0, 50)\\n        # 1.0\\n        # >>> calc.taylor(90, 50)\\n        # 0.0\\n        a = 1\\n        x = x / 180 * pi\\n        count = 1\\n        for k in range(1, n):\\n            if count % 2 != 0:\\n                a -= (x ** (2 * k)) / self.factorial(2 * k)\\n            else:\\n                a += (x ** (2 * k)) / self.factorial(2 * k)\\n            count += 1\\n        return a\\n\\n    def sin(self, x):\\n        # Calculate the sine of an angle using a Taylor series approximation.\\n        # param x: float, the angle in degrees.\\n        # return: float, the sine of the angle rounded to 10 decimal places.\\n        # >>> calc = TriCalculator()\\n        # >>> calc.sin(0)\\n        # 0.0\\n        # >>> calc.sin(90)\\n        # 1.0\\n        # >>> calc.sin(180)\\n        # 0.0\\n        x = x / 180 * pi\\n        g = 0\\n        t = x\\n        n = 1\\n\\n        while fabs(t) >= 1e-15:\\n            g += t\\n            n += 1\\n            t = -t * x * x / (2 * n - 1) / (2 * n - 2)\\n        return round(g, 10)\\n\\n    def tan(self, x):\\n        # Calculate the tangent of an angle using sine and cosine functions.\\n        # param x: float, the angle in degrees.\\n        # return: float, the tangent of the angle rounded to 10 decimal places, or False if the angle is a multiple of 90 degrees.\\n        # >>> calc = TriCalculator()\\n        # >>> calc.tan(0)\\n        # 0.0\\n        # >>> calc.tan(45)\\n        # 1.0\\n        # >>> calc.tan(90)\\n        # False\\n        if self.cos(x) != 0:\\n            result = self.sin(x) / self.cos(x)\\n            return round(result, 10)\\n        else:\\n            return False\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079497,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 936,\n    \"prompt_tokens\": 1153,\n    \"total_tokens\": 2089,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 577\n  }\n}", "test_case_name": "TriCalculator.txt"}