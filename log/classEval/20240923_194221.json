{"response body": {"id": "e14f8dca-1816-41aa-b166-b3b94233c4f3", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:42:21", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\nfrom datetime import datetime\nimport numpy as np\n\n# This class represents a movie booking system where movies can be added, tickets booked and available movies can be displayed.\nclass MovieBookingSystem:\n    def __init__(self):\n        # This function initializes the movie booking system with an empty list of movies.\n        # Test case: movie_system = MovieBookingSystem(); print(movie_system.movies) should print [].\n        self.movies = []\n\n    def add_movie(self, name, price, start_time, end_time, n):\n        # This function adds a new movie to the system.\n        # Params: \n        # name: str, the name of the movie\n        # price: float, the price of the movie ticket\n        # start_time: str, the start time of the movie in '%H:%M' format\n        # end_time: str, the end time of the movie in '%H:%M' format\n        # n: int, the size of the movie theater (n x n)\n        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5); print(movie_system.movies) should print the added movie details.\n        movie = {\n            'name': name,\n            'price': price,\n            'start_time': datetime.strptime(start_time, '%H:%M'),\n            'end_time': datetime.strptime(end_time, '%H:%M'),\n            'seats': np.zeros((n, n))\n        }\n        self.movies.append(movie)\n\n    def book_ticket(self, name, seats_to_book):\n        # This function books a ticket for a movie if available.\n        # Params: \n        # name: str, the name of the movie\n        # seats_to_book: list of tuples, each tuple representing the row and column index of the seat to book\n        # Returns: str, a success message if booking is successful, else a failure message\n        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5); print(movie_system.book_ticket(\"Inception\", [(0, 0)])) should print \"Booking success.\".\n        for movie in self.movies:\n            if movie['name'] == name:\n                for seat in seats_to_book:\n                    if movie['seats'][seat[0]][seat[1]] == 0:\n                        movie['seats'][seat[0]][seat[1]] = 1\n                    else:\n                        return \"Booking failed.\"\n                return \"Booking success.\"\n        return \"Movie not found.\"\n\n    def available_movies(self, start_time, end_time):\n        # This function displays the available movies within a given time frame.\n        # Params: \n        # start_time: str, the start time in '%H:%M' format\n        # end_time: str, the end time in '%H:%M' format\n        # Returns: list of str, the names of the available movies\n        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie(\"Inception\", 10.0, \"14:00\", \"16:00\", 5); print(movie_system.available_movies(\"13:00\", \"17:00\")) should print ['Inception'].\n        start_time = datetime.strptime(start_time, '%H:%M')\n        end_time = datetime.strptime(end_time, '%H:%M')\n\n        available_movies = []\n        for movie in self.movies:\n            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:\n                available_movies.append(movie['name'])\n\n        return available_movies\n```"}}], "usage": {"completion_tokens": 770, "prompt_tokens": 951, "total_tokens": 1721}, "feeType": "1", "consume": 1.086076}, "test_case_name": "MovieBookingSystem.txt"}