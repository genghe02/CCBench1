{"response body": "{\n  \"id\": \"2aea1167-6c71-4d2a-a929-c0529ff39956\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport json\\n\\nclass CookiesUtil:\\n    # A utility class for managing cookies, including loading, saving, and setting cookies.\\n    def __init__(self, cookies_file):\\n        # Initialize the CookiesUtil class with a file path to store cookies.\\n        # param cookies_file: str, the file path where cookies will be stored.\\n        self.cookies_file = cookies_file\\n        self.cookies = None\\n\\n    def get_cookies(self, reponse):\\n        # Extract cookies from a response and save them to the specified file.\\n        # param reponse: dict, the response containing cookies.\\n        # >>> cookies_util = CookiesUtil('cookies.json')\\n        # >>> cookies_util.get_cookies({'cookies': {'session': 'abc123', 'user': 'john_doe'}})\\n        self.cookies = reponse['cookies']\\n        self._save_cookies()\\n\\n    def load_cookies(self):\\n        # Load cookies from the specified file.\\n        # return: dict, the loaded cookies or an empty dictionary if the file does not exist.\\n        # >>> cookies_util = CookiesUtil('cookies.json')\\n        # >>> cookies_util.load_cookies()\\n        try:\\n            with open(self.cookies_file, 'r') as file:\\n                cookies_data = json.load(file)\\n                return cookies_data\\n        except FileNotFoundError:\\n            return {}\\n\\n    def _save_cookies(self):\\n        # Save the current cookies to the specified file.\\n        # return: bool, True if the cookies were saved successfully, False otherwise.\\n        # >>> cookies_util = CookiesUtil('cookies.json')\\n        # >>> cookies_util.cookies = {'session': 'abc123', 'user': 'john_doe'}\\n        # >>> cookies_util._save_cookies()\\n        try:\\n            with open(self.cookies_file, 'w') as file:\\n                json.dump(self.cookies, file)\\n            return True\\n        except:\\n            return False\\n\\n    def set_cookies(self, request):\\n        # Set cookies in a request by converting them into a string format.\\n        # >>> cookies_util = CookiesUtil('cookies.json')\\n        # >>> cookies_util.cookies = {'session': 'abc123', 'user': 'john_doe'}\\n        # >>> request = {}\\n        # >>> cookies_util.set_cookies(request)\\n        # >>> request['cookies']\\n        request['cookies'] = '; '.join([f'{key}={value}' for key, value in self.cookies.items()])\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727081275,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 600,\n    \"prompt_tokens\": 929,\n    \"total_tokens\": 1529,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 353\n  }\n}", "test_case_name": "CookiesUtil.txt"}