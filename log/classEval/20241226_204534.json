{"response body": "ChatCompletion(id='chatcmpl-AihWxoo6C9ZIfh53bvLcfHDn9sfuS', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class provides methods for calculating Kappa coefficients for inter-rater agreement, including individual and Fleiss\\' Kappa measurements.\\n\"\"\"\\n\\nimport numpy as np\\n\\n\\nclass KappaCalculator:\\n\\n    @staticmethod\\n    def kappa(testData, k):\\n        \"\"\"\\n        Calculate Cohen\\'s Kappa coefficient for inter-rater agreement between two raters.\\n        \\n        Parameters:\\n            testData (array-like): List or array of observed agreements.\\n            k (int): Number of categories or classes.\\n        \\n        Returns:\\n            float: The computed Cohen\\'s Kappa coefficient.\\n        \\n        Test cases:\\n            # Test case 1: Normal computation\\n            assert kappa([10, 2, 3, 5], 4) == 0.532\\n            \\n            # Test case 2: Edge case with low agreement\\n            assert kappa([5, 10, 0, 0], 4) == -0.286\\n            \\n            # Test case 3: Empty input\\n            assert kappa([], 3) == 0.0\\n        \"\"\"\\n\\n        dataMat = np.mat(testData)\\n        P0 = 0.0\\n        for i in range(k):\\n            P0 += dataMat[i, i] * 1.0\\n        xsum = np.sum(dataMat, axis=1)\\n        ysum = np.sum(dataMat, axis=0)\\n        sum_all = np.sum(dataMat)\\n        Pe = float(ysum * xsum) / sum_all / sum_all\\n        P0 = float(P0 / sum_all * 1.0)\\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\\n        return cohens_coefficient\\n\\n    @staticmethod\\n    def fleiss_kappa(testData, N, k, n):\\n        \"\"\"\\n        Calculate Fleiss\\' Kappa coefficient for inter-rater agreement among multiple raters.\\n        \\n        Parameters:\\n            testData (array-like): List or array of observed agreements with dimensions N x k.\\n            N (int): Number of subjects/items rated.\\n            k (int): Number of categories or classes.\\n            n (int): Number of raters.\\n        \\n        Returns:\\n            float: The computed Fleiss\\' Kappa coefficient.\\n        \\n        Test cases:\\n            # Test case 1: Normal computation\\n            assert fleiss_kappa([[3, 1, 0], [0, 2, 2], [1, 1, 1]], 3, 3, 3) == 0.204\\n            \\n            # Test case 2: Edge case with single category\\n            assert fleiss_kappa([[10], [10], [10]], 3, 1, 3) == 0.0\\n            \\n            # Test case 3: Agreement on all categories\\n            assert fleiss_kappa([[2, 3], [3, 2]], 2, 2, 2) == 1.0\\n        \"\"\"\\n\\n        dataMat = np.mat(testData, float)\\n        oneMat = np.ones((k, 1))\\n        sum_all = 0.0\\n        P0 = 0.0\\n        for i in range(N):\\n            temp = 0.0\\n            for j in range(k):\\n                sum_all += dataMat[i, j]\\n                temp += 1.0 * dataMat[i, j] ** 2\\n            temp -= n\\n            temp /= (n - 1) * n\\n            P0 += temp\\n        P0 = 1.0 * P0 / N\\n        ysum = np.sum(dataMat, axis=0)\\n        for i in range(k):\\n            ysum[0, i] = (ysum[0, i] / sum_all) ** 2\\n        Pe = ysum * oneMat * 1.0\\n        ans = (P0 - Pe) / (1 - Pe)\\n        return ans[0, 0]\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735217127, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=823, prompt_tokens=1407, total_tokens=2230, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "KappaCalculator.txt"}