{"response body": "{\n  \"id\": \"c1bcaa35-4403-41c2-b0fa-88cf6167d448\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides functionality to convert currencies based on predefined exchange rates.\\nIt also allows adding new currency rates, updating existing rates, and retrieving the list of supported currencies.\\n\\\"\\\"\\\"\\n\\nclass CurrencyConverter:\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes the CurrencyConverter with a set of predefined currency exchange rates.\\n        \\n        The rates are stored in a dictionary where the keys are currency codes (e.g., 'USD', 'EUR') \\n        and the values are the exchange rates relative to USD.\\n        \\\"\\\"\\\"\\n        self.rates = {\\n            'USD': 1.0,\\n            'EUR': 0.85,\\n            'GBP': 0.72,\\n            'JPY': 110.15,\\n            'CAD': 1.23,\\n            'AUD': 1.34,\\n            'CNY': 6.40,\\n        }\\n\\n    def convert(self, amount, from_currency, to_currency):\\n        \\\"\\\"\\\"\\n        Converts a given amount from one currency to another based on the stored exchange rates.\\n        \\n        Parameters:\\n            amount (float): The amount of money to convert.\\n            from_currency (str): The currency code to convert from.\\n            to_currency (str): The currency code to convert to.\\n        \\n        Returns:\\n            float: The converted amount if the currencies are supported.\\n            bool: False if either the source or target currency is not supported.\\n        \\n        Test cases:\\n            # Test case 1: Normal conversion from USD to EUR\\n            converter = CurrencyConverter()\\n            assert converter.convert(100, 'USD', 'EUR') == 85.0\\n            \\n            # Test case 2: Conversion with same currency\\n            assert converter.convert(100, 'USD', 'USD') == 100.0\\n            \\n            # Test case 3: Conversion with unsupported currency\\n            assert converter.convert(100, 'USD', 'XYZ') == False\\n        \\\"\\\"\\\"\\n        if from_currency == to_currency:\\n            return amount\\n\\n        if from_currency not in self.rates or to_currency not in self.rates:\\n            return False\\n\\n        from_rate = self.rates[from_currency]\\n        to_rate = self.rates[to_currency]\\n\\n        converted_amount = (amount / from_rate) * to_rate\\n        return converted_amount\\n\\n    def get_supported_currencies(self):\\n        \\\"\\\"\\\"\\n        Retrieves the list of supported currency codes.\\n        \\n        Returns:\\n            list: A list of currency codes that are supported by the converter.\\n        \\n        Test cases:\\n            # Test case 1: Retrieve supported currencies\\n            converter = CurrencyConverter()\\n            assert 'USD' in converter.get_supported_currencies()\\n            \\n            # Test case 2: Check if all predefined currencies are included\\n            assert set(converter.get_supported_currencies()) == {'USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY'}\\n            \\n            # Test case 3: Check if unsupported currency is not in the list\\n            assert 'XYZ' not in converter.get_supported_currencies()\\n        \\\"\\\"\\\"\\n        return list(self.rates.keys())\\n\\n    def add_currency_rate(self, currency, rate):\\n        \\\"\\\"\\\"\\n        Adds a new currency and its exchange rate to the converter.\\n        \\n        Parameters:\\n            currency (str): The currency code to add.\\n            rate (float): The exchange rate relative to USD.\\n        \\n        Returns:\\n            bool: True if the currency was added successfully, False if the currency already exists.\\n        \\n        Test cases:\\n            # Test case 1: Add a new currency\\n            converter = CurrencyConverter()\\n            assert converter.add_currency_rate('INR', 75.0) == True\\n            assert 'INR' in converter.get_supported_currencies()\\n            \\n            # Test case 2: Add an existing currency\\n            assert converter.add_currency_rate('USD', 1.0) == False\\n            \\n            # Test case 3: Add a currency with a negative rate\\n            assert converter.add_currency_rate('XYZ', -1.0) == True\\n        \\\"\\\"\\\"\\n        if currency in self.rates:\\n            return False\\n        self.rates[currency] = rate\\n        return True\\n\\n    def update_currency_rate(self, currency, new_rate):\\n        \\\"\\\"\\\"\\n        Updates the exchange rate of an existing currency.\\n        \\n        Parameters:\\n            currency (str): The currency code to update.\\n            new_rate (float): The new exchange rate relative to USD.\\n        \\n        Returns:\\n            bool: True if the currency rate was updated successfully, False if the currency does not exist.\\n        \\n        Test cases:\\n            # Test case 1: Update an existing currency rate\\n            converter = CurrencyConverter()\\n            assert converter.update_currency_rate('USD', 1.1) == True\\n            assert converter.convert(100, 'USD', 'EUR') == 85.0 * (1.0 / 1.1)\\n            \\n            # Test case 2: Update a non-existing currency\\n            assert converter.update_currency_rate('XYZ', 1.0) == False\\n            \\n            # Test case 3: Update a currency with a negative rate\\n            assert converter.update_currency_rate('USD', -1.0) == True\\n        \\\"\\\"\\\"\\n        if currency not in self.rates:\\n            return False\\n        self.rates[currency] = new_rate\\n        return True\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735193901,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1128,\n    \"prompt_tokens\": 1365,\n    \"total_tokens\": 2493,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 405\n  }\n}", "test_case_name": "CurrencyConverter.txt"}