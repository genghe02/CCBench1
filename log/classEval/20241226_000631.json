{"response body": "ChatCompletion(id='chatcmpl-AiOBr2j3Uk2hrEHKmTkD5r2bKMPng', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a hotel with rooms that can be booked and managed.\\n\\nThe hotel has available rooms of different types that can be booked, checked in, checked out, and queried for availability.\\n\"\"\"\\n\\nclass Hotel:\\n    def __init__(self, name, rooms):\\n        \"\"\"\\n        Initialize the Hotel object with a name and available rooms.\\n\\n        Parameters:\\n            name (str): The name of the hotel\\n            rooms (dict): A dictionary containing room types as keys and available room numbers as values\\n        \\n        Test cases:\\n            hotel = Hotel(\"Example Hotel\", {\\'single\\': 5, \\'double\\': 3})\\n        \"\"\"\\n        self.name = name\\n        self.available_rooms = rooms\\n        self.booked_rooms = {}\\n\\n    def book_room(self, room_type, room_number, name):\\n        \"\"\"\\n        Book a room in the hotel.\\n\\n        Parameters:\\n            room_type (str): Type of the room to be booked\\n            room_number (int): Number of rooms to book\\n            name (str): Name of the guest booking the room\\n\\n        Returns:\\n            str: \"Success!\" if the booking is successful, available room count if partial booking, False otherwise\\n\\n        Test cases:\\n            hotel = Hotel(\"Example Hotel\", {\\'single\\': 5, \\'double\\': 3})\\n            assert hotel.book_room(\\'single\\', 2, \\'John\\') == \"Success!\"\\n            assert hotel.book_room(\\'double\\', 4, \\'Alice\\') == 3\\n            assert hotel.book_room(\\'queen\\', 1, \\'Bob\\') == False\\n        \"\"\"\\n        if room_type not in self.available_rooms.keys():\\n            return False\\n\\n        if room_number <= self.available_rooms[room_type]:\\n            if room_type not in self.booked_rooms.keys():\\n                self.booked_rooms[room_type] = {}\\n            self.booked_rooms[room_type][name] = room_number\\n            self.available_rooms[room_type] -= room_number\\n            return \"Success!\"\\n        elif self.available_rooms[room_type] != 0:\\n            return self.available_rooms[room_type]\\n        else:\\n            return False\\n\\n    def check_in(self, room_type, room_number, name):\\n        \"\"\"\\n        Check in a guest to a booked room.\\n\\n        Parameters:\\n            room_type (str): Type of the room to check in\\n            room_number (int): Number of rooms to check in\\n            name (str): Name of the guest checking in\\n\\n        Returns:\\n            bool: True if check-in is successful, False otherwise\\n\\n        Test cases:\\n            hotel = Hotel(\"Example Hotel\", {\\'single\\': 5, \\'double\\': 3})\\n            hotel.book_room(\\'single\\', 2, \\'John\\')\\n            assert hotel.check_in(\\'single\\', 2, \\'John\\') == True\\n            assert hotel.check_in(\\'single\\', 1, \\'Alice\\') == False\\n            assert hotel.check_in(\\'double\\', 2, \\'Bob\\') == False\\n        \"\"\"\\n        if room_type not in self.booked_rooms.keys():\\n            return False\\n        if name in self.booked_rooms[room_type]:\\n            if room_number > self.booked_rooms[room_type][name]:\\n                return False\\n            elif room_number == self.booked_rooms[room_type][name]:\\n                self.booked_rooms[room_type].pop(name)\\n                return True\\n            else:\\n                self.booked_rooms[room_type][name] -= room_number\\n                return True\\n        return False\\n\\n    def check_out(self, room_type, room_number):\\n        \"\"\"\\n        Check out one or more rooms of a specific type.\\n\\n        Parameters:\\n            room_type (str): Type of the room to check out\\n            room_number (int): Number of rooms to check out\\n\\n        Test cases:\\n            hotel = Hotel(\"Example Hotel\", {\\'single\\': 5, \\'double\\': 3})\\n            hotel.check_out(\\'single\\', 2)\\n        \"\"\"\\n        if room_type in self.available_rooms:\\n            self.available_rooms[room_type] += room_number\\n        else:\\n            self.available_rooms[room_type] = room_number\\n\\n    def get_available_rooms(self, room_type):\\n        \"\"\"\\n        Get the number of available rooms for a specific room type.\\n\\n        Parameters:\\n            room_type (str): Type of the room to check availability\\n\\n        Returns:\\n            int: Number of available rooms for the specified type\\n\\n        Test cases:\\n            hotel = Hotel(\"Example Hotel\", {\\'single\\': 5, \\'double\\': 3})\\n            hotel.get_available_rooms(\\'single\\')  # Should return 5\\n        \"\"\"\\n        return self.available_rooms[room_type]\\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735142783, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=943, prompt_tokens=1587, total_tokens=2530, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "Hotel.txt"}