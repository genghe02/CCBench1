{"response body": "{\n  \"id\": \"4da2fd55-4f79-4a01-8294-ce871ea38b58\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport sqlite3\\n\\nclass BookManagementDB:\\n    # This class manages a SQLite database for book records, including operations like adding, removing, borrowing, returning, and searching books.\\n    def __init__(self, db_name):\\n        # Initialize the database connection and cursor, and create the books table if it doesn't exist.\\n        # param db_name: str, the name of the SQLite database file.\\n        self.connection = sqlite3.connect(db_name)\\n        self.cursor = self.connection.cursor()\\n        self.create_table()\\n\\n    def create_table(self):\\n        # Create the 'books' table in the database if it doesn't already exist.\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> # Table 'books' should be created if it doesn't exist\\n        self.cursor.execute('''\\n            CREATE TABLE IF NOT EXISTS books (\\n                id INTEGER PRIMARY KEY,\\n                title TEXT,\\n                author TEXT,\\n                available INTEGER\\n            )\\n        ''')\\n        self.connection.commit()\\n\\n    def add_book(self, title, author):\\n        # Add a new book to the 'books' table with the given title and author, and set it as available.\\n        # param title: str, the title of the book.\\n        # param author: str, the author of the book.\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> db.add_book('1984', 'George Orwell')\\n        self.cursor.execute('''\\n            INSERT INTO books (title, author, available)\\n            VALUES (?, ?, 1)\\n        ''', (title, author))\\n        self.connection.commit()\\n\\n    def remove_book(self, book_id):\\n        # Remove a book from the 'books' table based on its ID.\\n        # param book_id: int, the ID of the book to be removed.\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> db.remove_book(1)\\n        self.cursor.execute('''\\n            DELETE FROM books WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def borrow_book(self, book_id):\\n        # Mark a book as unavailable (borrowed) in the 'books' table based on its ID.\\n        # param book_id: int, the ID of the book to be borrowed.\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> db.borrow_book(1)\\n        self.cursor.execute('''\\n            UPDATE books SET available = 0 WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def return_book(self, book_id):\\n        # Mark a book as available (returned) in the 'books' table based on its ID.\\n        # param book_id: int, the ID of the book to be returned.\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> db.return_book(1)\\n        self.cursor.execute('''\\n            UPDATE books SET available = 1 WHERE id = ?\\n        ''', (book_id,))\\n        self.connection.commit()\\n\\n    def search_books(self):\\n        # Retrieve all books from the 'books' table.\\n        # return: list of tuples, each tuple represents a book with fields (id, title, author, available).\\n        # >>> db = BookManagementDB('test.db')\\n        # >>> books = db.search_books()\\n        self.cursor.execute('''\\n            SELECT * FROM books\\n        ''')\\n        books = self.cursor.fetchall()\\n        return books\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079545,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 859,\n    \"prompt_tokens\": 1153,\n    \"total_tokens\": 2012,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 577\n  }\n}", "test_case_name": "BookManagementDB.txt"}