{"response body": "{\n  \"id\": \"17ea91ab-a85c-4ed8-bacb-5be9661c926e\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents an Assessment System that manages student records, including their grades, courses, and GPAs. \\nIt provides functionality to add students, add course scores, calculate GPAs, identify students with failing courses, \\ncompute course averages, and determine the top-performing student.\\n\\\"\\\"\\\"\\n\\nclass AssessmentSystem:\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes the AssessmentSystem with an empty dictionary to store student records.\\n        \\\"\\\"\\\"\\n        self.students = {}\\n\\n    def add_student(self, name, grade, major):\\n        \\\"\\\"\\\"\\n        Adds a new student to the system with their name, grade, and major.\\n\\n        Parameters:\\n            name (str): The name of the student.\\n            grade (int): The grade level of the student.\\n            major (str): The major of the student.\\n\\n        Test cases:\\n            # Test case 1: Add a new student\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            assert 'Alice' in system.students\\n\\n            # Test case 2: Add another student\\n            system.add_student('Bob', 11, 'Science')\\n            assert 'Bob' in system.students\\n\\n            # Test case 3: Add a student with invalid grade\\n            system.add_student('Charlie', 'A', 'History')\\n            assert 'Charlie' not in system.students  # Assuming grade must be an integer\\n        \\\"\\\"\\\"\\n        self.students[name] = {'name': name, 'grade': grade, 'major': major, 'courses': {}}\\n\\n    def add_course_score(self, name, course, score):\\n        \\\"\\\"\\\"\\n        Adds a course score for a specific student.\\n\\n        Parameters:\\n            name (str): The name of the student.\\n            course (str): The name of the course.\\n            score (int): The score obtained in the course.\\n\\n        Test cases:\\n            # Test case 1: Add a course score for an existing student\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 85)\\n            assert 'Calculus' in system.students['Alice']['courses']\\n\\n            # Test case 2: Add a course score for a non-existing student\\n            system.add_course_score('Bob', 'Physics', 90)\\n            assert 'Bob' not in system.students\\n\\n            # Test case 3: Add an invalid score\\n            system.add_course_score('Alice', 'Algebra', 'A')\\n            assert 'Algebra' not in system.students['Alice']['courses']  # Assuming score must be an integer\\n        \\\"\\\"\\\"\\n        if name in self.students:\\n            self.students[name]['courses'][course] = score\\n\\n    def get_gpa(self, name):\\n        \\\"\\\"\\\"\\n        Calculates the GPA (Grade Point Average) for a specific student.\\n\\n        Parameters:\\n            name (str): The name of the student.\\n\\n        Returns:\\n            float: The GPA of the student, or None if the student has no courses or does not exist.\\n\\n        Test cases:\\n            # Test case 1: Calculate GPA for a student with courses\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 85)\\n            system.add_course_score('Alice', 'Algebra', 90)\\n            assert system.get_gpa('Alice') == 87.5\\n\\n            # Test case 2: Calculate GPA for a student with no courses\\n            system.add_student('Bob', 11, 'Science')\\n            assert system.get_gpa('Bob') is None\\n\\n            # Test case 3: Calculate GPA for a non-existing student\\n            assert system.get_gpa('Charlie') is None\\n        \\\"\\\"\\\"\\n        if name in self.students and self.students[name]['courses']:\\n            return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])\\n        else:\\n            return None\\n\\n    def get_all_students_with_fail_course(self):\\n        \\\"\\\"\\\"\\n        Retrieves a list of students who have at least one failing course (score < 60).\\n\\n        Returns:\\n            list: A list of student names with failing courses.\\n\\n        Test cases:\\n            # Test case 1: No students with failing courses\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 85)\\n            assert system.get_all_students_with_fail_course() == []\\n\\n            # Test case 2: One student with a failing course\\n            system.add_student('Bob', 11, 'Science')\\n            system.add_course_score('Bob', 'Physics', 55)\\n            assert system.get_all_students_with_fail_course() == ['Bob']\\n\\n            # Test case 3: Multiple students with failing courses\\n            system.add_student('Charlie', 12, 'History')\\n            system.add_course_score('Charlie', 'World History', 59)\\n            assert system.get_all_students_with_fail_course() == ['Bob', 'Charlie']\\n        \\\"\\\"\\\"\\n        students = []\\n        for name, student in self.students.items():\\n            for course, score in student['courses'].items():\\n                if score < 60:\\n                    students.append(name)\\n                    break\\n        return students\\n\\n    def get_course_average(self, course):\\n        \\\"\\\"\\\"\\n        Calculates the average score for a specific course across all students.\\n\\n        Parameters:\\n            course (str): The name of the course.\\n\\n        Returns:\\n            float: The average score of the course, or None if no students have taken the course.\\n\\n        Test cases:\\n            # Test case 1: Calculate average for a course with scores\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 85)\\n            system.add_student('Bob', 11, 'Science')\\n            system.add_course_score('Bob', 'Calculus', 90)\\n            assert system.get_course_average('Calculus') == 87.5\\n\\n            # Test case 2: Calculate average for a course with no scores\\n            assert system.get_course_average('Physics') is None\\n\\n            # Test case 3: Calculate average for a non-existing course\\n            assert system.get_course_average('Biology') is None\\n        \\\"\\\"\\\"\\n        total = 0\\n        count = 0\\n        for student in self.students.values():\\n            if course in student['courses']:\\n                score = student['courses'][course]\\n                if score is not None:\\n                    total += score\\n                    count += 1\\n        return total / count if count > 0 else None\\n\\n    def get_top_student(self):\\n        \\\"\\\"\\\"\\n        Identifies the top-performing student based on the highest GPA.\\n\\n        Returns:\\n            str: The name of the top-performing student, or None if no students have GPAs.\\n\\n        Test cases:\\n            # Test case 1: Identify top student\\n            system = AssessmentSystem()\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 85)\\n            system.add_student('Bob', 11, 'Science')\\n            system.add_course_score('Bob', 'Physics', 90)\\n            assert system.get_top_student() == 'Bob'\\n\\n            # Test case 2: No students with GPAs\\n            system = AssessmentSystem()\\n            assert system.get_top_student() is None\\n\\n            # Test case 3: Multiple students with the same GPA\\n            system.add_student('Alice', 10, 'Math')\\n            system.add_course_score('Alice', 'Calculus', 90)\\n            system.add_student('Bob', 11, 'Science')\\n            system.add_course_score('Bob', 'Physics', 90)\\n            assert system.get_top_student() in ['Alice', 'Bob']\\n        \\\"\\\"\\\"\\n        top_student = None\\n        top_gpa = 0\\n        for name, student in self.students.items():\\n            gpa = self.get_gpa(name)\\n            if gpa is not None and gpa > top_gpa:\\n                top_gpa = gpa\\n                top_student = name\\n        return top_student\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735193491,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1777,\n    \"prompt_tokens\": 1500,\n    \"total_tokens\": 3277,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 540\n  }\n}", "test_case_name": "AssessmentSystem.txt"}