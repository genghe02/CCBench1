{"response body": {"id": "f10ef3d4-5f82-42eb-8712-fc1838061a1f", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-09-23 19:09:07", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n# This class is a strategy pattern for applying different discount strategies on a shopping cart.\nclass DiscountStrategy:\n    # The constructor method for DiscountStrategy class.\n    # :param customer: dict, contains customer's details.\n    # :param cart: list of dicts, each dict contains the product details and its quantity.\n    # :param promotion: function, the promotion strategy to be applied on the cart.\n    # >>> ds = DiscountStrategy({\"fidelity\": 1200}, [{\"product\": \"apple\", \"quantity\": 5, \"price\": 0.5}], DiscountStrategy.FidelityPromo)\n    def __init__(self, customer, cart, promotion=None):\n        self.customer = customer\n        self.cart = cart\n        self.promotion = promotion\n        self.__total = self.total()\n\n    # This method calculates the total amount in the cart\n    # :return: float, total amount in the cart.\n    # >>> ds.total()\n    # 2.5\n    def total(self):\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\n        return self.__total\n\n    # This method calculates the due amount after applying the discount.\n    # :return: float, the due amount after applying the discount.\n    # >>> ds.due()\n    # 2.375\n    def due(self):\n        if self.promotion is None:\n            discount = 0\n        else:\n            discount = self.promotion(self)\n        return self.__total - discount\n\n    # This promotion gives a 5% discount for customers with fidelity points >= 1000.\n    # :param order: DiscountStrategy object\n    # :return: float, discount value\n    # >>> DiscountStrategy.FidelityPromo(ds)\n    # 0.125\n    @staticmethod\n    def FidelityPromo(order):\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\n\n    # This promotion gives a 10% discount for each product with quantity >= 20.\n    # :param order: DiscountStrategy object\n    # :return: float, discount value\n    # >>> DiscountStrategy.BulkItemPromo(ds)\n    # 0\n    @staticmethod\n    def BulkItemPromo(order):\n        discount = 0\n        for item in order.cart:\n            if item['quantity'] >= 20:\n                discount += item['quantity'] * item['price'] * 0.1\n        return discount\n\n    # This promotion gives a 7% discount if the order contains at least 10 different products.\n    # :param order: DiscountStrategy object\n    # :return: float, discount value\n    # >>> DiscountStrategy.LargeOrderPromo(ds)\n    # 0\n    @staticmethod\n    def LargeOrderPromo(order):\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\n```\n"}}], "usage": {"completion_tokens": 627, "prompt_tokens": 971, "total_tokens": 1598}, "feeType": "1", "consume": 0.9701}, "test_case_name": "DiscountStrategy.txt"}