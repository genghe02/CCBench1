{"response body": "{\n  \"id\": \"84c94362-e58a-4d5d-a755-162bec449e9e\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class represents an order management system for a restaurant. It allows adding dishes to an order, calculating the total cost, and checking out the order.\\n\\\"\\\"\\\"\\n\\nclass Order:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes an Order object with an empty menu, selected dishes, and sales dictionary.\\n        \\\"\\\"\\\"\\n        self.menu = []\\n        # menu = [{\\\"dish\\\": dish name, \\\"price\\\": price, \\\"count\\\": count}, ...]\\n        self.selected_dishes = []\\n        # selected_dish = {\\\"dish\\\": dish name, \\\"count\\\": count, price: price}\\n        self.sales = {}\\n        # sales = {\\\"dish\\\": discount percentage}\\n\\n    def add_dish(self, dish):\\n        \\\"\\\"\\\"\\n        Adds a dish to the selected dishes list if it is available in the menu.\\n\\n        Parameters:\\n            dish (dict): A dictionary containing the dish details with keys \\\"dish\\\", \\\"count\\\", and \\\"price\\\".\\n        \\n        Returns:\\n            bool: True if the dish is successfully added, False if the dish is not available or the count exceeds the available quantity.\\n        \\n        Test cases:\\n            # Test case 1: Adding an available dish\\n            order = Order()\\n            order.menu = [{\\\"dish\\\": \\\"Pizza\\\", \\\"price\\\": 10, \\\"count\\\": 5}]\\n            assert order.add_dish({\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}) == True\\n            \\n            # Test case 2: Adding a dish with insufficient count\\n            order = Order()\\n            order.menu = [{\\\"dish\\\": \\\"Pizza\\\", \\\"price\\\": 10, \\\"count\\\": 1}]\\n            assert order.add_dish({\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}) == False\\n            \\n            # Test case 3: Adding a dish not in the menu\\n            order = Order()\\n            order.menu = [{\\\"dish\\\": \\\"Pizza\\\", \\\"price\\\": 10, \\\"count\\\": 5}]\\n            assert order.add_dish({\\\"dish\\\": \\\"Burger\\\", \\\"count\\\": 1, \\\"price\\\": 8}) == False\\n        \\\"\\\"\\\"\\n        for menu_dish in self.menu:\\n            if dish[\\\"dish\\\"] == menu_dish[\\\"dish\\\"]:\\n                if menu_dish[\\\"count\\\"] < dish[\\\"count\\\"]:\\n                    return False\\n                else:\\n                    menu_dish[\\\"count\\\"] -= dish[\\\"count\\\"]\\n                    break\\n        self.selected_dishes.append(dish)\\n        return True\\n\\n    def calculate_total(self):\\n        \\\"\\\"\\\"\\n        Calculates the total cost of the selected dishes, applying any applicable discounts.\\n\\n        Returns:\\n            float: The total cost of the selected dishes after applying discounts.\\n        \\n        Test cases:\\n            # Test case 1: Calculating total with no discounts\\n            order = Order()\\n            order.selected_dishes = [{\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}]\\n            order.sales = {\\\"Pizza\\\": 1.0}\\n            assert order.calculate_total() == 20.0\\n            \\n            # Test case 2: Calculating total with discounts\\n            order = Order()\\n            order.selected_dishes = [{\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}]\\n            order.sales = {\\\"Pizza\\\": 0.8}\\n            assert order.calculate_total() == 16.0\\n            \\n            # Test case 3: Calculating total with multiple dishes\\n            order = Order()\\n            order.selected_dishes = [{\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}, {\\\"dish\\\": \\\"Burger\\\", \\\"count\\\": 1, \\\"price\\\": 8}]\\n            order.sales = {\\\"Pizza\\\": 0.8, \\\"Burger\\\": 1.0}\\n            assert order.calculate_total() == 24.0\\n        \\\"\\\"\\\"\\n        total = 0\\n        for dish in self.selected_dishes:\\n            total += dish[\\\"price\\\"] * dish[\\\"count\\\"] * self.sales[dish[\\\"dish\\\"]]\\n        return total\\n\\n    def checkout(self):\\n        \\\"\\\"\\\"\\n        Finalizes the order by calculating the total cost and clearing the selected dishes list.\\n\\n        Returns:\\n            float: The total cost of the order if there are selected dishes, False otherwise.\\n        \\n        Test cases:\\n            # Test case 1: Checking out with selected dishes\\n            order = Order()\\n            order.selected_dishes = [{\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}]\\n            order.sales = {\\\"Pizza\\\": 1.0}\\n            assert order.checkout() == 20.0\\n            \\n            # Test case 2: Checking out with no selected dishes\\n            order = Order()\\n            assert order.checkout() == False\\n            \\n            # Test case 3: Checking out with multiple dishes\\n            order = Order()\\n            order.selected_dishes = [{\\\"dish\\\": \\\"Pizza\\\", \\\"count\\\": 2, \\\"price\\\": 10}, {\\\"dish\\\": \\\"Burger\\\", \\\"count\\\": 1, \\\"price\\\": 8}]\\n            order.sales = {\\\"Pizza\\\": 0.8, \\\"Burger\\\": 1.0}\\n            assert order.checkout() == 24.0\\n        \\\"\\\"\\\"\\n        if len(self.selected_dishes) == 0:\\n            return False\\n        total = self.calculate_total()\\n        self.selected_dishes = []\\n        return total\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194704,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1140,\n    \"prompt_tokens\": 1302,\n    \"total_tokens\": 2442,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 342\n  }\n}", "test_case_name": "OrderManagement.txt"}