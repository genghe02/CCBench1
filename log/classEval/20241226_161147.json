{"response body": {"id": "941e3a9c-1845-41fd-872a-470d341d2f94", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:11:50", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n\"\"\"\nThis class provides a set of static methods for performing basic statistical calculations on a dataset.\n\"\"\"\n\nimport math\n\nclass Statistics3:\n    @staticmethod\n    def median(data):\n        \"\"\"\n        Calculate the median of a dataset.\n        \n        Parameters:\n            data (list): A list of numeric values\n            \n        Returns:\n            float: The median of the dataset\n        \n        Test cases:\n            # Test case 1: Odd number of data points\n            assert median([1, 2, 3]) == 2\n            \n            # Test case 2: Even number of data points\n            assert median([1, 2, 3, 4]) == 2.5\n            \n            # Test case 3: Empty dataset\n            assert median([]) == None\n        \"\"\"\n        sorted_data = sorted(data)\n        n = len(sorted_data)\n        if n % 2 == 1:\n            return sorted_data[n // 2]\n        else:\n            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2\n\n    @staticmethod\n    def mode(data):\n        \"\"\"\n        Calculate the mode(s) of a dataset.\n        \n        Parameters:\n            data (list): A list of numeric values\n            \n        Returns:\n            list: A list of the mode(s) of the dataset\n        \n        Test cases:\n            # Test case 1: Single mode\n            assert mode([1, 2, 2, 3]) == [2]\n            \n            # Test case 2: Multiple modes\n            assert mode([1, 2, 2, 3, 3]) == [2, 3]\n            \n            # Test case 3: No mode\n            assert mode([1, 2, 3, 4]) == []\n        \"\"\"\n        counts = {}\n        for value in data:\n            counts[value] = counts.get(value, 0) + 1\n        max_count = max(counts.values())\n        mode_values = [value for value, count in counts.items() if count == max_count]\n        return mode_values\n\n    @staticmethod\n    def correlation(x, y):\n        \"\"\"\n        Calculate the correlation between two datasets.\n        \n        Parameters:\n            x (list): A list of numeric values\n            y (list): A list of numeric values\n            \n        Returns:\n            float: The correlation between x and y, or None if the correlation cannot be calculated\n        \n        Test cases:\n            # Test case 1: Positive correlation\n            assert correlation([1, 2, 3], [2, 4, 6]) == 1.0\n            \n            # Test case 2: No correlation\n            assert correlation([1, 2, 3], [2, 3, 2]) == 0.0\n            \n            # Test case 3: Negative correlation\n            assert correlation([1, 2, 3], [3, 2, 1]) == -1.0\n        \"\"\"\n        n = len(x)\n        mean_x = sum(x) / n\n        mean_y = sum(y) / n\n        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))\n        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))\n        if denominator == 0:\n            return None\n        return numerator / denominator\n\n    @staticmethod\n    def mean(data):\n        \"\"\"\n        Calculate the mean of a dataset.\n        \n        Parameters:\n            data (list): A list of numeric values\n            \n        Returns:\n            float: The mean of the dataset, or None if the dataset is empty\n        \n        Test cases:\n            # Test case 1: Normal case\n            assert mean([1, 2, 3]) == 2.0\n            \n            # Test case 2: Empty dataset\n            assert mean([]) == None\n        \"\"\"\n        if len(data) == 0:\n            return None\n        return sum(data) / len(data)\n\n    @staticmethod\n    def correlation_matrix(data):\n        \"\"\"\n        Calculate the correlation matrix for a dataset.\n        \n        Parameters:\n            data (list): A list of lists of numeric values\n            \n        Returns:\n            list: A correlation matrix for the dataset\n        \n        Test cases:\n            # Test case 1: Normal case\n            input = [[1, 2, 3], [2, 4, 6], [3, 6, 9]]\n            expected_output = [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n            assert correlation_matrix(input) == expected_output\n            \n            # Test case 2: Single column\n            input = [[1], [2], [3]]\n            expected_output = [[1.0]]\n            assert correlation_matrix(input) == expected_output\n            \n            # Test case 3: No correlation\n            input = [[1, 2, 3], [3, 2, 1]]\n            expected_output = [[1.0, -1.0], [-1.0, 1.0]]\n            assert correlation_matrix(input) == expected_output\n        \"\"\"\n        matrix = []\n        for i in range(len(data[0])):\n            row = []\n            for j in range(len(data[0])):\n                column1 = [row[i] for row in data]\n                column2 = [row[j] for row in data]\n                correlation = Statistics3.correlation(column1, column2)\n                row.append(correlation)\n            matrix.append(row)\n        return matrix\n\n    @staticmethod\n    def standard_deviation(data):\n        \"\"\"\n        Calculate the standard deviation of a dataset.\n        \n        Parameters:\n            data (list): A list of numeric values\n            \n        Returns:\n            float: The standard deviation of the dataset, or None if the dataset contains less than 2 data points\n        \n        Test cases:\n            # Test case 1: Normal case\n            assert standard_deviation([1, 2, 3]) == 1.0\n            \n            # Test case 2: Single data point\n            assert standard_deviation([1]) == None\n            \n            # Test case 3: No deviation\n            assert standard_deviation([1, 1, 1]) == 0.0\n        \"\"\"\n        n = len(data)\n        if n < 2:\n            return None\n        mean_value = Statistics3.mean(data)\n        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)\n        return math.sqrt(variance)\n\n    @staticmethod\n    def z_score(data):\n        \"\"\"\n        Calculate the z-scores of a dataset.\n        \n        Parameters:\n            data (list): A list of numeric values\n            \n        Returns:\n            list: A list of z-scores, or None if the standard deviation is 0 or cannot be calculated\n        \n        Test cases:\n            # Test case 1: Normal case\n            assert z_score([1, 2, 3]) == [-1.0, 0.0, 1.0]\n            \n            # Test case 2: Single data point\n            assert z_score([1]) == None\n            \n            # Test case 3: No deviation\n            assert z_score([1, 1, 1]) == None\n        \"\"\"\n        mean = Statistics3.mean(data)\n        std_deviation = Statistics3.standard_deviation(data)\n        if std_deviation is None or std_deviation == 0:\n            return None\n        return [(x - mean) / std_deviation for x in data]\n```"}}], "usage": {"completion_tokens": 1621, "prompt_tokens": 1696, "total_tokens": 3317}, "feeType": "1", "consume": 2.152968}, "test_case_name": "Statistics3.txt"}