{"response body": "{\n  \"id\": \"3af4f7e2-1daa-4ded-9128-f1a76a380493\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides a dictionary-like structure that automatically converts keys to camelCase format.\\nIt allows for case-insensitive key access and manipulation, ensuring that keys are stored in a consistent format.\\n\\\"\\\"\\\"\\n\\nclass CamelCaseMap:\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initializes an empty CamelCaseMap instance.\\n        \\\"\\\"\\\"\\n        self._data = {}\\n\\n    def __getitem__(self, key):\\n        \\\"\\\"\\\"\\n        Retrieves the value associated with the given key after converting it to camelCase.\\n\\n        Parameters:\\n            key (str): The key to retrieve the value for. It will be converted to camelCase.\\n\\n        Returns:\\n            The value associated with the converted key.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            m['my_key'] = 42\\n            assert m['my_key'] == 42\\n\\n            # Test case 2: Key with underscores\\n            m['another_key'] = 100\\n            assert m['anotherKey'] == 100\\n\\n            # Test case 3: Key not in map\\n            try:\\n                m['nonexistent_key']\\n            except KeyError:\\n                pass\\n        \\\"\\\"\\\"\\n        return self._data[self._convert_key(key)]\\n\\n    def __setitem__(self, key, value):\\n        \\\"\\\"\\\"\\n        Sets the value for the given key after converting it to camelCase.\\n\\n        Parameters:\\n            key (str): The key to set the value for. It will be converted to camelCase.\\n            value: The value to associate with the key.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            m['my_key'] = 42\\n            assert m['myKey'] == 42\\n\\n            # Test case 2: Overwriting existing key\\n            m['my_key'] = 100\\n            assert m['myKey'] == 100\\n\\n            # Test case 3: Non-string key\\n            m[123] = 'value'\\n            assert m[123] == 'value'\\n        \\\"\\\"\\\"\\n        self._data[self._convert_key(key)] = value\\n\\n    def __delitem__(self, key):\\n        \\\"\\\"\\\"\\n        Deletes the key-value pair associated with the given key after converting it to camelCase.\\n\\n        Parameters:\\n            key (str): The key to delete. It will be converted to camelCase.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            m['my_key'] = 42\\n            del m['my_key']\\n            assert 'myKey' not in m\\n\\n            # Test case 2: Deleting non-existent key\\n            try:\\n                del m['nonexistent_key']\\n            except KeyError:\\n                pass\\n\\n            # Test case 3: Deleting non-string key\\n            m[123] = 'value'\\n            del m[123]\\n            assert 123 not in m\\n        \\\"\\\"\\\"\\n        del self._data[self._convert_key(key)]\\n\\n    def __iter__(self):\\n        \\\"\\\"\\\"\\n        Returns an iterator over the keys in the map.\\n\\n        Returns:\\n            iterator: An iterator over the keys in the map.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            m['my_key'] = 42\\n            m['another_key'] = 100\\n            keys = list(m)\\n            assert set(keys) == {'myKey', 'anotherKey'}\\n\\n            # Test case 2: Empty map\\n            m = CamelCaseMap()\\n            assert list(m) == []\\n\\n            # Test case 3: Non-string keys\\n            m[123] = 'value'\\n            m[456] = 'another_value'\\n            assert set(m) == {123, 456}\\n        \\\"\\\"\\\"\\n        return iter(self._data)\\n\\n    def __len__(self):\\n        \\\"\\\"\\\"\\n        Returns the number of key-value pairs in the map.\\n\\n        Returns:\\n            int: The number of key-value pairs in the map.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            m['my_key'] = 42\\n            m['another_key'] = 100\\n            assert len(m) == 2\\n\\n            # Test case 2: Empty map\\n            m = CamelCaseMap()\\n            assert len(m) == 0\\n\\n            # Test case 3: Non-string keys\\n            m[123] = 'value'\\n            m[456] = 'another_value'\\n            assert len(m) == 2\\n        \\\"\\\"\\\"\\n        return len(self._data)\\n\\n    def _convert_key(self, key):\\n        \\\"\\\"\\\"\\n        Converts the given key to camelCase if it is a string.\\n\\n        Parameters:\\n            key (str): The key to convert to camelCase.\\n\\n        Returns:\\n            str: The key in camelCase format, or the original key if it is not a string.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            m = CamelCaseMap()\\n            assert m._convert_key('my_key') == 'myKey'\\n\\n            # Test case 2: Non-string key\\n            assert m._convert_key(123) == 123\\n\\n            # Test case 3: Already camelCase\\n            assert m._convert_key('myKey') == 'myKey'\\n        \\\"\\\"\\\"\\n        if isinstance(key, str):\\n            return self._to_camel_case(key)\\n        return key\\n\\n    @staticmethod\\n    def _to_camel_case(key):\\n        \\\"\\\"\\\"\\n        Converts a snake_case string to camelCase.\\n\\n        Parameters:\\n            key (str): The snake_case string to convert.\\n\\n        Returns:\\n            str: The string in camelCase format.\\n\\n        Test cases:\\n            # Test case 1: Normal usage\\n            assert CamelCaseMap._to_camel_case('my_key') == 'myKey'\\n\\n            # Test case 2: Multiple underscores\\n            assert CamelCaseMap._to_camel_case('my_long_key') == 'myLongKey'\\n\\n            # Test case 3: No underscores\\n            assert CamelCaseMap._to_camel_case('mykey') == 'mykey'\\n        \\\"\\\"\\\"\\n        parts = key.split('_')\\n        return parts[0] + ''.join(part.title() for part in parts[1:])\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735193742,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1311,\n    \"prompt_tokens\": 1362,\n    \"total_tokens\": 2673,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 402\n  }\n}", "test_case_name": "CamelCaseMap.txt"}