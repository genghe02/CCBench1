{"response body": "{\n  \"id\": \"fc138c59-7175-4b9d-8796-9d75825a2d2a\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nclass StockPortfolioTracker:\\n    # This class is designed to track a stock portfolio, including managing cash balance, adding and removing stocks, and calculating portfolio values.\\n    \\n    def __init__(self, cash_balance):\\n        # Initialize the portfolio tracker with a given cash balance.\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        # Add a stock to the portfolio or update the quantity if the stock already exists.\\n        # param stock: dict, containing details of the stock to be added (name, quantity, price)\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 5, 'price': 150})\\n        for pf in self.portfolio:\\n            if pf['name'] == stock['name']:\\n                pf['quantity'] += stock['quantity']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        # Remove a specified quantity of a stock from the portfolio.\\n        # param stock: dict, containing details of the stock to be removed (name, quantity)\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 5})\\n        # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 6})\\n        for pf in self.portfolio:\\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\\n                pf['quantity'] -= stock['quantity']\\n                if pf['quantity'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        # Attempt to buy a stock if the cash balance allows it.\\n        # param stock: dict, containing details of the stock to be bought (name, quantity, price)\\n        # return: bool, True if the purchase is successful, False otherwise\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 5, 'price': 150})\\n        # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        if stock['price'] * stock['quantity'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock['price'] * stock['quantity']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        # Attempt to sell a stock and update the cash balance.\\n        # param stock: dict, containing details of the stock to be sold (name, quantity, price)\\n        # return: bool, True if the sale is successful, False otherwise\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 5, 'price': 150})\\n        # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 6, 'price': 150})\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock['price'] * stock['quantity']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        # Calculate the total value of the portfolio including cash balance.\\n        # return: float, the total value of the portfolio\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.calculate_portfolio_value()\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock['price'] * stock['quantity']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        # Get a summary of the portfolio including the value of each stock and the total portfolio value.\\n        # return: tuple, (float, list), the total portfolio value and a list of stock summaries\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.get_portfolio_summary()\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\\\"name\\\": stock[\\\"name\\\"], \\\"value\\\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        # Calculate the total value of a specific stock in the portfolio.\\n        # param stock: dict, containing details of the stock (name, quantity, price)\\n        # return: float, the total value of the stock\\n        # >>> tracker = StockPortfolioTracker(1000)\\n        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        # >>> tracker.get_stock_value({'name': 'AAPL', 'quantity': 10, 'price': 150})\\n        return stock['price'] * stock['quantity']\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727079923,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1370,\n    \"prompt_tokens\": 1274,\n    \"total_tokens\": 2644,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 698\n  }\n}", "test_case_name": "StockPortfolioTracker.txt"}