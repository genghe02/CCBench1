{"response body": "ChatCompletion(id='chatcmpl-Aihdlie3QSJonPWnTSQBsaeiJLycB', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class allows tracking a stock portfolio, adding, removing, buying, and selling stocks, and calculating the total portfolio value.\\n\\nThe main purpose of this class is to facilitate managing a stock portfolio, including buying and selling stocks, calculating total portfolio value, and generating a portfolio summary.\\n\"\"\"\\n\\nclass StockPortfolioTracker:\\n    def __init__(self, cash_balance):\\n        \"\"\"\\n        Initialize the stock portfolio tracker with a cash balance.\\n\\n        Parameters:\\n            cash_balance (float): The initial cash balance in the portfolio.\\n        \"\"\"\\n        self.portfolio = []\\n        self.cash_balance = cash_balance\\n\\n    def add_stock(self, stock):\\n        \"\"\"\\n        Add a stock to the portfolio or update quantity if it already exists.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock information (name, price, quantity).\\n\\n        Test cases:\\n            # Test case 1: Add new stock\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 150.0, \\'quantity\\': 10}\\n            add_stock(input_stock)\\n            assert portfolio contains input_stock\\n\\n            # Test case 2: Update existing stock quantity\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 152.0, \\'quantity\\': 5}\\n            add_stock(input_stock)\\n            assert portfolio stock quantity updated\\n\\n            # Test case 3: Empty stock information\\n            input_stock = {}\\n            add_stock(input_stock)\\n            assert portfolio not modified\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\']:\\n                pf[\\'quantity\\'] += stock[\\'quantity\\']\\n                return\\n\\n        self.portfolio.append(stock)\\n\\n    def remove_stock(self, stock):\\n        \"\"\"\\n        Remove stock from the portfolio or update quantity if there are enough stocks.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock information (name, price, quantity).\\n\\n        Returns:\\n            bool: True if stock was successfully removed, False otherwise.\\n\\n        Test cases:\\n            # Test case 1: Stock with enough quantity for removal\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 150.0, \\'quantity\\': 5}\\n            remove_stock(input_stock)\\n            assert stock quantity reduced in portfolio\\n\\n            # Test case 2: Stock with insufficient quantity for removal\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 150.0, \\'quantity\\': 20}\\n            remove_stock(input_stock)\\n            assert stock not removed\\n\\n            # Test case 3: Non-existent stock removal\\n            input_stock = {\\'name\\': \\'GOOGL\\', \\'price\\': 2000.0, \\'quantity\\': 10}\\n            remove_stock(input_stock)\\n            assert stock not removed\\n        \"\"\"\\n        for pf in self.portfolio:\\n            if pf[\\'name\\'] == stock[\\'name\\'] and pf[\\'quantity\\'] >= stock[\\'quantity\\']:\\n                pf[\\'quantity\\'] -= stock[\\'quantity\\']\\n                if pf[\\'quantity\\'] == 0:\\n                    self.portfolio.remove(pf)\\n                return True\\n        return False\\n\\n    def buy_stock(self, stock):\\n        \"\"\"\\n        Buy a stock and add it to the portfolio if there are enough funds.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock information (name, price, quantity).\\n\\n        Returns:\\n            bool: True if stock was successfully bought, False if there are insufficient funds.\\n\\n        Test cases:\\n            # Test case 1: Sufficient funds for buying stock\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 150.0, \\'quantity\\': 5}\\n            remaining_balance_before = cash_balance\\n            buy_stock(input_stock)\\n            assert stock added to portfolio and balance adjusted correctly\\n\\n            # Test case 2: Insufficient funds for buying stock\\n            input_stock = {\\'name\\': \\'GOOGL\\', \\'price\\': 2000.0, \\'quantity\\': 1}\\n            remaining_balance_before = cash_balance\\n            buy_stock(input_stock)\\n            assert stock not added and balance not deducted\\n\\n            # Test case 3: Non-existent stock purchase attempt\\n            input_stock = {}\\n            buy_stock(input_stock)\\n            assert no change in portfolio or balance\\n        \"\"\"\\n        if stock[\\'price\\'] * stock[\\'quantity\\'] > self.cash_balance:\\n            return False\\n        else:\\n            self.add_stock(stock)\\n            self.cash_balance -= stock[\\'price\\'] * stock[\\'quantity\\']\\n            return True\\n\\n    def sell_stock(self, stock):\\n        \"\"\"\\n        Sell a stock from the portfolio and update cash balance accordingly.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock information (name, price, quantity).\\n\\n        Returns:\\n            bool: True if stock was successfully sold, False if the stock is not available.\\n\\n        Test cases:\\n            # Test case 1: Sell existing stock\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 160.0, \\'quantity\\': 3}\\n            sell_stock(input_stock)\\n            assert stock sold and balance updated\\n\\n            # Test case 2: Attempt to sell non-existent stock\\n            input_stock = {\\'name\\': \\'GOOGL\\', \\'price\\': 2100.0, \\'quantity\\': 4}\\n            sell_stock(input_stock)\\n            assert no change in portfolio or balance\\n\\n            # Test case 3: Sell more than available quantity\\n            input_stock = {\\'name\\': \\'AAPL\\', \\'price\\': 175.0, \\'quantity\\': 20}\\n            sell_stock(input_stock)\\n            assert no change in portfolio or balance\\n        \"\"\"\\n        if self.remove_stock(stock) == False:\\n            return False\\n        self.cash_balance += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return True\\n\\n    def calculate_portfolio_value(self):\\n        \"\"\"\\n        Calculate the total value of the stock portfolio including cash balance.\\n\\n        Returns:\\n            float: Total value of the stock portfolio.\\n\\n        Test cases:\\n            # Test case 1: Portfolio with multiple stocks\\n            calculate_portfolio_value()\\n            assert total portfolio value calculated correctly\\n\\n            # Test case 2: Portfolio with no stocks\\n            calculate_portfolio_value()\\n            assert total value equals the initial cash balance\\n\\n            # Test case 3: Portfolio with negative balance\\n            calculate_portfolio_value()\\n            assert total value is negative\\n        \"\"\"\\n        total_value = self.cash_balance\\n        for stock in self.portfolio:\\n            total_value += stock[\\'price\\'] * stock[\\'quantity\\']\\n        return total_value\\n\\n    def get_portfolio_summary(self):\\n        \"\"\"\\n        Generate a summary of the stock portfolio showing individual stock values and total portfolio value.\\n\\n        Returns:\\n            float, list: Tuple containing the total portfolio value and a list of stock summaries.\\n\\n        Test cases:\\n            # Test case 1: Portfolio summary generation\\n            get_portfolio_summary()\\n            assert portfolio summary contains all stocks and total value\\n\\n            # Test case 2: Empty portfolio summary\\n            get_portfolio_summary()\\n            assert portfolio summary has zero value and empty stock summary\\n\\n            # Test case 3: Portfolio summary with single stock\\n            get_portfolio_summary()\\n            assert portfolio and stock summary are correct\\n        \"\"\"\\n        summary = []\\n        for stock in self.portfolio:\\n            value = self.get_stock_value(stock)\\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\\n        portfolio_value = self.calculate_portfolio_value()\\n        return portfolio_value, summary\\n\\n    def get_stock_value(self, stock):\\n        \"\"\"\\n        Calculate the total value of a specific stock in the portfolio.\\n\\n        Parameters:\\n            stock (dict): A dictionary containing stock information (name, price, quantity).\\n\\n        Returns:\\n            float: Total value of the given stock.\\n\\n        Test cases:\\n            # Test case 1: Stock value calculation\\n            get_stock_value(stock)\\n            assert calculated stock value is correct\\n\\n            # Test case 2: Stock with zero quantity value\\n            get_stock_value(stock)\\n            assert calculated value is zero\\n\\n            # Test case 3: Stock with negative price\\n            get_stock_value(stock)\\n            assert negative value calculated\\n        \"\"\"\\n        return stock[\\'price\\'] * stock[\\'quantity\\']', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735217549, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1657, prompt_tokens=1523, total_tokens=3180, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "StockPortfolioTracker.txt"}