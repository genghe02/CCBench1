{"response body": "ChatCompletion(id='chatcmpl-AihRLvY6quMqm7wZKFOryiOLUPP5J', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='\"\"\"\\nThis class represents a Currency Converter that allows conversion between different currencies based on exchange rates.\\n\\nIt provides methods for converting amounts from one currency to another, accessing supported currencies, adding new currency exchange rates, and updating existing rates.\\n\"\"\"\\n\\nclass CurrencyConverter:\\n    \\n    def __init__(self):\\n        \"\"\"\\n        Initialize the CurrencyConverter object with default exchange rates.\\n        \"\"\"\\n\\n        self.rates = {\\n            \\'USD\\': 1.0,\\n            \\'EUR\\': 0.85,\\n            \\'GBP\\': 0.72,\\n            \\'JPY\\': 110.15,\\n            \\'CAD\\': 1.23,\\n            \\'AUD\\': 1.34,\\n            \\'CNY\\': 6.40,\\n        }\\n\\n    def convert(self, amount, from_currency, to_currency):\\n        \"\"\"\\n        Convert an amount from one currency to another based on exchange rates.\\n\\n        Parameters:\\n            amount (float): The amount to convert\\n            from_currency (str): The currency code to convert from\\n            to_currency (str): The currency code to convert to\\n            \\n        Returns:\\n            float: The converted amount in the target currency\\n        \\n        Test cases:\\n            # Test case 1: Convert from USD to EUR\\n            assert convert(100.0, \\'USD\\', \\'EUR\\') == 85.0\\n            \\n            # Test case 2: Convert from GBP to CAD\\n            assert convert(50.0, \\'GBP\\', \\'CAD\\') == 86.80555555555554\\n            \\n            # Test case 3: Invalid currency conversion\\n            assert convert(100.0, \\'USD\\', \\'XYZ\\') == False\\n\\n        if from_currency == to_currency:\\n            return amount\\n\\n        if from_currency not in self.rates or to_currency not in self.rates:\\n            return False\\n\\n        from_rate = self.rates[from_currency]\\n        to_rate = self.rates[to_currency]\\n\\n        converted_amount = (amount / from_rate) * to_rate\\n        return converted_amount\\n\\n    def get_supported_currencies(self):\\n        \"\"\"\\n        Get a list of all supported currency codes.\\n        \\n        Returns:\\n            list: A list of supported currency codes\\n        \\n        Test cases:\\n            # Test case 1: Check supported currencies\\n            assert get_supported_currencies() == [\\'USD\\', \\'EUR\\', \\'GBP\\', \\'JPY\\', \\'CAD\\', \\'AUD\\', \\'CNY\\']\\n            \\n            # Test case 2: Add new currency rate\\n            add_currency_rate(\\'BTC\\', 55000.0)\\n            assert get_supported_currencies() == [\\'USD\\', \\'EUR\\', \\'GBP\\', \\'JPY\\', \\'CAD\\', \\'AUD\\', \\'CNY\\', \\'BTC\\']\\n            \\n            # Test case 3: Check with no supported currencies\\n            assert get_supported_currencies() != []\\n\\n        return list(self.rates.keys())\\n\\n    def add_currency_rate(self, currency, rate):\\n        \"\"\"\\n        Add a new currency exchange rate to the converter.\\n        \\n        Parameters:\\n            currency (str): The code of the new currency\\n            rate (float): The exchange rate against USD\\n        \\n        Returns:\\n            bool: True if the rate was added successfully, False otherwise\\n        \\n        Test cases:\\n            # Test case 1: Add new currency rate\\n            assert add_currency_rate(\\'BTC\\', 55000.0) == True\\n            \\n            # Test case 2: Add existing currency rate\\n            assert add_currency_rate(\\'USD\\', 1.0) == False\\n            \\n            # Test case 3: Add incorrect rate\\n            assert add_currency_rate(\\'XYZ\\', -1) == False\\n\\n        if currency in self.rates:\\n            return False\\n        self.rates[currency] = rate\\n        return True\\n\\n    def update_currency_rate(self, currency, new_rate):\\n        \"\"\"\\n        Update the exchange rate of an existing currency in the converter.\\n        \\n        Parameters:\\n            currency (str): The code of the currency to update\\n            new_rate (float): The new exchange rate against USD\\n        \\n        Returns:\\n            bool: True if the rate was updated successfully, False otherwise\\n        \\n        Test cases:\\n            # Test case 1: Update existing currency rate\\n            assert update_currency_rate(\\'EUR\\', 0.80) == True\\n            \\n            # Test case 2: Update non-existent currency rate\\n            assert update_currency_rate(\\'XYZ\\', 2.0) == False\\n            \\n            # Test case 3: Update with negative rate\\n            assert update_currency_rate(\\'JPY\\', -1) == False\\n\\n        if currency not in self.rates:\\n            return False\\n        self.rates[currency] = new_rate\\n        return True\\n\"\"\"', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None))], created=1735216779, model='gpt-3.5-turbo-0125', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=946, prompt_tokens=1341, total_tokens=2287, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))", "test_case_name": "CurrencyConverter.txt"}