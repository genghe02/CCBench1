{"response body": "{\n  \"id\": \"26d5486b-1d10-4e5e-b945-26bde4d58a44\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n\\\"\\\"\\\"\\nThis class provides a utility for generating SQL queries dynamically based on the provided table name and various conditions.\\nIt supports common SQL operations such as SELECT, INSERT, UPDATE, DELETE, and custom queries like selecting females under a certain age or selecting records within an age range.\\n\\\"\\\"\\\"\\n\\nclass SQLGenerator:\\n    def __init__(self, table_name):\\n        \\\"\\\"\\\"\\n        Initializes the SQLGenerator with the specified table name.\\n\\n        Parameters:\\n            table_name (str): The name of the table to generate SQL queries for.\\n        \\\"\\\"\\\"\\n        self.table_name = table_name\\n\\n    def select(self, fields=None, condition=None):\\n        \\\"\\\"\\\"\\n        Generates a SELECT SQL query.\\n\\n        Parameters:\\n            fields (list, optional): List of fields to select. Defaults to \\\"*\\\" (all fields).\\n            condition (str, optional): Condition to filter the records. Defaults to None.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Select all fields without condition\\n            generator = SQLGenerator('users')\\n            assert generator.select() == \\\"SELECT * FROM users;\\\"\\n\\n            # Test case 2: Select specific fields with condition\\n            assert generator.select(fields=['name', 'age'], condition='age > 30') == \\\"SELECT name, age FROM users WHERE age > 30;\\\"\\n\\n            # Test case 3: Select all fields with condition\\n            assert generator.select(condition='gender = \\\"male\\\"') == \\\"SELECT * FROM users WHERE gender = \\\\\\\"male\\\\\\\";\\\"\\n        \\\"\\\"\\\"\\n        if fields is None:\\n            fields = \\\"*\\\"\\n        else:\\n            fields = \\\", \\\".join(fields)\\n        sql = f\\\"SELECT {fields} FROM {self.table_name}\\\"\\n        if condition is not None:\\n            sql += f\\\" WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def insert(self, data):\\n        \\\"\\\"\\\"\\n        Generates an INSERT SQL query.\\n\\n        Parameters:\\n            data (dict): Dictionary where keys are field names and values are the corresponding values to insert.\\n\\n        Returns:\\n            str: The generated INSERT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Insert a single record\\n            generator = SQLGenerator('users')\\n            assert generator.insert({'name': 'John', 'age': 30}) == \\\"INSERT INTO users (name, age) VALUES ('John', '30');\\\"\\n\\n            # Test case 2: Insert multiple fields\\n            assert generator.insert({'name': 'Jane', 'age': 25, 'gender': 'female'}) == \\\"INSERT INTO users (name, age, gender) VALUES ('Jane', '25', 'female');\\\"\\n\\n            # Test case 3: Insert with empty data\\n            assert generator.insert({}) == \\\"INSERT INTO users () VALUES ();\\\"\\n        \\\"\\\"\\\"\\n        fields = \\\", \\\".join(data.keys())\\n        values = \\\", \\\".join([f\\\"'{value}'\\\" for value in data.values()])\\n        sql = f\\\"INSERT INTO {self.table_name} ({fields}) VALUES ({values})\\\"\\n        return sql + \\\";\\\"\\n\\n    def update(self, data, condition):\\n        \\\"\\\"\\\"\\n        Generates an UPDATE SQL query.\\n\\n        Parameters:\\n            data (dict): Dictionary where keys are field names and values are the new values to update.\\n            condition (str): Condition to specify which records to update.\\n\\n        Returns:\\n            str: The generated UPDATE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Update a single field\\n            generator = SQLGenerator('users')\\n            assert generator.update({'age': 31}, 'name = \\\"John\\\"') == \\\"UPDATE users SET age = '31' WHERE name = \\\\\\\"John\\\\\\\";\\\"\\n\\n            # Test case 2: Update multiple fields\\n            assert generator.update({'age': 26, 'gender': 'female'}, 'name = \\\"Jane\\\"') == \\\"UPDATE users SET age = '26', gender = 'female' WHERE name = \\\\\\\"Jane\\\\\\\";\\\"\\n\\n            # Test case 3: Update with empty data\\n            assert generator.update({}, 'name = \\\"John\\\"') == \\\"UPDATE users SET  WHERE name = \\\\\\\"John\\\\\\\";\\\"\\n        \\\"\\\"\\\"\\n        set_clause = \\\", \\\".join([f\\\"{field} = '{value}'\\\" for field, value in data.items()])\\n        sql = f\\\"UPDATE {self.table_name} SET {set_clause} WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def delete(self, condition):\\n        \\\"\\\"\\\"\\n        Generates a DELETE SQL query.\\n\\n        Parameters:\\n            condition (str): Condition to specify which records to delete.\\n\\n        Returns:\\n            str: The generated DELETE SQL query.\\n\\n        Test cases:\\n            # Test case 1: Delete with a simple condition\\n            generator = SQLGenerator('users')\\n            assert generator.delete('age > 30') == \\\"DELETE FROM users WHERE age > 30;\\\"\\n\\n            # Test case 2: Delete with a complex condition\\n            assert generator.delete('name = \\\"John\\\" AND age < 30') == \\\"DELETE FROM users WHERE name = \\\\\\\"John\\\\\\\" AND age < 30;\\\"\\n\\n            # Test case 3: Delete without condition (should be handled carefully in practice)\\n            assert generator.delete('') == \\\"DELETE FROM users WHERE ;\\\"\\n        \\\"\\\"\\\"\\n        sql = f\\\"DELETE FROM {self.table_name} WHERE {condition}\\\"\\n        return sql + \\\";\\\"\\n\\n    def select_female_under_age(self, age):\\n        \\\"\\\"\\\"\\n        Generates a SELECT SQL query to fetch female records under a specified age.\\n\\n        Parameters:\\n            age (int): The age threshold.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Select females under 30\\n            generator = SQLGenerator('users')\\n            assert generator.select_female_under_age(30) == \\\"SELECT * FROM users WHERE age < 30 AND gender = 'female';\\\"\\n\\n            # Test case 2: Select females under 25\\n            assert generator.select_female_under_age(25) == \\\"SELECT * FROM users WHERE age < 25 AND gender = 'female';\\\"\\n\\n            # Test case 3: Select females under 0 (edge case)\\n            assert generator.select_female_under_age(0) == \\\"SELECT * FROM users WHERE age < 0 AND gender = 'female';\\\"\\n        \\\"\\\"\\\"\\n        condition = f\\\"age < {age} AND gender = 'female'\\\"\\n        return self.select(condition=condition)\\n\\n    def select_by_age_range(self, min_age, max_age):\\n        \\\"\\\"\\\"\\n        Generates a SELECT SQL query to fetch records within a specified age range.\\n\\n        Parameters:\\n            min_age (int): The minimum age of the range.\\n            max_age (int): The maximum age of the range.\\n\\n        Returns:\\n            str: The generated SELECT SQL query.\\n\\n        Test cases:\\n            # Test case 1: Select records between 20 and 30\\n            generator = SQLGenerator('users')\\n            assert generator.select_by_age_range(20, 30) == \\\"SELECT * FROM users WHERE age BETWEEN 20 AND 30;\\\"\\n\\n            # Test case 2: Select records between 25 and 35\\n            assert generator.select_by_age_range(25, 35) == \\\"SELECT * FROM users WHERE age BETWEEN 25 AND 35;\\\"\\n\\n            # Test case 3: Select records between 0 and 10 (edge case)\\n            assert generator.select_by_age_range(0, 10) == \\\"SELECT * FROM users WHERE age BETWEEN 0 AND 10;\\\"\\n        \\\"\\\"\\\"\\n        condition = f\\\"age BETWEEN {min_age} AND {max_age}\\\"\\n        return self.select(condition=condition)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1735194939,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1a5c54ff19\",\n  \"usage\": {\n    \"completion_tokens\": 1582,\n    \"prompt_tokens\": 1492,\n    \"total_tokens\": 3074,\n    \"prompt_cache_hit_tokens\": 960,\n    \"prompt_cache_miss_tokens\": 532\n  }\n}", "test_case_name": "SQLGenerator.txt"}