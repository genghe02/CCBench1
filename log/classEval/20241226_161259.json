{"response body": {"id": "7f948cfe-e8f8-4684-beff-3716f8ed61d5", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:13:03", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThe StockPortfolioTracker class provides functionality to manage a stock portfolio. It allows adding and removing stocks, \nbuying and selling stocks, and also calculating the total portfolio value.\n\"\"\"\n\nclass StockPortfolioTracker:\n    def __init__(self, cash_balance):\n        \"\"\"\n        Initializes a new instance of the StockPortfolioTracker class.\n        \n        Parameters:\n            cash_balance (float): The initial cash balance of the portfolio.\n        \"\"\"\n        self.portfolio = []\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        \"\"\"\n        Adds a stock to the portfolio.\n        \n        Parameters:\n            stock (dict): A dictionary containing 'name', 'quantity' and 'price' of the stock.\n        \n        Test cases:\n            # Test case 1: Adding a new stock\n            portfolio.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150.0})\n\n            # Test case 2: Adding more of the same stock\n            portfolio.add_stock({'name': 'AAPL', 'quantity': 5, 'price': 150.0})\n\n            # Test case 3: Adding a different stock\n            portfolio.add_stock({'name': 'GOOG', 'quantity': 2, 'price': 1000.0})\n        \"\"\"\n        for pf in self.portfolio:\n            if pf['name'] == stock['name']:\n                pf['quantity'] += stock['quantity']\n                return\n\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        \"\"\"\n        Removes a stock from the portfolio.\n        \n        Parameters:\n            stock (dict): A dictionary containing 'name', 'quantity' and 'price' of the stock.\n        \n        Returns:\n            bool: True if the stock was successfully removed, False otherwise.\n            \n        Test cases:\n            # Test case 1: Removing a stock that is in the portfolio\n            portfolio.remove_stock({'name': 'AAPL', 'quantity': 5, 'price': 150.0})\n\n            # Test case 2: Removing more of a stock than is in the portfolio\n            portfolio.remove_stock({'name': 'AAPL', 'quantity': 100, 'price': 150.0})\n\n            # Test case 3: Removing a stock that is not in the portfolio\n            portfolio.remove_stock({'name': 'TSLA', 'quantity': 2, 'price': 500.0})\n        \"\"\"\n        for pf in self.portfolio:\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\n                pf['quantity'] -= stock['quantity']\n                if pf['quantity'] == 0:\n                    self.portfolio.remove(pf)\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        \"\"\"\n        Buys a stock and adds it to the portfolio.\n        \n        Parameters:\n            stock (dict): A dictionary containing 'name', 'quantity' and 'price' of the stock.\n        \n        Returns:\n            bool: True if the stock was successfully bought, False otherwise.\n            \n        Test cases:\n            # Test case 1: Buying a stock with sufficient cash balance\n            portfolio.buy_stock({'name': 'AAPL', 'quantity': 2, 'price': 150.0})\n\n            # Test case 2: Buying a stock with insufficient cash balance\n            portfolio.buy_stock({'name': 'GOOG', 'quantity': 10, 'price': 1000.0})\n\n            # Test case 3: Buying a negative quantity of a stock\n            portfolio.buy_stock({'name': 'AAPL', 'quantity': -2, 'price': 150.0})\n        \"\"\"\n        if stock['price'] * stock['quantity'] > self.cash_balance:\n            return False\n        else:\n            self.add_stock(stock)\n            self.cash_balance -= stock['price'] * stock['quantity']\n            return True\n\n    def sell_stock(self, stock):\n        \"\"\"\n        Sells a stock and removes it from the portfolio.\n        \n        Parameters:\n            stock (dict): A dictionary containing 'name', 'quantity' and 'price' of the stock.\n        \n        Returns:\n            bool: True if the stock was successfully sold, False otherwise.\n            \n        Test cases:\n            # Test case 1: Selling a stock that is in the portfolio\n            portfolio.sell_stock({'name': 'AAPL', 'quantity': 2, 'price': 150.0})\n\n            # Test case 2: Selling more of a stock than is in the portfolio\n            portfolio.sell_stock({'name': 'AAPL', 'quantity': 20, 'price': 150.0})\n\n            # Test case 3: Selling a stock that is not in the portfolio\n            portfolio.sell_stock({'name': 'TSLA', 'quantity': 2, 'price': 500.0})\n        \"\"\"\n        if self.remove_stock(stock) == False:\n            return False\n        self.cash_balance += stock['price'] * stock['quantity']\n        return True\n\n    def calculate_portfolio_value(self):\n        \"\"\"\n        Calculates the total value of the portfolio, including both stocks and cash.\n        \n        Returns:\n            float: The total value of the portfolio.\n            \n        Test cases:\n            # Test case 1: Calculating the value of an empty portfolio\n            portfolio.calculate_portfolio_value()\n\n            # Test case 2: Calculating the value of a portfolio with one stock\n            portfolio.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150.0})\n            portfolio.calculate_portfolio_value()\n\n            # Test case 3: Calculating the value of a portfolio with multiple stocks\n            portfolio.add_stock({'name': 'GOOG', 'quantity': 2, 'price': 1000.0})\n            portfolio.calculate_portfolio_value()\n        \"\"\"\n        total_value = self.cash_balance\n        for stock in self.portfolio:\n            total_value += stock['price'] * stock['quantity']\n        return total_value\n\n    def get_portfolio_summary(self):\n        \"\"\"\n        Gets a summary of the portfolio, including the value of each stock and the total portfolio value.\n        \n        Returns:\n            tuple: A tuple containing the total portfolio value and a list of dictionaries with the 'name' and 'value' of each stock.\n            \n        Test cases:\n            # Test case 1: Getting the summary of an empty portfolio\n            portfolio.get_portfolio_summary()\n\n            # Test case 2: Getting the summary of a portfolio with one stock\n            portfolio.add_stock({'name': 'AAPL', 'quantity': 10, 'price': 150.0})\n            portfolio.get_portfolio_summary()\n\n            # Test case 3: Getting the summary of a portfolio with multiple stocks\n            portfolio.add_stock({'name': 'GOOG', 'quantity': 2, 'price': 1000.0})\n            portfolio.get_portfolio_summary()\n        \"\"\"\n        summary = []\n        for stock in self.portfolio:\n            value = self.get_stock_value(stock)\n            summary.append({\"name\": stock[\"name\"], \"value\": value})\n        portfolio_value = self.calculate_portfolio_value()\n        return portfolio_value, summary\n\n    def get_stock_value(self, stock):\n        \"\"\"\n        Calculates the total value of a specific stock in the portfolio.\n        \n        Parameters:\n            stock (dict): A dictionary containing 'name', 'quantity' and 'price' of the stock.\n            \n        Returns:\n            float: The total value of the specified stock.\n            \n        Test cases:\n            # Test case 1: Calculating the value of a stock that is in the portfolio\n            portfolio.get_stock_value({'name': 'AAPL', 'quantity': 10, 'price': 150.0})\n\n            # Test case 2: Calculating the value of a stock that is not in the portfolio\n            portfolio.get_stock_value({'name': 'TSLA', 'quantity': 2, 'price': 500.0})\n\n            # Test case 3: Calculating the value of a negative quantity of a stock\n            portfolio.get_stock_value({'name': 'AAPL', 'quantity': -2, 'price': 150.0})\n        \"\"\"\n        return stock['price'] * stock['quantity']"}}], "usage": {"completion_tokens": 1702, "prompt_tokens": 1523, "total_tokens": 3225}, "feeType": "1", "consume": 2.148172}, "test_case_name": "StockPortfolioTracker.txt"}