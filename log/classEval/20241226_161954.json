{"response body": {"id": "1ee27b8b-e5d7-4728-97fe-1b3119b6d269", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 16:19:57", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides methods to interact with a user login SQLite database including operations such as insert, delete and validate user login.\n\"\"\"\n\nimport sqlite3\n\n\nclass UserLoginDB:\n    def __init__(self, db_name):\n        \"\"\"\n        Initializes the database connection and cursor.\n\n        Parameters:\n            db_name (str): The name of the SQLite database file.\n        \"\"\"\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n\n    def insert_user(self, username, password):\n        \"\"\"\n        Inserts a new user into the users table in the database.\n\n        Parameters:\n            username (str): The username of the new user.\n            password (str): The password of the new user.\n\n        Test cases:\n            # Test case 1: Inserting a new user\n            db.insert_user(\"test_user\", \"test_pass\")\n            \n            # Test case 2: Handling duplicate users\n            db.insert_user(\"test_user\", \"test_pass\")\n            \n            # Test case 3: Handling empty strings\n            db.insert_user(\"\", \"\")\n        \"\"\"\n        self.cursor.execute('''\n            INSERT INTO users (username, password)\n            VALUES (?, ?)\n        ''', (username, password))\n        self.connection.commit()\n\n    def search_user_by_username(self, username):\n        \"\"\"\n        Searches for a user in the users table by username.\n\n        Parameters:\n            username (str): The username of the user to search for.\n        \n        Returns:\n            tuple: A tuple containing the user's data if found, or None if not found.\n\n        Test cases:\n            # Test case 1: Searching for an existing user\n            user = db.search_user_by_username(\"test_user\")\n            \n            # Test case 2: Searching for a nonexistent user\n            user = db.search_user_by_username(\"nonexistent_user\")\n            \n            # Test case 3: Searching with an empty string\n            user = db.search_user_by_username(\"\")\n        \"\"\"\n        self.cursor.execute('''\n            SELECT * FROM users WHERE username = ?\n        ''', (username,))\n        user = self.cursor.fetchone()\n        return user\n\n    def delete_user_by_username(self, username):\n        \"\"\"\n        Deletes a user from the users table by username.\n\n        Parameters:\n            username (str): The username of the user to delete.\n\n        Test cases:\n            # Test case 1: Deleting an existing user\n            db.delete_user_by_username(\"test_user\")\n            \n            # Test case 2: Deleting a nonexistent user\n            db.delete_user_by_username(\"nonexistent_user\")\n            \n            # Test case 3: Deleting with an empty string\n            db.delete_user_by_username(\"\")\n        \"\"\"\n        self.cursor.execute('''\n            DELETE FROM users WHERE username = ?\n        ''', (username,))\n        self.connection.commit()\n\n    def validate_user_login(self, username, password):\n        \"\"\"\n        Validates a user's login by checking their username and password against the database.\n\n        Parameters:\n            username (str): The username of the user attempting to login.\n            password (str): The password of the user attempting to login.\n        \n        Returns:\n            bool: True if the login is valid, False otherwise.\n\n        Test cases:\n            # Test case 1: Validating a correct login\n            assert db.validate_user_login(\"test_user\", \"test_pass\") == True\n            \n            # Test case 2: Validating an incorrect password\n            assert db.validate_user_login(\"test_user\", \"wrong_pass\") == False\n            \n            # Test case 3: Validating a nonexistent user\n            assert db.validate_user_login(\"nonexistent_user\", \"test_pass\") == False\n        \"\"\"\n        user = self.search_user_by_username(username)\n        if user is not None and user[1] == password:\n            return True\n        return False\n"}}], "usage": {"completion_tokens": 770, "prompt_tokens": 1300, "total_tokens": 2070}, "feeType": "1", "consume": 1.23824}, "test_case_name": "UserLoginDB.txt"}