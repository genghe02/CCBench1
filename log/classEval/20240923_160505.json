{"response body": "{\n  \"id\": \"b77d61d8-ccdd-4388-9bb9-4c57e2f46654\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\nimport re\\nfrom collections import deque\\nfrom decimal import Decimal\\n\\n\\nclass ExpressionCalculator:\\n    # This class is designed to evaluate mathematical expressions by converting them to postfix notation and then calculating the result.\\n    def __init__(self):\\n        # Initialize the calculator with necessary data structures and operator priorities.\\n        self.postfix_stack = deque()\\n        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]\\n\\n    def calculate(self, expression):\\n        # Evaluate the given mathematical expression by converting it to postfix notation and then calculating the result.\\n        # param expression: str, the mathematical expression to be evaluated.\\n        # return: float, the result of the evaluated expression.\\n        # >>> calc = ExpressionCalculator()\\n        # >>> calc.calculate(\\\"3 + 5 * (2 - 8)\\\")\\n        # -22.0\\n        self.prepare(self.transform(expression))\\n\\n        result_stack = deque()\\n        self.postfix_stack.reverse()\\n\\n        while self.postfix_stack:\\n            current_op = self.postfix_stack.pop()\\n            if not self.is_operator(current_op):\\n                current_op = current_op.replace(\\\"~\\\", \\\"-\\\")\\n                result_stack.append(current_op)\\n            else:\\n                second_value = result_stack.pop()\\n                first_value = result_stack.pop()\\n\\n                first_value = first_value.replace(\\\"~\\\", \\\"-\\\")\\n                second_value = second_value.replace(\\\"~\\\", \\\"-\\\")\\n\\n                temp_result = self._calculate(first_value, second_value, current_op)\\n                result_stack.append(str(temp_result))\\n\\n        return float(eval(\\\"*\\\".join(result_stack)))\\n\\n    def prepare(self, expression):\\n        # Convert the given expression into postfix notation for easier evaluation.\\n        # param expression: str, the mathematical expression in infix notation.\\n        # >>> calc = ExpressionCalculator()\\n        # >>> calc.prepare(\\\"3 + 5 * (2 - 8)\\\")\\n        # deque(['3', '5', '2', '8', '-', '*', '+'])\\n        op_stack = deque([','])\\n        arr = list(expression)\\n        current_index = 0\\n        count = 0\\n\\n        for i, current_op in enumerate(arr):\\n            if self.is_operator(current_op):\\n                if count > 0:\\n                    self.postfix_stack.append(\\\"\\\".join(arr[current_index: current_index + count]))\\n                peek_op = op_stack[-1]\\n                if current_op == ')':\\n                    while op_stack[-1] != '(':\\n                        self.postfix_stack.append(str(op_stack.pop()))\\n                    op_stack.pop()\\n                else:\\n                    while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):\\n                        self.postfix_stack.append(str(op_stack.pop()))\\n                        peek_op = op_stack[-1]\\n                    op_stack.append(current_op)\\n\\n                count = 0\\n                current_index = i + 1\\n            else:\\n                count += 1\\n\\n        if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):\\n            self.postfix_stack.append(\\\"\\\".join(arr[current_index: current_index + count]))\\n\\n        while op_stack[-1] != ',':\\n            self.postfix_stack.append(str(op_stack.pop()))\\n\\n    @staticmethod\\n    def is_operator(c):\\n        # Check if the given character is a mathematical operator.\\n        # param c: str, the character to be checked.\\n        # return: bool, True if the character is an operator, False otherwise.\\n        # >>> ExpressionCalculator.is_operator('+')\\n        # True\\n        # >>> ExpressionCalculator.is_operator('a')\\n        # False\\n        return c in {'+', '-', '*', '/', '(', ')', '%'}\\n\\n    def compare(self, cur, peek):\\n        # Compare the precedence of two operators.\\n        # param cur: str, the current operator.\\n        # param peek: str, the operator to compare with.\\n        # return: bool, True if the peek operator has higher or equal precedence, False otherwise.\\n        # >>> calc = ExpressionCalculator()\\n        # >>> calc.compare('+', '*')\\n        # True\\n        if cur == '%':\\n            cur = '/'\\n        if peek == '%':\\n            peek = '/'\\n        return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]\\n\\n    @staticmethod\\n    def _calculate(first_value, second_value, current_op):\\n        # Perform the arithmetic operation specified by the operator.\\n        # param first_value: str, the first operand.\\n        # param second_value: str, the second operand.\\n        # param current_op: str, the operator to apply.\\n        # return: Decimal, the result of the arithmetic operation.\\n        # >>> ExpressionCalculator._calculate('3', '2', '+')\\n        # Decimal('5')\\n        if current_op == '+':\\n            return Decimal(first_value) + Decimal(second_value)\\n        elif current_op == '-':\\n            return Decimal(first_value) - Decimal(second_value)\\n        elif current_op == '*':\\n            return Decimal(first_value) * Decimal(second_value)\\n        elif current_op == '/':\\n            return Decimal(first_value) / Decimal(second_value)\\n        elif current_op == '%':\\n            return Decimal(first_value) % Decimal(second_value)\\n        else:\\n            raise ValueError(\\\"Unexpected operator: {}\\\".format(current_op))\\n\\n    @staticmethod\\n    def transform(expression):\\n        # Transform the given expression to handle unary minus and remove unnecessary characters.\\n        # param expression: str, the mathematical expression to be transformed.\\n        # return: str, the transformed expression.\\n        # >>> ExpressionCalculator.transform(\\\"3 + -5 * (2 - 8)\\\")\\n        # '3+~5*(2-8)'\\n        expression = re.sub(r\\\"\\\\s+\\\", \\\"\\\", expression)\\n        expression = re.sub(r\\\"=$\\\", \\\"\\\", expression)\\n        arr = list(expression)\\n\\n        for i, c in enumerate(arr):\\n            if c == '-':\\n                if i == 0:\\n                    arr[i] = '~'\\n                else:\\n                    prev_c = arr[i - 1]\\n                    if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:\\n                        arr[i] = '~'\\n\\n        if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):\\n            arr[0] = '-'\\n            return \\\"0\\\" + \\\"\\\".join(arr)\\n        else:\\n            return \\\"\\\".join(arr)\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727078622,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1659,\n    \"prompt_tokens\": 1932,\n    \"total_tokens\": 3591,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 1356\n  }\n}", "test_case_name": "ExpressionCalculator.txt"}