{"response body": {"id": "5d4c6141-f442-431b-af33-5742ea00cb3f", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:13:16", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThis class provides core functionalities for a basic student assessment system.\nIt provides methods to add students, record their course scores, calculate and retrieve their GPA,\nidentify students with failed courses, calculate average scores for a course, and identify the top-performing student.\n\"\"\"\n\nclass AssessmentSystem:\n    def __init__(self):\n        \"\"\"\n        Initializes the AssessmentSystem with an empty students dictionary.\n        \"\"\"\n        self.students = {}\n\n    def add_student(self, name, grade, major):\n        \"\"\"\n        Adds a new student to the system.\n\n        Parameters:\n            name (str): The name of the student\n            grade (int): The grade level of the student\n            major (str): The academic major of the student\n\n        Test cases:\n            # Test case 1: Add a valid student\n            add_student('John', 12, 'Math')\n            assert 'John' in self.students\n\n            # Test case 2: Add a student with no major\n            add_student('Emily', 10, '')\n            assert 'Emily' in self.students\n\n            # Test case 3: Add a student with a non-integer grade\n            add_student('Tim', 'Eleventh', 'Science')\n            assert 'Tim' not in self.students\n        \"\"\"\n        self.students[name] = {'name': name, 'grade': grade, 'major': major, 'courses': {}}\n\n    def add_course_score(self, name, course, score):\n        \"\"\"\n        Records a course score for a student.\n\n        Parameters:\n            name (str): The name of the student\n            course (str): The course for which the score is being recorded\n            score (int): The score to record\n\n        Test cases:\n            # Test case 1: Add a valid course score\n            add_course_score('John', 'Math', 85)\n            assert self.students['John']['courses']['Math'] == 85\n\n            # Test case 2: Add a course score for a non-existent student\n            add_course_score('Alex', 'English', 90)\n            assert 'Alex' not in self.students\n\n            # Test case 3: Add a non-integer score\n            add_course_score('Emily', 'Science', 'A')\n            assert self.students['Emily']['courses']['Science'] == 'A'\n        \"\"\"\n        if name in self.students:\n            self.students[name]['courses'][course] = score\n\n    def get_gpa(self, name):\n        \"\"\"\n        Calculates and returns the GPA of a student.\n\n        Parameters:\n            name (str): The name of the student\n\n        Returns:\n            float: The GPA of the student, or None if the student has no recorded course scores\n\n        Test cases:\n            # Test case 1: Calculate GPA for a student with valid course scores\n            add_student('John', 12, 'Math')\n            add_course_score('John', 'Math', 85)\n            add_course_score('John', 'English', 90)\n            assert get_gpa('John') == 87.5\n\n            # Test case 2: Calculate GPA for a student with no course scores\n            add_student('Emily', 10, 'Science')\n            assert get_gpa('Emily') is None\n\n            # Test case 3: Calculate GPA for a non-existent student\n            assert get_gpa('Alex') is None\n        \"\"\"\n        if name in self.students and self.students[name]['courses']:\n            return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])\n        else:\n            return None\n\n    def get_all_students_with_fail_course(self):\n        \"\"\"\n        Identifies all students who have failed at least one course.\n\n        Returns:\n            list: A list of names of students who have failed at least one course\n\n        Test cases:\n            # Test case 1: Identify students with failed courses\n            add_student('John', 12, 'Math')\n            add_course_score('John', 'Math', 59)\n            assert get_all_students_with_fail_course() == ['John']\n\n            # Test case 2: Identify students with no failed courses\n            add_student('Emily', 10, 'Science')\n            add_course_score('Emily', 'Science', 70)\n            assert get_all_students_with_fail_course() == []\n\n            # Test case 3: Identify students with no course scores\n            add_student('Tim', 11, 'English')\n            assert get_all_students_with_fail_course() == []\n        \"\"\"\n        students = []\n        for name, student in self.students.items():\n            for course, score in student['courses'].items():\n                if score < 60:\n                    students.append(name)\n                    break\n        return students\n\n    def get_course_average(self, course):\n        \"\"\"\n        Calculates and returns the average score for a course.\n\n        Parameters:\n            course (str): The course for which the average score is being calculated\n\n        Returns:\n            float: The average score for the course, or None if there are no recorded scores for the course\n\n        Test cases:\n            # Test case 1: Calculate average score for a course with valid scores\n            add_student('John', 12, 'Math')\n            add_course_score('John', 'Math', 85)\n            add_student('Emily', 10, 'Science')\n            add_course_score('Emily', 'Math', 95)\n            assert get_course_average('Math') == 90\n\n            # Test case 2: Calculate average score for a course with no scores\n            assert get_course_average('English') is None\n\n            # Test case 3: Calculate average score for a non-existent course\n            assert get_course_average('History') is None\n        \"\"\"\n        total = 0\n        count = 0\n        for student in self.students.values():\n            if course in student['courses']:\n                score = student['courses'][course]\n                if score is not None:\n                    total += score\n                    count += 1\n        return total / count if count > 0 else None\n\n    def get_top_student(self):\n        \"\"\"\n        Identifies the top-performing student based on GPA.\n\n        Returns:\n            str: The name of the top-performing student, or None if there are no students with recorded course scores\n\n        Test cases:\n            # Test case 1: Identify top-performing student with valid GPAs\n            add_student('John', 12, 'Math')\n            add_course_score('John', 'Math', 85)\n            add_student('Emily', 10, 'Science')\n            add_course_score('Emily', 'Science', 90)\n            assert get_top_student() == 'Emily'\n\n            # Test case 2: Identify top-performing student with no course scores\n            add_student('Tim', 11, 'English')\n            assert get_top_student() is None\n\n            # Test case 3: Identify top-performing student when there are no students\n            assert get_top_student() is None\n        \"\"\"\n        top_student = None\n        top_gpa = 0\n        for name, student in self.students.items():\n            gpa = self.get_gpa(name)\n            if gpa is not None and gpa > top_gpa:\n                top_gpa = gpa\n                top_student = name\n        return top_student"}}], "usage": {"completion_tokens": 1503, "prompt_tokens": 1456, "total_tokens": 2959}, "feeType": "1", "consume": 1.945432}, "test_case_name": "AssessmentSystem.txt"}