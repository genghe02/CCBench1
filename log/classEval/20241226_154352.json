{"response body": {"id": "1af9ca98-d40b-419c-8f96-b9932c7f2cb1", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:43:56", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "\"\"\"\nThe class `Hotel` manages room booking, check-in, and check-out in a hotel. It can also provide information about available rooms.\n\"\"\"\n\nclass Hotel:\n    def __init__(self, name, rooms):\n        \"\"\"\n        Initializes the Hotel with a name and a dictionary of available rooms.\n\n        Parameters:\n            name (str): The name of the hotel.\n            rooms (dict): A dictionary containing the room types as keys and the number of available rooms of each type as values.\n\n        Returns:\n            None\n\n        Test cases:\n            # Test case 1: Initialization with valid parameters\n            hotel = Hotel('Grand Hotel', {'single': 5, 'double': 3})\n            \n            # Test case 2: Initialization with no available rooms\n            hotel = Hotel('No Vacancy Hotel', {})\n            \n            # Test case 3: Initialization with a room type but zero available rooms\n            hotel = Hotel('Full Hotel', {'single': 0})\n        \"\"\"\n        self.name = name\n        self.available_rooms = rooms\n        self.booked_rooms = {}\n\n    def book_room(self, room_type, room_number, name):\n        \"\"\"\n        Books a specified number of a specified type of room for a guest.\n\n        Parameters:\n            room_type (str): The type of room to be booked.\n            room_number (int): The number of rooms of the specified type to be booked.\n            name (str): The name of the guest who is booking the room.\n\n        Returns:\n            str or bool or int: Returns \"Success!\" if the booking was successful, False if there are no available rooms of the specified type, or the number of available rooms if the requested number exceeds the available number.\n\n        Test cases:\n            # Test case 1: Successful booking\n            hotel.book_room('single', 1, 'John Doe') # Returns \"Success!\"\n            \n            # Test case 2: Booking more rooms than available\n            hotel.book_room('single', 10, 'Jane Doe') # Returns 4 (assuming there were originally 5 single rooms)\n            \n            # Test case 3: Booking a room type that does not exist\n            hotel.book_room('triple', 1, 'John Doe') # Returns False\n        \"\"\"\n        if room_type not in self.available_rooms.keys():\n            return False\n\n        if room_number <= self.available_rooms[room_type]:\n            if room_type not in self.booked_rooms.keys():\n                self.booked_rooms[room_type] = {}\n            self.booked_rooms[room_type][name] = room_number\n            self.available_rooms[room_type] -= room_number\n            return \"Success!\"\n        elif self.available_rooms[room_type] != 0:\n            return self.available_rooms[room_type]\n        else:\n            return False\n\n    def check_in(self, room_type, room_number, name):\n        \"\"\"\n        Checks in a guest to a specified number of a specified type of room.\n\n        Parameters:\n            room_type (str): The type of room to be checked in.\n            room_number (int): The number of rooms of the specified type to be checked in.\n            name (str): The name of the guest who is checking in.\n\n        Returns:\n            None or bool: Returns None if the check-in was successful, or False if the specified rooms are not booked under the given name.\n\n        Test cases:\n            # Test case 1: Successful check-in\n            hotel.check_in('single', 1, 'John Doe') # Returns None\n            \n            # Test case 2: Check-in without booking\n            hotel.check_in('single', 1, 'Jane Doe') # Returns False\n            \n            # Test case 3: Check-in more rooms than booked\n            hotel.check_in('double', 2, 'John Doe') # Returns False\n        \"\"\"\n        if room_type not in self.booked_rooms.keys():\n            return False\n        if name in self.booked_rooms[room_type]:\n            if room_number > self.booked_rooms[room_type][name]:\n                return False\n            elif room_number == self.booked_rooms[room_type][name]:\n                self.booked_rooms[room_type].pop(name)\n            else:\n                self.booked_rooms[room_type][name] -= room_number\n\n\n    def check_out(self, room_type, room_number):\n        \"\"\"\n        Checks out a specified number of a specified type of room.\n\n        Parameters:\n            room_type (str): The type of room to be checked out.\n            room_number (int): The number of rooms of the specified type to be checked out.\n\n        Returns:\n            None\n\n        Test cases:\n            # Test case 1: Successful check-out\n            hotel.check_out('single', 1) # Returns None and increases the available single rooms by 1\n            \n            # Test case 2: Check-out of a room type that does not exist\n            hotel.check_out('triple', 1) # Returns None and adds 'triple' to the available rooms with a count of 1\n            \n            # Test case 3: Check-out of multiple rooms\n            hotel.check_out('double', 2) # Returns None and increases the available double rooms by 2\n        \"\"\"\n        if room_type in self.available_rooms:\n            self.available_rooms[room_type] += room_number\n        else:\n            self.available_rooms[room_type] = room_number\n\n    def get_available_rooms(self, room_type):\n        \"\"\"\n        Returns the number of available rooms of a specified type.\n\n        Parameters:\n            room_type (str): The type of room to get the availability of.\n\n        Returns:\n            int: The number of available rooms of the specified type.\n\n        Test cases:\n            # Test case 1: Get available rooms of an existing type\n            hotel.get_available_rooms('single') # Returns 4 (assuming there were originally 5 single rooms and one was booked)\n            \n            # Test case 2: Get available rooms of a type that does not exist\n            hotel.get_available_rooms('triple') # Returns KeyError\n        \"\"\"\n        return self.available_rooms[room_type]"}}], "usage": {"completion_tokens": 1255, "prompt_tokens": 1587, "total_tokens": 2842}, "feeType": "1", "consume": 1.786292}, "test_case_name": "Hotel.txt"}