{"response body": "ChatCompletion(id='chatcmpl-A6GLKvY3uRiAxkwfi7FRLR6iG7ppq', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content=\"```python\\nclass DiscountStrategy:\\n    # This class implements a discount strategy for customers based on their purchases and promotions.\\n\\n    def __init__(self, customer, cart, promotion=None):\\n        # Initializes the DiscountStrategy with a customer, their shopping cart, and an optional promotion.\\n        # :param customer: dict, contains customer information including loyalty points.\\n        # :param cart: list of dicts, where each dict represents an item with its quantity and price.\\n        # :param promotion: callable or None, a function that calculates a discount based on the order.\\n\\n        # Example test cases:\\n        # >>> customer = {'name': 'John Doe', 'fidelity': 1200}\\n        # >>> cart = [{'product': 'item1', 'quantity': 1, 'price': 50}, {'product': 'item2', 'quantity': 3, 'price': 15}]\\n        # >>> strategy = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)\\n        \\n        self.customer = customer\\n        self.cart = cart\\n        self.promotion = promotion\\n        self.__total = self.total()\\n\\n    def total(self):\\n        # Calculates the total price of items in the cart.\\n        # :return: float, the total amount of all items in the cart.\\n\\n        # Example test cases:\\n        # >>> strategy.total()\\n        # 95.0  // For the previously defined cart containing 1 item at $50 and 3 items at $15.\\n        \\n        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)\\n        return self.__total\\n\\n    def due(self):\\n        # Computes the amount due after applying any eligible promotion.\\n        # :return: float, the final amount due after discount has been applied.\\n\\n        # Example test cases:\\n        # >>> strategy.due()\\n        # 90.25  // If a 5% discount applies based on customer loyalty.\\n\\n        if self.promotion is None:\\n            discount = 0\\n        else:\\n            discount = self.promotion(self)\\n        return self.__total - discount\\n\\n    @staticmethod\\n    def FidelityPromo(order):\\n        # Calculates a promotion based on the customer's loyalty points.\\n        # :param order: DiscountStrategy, the order for which the discount is being calculated.\\n        # :return: float, the discount amount based on customer loyalty.\\n\\n        # Example test cases:\\n        # >>> order = DiscountStrategy({'fidelity': 1200}, [{'product': 'item1', 'quantity': 1, 'price': 50}])\\n        # >>> DiscountStrategy.FidelityPromo(order)\\n        # 2.5  // If the order has a total of $50.\\n\\n        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0\\n\\n    @staticmethod\\n    def BulkItemPromo(order):\\n        # Calculates a discount based on the quantity of items in the cart.\\n        # :param order: DiscountStrategy, the order for which the discount is being calculated.\\n        # :return: float, the total discount based on bulk items purchased.\\n\\n        # Example test cases:\\n        # >>> order = DiscountStrategy({'fidelity': 500}, [{'product': 'item1', 'quantity': 21, 'price': 1}])\\n        # >>> DiscountStrategy.BulkItemPromo(order)\\n        # 2.1  // Discount for buying 21 items at $1 each.\\n\\n        discount = 0\\n        for item in order.cart:\\n            if item['quantity'] >= 20:\\n                discount += item['quantity'] * item['price'] * 0.1\\n        return discount\\n\\n    @staticmethod\\n    def LargeOrderPromo(order):\\n        # Calculates a promotion for orders with a large variety of items.\\n        # :param order: DiscountStrategy, the order for which the discount is being calculated.\\n        # :return: float, the discount amount for large orders.\\n\\n        # Example test cases:\\n        # >>> order = DiscountStrategy({'fidelity': 500}, [{'product': 'item1', 'quantity': 1, 'price': 50}, {'product': 'item2', 'quantity': 1, 'price': 50}])\\n        # >>> DiscountStrategy.LargeOrderPromo(order)\\n        # 0  // No discount as the number of unique products is less than 10.\\n\\n        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0\\n```\", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1726056154, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_483d39d857', usage=CompletionUsage(completion_tokens=937, prompt_tokens=1093, total_tokens=2030))", "test_case_name": "DiscountStrategy.txt"}