{"response body": {"id": "03785260-c64d-4759-a7be-48ef2ba8caea", "object": "chat.completion", "model": "gpt-4-32k", "created": "2024-12-26 15:26:54", "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "```python\n\"\"\"\nThe class manages the registration of students and classes, while also providing functionalities\nto retrieve student and class data based on various criteria.\n\"\"\"\n\nclass ClassRegistrationSystem:\n\n    def __init__(self):\n        \"\"\"\n        Initializes the class registration system with empty lists for students and their registered classes.\n        \"\"\"\n        self.students = []\n        self.students_registration_classes = {}\n\n    def register_student(self, student):\n        \"\"\"\n        Registers a new student in the system.\n        \n        Parameters:\n            student (dict): A dictionary containing student information with keys \"name\" and \"major\"\n            \n        Returns:\n            int: Returns 1 if student registration is successful, and 0 if student is already registered\n            \n        Test cases:\n            # Test case 1: Registering a new student\n            assert register_student({\"name\": \"John\", \"major\": \"Computer Science\"}) == 1\n            \n            # Test case 2: Registering a student who is already registered\n            assert register_student({\"name\": \"John\", \"major\": \"Computer Science\"}) == 0\n            \n            # Test case 3: Registering a student with missing information\n            # This should raise a KeyError\n            assert register_student({\"name\": \"John\"}) == KeyError\n        \"\"\"\n        if student in self.students:\n            return 0\n        else:\n            self.students.append(student)\n            return 1\n\n    def register_class(self, student_name, class_name):\n        \"\"\"\n        Registers a class for a student.\n        \n        Parameters:\n            student_name (str): The name of the student\n            class_name (str): The name of the class\n            \n        Returns:\n            list: The updated list of classes for the student\n            \n        Test cases:\n            # Test case 1: Registering a new class for a student\n            assert register_class(\"John\", \"Math101\") == [\"Math101\"]\n            \n            # Test case 2: Registering a class for a student who is not registered\n            # This should raise a KeyError\n            assert register_class(\"Jane\", \"Math101\") == KeyError\n            \n            # Test case 3: Registering a class that the student is already enrolled in\n            # The function should not duplicate the class in the list\n            assert register_class(\"John\", \"Math101\") == [\"Math101\"]\n        \"\"\"\n        if student_name in self.students_registration_classes:\n            self.students_registration_classes[student_name].append(class_name)\n        else:\n            self.students_registration_classes[student_name] = [class_name]\n        return self.students_registration_classes[student_name]\n\n    def get_students_by_major(self, major):\n        \"\"\"\n        Retrieves the list of students who are studying the specified major.\n        \n        Parameters:\n            major (str): The name of the major\n            \n        Returns:\n            list: A list of students who are studying the specified major\n            \n        Test cases:\n            # Test case 1: Retrieving students studying a common major\n            assert get_students_by_major(\"Computer Science\") == [\"John\", \"Jane\"]\n            \n            # Test case 2: Retrieving students studying a major with no students\n            assert get_students_by_major(\"Physics\") == []\n            \n            # Test case 3: Retrieving students studying a non-existent major\n            assert get_students_by_major(\"Astrology\") == []\n        \"\"\"\n        student_list = []\n        for student in self.students:\n            if student[\"major\"] == major:\n                student_list.append(student[\"name\"])\n        return student_list\n\n    def get_all_major(self):\n        \"\"\"\n        Retrieves all the majors currently being studied by students in the system.\n        \n        Returns:\n            list: A list of unique majors currently being studied by students\n            \n        Test cases:\n            # Test case 1: Retrieving all majors in a system with registered students\n            assert get_all_major() == [\"Computer Science\", \"Mathematics\"]\n            \n            # Test case 2: Retrieving all majors in a system with no registered students\n            assert get_all_major() == []\n        \"\"\"\n        major_list = []\n        for student in self.students:\n            if student[\"major\"] not in major_list:\n                major_list.append(student[\"major\"])\n        return major_list\n\n    def get_most_popular_class_in_major(self, major):\n        \"\"\"\n        Retrieves the most popular class among students studying a specified major.\n        \n        Parameters:\n            major (str): The name of the major\n            \n        Returns:\n            str: The name of the most popular class among the specified major\n            \n        Test cases:\n            # Test case 1: Retrieving the most popular class in a common major\n            assert get_most_popular_class_in_major(\"Computer Science\") == \"CS101\"\n            \n            # Test case 2: Retrieving the most popular class in a major with no students\n            # This should raise a ValueError\n            assert get_most_popular_class_in_major(\"Physics\") == ValueError\n            \n            # Test case 3: Retrieving the most popular class in a non-existent major\n            # This should raise a ValueError\n            assert get_most_popular_class_in_major(\"Astrology\") == ValueError\n        \"\"\"\n        class_list = []\n        for student in self.students:\n            if student[\"major\"] == major:\n                class_list += self.students_registration_classes[student[\"name\"]]\n        most_popular_class = max(set(class_list), key=class_list.count)\n        return most_popular_class\n```"}}], "usage": {"completion_tokens": 1106, "prompt_tokens": 1364, "total_tokens": 2470}, "feeType": "1", "consume": 1.559136}, "test_case_name": "Class_Registration_System.txt"}