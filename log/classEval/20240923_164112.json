{"response body": "{\n  \"id\": \"c9c89ffe-e4fb-4136-9998-52e36a43154a\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"content\": \"```python\\n# This class is designed to handle and parse various components of a URL.\\nclass URLHandler:\\n    def __init__(self, url):\\n        # Initialize the URLHandler object with a given URL.\\n        self.url = url\\n\\n    def get_scheme(self):\\n        # Extract and return the scheme (protocol) part of the URL.\\n        # return: str or None, the scheme part of the URL if found, otherwise None.\\n        # >>> handler = URLHandler(\\\"https://example.com\\\")\\n        # >>> handler.get_scheme()\\n        # 'https'\\n        # >>> handler = URLHandler(\\\"example.com\\\")\\n        # >>> handler.get_scheme()\\n        # None\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            return self.url[:scheme_end]\\n        return None\\n\\n    def get_host(self):\\n        # Extract and return the host part of the URL.\\n        # return: str or None, the host part of the URL if found, otherwise None.\\n        # >>> handler = URLHandler(\\\"https://example.com/path\\\")\\n        # >>> handler.get_host()\\n        # 'example.com'\\n        # >>> handler = URLHandler(\\\"example.com/path\\\")\\n        # >>> handler.get_host()\\n        # None\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\\\"/\\\")\\n            if host_end != -1:\\n                return url_without_scheme[:host_end]\\n            return url_without_scheme\\n        return None\\n\\n    def get_path(self):\\n        # Extract and return the path part of the URL.\\n        # return: str or None, the path part of the URL if found, otherwise None.\\n        # >>> handler = URLHandler(\\\"https://example.com/path\\\")\\n        # >>> handler.get_path()\\n        # '/path'\\n        # >>> handler = URLHandler(\\\"https://example.com\\\")\\n        # >>> handler.get_path()\\n        # None\\n        scheme_end = self.url.find(\\\"://\\\")\\n        if scheme_end != -1:\\n            url_without_scheme = self.url[scheme_end + 3:]\\n            host_end = url_without_scheme.find(\\\"/\\\")\\n            if host_end != -1:\\n                return url_without_scheme[host_end:]\\n        return None\\n\\n    def get_query_params(self):\\n        # Extract and return the query parameters as a dictionary.\\n        # return: dict or None, the query parameters as key-value pairs if found, otherwise None.\\n        # >>> handler = URLHandler(\\\"https://example.com/path?key1=value1&key2=value2\\\")\\n        # >>> handler.get_query_params()\\n        # {'key1': 'value1', 'key2': 'value2'}\\n        # >>> handler = URLHandler(\\\"https://example.com/path\\\")\\n        # >>> handler.get_query_params()\\n        # None\\n        query_start = self.url.find(\\\"?\\\")\\n        fragment_start = self.url.find(\\\"#\\\")\\n        if query_start != -1:\\n            query_string = self.url[query_start + 1:fragment_start]\\n            params = {}\\n            if len(query_string) > 0:\\n                param_pairs = query_string.split(\\\"&\\\")\\n                for pair in param_pairs:\\n                    key_value = pair.split(\\\"=\\\")\\n                    if len(key_value) == 2:\\n                        key, value = key_value\\n                        params[key] = value\\n            return params\\n        return None\\n\\n    def get_fragment(self):\\n        # Extract and return the fragment part of the URL.\\n        # return: str or None, the fragment part of the URL if found, otherwise None.\\n        # >>> handler = URLHandler(\\\"https://example.com/path#fragment\\\")\\n        # >>> handler.get_fragment()\\n        # 'fragment'\\n        # >>> handler = URLHandler(\\\"https://example.com/path\\\")\\n        # >>> handler.get_fragment()\\n        # None\\n        fragment_start = self.url.find(\\\"#\\\")\\n        if fragment_start != -1:\\n            return self.url[fragment_start + 1:]\\n        return None\\n```\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1727080817,\n  \"model\": \"deepseek-chat\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"fp_1c141eb703\",\n  \"usage\": {\n    \"completion_tokens\": 1032,\n    \"prompt_tokens\": 1223,\n    \"total_tokens\": 2255,\n    \"prompt_cache_hit_tokens\": 576,\n    \"prompt_cache_miss_tokens\": 647\n  }\n}", "test_case_name": "URLHandler.txt"}