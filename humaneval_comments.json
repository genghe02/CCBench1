[
  {
    "filename": "HumanEval_0.txt",
    "comments": ["Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold."]
  },
  {
    "filename": "HumanEval_1.txt",
    "comments": ["Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string."]
  },
  {
    "filename": "HumanEval_2.txt",
    "comments": ["Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1)."]
  },
  {
    "filename": "HumanEval_3.txt",
    "comments": ["You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False."]
  },
  {
    "filename": "HumanEval_4.txt",
    "comments": ["For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |"]
  },
  {
    "filename": "HumanEval_5.txt",
    "comments": ["Insert a number 'delimeter' between every two consecutive elements of input list `numbers'"]
  },
  {
    "filename": "HumanEval_6.txt",
    "comments": ["Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three."]
  },
  {
    "filename": "HumanEval_7.txt",
    "comments": ["Filter an input list of strings only for ones that contain given substring"]
  },
  {
    "filename": "HumanEval_8.txt",
    "comments": ["For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1."]
  },
  {
    "filename": "HumanEval_9.txt",
    "comments": ["From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence."]
  },
  {
    "filename": "HumanEval_10.txt",
    "comments": ["Test if given string is a palindrome ", "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix."]
  },
  {
    "filename": "HumanEval_11.txt",
    "comments": ["Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string."]
  },
  {
    "filename": "HumanEval_12.txt",
    "comments": ["Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty."]
  },
  {
    "filename": "HumanEval_13.txt",
    "comments": ["Return a greatest common divisor of two integers a and b"]
  },
  {
    "filename": "HumanEval_14.txt",
    "comments": ["Return list of all prefixes from shortest to longest of the input string"]
  },
  {
    "filename": "HumanEval_15.txt",
    "comments": ["Return a string containing space-delimited numbers starting from 0 upto n inclusive."]
  },
  {
    "filename": "HumanEval_16.txt",
    "comments": ["Given a string, find out how many distinct characters (regardless of case) does it consist of"]
  },
  {
    "filename": "HumanEval_17.txt",
    "comments": ["Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.Here is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat"]
  },
  {
    "filename": "HumanEval_18.txt",
    "comments": [" Find how many times a given substring can be found in the original string. Count overlaping cases."]
  },
  {
    "filename": "HumanEval_19.txt",
    "comments": ["Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest"]
  },
  {
    "filename": "HumanEval_20.txt",
    "comments": ["From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number)."]
  },
  {
    "filename": "HumanEval_21.txt",
    "comments": ["Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1"]
  },
  {
    "filename": "HumanEval_22.txt",
    "comments": ["Filter given list of any python values only for integers"]
  },
  {
    "filename": "HumanEval_23.txt",
    "comments": ["Return length of given string"]
  },
  {
    "filename": "HumanEval_24.txt",
    "comments": ["For a given number n, find the largest number that divides n evenly, smaller than n"]
  },
  {
    "filename": "HumanEval_25.txt",
    "comments": ["Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors"]
  },
  {
    "filename": "HumanEval_26.txt",
    "comments": ["From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input."]
  },
  {
    "filename": "HumanEval_27.txt",
    "comments": ["For a given string, flip lowercase characters to uppercase and uppercase to lowercase."]
  },
  {
    "filename": "HumanEval_28.txt",
    "comments": ["Concatenate list of strings into a single string"]
  },
  {
    "filename": "HumanEval_29.txt",
    "comments": ["Filter an input list of strings only for ones that start with a given prefix."]
  },
  {
    "filename": "HumanEval_30.txt",
    "comments": ["Return only positive numbers in the list."]
  },
  {
    "filename": "HumanEval_31.txt",
    "comments": ["Return true if a given number is prime, and false otherwise."]
  },
  {
    "filename": "HumanEval_32.txt",
    "comments": ["Evaluates polynomial with coefficients xs at point x.\nreturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n", "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution."]
  },
  {
    "filename": "HumanEval_33.txt",
    "comments": ["This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted."]
  },
  {
    "filename": "HumanEval_34.txt",
    "comments": ["Return sorted unique elements in a list"]
  },
  {
    "filename": "HumanEval_35.txt",
    "comments": ["Return maximum element in the list."]
  },
  {
    "filename": "HumanEval_36.txt",
    "comments": ["Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13."]
  },
  {
    "filename": "HumanEval_37.txt",
    "comments": ["This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted."]
  },
  {
    "filename": "HumanEval_38.txt",
    "comments": ["returns encoded string by cycling groups of three characters.", "takes as input string encoded with encode_cyclic function. Returns decoded string."]
  },
  {
    "filename": "HumanEval_39.txt",
    "comments": ["prime_fib returns n-th number that is a Fibonacci number and it's also prime."]
  },
  {
    "filename": "HumanEval_40.txt",
    "comments": ["triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise."]
  },
  {
    "filename": "HumanEval_41.txt",
    "comments": ["Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions."]
  },
  {
    "filename": "HumanEval_42.txt",
    "comments": ["Return list with elements incremented by 1."]
  },
  {
    "filename": "HumanEval_43.txt",
    "comments": ["pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise."]
  },
  {
    "filename": "HumanEval_44.txt",
    "comments": ["Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10."]
  },
  {
    "filename": "HumanEval_45.txt",
    "comments": ["Given length of a side and high return area for a triangle."]
  },
  {
    "filename": "HumanEval_46.txt",
    "comments": ["The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion."]
  },
  {
    "filename": "HumanEval_47.txt",
    "comments": ["Return median of elements in the list l."]
  },
  {
    "filename": "HumanEval_48.txt",
    "comments": ["Checks if given string is a palindrome"]
  },
  {
    "filename": "HumanEval_49.txt",
    "comments": ["Return 2^n modulo p (be aware of numerics)."]
  },
  {
    "filename": "HumanEval_50.txt",
    "comments": ["returns encoded string by shifting every character by 5 in the alphabet.", "takes as input string encoded with encode_shift function. Returns decoded string."]
  },
  {
    "filename": "HumanEval_51.txt",
    "comments": ["remove_vowels is a function that takes string and returns string without vowels."]
  },
  {
    "filename": "HumanEval_52.txt",
    "comments": ["Return True if all numbers in the list l are below threshold t."]
  },
  {
    "filename": "HumanEval_53.txt",
    "comments": ["Add two numbers x and y"]
  },
  {
    "filename": "HumanEval_54.txt",
    "comments": ["Check if two words have the same characters."]
  },
  {
    "filename": "HumanEval_55.txt",
    "comments": ["Return n-th Fibonacci number."]
  },
  {
    "filename": "HumanEval_56.txt",
    "comments": ["brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket."]
  },
  {
    "filename": "HumanEval_57.txt",
    "comments": ["Return True is list elements are monotonically increasing or decreasing."]
  },
  {
    "filename": "HumanEval_58.txt",
    "comments": ["Return sorted unique common elements for two lists."]
  },
  {
    "filename": "HumanEval_59.txt",
    "comments": ["Return the largest prime factor of n. Assume n > 1 and is not a prime."]
  },
  {
    "filename": "HumanEval_60.txt",
    "comments": ["sum_to_n is a function that sums numbers from 1 to n."]
  },
  {
    "filename": "HumanEval_61.txt",
    "comments": ["brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket."]
  },
  {
    "filename": "HumanEval_62.txt",
    "comments": ["xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form."]
  },
  {
    "filename": "HumanEval_63.txt",
    "comments": ["The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence."]
  },
  {
    "filename": "HumanEval_64.txt",
    "comments": ["Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word."]
  },
  {
    "filename": "HumanEval_65.txt",
    "comments": ["Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed."]
  },
  {
    "filename": "HumanEval_66.txt",
    "comments": ["Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes."]
  },
  {
    "filename": "HumanEval_67.txt",
    "comments": ["In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket."]
  },
  {
    "filename": "HumanEval_68.txt",
    "comments": ["Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return []."]
  },
  {
    "filename": "HumanEval_69.txt",
    "comments": ["You are given a non-empty list of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1."]
  },
  {
    "filename": "HumanEval_70.txt",
    "comments": ["Given list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on."]
  },
  {
    "filename": "HumanEval_71.txt",
    "comments": ["Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side."]
  },
  {
    "filename": "HumanEval_72.txt",
    "comments": ["Write a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w."]
  },
  {
    "filename": "HumanEval_73.txt",
    "comments": ["Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element."]
  },
  {
    "filename": "HumanEval_74.txt",
    "comments": ["Write a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list."]
  },
  {
    "filename": "HumanEval_75.txt",
    "comments": ["Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. "]
  },
  {
    "filename": "HumanEval_76.txt",
    "comments": ["Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x"]
  },
  {
    "filename": "HumanEval_77.txt",
    "comments": ["Write a function that takes an integer a and returns True \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid."]
  },
  {
    "filename": "HumanEval_78.txt",
    "comments": ["You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase."]
  },
  {
    "filename": "HumanEval_79.txt",
    "comments": ["You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format."]
  },
  {
    "filename": "HumanEval_80.txt",
    "comments": ["You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct"]
  },
  {
    "filename": "HumanEval_81.txt",
    "comments": ["It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write \na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A \n> 3.3                A- \n> 3.0                B+\n> 2.7                B \n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+ \n> 0.7                D \n> 0.0                D-\n0.0                E\n    "]
  },
  {
    "filename": "HumanEval_82.txt",
    "comments": ["Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise"]
  },
  {
    "filename": "HumanEval_83.txt",
    "comments": ["Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1."]
  },
  {
    "filename": "HumanEval_84.txt",
    "comments": ["Given a positive integer N, return the total sum of its digits in binary."]
  },
  {
    "filename": "HumanEval_85.txt",
    "comments": ["Given a non-empty list of integers lst. add the even elements that are at odd indices.."]
  },
  {
    "filename": "HumanEval_86.txt",
    "comments": ["Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence."]
  },
  {
    "filename": "HumanEval_87.txt",
    "comments": ["You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order."]
  },
  {
    "filename": "HumanEval_88.txt",
    "comments": ["Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array."]
  },
  {
    "filename": "HumanEval_89.txt",
    "comments": ["Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places."]
  },
  {
    "filename": "HumanEval_90.txt",
    "comments": ["You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element."]
  },
  {
    "filename": "HumanEval_91.txt",
    "comments": ["You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'."]
  },
  {
    "filename": "HumanEval_92.txt",
    "comments": ["Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases."]
  },
  {
    "filename": "HumanEval_93.txt",
    "comments": ["Write a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. "]
  },
  {
    "filename": "HumanEval_94.txt",
    "comments": ["You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits."]
  },
  {
    "filename": "HumanEval_95.txt",
    "comments": ["Given a dictionary, return True if all keys are strings in lower \ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty."]
  },
  {
    "filename": "HumanEval_96.txt",
    "comments": ["Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n."]
  },
  {
    "filename": "HumanEval_97.txt",
    "comments": ["Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid."]
  },
  {
    "filename": "HumanEval_98.txt",
    "comments": ["Given a string s, count the number of uppercase vowels in even indices."]
  },
  {
    "filename": "HumanEval_99.txt",
    "comments": ["Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero."]
  },
  {
    "filename": "HumanEval_100.txt",
    "comments": ["Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1)."]
  },
  {
    "filename": "HumanEval_101.txt",
    "comments": ["You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words."]
  },
  {
    "filename": "HumanEval_102.txt",
    "comments": ["This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1."]
  },
  {
    "filename": "HumanEval_103.txt",
    "comments": ["You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1."]
  },
  {
    "filename": "HumanEval_104.txt",
    "comments": ["Given a list of positive integers x. return a sorted list of all \nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order."]
  },
  {
    "filename": "HumanEval_105.txt",
    "comments": ["Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"."]
  },
  {
    "filename": "HumanEval_106.txt",
    "comments": ["Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i)."]
  },
  {
    "filename": "HumanEval_107.txt",
    "comments": ["Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive."]
  },
  {
    "filename": "HumanEval_108.txt",
    "comments": ["Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3."]
  },
  {
    "filename": "HumanEval_109.txt",
    "comments": ["We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\n    \nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n"]
  },
  {
    "filename": "HumanEval_110.txt",
    "comments": ["In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\"."]
  },
  {
    "filename": "HumanEval_111.txt",
    "comments": ["Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them."]
  },
  {
    "filename": "HumanEval_112.txt",
    "comments": ["Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check."]
  },
  {
    "filename": "HumanEval_113.txt",
    "comments": ["Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input."]
  },
  {
    "filename": "HumanEval_114.txt",
    "comments": ["Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums."]
  },
  {
    "filename": "HumanEval_115.txt",
    "comments": ["You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets."]
  },
  {
    "filename": "HumanEval_116.txt",
    "comments": ["In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value."]
  },
  {
    "filename": "HumanEval_117.txt",
    "comments": ["Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces."]
  },
  {
    "filename": "HumanEval_118.txt",
    "comments": ["You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n    \nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only."]
  },
  {
    "filename": "HumanEval_119.txt",
    "comments": ["You are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise."]
  },
  {
    "filename": "HumanEval_120.txt",
    "comments": ["Given an array arr of integers and a positive integer k, return a sorted list \nof length k with the maximum k numbers in arr."]
  },
  {
    "filename": "HumanEval_121.txt",
    "comments": ["Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions."]
  },
  {
    "filename": "HumanEval_122.txt",
    "comments": ["Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr."]
  },
  {
    "filename": "HumanEval_123.txt",
    "comments": ["Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order."]
  },
  {
    "filename": "HumanEval_124.txt",
    "comments": ["You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy"]
  },
  {
    "filename": "HumanEval_125.txt",
    "comments": ["Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25"]
  },
  {
    "filename": "HumanEval_126.txt",
    "comments": ["Given a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers."]
  },
  {
    "filename": "HumanEval_127.txt",
    "comments": ["You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\"."]
  },
  {
    "filename": "HumanEval_128.txt",
    "comments": ["You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr."]
  },
  {
    "filename": "HumanEval_129.txt",
    "comments": ["Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through."]
  },
  {
    "filename": "HumanEval_130.txt",
    "comments": ["Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a list of the \nfirst n + 1 numbers of the Tribonacci sequence."]
  },
  {
    "filename": "HumanEval_131.txt",
    "comments": ["Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even."]
  },
  {
    "filename": "HumanEval_132.txt",
    "comments": ["Create a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested."]
  },
  {
    "filename": "HumanEval_133.txt",
    "comments": ["You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first."]
  },
  {
    "filename": "HumanEval_134.txt",
    "comments": ["Create a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space."]
  },
  {
    "filename": "HumanEval_135.txt",
    "comments": ["Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values."]
  },
  {
    "filename": "HumanEval_136.txt",
    "comments": ["Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None."]
  },
  {
    "filename": "HumanEval_137.txt",
    "comments": ["Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,"]
  },
  {
    "filename": "HumanEval_138.txt",
    "comments": ["Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers"]
  },
  {
    "filename": "HumanEval_139.txt",
    "comments": ["The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0"]
  },
  {
    "filename": "HumanEval_140.txt",
    "comments": ["Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - "]
  },
  {
    "filename": "HumanEval_141.txt",
    "comments": ["Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']"]
  },
  {
    "filename": "HumanEval_142.txt",
    "comments": ["This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. "]
  },
  {
    "filename": "HumanEval_143.txt",
    "comments": ["You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one."]
  },
  {
    "filename": "HumanEval_144.txt",
    "comments": ["Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator."]
  },
  {
    "filename": "HumanEval_145.txt",
    "comments": ["Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list."]
  },
  {
    "filename": "HumanEval_146.txt",
    "comments": ["Write a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9)."]
  },
  {
    "filename": "HumanEval_147.txt",
    "comments": ["You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n"]
  },
  {
    "filename": "HumanEval_148.txt",
    "comments": ["There are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. "]
  },
  {
    "filename": "HumanEval_149.txt",
    "comments": ["Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length."]
  },
  {
    "filename": "HumanEval_150.txt",
    "comments": ["A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise."]
  },
  {
    "filename": "HumanEval_151.txt",
    "comments": ["Given a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers."]
  },
  {
    "filename": "HumanEval_152.txt",
    "comments": ["I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score."]
  },
  {
    "filename": "HumanEval_153.txt",
    "comments": ["You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1)."]
  },
  {
    "filename": "HumanEval_154.txt",
    "comments": ["You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word"]
  },
  {
    "filename": "HumanEval_155.txt",
    "comments": ["Given an integer. return a tuple that has the number of even and odd digits respectively."]
  },
  {
    "filename": "HumanEval_156.txt",
    "comments": ["Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000"]
  },
  {
    "filename": "HumanEval_157.txt",
    "comments": ["Given the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree."]
  },
  {
    "filename": "HumanEval_158.txt",
    "comments": ["Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order."]
  },
  {
    "filename": "HumanEval_159.txt",
    "comments": ["You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry."]
  },
  {
    "filename": "HumanEval_160.txt",
    "comments": ["Given two lists operator, and operand. The first list has basic algebra operations, and \nthe second list is a list of integers. Use the two given lists to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands."]
  },
  {
    "filename": "HumanEval_161.txt",
    "comments": ["You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string."]
  },
  {
    "filename": "HumanEval_162.txt",
    "comments": ["Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None."]
  },
  {
    "filename": "HumanEval_163.txt",
    "comments": ["Given two positive integers a and b, return the even digits between a\nand b, in ascending order."]
  }
]