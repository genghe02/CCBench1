[
  "# This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.",
  "Initializes the vending machine's inventory and balance.",
  "Adds a product to the vending machine's inventory.",
  ":param item_name: The name of the product to be added, str.\n        :param price: The price of the product to be added, float.\n        :param quantity: The quantity of the product to be added, int.",
  ":return: None",
  ">>> vendingMachine = VendingMachine()\n        >>> vendingMachine.add_item('Coke', 1.25, 10)\n        >>> vendingMachine.inventory\n        {'Coke': {'price': 1.25, 'quantity': 10}}",
  "Inserts coins into the vending machine.",
  ":param amount: The amount of coins to be inserted, float.",
  ":return: The balance of the vending machine after the coins are inserted, float.",
  ">>> vendingMachine = VendingMachine()\n        >>> vendingMachine.insert_coin(1.25)\n        1.25",
  "Purchases a product from the vending machine and returns the balance after the purchase and display purchase unsuccessful if the product is out of stock.",
  ":param item_name: The name of the product to be purchased, str.",
  ":return: If successful, returns the balance of the vending machine after the product is purchased, float,otherwise,returns False.",
  ">>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.balance = 1.25\n        >>> vendingMachine.purchase_item('Coke')\n        0.0\n        >>> vendingMachine.purchase_item('Pizza')\n        False",
  "Replenishes the inventory of a product already in the vending machine.",
  ":param item_name: The name of the product to be replenished, str.\n        :param quantity: The quantity of the product to be replenished, int.",
  ":return: If the product is already in the vending machine, returns True, otherwise, returns False.",
  ">>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.restock_item('Coke', 10)\n        True\n        >>> vendingMachine.restock_item('Pizza', 10)\n        False",
  "Displays the products in the vending machine.",
  ":return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.",
  ">>> vendingMachine = VendingMachine()\n        >>> vendingMachine.display_items()\n        False\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10} }\n        >>> vendingMachine.display_items()\n        'Coke - $1.25 [10]'"
]