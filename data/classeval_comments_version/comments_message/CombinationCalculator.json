[
  "This is a class that provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.",
  "Initialize the calculator with a list of data.",
  "Calculate the number of combinations for a specific count.",
  ":param n: The total number of elements,int.\n        :param m: The number of elements in each combination,int.",
  ":return: The number of combinations,int.",
  ">>> CombinationCalculator.count(4, 2)\n        6",
  "Calculate the number of all possible combinations.",
  ":param n: The total number of elements,int.",
  ":return: The number of all possible combinations,int,if the number of combinations is greater than 2^63-1,return float(\"inf\").",
  ">>> CombinationCalculator.count_all(4)\n        15",
  "Generate combinations with a specified number of elements.",
  ":param m: The number of elements in each combination,int.",
  ":return: A list of combinations,List[List[str]].",
  ">>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> calc.select(2)\n        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]",
  "Generate all possible combinations of  selecting elements from the given data list,and it uses the select method.",
  ":return: A list of combinations,List[List[str]].",
  ">>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> calc.select_all()\n        [['A'], ['B'], ['C'], ['D'], ['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'B', 'C', 'D']]",
  "Generate combinations with a specified number of elements by recursion.",
  ":param dataIndex: The index of the data to be selected,int.\n        :param resultList: The list of elements in the combination,List[str].\n        :param resultIndex: The index of the element in the combination,int.\n        :param result: The list of combinations,List[List[str]].",
  ":return: None.",
  ">>> calc = CombinationCalculator([\"A\", \"B\", \"C\", \"D\"])\n        >>> result = []\n        >>> calc._select(0, [None] * 2, 0, result)\n        >>> result\n        [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]"
]