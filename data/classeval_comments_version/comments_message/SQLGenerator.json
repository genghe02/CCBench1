[
  "# This class generates SQL statements for common operations on a table, such as SELECT, INSERT, UPDATE, and DELETE.",
  "Initialize the table name.",
  ":param table_name: str",
  "Generates a SELECT SQL statement based on the specified fields and conditions.",
  ":param fields: list, optional. Default is None. The list of fields to be queried.\n        :param condition: str, optional. Default is None. The condition expression for the query.",
  ":return: str. The generated SQL statement.",
  ">>> sql = SQLGenerator('table1')\n        >>> sql.select(['field1', 'field2'], 'filed3 = value1')\n        'SELECT field1, field2 FROM table1 WHERE filed3 = value1;'",
  "Generates an INSERT SQL statement based on the given data.",
  ":param data: dict. The data to be inserted, in dictionary form where keys are field names and values are field values.",
  ":return: str. The generated SQL statement.",
  ">>> sql.insert({'key1': 'value1', 'key2': 'value2'})\n        \"INSERT INTO table1 (key1, key2) VALUES ('value1', 'value2');\"",
  "Generates an UPDATE SQL statement based on the given data and condition.",
  ":param data: dict. The data to be updated, in dictionary form where keys are field names and values are new field values.\n        :param condition: str. The condition expression for the update.",
  ":return: str. The generated SQL statement.",
  ">>> sql.update({'field1': 'new_value1', 'field2': 'new_value2'}, \"field3 = value1\")\n        \"UPDATE table1 SET field1 = 'new_value1', field2 = 'new_value2' WHERE field3 = value1;\"",
  "Generates a DELETE SQL statement based on the given condition.",
  ":param condition: str. The condition expression for the delete.",
  ":return: str. The generated SQL statement.",
  ">>> sql.delete(\"field1 = value1\")\n        'DELETE FROM table1 WHERE field1 = value1;'",
  "Generates a SQL statement to select females under a specified age.",
  ":param age: int. The specified age.",
  ":return: str. The generated SQL statement.",
  ">>> sql.select_female_under_age(30)\n        \"SELECT * FROM table1 WHERE age < 30 AND gender = 'female';\"",
  "Generates a SQL statement to select records within a specified age range.",
  ":param min_age: int. The minimum age.\n        :param max_age: int. The maximum age.",
  ":return: str. The generated SQL statement.",
  ">>> sql.select_by_age_range(20, 30)\n        'SELECT * FROM table1 WHERE age BETWEEN 20 AND 30;'"
]