[
  "The Arrangement class provides permutation calculations and selection operations for a given set of data elements.",
  "Initializes the ArrangementCalculator object with a list of datas.",
  ":param datas: List, the data elements to be used for arrangements.",
  "Counts the number of arrangements by choosing m items from n items (permutations).\n        If m is not provided or n equals m, returns factorial(n).",
  ":param n: int, the total number of items.\n        :param m: int, the number of items to be chosen (default=None).",
  ":return: int, the count of arrangements.",
  ">>> ArrangementCalculator.count(5, 3)\n        60",
  "Counts the total number of all possible arrangements by choosing at least 1 item and at most n items from n items.",
  ":param n: int, the total number of items.",
  ":return: int, the count of all arrangements.",
  ">>> ArrangementCalculator.count_all(4)\n        64",
  "Generates a list of arrangements by selecting m items from the internal datas.\n        If m is not provided, selects all items.",
  ":param m: int, the number of items to be chosen (default=None).",
  ":return: List, a list of arrangements.",
  ">>> ac = ArrangementCalculator([1, 2, 3, 4])\n        >>> ac.select(2)\n        [[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 4], [3, 1], [3, 2], [3, 4], [4, 1], [4, 2], [4, 3]]",
  "Generates a list of all arrangements by selecting at least 1 item and at most the number of internal datas.",
  ":return: List, a list of all arrangements.",
  ">>> ac = ArrangementCalculator([1, 2, 3])\n        >>> ac.select_all()\n        [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
  "Calculates the factorial of a given number.",
  ":param n: int, the number to calculate the factorial.",
  ":return: int, the factorial of the given number.",
  " >>> ArrangementCalculator.factorial(4)\n        24"
]