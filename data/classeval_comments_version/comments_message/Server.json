[
  "# This is a class as a server, which handles a white list, message sending and receiving, and information display.",
  "Initialize the whitelist as an empty list, and initialize the sending and receiving information as an empty dictionary",
  "Add an address to the whitelist and do nothing if it already exists",
  ":param addr: int, address to be added",
  ":return: new whitelist, return False if the address already exists",
  ">>> server = Server()\n        >>> server.add_white_list(88)\n        [88]",
  "Remove an address from the whitelist and do nothing if it does not exist",
  ":param addr: int, address to be deleted",
  ":return: new whitelist, return False if the address does not exist",
  ">>> server.add_white_list(88)\n        >>> server.del_white_list(88)\n        []",
  "Receive information containing address and content. If the address is on the whitelist, receive the content; otherwise, do not receive it",
  ":param info: dict, information dictionary containing address and content",
  ":return: if successfully received, return the content of the infomation; otherwise, return False",
  ">>> server.recv({\"addr\":88,\"content\":\"abc\"})\n        abc",
  "Send information containing address and content",
  ":param info: dict, information dictionary containing address and content",
  ":return: if successfully sent, return nothing; otherwise, return a string indicating an error message",
  ">>> server.send({\"addr\":66,\"content\":\"ABC\"})\n        self.send_struct = {\"addr\":66,\"content\":\"ABC\"}",
  "Returns struct of the specified type",
  ":param type: string, the type of struct to be returned, which can be 'send' or 'receive'",
  ":return: if type is equal to 'send' or 'receive', return the corresponding struct; otherwise, return False",
  ">>> server.recv({\"addr\":88,\"content\":\"abc\"})\n        >>> server.send({\"addr\":66,\"content\":\"ABC\"})\n        >>> server.show(\"send\")\n        {\"addr\":66,\"content\":\"ABC\"}"
]