[
  "This is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space",
  "Initializes the EmailClient class with the email address and the capacity of the email box.",
  ":param addr: The email address, str.\n        :param capacity: The capacity of the email box, float.",
  "Sends an email to the given email address.",
  ":param recv: The email address of the receiver, str.\n        :param content: The content of the email, str.\n        :param size: The size of the email, float.",
  ":return: True if the email is sent successfully, False if the receiver's email box is full.",
  ">>> sender = EmailClient('sender@example.com', 100)\n        >>> receiver = EmailClient('receiver@example.com', 50)\n        >>> sender.send_to(receiver, 'Hello', 10)\n        True\n        >>> receiver.inbox\n        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}\n",
  "Retrieves the first unread email in the email box and marks it as read.",
  ":return: The first unread email in the email box, dict.",
  ">>> sender = EmailClient('sender@example.com', 100)\n        >>> receiver = EmailClient('receiver@example.com', 50)\n        >>> receiver.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}]\n        >>> receiver.fetch()\n        {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'read'}",
  "Determines whether the email box is full after adding an email of the given size.",
  ":param size: The size of the email, float.",
  ":return: True if the email box is full, False otherwise.",
  ">>> sender = EmailClient('sender@example.com', 100)\n        >>> receiver = EmailClient('receiver@example.com', 50)\n        >>> receiver.is_full_with_one_more_email(10)\n        False",
  "Gets the total size of the emails in the email box.",
  ":return: The total size of the emails in the email box, float.",
  ">>> sender = EmailClient('sender@example.com', 100)\n        >>> receiver = EmailClient('receiver@example.com', 50)\n        >>> sender.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': datetime.now, 'state': 'unread'}]\n        >>> sender.get_occupied_size()\n        10",
  "Clears the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.",
  ":param size: The size of the email, float.",
  ">>> sender = EmailClient('sender@example.com', 100)\n        >>> receiver = EmailClient('receiver@example.com', 50)\n        >>> receiver.inbox = [{'size': 10},{'size': 20},{'size': 15}]\n        >>> receiver.clear_inbox(30)\n        >>> receiver.inbox\n        [{'size': 15}]"
]