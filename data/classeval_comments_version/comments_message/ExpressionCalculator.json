[
  "# This is a class in Python that can perform calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.",
  "Initialize the expression calculator",
  "Calculate the result of the given postfix expression",
  ":param expression: string, the postfix expression to be calculated",
  ":return: float, the calculated result",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.calculate(\"2 + 3 * 4\")\n        14.0",
  "Prepare the infix expression for conversion to postfix notation",
  ":param expression: string, the infix expression to be prepared",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.prepare(\"2+3*4\")\n\n        expression_calculator.postfix_stack = ['2', '3', '4', '*', '+']",
  "Check if a character is an operator in {'+', '-', '*', '/', '(', ')', '%'}",
  ":param c: string, the character to be checked",
  ":return: bool, True if the character is an operator, False otherwise",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.is_operator(\"+\")\n        True",
  "Compare the precedence of two operators",
  ":param cur: string, the current operator\n        :param peek: string, the operator at the top of the operator stack",
  ":return: bool, True if the current operator has higher or equal precedence, False otherwise",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.compare(\"+\", \"-\")\n        True",
  "Perform the mathematical calculation based on the given operands and operator",
  ":param first_value: string, the first operand\n        :param second_value: string, the second operand\n        :param current_op: string, the operator",
  ":return: decimal.Decimal, the calculated result",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator._calculate(\"2\", \"3\", \"+\")\n        5.0",
  "Transform the infix expression to a format suitable for conversion",
  ":param expression: string, the infix expression to be transformed",
  ":return: string, the transformed expression",
  ">>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.transform(\"2 + 3 * 4\")\n        \"2+3*4\""
]