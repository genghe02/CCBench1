[
  "# The class manages inventory and orders, including adding products, updating product quantities, retrieving product quantities, creating orders, changing order statuses, and tracking orders.",
  "Initialize two fields.\n        self.inventory is a dict that stores the products.\n        self.inventory = {Product ID: Product}\n        self.orders is a dict that stores the products in a order.\n        self.orders = {Order ID: Order}",
  "Add product to inventory and plus the quantity if it has existed in inventory.\n        Or just add new product to dict otherwise.",
  ":param product_id: int\n        :param name: str, product name\n        :param quantity: int, product quantity",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.inventory\n        {1: {'name': 'product1', 'quantity': 3}}",
  "According to product_id, add the quantity to the corresponding product in inventory.",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.update_product_quantity(1, -1)\n        >>> warehouse.inventory\n        {1: {'name': 'product1', 'quantity': 2}}",
  "Get the quantity of specific product by product_id.",
  ":param product_id, int",
  ":return: if the product_id is in inventory then return the corresponding quantity,\n                or False otherwise.",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.get_product_quantity(1)\n        3\n        >>> warehouse.get_product_quantity(2)\n        False",
  "Create a order which includes the infomation of product, like id and quantity.\n        And put the new order into self.orders.\n        The default value of status is 'Shipped'.",
  ":param order_id: int\n        :param product_id: int\n        :param quantity: the quantity of product that be selected.",
  ":return False: only if product_id is not in inventory or the quantity is not adequate",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.create_order(1, 1, 2)\n        >>> warehouse.orders\n        {1: {'product_id': 1, 'quantity': 2, 'status': 'Shipped'}}\n        >>> warehouse.create_order(1, 2, 2)\n        False",
  "Change the status of order if the input order_id is in self.orders.",
  ":param order_id: int\n        :param status: str, the state that is going to change to",
  ":return False: only if the order_id is not in self.orders",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.create_order(1, 1, 2)\n        >>> warehouse.change_order_status(1, \"done\")\n        >>> warehouse.orders\n        {1: {'product_id': 1, 'quantity': 2, 'status': 'done'}}",
  "Get the status of specific order.",
  ":param order_id: int",
  ":return False: only if the order_id is not in self.orders.",
  ">>> warehouse.add_product(1, \"product1\", 3)\n        >>> warehouse.create_order(1, 1, 2)\n        >>> warehouse.track_order(1)\n        'Shipped'"
]