<description for whole class>
class DiscountStrategy:
    def __init__(self, customer, cart, promotion=None):
        <description for whole function>
        <description for all parameters>
        <some test cases for the function>
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    def total(self):
        <description for whole function>
        <description for return statement>
        <some test cases for the function>
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        <description for whole function>
        <description for return statement>
        <some test cases for the function>
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        <description for whole function>
        <description for all parameters>
        <description for return statement>
        <some test cases for the function>
        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        <description for whole function>
        <description for all parameters>
        <description for return statement>
        <some test cases for the function>
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        <description for whole function>
        <description for all parameters>
        <description for return statement>
        <some test cases for the function>
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0

