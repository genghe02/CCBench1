{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    stack = []\n    current_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = []  # Start a new group\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                current_group.append(char)\n                stack.pop()\n                if not stack:  # Only save the group if it's a complete one\n                    groups.append(''.join(current_group))\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split(' ')\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        result.append(max_depth)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == \"\":\n        return \"\"\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix to the suffix\n            return string + string[:i][::-1]\n    \n    return string + string[::-1]  # In case the whole string is not a palindrome"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = []\n    for bit_a, bit_b in zip(a, b):\n        result.append('0' if bit_a == bit_b else '1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    durations = [note_duration[note] for note in notes]\n    \n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow overlap\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n        'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n        'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    num_list = numbers.split()\n    # Convert words to numbers using the dictionary\n    num_list = [num_dict[num] for num in num_list]\n    # Sort the list of numbers\n    num_list.sort()\n    # Convert numbers back to words\n    sorted_numbers = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    # Join the sorted words into a single string\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # In case n is 1, the largest divisor is 1 itself."}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    \n    return [number for number in numbers if count[number] == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    \"\"\"Evaluates polynomial with coefficients xs at point x.\"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list):\n    \"\"\"Find x such that poly(x) = 0.\"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list must have an even number of coefficients.\")\n    \n    # Use fsolve to find a root, starting from a guess of 0\n    root = fsolve(poly, 0, args=(xs,))\n    return root[0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    result = l[:]\n    \n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n            \n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        return None  # Handle empty list case\n    max_value = l[0]\n    for element in l:\n        if element > max_value:\n            max_value = element\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices = sorted(l[i] for i in range(0, len(l), 2))\n    result = []\n    even_index = 0\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements back in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib1, fib2 = 0, 1\n    count = 0\n    prime_fibs = []\n    \n    while count < n:\n        fib = fib1 + fib2\n        fib1, fib2 = fib2, fib\n        \n        if is_prime(fib):\n            prime_fibs.append(fib)\n            count += 1\n            \n    return prime_fibs[n - 1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip duplicates\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    digits.reverse()\n    return ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib = [0] * (n + 1)\n    fib[0], fib[1], fib[2], fib[3] = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n    \n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n            if count < 0:  # More closing than opening brackets\n                return False\n    return count == 0  # All opening brackets should be closed"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    if not l:  # empty list case\n        return True\n\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    largest = None\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    # n must be odd at this point, thus a skip of 2 (i.e., check only odd numbers) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n //= i\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest = n\n    return largest"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" \n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [coeff * i for i, coeff in enumerate(xs) if i > 0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_sequence = [0, 0, 1]  # Initializing the first three values\n    for i in range(3, n + 1):\n        next_value = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n        fibfib_sequence.append(next_value)\n    \n    return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    s_lower = s.lower()\n    \n    for i in range(len(s_lower)):\n        if s_lower[i] in vowels:\n            count += 1\n        elif s_lower[i] == 'y' and i == len(s_lower) - 1:\n            count += 1\n            \n    return count\n\n# Add more test cases\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"sky\"))    # 0\nprint(vowels_count(\"skyY\"))   # 1\nprint(vowels_count(\"aeiou\"))  # 5\nprint(vowels_count(\"AEIY\"))   # 4\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"rhythmy\"))  # 1\nprint(vowels_count(\"\"))  # 0"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift >= length:\n        return x_str[::-1]\n    \n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple_count = int(s.split()[0])  # Extract number of apples\n    orange_count = int(s.split()[3])  # Extract number of oranges\n    mango_count = n - apple_count - orange_count  # Calculate mango count\n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:  # Find the smallest even value\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    \n    frequency = Counter(lst)\n    result = -1\n    \n    for number in frequency:\n        if number > 0 and frequency[number] >= number:\n            result = max(result, number)\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    \"\"\"\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if a < 8:\n        return False\n    count = 0\n    for p in primes:\n        while a % p == 0:\n            a //= p\n            count += 1\n            if count > 3:\n                return False\n    return a == 1 and count == 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return x == 0\n    if x < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        x = -round(abs(a) ** (1/3))\n    else:\n        x = round(a ** (1/3))\n    return x ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f'db{binary}db'  # Add 'db' at the beginning and end"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n < 1:\n        return 0\n    \n    # Count of numbers that start with 1\n    start_with_1 = 10**(n - 1)  # e.g., 1xxxx... (n-1 digits can vary)\n\n    # Count of numbers that end with 1\n    end_with_1 = 10**(n - 1)     # e.g., xxxx...1 (n-1 digits can vary)\n\n    # Count of numbers that start and end with 1 (to handle double counting)\n    start_and_end_with_1 = 10**(n - 2) if n > 1 else 0  # e.g., 1xx...1 (n-2 digits can vary)\n\n    # Total count is the sum of start_with_1 and end_with_1 minus double counted\n    return start_with_1 + end_with_1 - start_and_end_with_1"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    def order_word(word):\n        return ''.join(sorted(word))\n    \n    words = s.split(' ')\n    ordered_words = [order_word(word) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    # Sort by row (ascending) and then by column (descending)\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():  # process only alphabetic characters\n            shifted = ord(char) + 4  # shift by 4 positions (2 * 2)\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n            result.append(chr(shifted))\n        else:\n            result.append(char)  # keep non-alphabet characters unchanged\n    return ''.join(result)\n\n# Test cases\nprint(encrypt('hi'))         # returns 'lm'\nprint(encrypt('asdfghjkl'))  # returns 'ewhjklnop'\nprint(encrypt('gf'))         # returns 'kj'\nprint(encrypt('et'))         # returns 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n    sentences.extend(S.split('!'))\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            swapped_char = char.swapcase()\n            # Replace vowels\n            if swapped_char in vowels:\n                if swapped_char.islower():\n                    # For lowercase vowels\n                    replaced_char = chr(ord(swapped_char) + 2)\n                else:\n                    # For uppercase vowels\n                    replaced_char = chr(ord(swapped_char) + 2)\n                encoded_message.append(replaced_char)\n            else:\n                encoded_message.append(swapped_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    \n    all_lower = all(isinstance(k, str) and k.islower() for k in d.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d.keys())\n    \n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n < 2:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)  # Round up for positive numbers\n    else:\n        return int(num - 0.5)  # Round down for negative numbers"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    for i in range(n):\n        stones.append(current_stones)\n        if n % 2 == 0:  # even case\n            current_stones += 2\n        else:           # odd case\n            current_stones += 2\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \"\"\"\n    return [word.strip() for word in s.replace(',', ' ').split() if word]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    # Find the largest even number in the range [x, y]\n    if y % 2 == 0:\n        largest_even = y\n    else:\n        largest_even = y - 1\n    if largest_even < x:\n        return -1\n    return largest_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary = bin(rounded_avg)\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    return [names[x - 1] for x in filtered]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i is even\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:  # i is odd\n            total_sum = sum(range(1, i + 1))\n            result.append(total_sum)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    def sum_of_digits(num):\n        signed_digits = list(str(num))\n        return sum(int(d) if i > 0 or num >= 0 else -int(d) for i, d in enumerate(signed_digits))\n\n    count = sum(1 for num in arr if sum_of_digits(num) > 0)\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    Determine if it is possible to sort the array in non-decreasing order\n    by performing right shift operations any number of times.\n    \"\"\"\n    if not arr:\n        return True\n\n    n = len(arr)\n    # Find the index of the maximum element\n    max_index = arr.index(max(arr))\n\n    # Check if the elements after the max (including) are in sorted order\n    for i in range(max_index, max_index + n):\n        if arr[i % n] < arr[(i + 1) % n]:\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_in_lst1 = any(x % 2 != 0 for x in lst1)\n    even_in_lst2 = any(y % 2 == 0 for y in lst2)\n    \n    if not odd_in_lst1 or (odd_in_lst1 and even_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    count_dict = {}\n    \n    for letter in letters:\n        count_dict[letter] = count_dict.get(letter, 0) + 1\n\n    max_count = max(count_dict.values())\n    result = {letter: count for letter, count in count_dict.items() if count == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    is_palindrome = result == result[::-1]\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    current_sum = float('inf')\n    min_sum = float('inf')\n    \n    for num in nums:\n        if current_sum > 0:\n            current_sum = num\n        else:\n            current_sum += num\n            \n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones in their binary representation\n    in ascending order. For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    if not s:\n        return []\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    \n    # Check if the word has at least three letters (to have consonants with a vowel in between)\n    if n < 3:\n        return \"\"\n    \n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i - 1].isalpha() and word[i + 1].isalpha():\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n                \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(a, b):\n        # Combine the strings\n        s = a + b\n        balance = 0\n        \n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:  # More ')' than '(' at any point\n                return False\n        \n        return balance == 0  # Should end with a balanced count\n    \n    # Check both concatenation orders\n    if is_good(lst[0], lst[1]) or is_good(lst[1], lst[0]):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k == 0:\n        return []\n    return sorted(sorted(arr)[-k:])"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum_of_elements = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:  # Check if the element has at most two digits\n            sum_of_elements += arr[i]\n    return sum_of_elements"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\"\"\"\n    collatz_sequence = []\n    \n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    collatz_sequence.append(1)  # Add the final term 1\n    odd_numbers = sorted(num for num in collatz_sequence if num % 2 != 0)\n    \n    return odd_numbers"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29  # Leap year handling is not required as per the problem statement\n    \n    return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    seen = set()\n    previous = None\n\n    for number in lst:\n        if previous is not None and number < previous:\n            return False\n        if number in seen:\n            return False\n        seen.add(number)\n        previous = number\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    if not arr:\n        return None\n    \n    product_sign = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            magnitude_sum += num\n        elif num < 0:\n            magnitude_sum += -num\n            product_sign *= -1\n        else:\n            return 0  # If there's a zero, product sign is zero\n    \n    return magnitude_sum * product_sign"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from heapq import heappop, heappush\n\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_heap = []\n    \n    # Initialize the heap with all cells as starting points for paths\n    for i in range(n):\n        for j in range(n):\n            heappush(min_heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    while min_heap:\n        value, x, y, path = heappop(min_heap)\n\n        # If we have reached the required path length\n        if len(path) == k:\n            return path\n\n        # Explore neighbors\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                heappush(min_heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Generate the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n < 0:\n        return []\n    \n    tribonacci = [0] * (n + 1)\n    \n    # Base case\n    tribonacci[0] = 1  # tri(0) = 1\n    if n >= 1:\n        tribonacci[1] = 3  # tri(1) = 3\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i / 2\n        else:\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1] if i + 1 <= n else tribonacci[i - 1] + tribonacci[i - 2] + 3\n\n    return tribonacci"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    count = 0\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        \n        if count > 1:\n            nested = True\n        \n        if count < 0:\n            return False\n    \n    return nested and count == 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    last_char = txt.rstrip()[-1]\n    return last_char.isalpha() and (txt.rstrip()[-2] == ' ' or len(txt.rstrip()) == 1)\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def parse_input(value):\n        if isinstance(value, str):\n            return float(value.replace(',', '.'))\n        return float(value)\n    \n    parsed_a = parse_input(a)\n    parsed_b = parse_input(b)\n    \n    if parsed_a == parsed_b:\n        return None\n    return a if parsed_a > parsed_b else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    # The smallest sum of 4 positive even numbers (2 + 2 + 2 + 2 = 8)\n    if n < 8:\n        return False\n    # For any even number greater than or equal to 8, it can be expressed as the sum of four positive even numbers.\n    return n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    from math import factorial\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    if '   ' in text:\n        text = text.replace('   ', '-')\n        while '  ' in text:\n            text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n    \n    if len(extension) == 0 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in name)\n    \n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    \n    result_numerator = numerator_x * numerator_n\n    result_denominator = denominator_x * denominator_n\n    \n    return result_numerator % result_denominator == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    def is_odd_digit(d):\n        return d in {'1', '3', '5', '7', '9'}\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The order of the list should be ascending by length of each word,\n    with alphabetical sorting for words of the same length.\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    if not lst:\n        return 0\n    total = sum(x**2 for x in lst if isinstance(x, int) and x % 2 != 0 and x >= 0)\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b == a[i:i+len(b)] for i in range(len(a))) or any(b == a[i:i+len(b)] for i in range(len(a)) for b in (b[i:] + b[:i] for i in range(len(b))))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\"\"\"\n    num_str = str(abs(num))  # Convert to string and handle negative numbers by taking absolute value\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    \"\"\"\n    if number < 1 or number > 1000:\n        return \"\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = \"\"\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n        \n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_count or (unique_chars == max_unique_count and word < max_word):\n            max_unique_count = unique_chars\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b + 1) if num % 2 == 0]"}
