 def order\_by\_points(nums):
"""
Sort a list of numbers based on the sum of their digits in an efficient way.

:param nums: list, a list of numbers to be sorted
:return: list, the sorted list of numbers
"""

# Define a helper function to calculate the sum of digits for a given number
def digits\_sum(n):
"""
Calculate the sum of digits for a given number.

:param n: int or float, a number
:return: int, the sum of digits for the number
"""
neg = 1
if n < 0: n, neg = -1 * n, -1
n = [int(i) for i in str(n)]
n[0] = n[0] * neg
return sum(n)

# Use the sorted function with a key function as an argument to sort the list based on the sum of digits
return sorted(nums, key=digits\_sum)

# Test cases
# Test with a list of positive numbers
assert order\_by\_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Test with a list of negative numbers
assert order\_by\_points([-1, -2, -3, -4, -5]) == [5, 4, 3, 2, 1]

# Test with a list of mixed numbers
assert order\_by\_points([1, -2, 3, 4, 5]) == [1, 3, 4, 5, -2]

# Test with an empty list
assert order\_by\_points([]) == []