 from typing import List


def sort_numbers(numbers: str) -> str:
 # This function takes a string as an argument, which contains space-separated numbers, and returns a string with the same numbers but sorted in ascending order.

 # Requirements for the code:
 # 1. Convert the input string to a list of strings using the split() method.
 # 2. Filter out any non-number strings using a list comprehension.
 # 3. Create a dictionary called value_map that maps each number string to its corresponding integer value.
 # 4. Use a lambda function as the key argument for the sorted() function to sort the list based on the integer values.
 # 5. Join the sorted list back into a string using the join() method and a space character as the separator.

 value_map = {
 'zero': 0,
 'one': 1,
 'two': 2,
 'three': 3,
 'four': 4,
 'five': 5,
'six': 6,
'seven': 7,
 'eight': 8,
 'nine': 9
 }

 # Test cases for the function:
 # >>> sort_numbers('one two three four five')
 # 'one two three four five'
 # >>> sort_numbers('five four three two one')
 # 'one two three four five'
 # >>> sort_numbers('nine eight seven six five four three two one zero')
 # 'zero one two three four five six seven eight nine'
 # >>> sort_numbers('one two three three three')
 # 'one two three three three'
 # >>> sort_numbers('one two three a b c')
 # 'a b c one two three'

 return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))