 def sort_array(arr):
 # Sort the input array first using the built-in sorted function, and then apply a custom sorting based on the binary representation of each element using lambda function as key.
 # param arr: list or tuple, the input array to be sorted
 result = sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
 # Return the sorted array
 return result

 # Test cases
 >>> sort_array([3, 1, 4, 1, 5, 9, 2, 6, 5])
 [1, 1, 3, 4, 5, 5, 6, 9]
 >>> sort_array([10, 5, 15, 6, 3, 8, 12, 7])
 [3, 5, 6, 7, 8, 10, 12, 15]
 >>> sort_array([0, 0, 0, 0, 0, 0, 0, 0])
 [0]
 >>> sort_array([1, 1, 1, 1, 1, 1, 1, 1, 2])
 [1, 1, 1, 1, 1, 1, 1, 1] # Since all elements are the same, the function returns the original array
 >>> sort_array([1, 2, 2, 2, 2, 2, 2, 2, 3])
 [1, 1, 1, 1, 1, 1, 1, 2, 3] # Since the first element is different from the rest, it is placed at the beginning of the sorted array.