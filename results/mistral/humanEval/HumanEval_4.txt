 from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """
    Calculate the Mean Absolute Deviation (MAD) of a list of numbers.

    :param numbers: List[float], a list of numbers to calculate the MAD for
    :return: float, the Mean Absolute Deviation of the given numbers
    """
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)

    # Test cases
    >>> mean_absolute_deviation([1, 2, 3])
    1.0
    >>> mean_absolute_deviation([1, 1, 1, 1, 1])
    0.0
    >>> mean_absolute_deviation([1, 2, 1, 2, 1])
    0.6666666666666666
    >>> mean_absolute_deviation([10, 10, 10, 10, 10])
    0.0
    >>> mean_absolute_deviation([1, 2, 3, 4, 5])
    1.1
    >>> mean_absolute_deviation([1, 2, 3, 4, 5, 6])
    1.2
    >>> mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7])
    1.3333333333333333
    >>> mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8])
    1.4444444444444445