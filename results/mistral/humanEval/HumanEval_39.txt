 def prime_fib(n: int):
 # Generate the n-th prime fibonacci number using recursive helper function is_prime to check if a number is prime.

 # Check if input is valid
 if n <= 0:
 raise ValueError("Input should be a positive integer.")

 # Helper function to check if a number is prime
 def is_prime(p):
 """
 :param p: int, the number to check if it's prime
 :return: bool, True if the number is prime, False otherwise
 """
 if p < 2:
 return False
 for k in range(2, int(math.sqrt(p)) + 1):
 if p % k == 0:
 return False
 return True

 # Initialize the first two numbers in the sequence
 f = [0, 1]

 # Generate the prime fibonacci sequence until the desired number is found
 while True:
 next_number = f[-1] + f[-2]
 f.append(next_number)
 if is_prime(next_number) and next_number > n:
 return next_number - 1
 n -= 1
```

Test cases:
```python
# Test prime_fib with valid inputs
print(prime_fib(1)) # 1
print(prime_fib(2)) # 1
print(prime_fib(3)) # 2
print(prime_fib(5)) # 5
print(prime_fib(13)) # 89

# Test prime_fib with invalid inputs
print(prime_fib(0)) # Raises ValueError
print(prime_fib(-1)) # Raises ValueError
print(prime_fib(1.5)) # Raises TypeError
```