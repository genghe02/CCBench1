 def correct_bracketing(brackets: str):
    """
    Checks if the given string of brackets is correctly bracketed.

    :param brackets: str, a string containing only "<" and ">" symbols representing the brackets.

    <Requirements for the code>

    The function keeps track of the depth of the brackets using a variable 'depth'. It iterates through each character in the string and checks if it is a "<" or a ">". If it is a "<", the depth increases, otherwise it decreases. If at any point the depth becomes negative, the function returns False. If the function reaches the end of the string and the depth is zero, it returns True.
    """

    depth = 0
    for b in brackets:
        if b == "<":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0

    <some test cases for the function>
    >>> correct_bracketing("<>")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("()<>")
    False
    >>> correct_bracketing("(<)(>)")
    True
    >>> correct_bracketing("(<)(<)(>)(>)")
    True
    >>> correct_bracketing("(<)(<)(<)(>)")
    False