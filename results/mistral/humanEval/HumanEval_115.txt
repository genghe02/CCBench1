 def max_fill(grid, capacity):
 # Calculate the total amount of water that can be filled in a grid with given capacity.
 import math

 # Description for the function
 """
 Fill the grid with water up to its capacity and return the total amount of water filled.
 :param grid: list of lists, representing a 2D grid where each sublist represents a row.
 :param capacity: int, maximum capacity of water that can be filled in a cell.
 :return: int, total amount of water filled in the grid.
 """

 # Description for the internal content
 result = 0
 for row in grid:
 # Find the total amount of water that can be filled in each row and add it to the result.
 result += math.ceil(sum(row) / capacity)

 # Test cases
 >>> grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 >>> capacity = 3
 >>> max_fill(grid, capacity)
 10
 >>> grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 >>> capacity = 2
 >>> max_fill(grid, capacity)
 11
 >>> grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 >>> capacity = 4
 >>> max_fill(grid, capacity)
 13
 >>> grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 >>> capacity = 1
 >>> max_fill(grid, capacity)
 17
 >>> grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 >>> capacity = 5
 >>> max_fill(grid, capacity)
 15
 >>> grid = [[], [], []]
 >>> capacity = 1
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 2
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 3
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 4
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 5
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 6
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 7
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 8
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 9
 >>> max_fill(grid, capacity)
 0
 >>> grid = [[], [], []]
 >>> capacity = 10
 >>> max_fill(grid, capacity)
 0