 from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    # This function takes a string as an argument and returns a list of substrings,
    # where each substring is enclosed by a pair of matching parentheses.

    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    # In case there are remaining parentheses in the string, add the last substring to the result.
    if current_string:
        result.append(''.join(current_string))

    return result

    <some test cases for the function>
    >>> separate_paren_groups('((a + b) * (c + d))')
    ['(a + b)', '(c + d)']

    >>> separate_paren_groups('a * (b + c)')
    ['a', '(b + c)']

    >>> separate_paren_groups('(a + b) * c')
    ['(a + b)', 'c']

    >>> separate_paren_groups('(a + b) * (c + d) * e')
    ['(a + b)', '(c + d)', 'e']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f')
    ['(a + b)', '(c + d)', 'e', 'f']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g')
    ['(a + b)', '(c + d)', 'e', 'f * g']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h * i')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h * i']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h * i * j')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h * i * j']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h * i * j * k')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h * i * j * k']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h * i * j * k * l')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h * i * j * k * l']

    >>> separate_paren_groups('(a + b) * (c + d) * e + f * g * h * i * j * k * l * m')
    ['(a + b)', '(c + d)', 'e', 'f * g', 'h * i * j * k * l * m']