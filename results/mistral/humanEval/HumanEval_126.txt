 def is\_sorted(lst):
 # Check if the given list is sorted in ascending order.

 # Requirements for the code:
 # 1. Iterate through the list to compare each element with its neighbor.
 # 2. Use a dictionary to count the occurrences of each element in the list.
 # 3. Check if there is any element that appears more than twice in the list.
 # 4. Check if the list is sorted by comparing each element with its previous element.

 result = True
 count_digit = {}

 # Iterate through the list and count the occurrences of each element.
 for i in lst:
 count_digit[i] = count_digit.get(i, 0) + 1

 # Check if there is any element that appears more than twice in the list.
 if any(count_digit[i] > 2 for i in lst):
 result = False
 break

 # Check if the list is sorted.
 if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
 result = True

 # Test cases for the function:
 # Test case 1: Empty list is sorted.
 print(is_sorted([])) # True

 # Test case 2: List with single element is sorted.
 print(is_sorted([1])) # True

 # Test case 3: Sorted list.
 print(is_sorted([1, 2, 3, 4, 5])) # True

 # Test case 4: Unsorted list.
 print(is_sorted([5, 4, 3, 2, 1])) # False

 # Test case 5: List with duplicate elements.
 print(is_sorted([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])) # False

 # Test case 6: List with elements in reverse order.
 print(is_sorted([5, 4, 3, 2, 1])) # False