 from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    # This function takes a string as an argument, which represents a sequence of parentheses, and returns a list of integers.
    # Each integer in the list represents the maximum depth of a nested parentheses group in the corresponding part of the input string.

    <some test cases for the function>
    # Test case 1: Empty string
    >>> parse_nested_parens("")
    []

    # Test case 2: String with no parentheses
    >>> parse_nested_parens("hello world")
    []

    # Test case 3: String with single parentheses
    >>> parse_nested_parens("(1)")
    [1]

    # Test case 4: String with nested parentheses
    >>> parse_nested_parens("((1)(2))")
    [2, 1]

    # Test case 5: String with multiple groups
    >>> parse_nested_parens("((1)(2)) ((3)(4))")
    [2, 1, 2, 1]

    # Helper function to parse a single parentheses group
    def parse_paren_group(s):
        depth = 0
        max_depth = 0

        # Iterate through each character in the string
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        # Return the maximum depth of the parentheses group
        return max_depth

    # Use a list comprehension to parse each parentheses group in the input string and store the results in a list
    return [parse_paren_group(x) for x in paren_string.split(' ') if x]