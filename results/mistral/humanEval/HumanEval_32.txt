 import math

# Define the 'poly' function that calculates the polynomial value given a list of coefficients and a float value for 'x'.

def poly(xs: list, x: float):
# Calculate the polynomial value using the given list of coefficients and the provided value for 'x'.
return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

# Define the 'find_zero' function that finds the zero of a polynomial given a list of coefficients.

def find_zero(xs: list):
# Find the zero of the polynomial represented by the given list of coefficients using the bisection method.

# Requirements for the code:
# This function uses the bisection method to find the zero of a polynomial represented by the given list of coefficients.

# It returns the zero value as a float.
# The function assumes that the coefficients are arranged in the correct order (highest power first).

# some test cases for the function:
# >>> find_zero([1, -2, 3])
# -1.0
# >>> find_zero([1, 2, 1])
# 1.0
# >>> find_zero([1, -1, 1, -1, 1])
# 0.0

begin, end = -1., 1.
# Use the bisection method to find the zero of the polynomial.
while poly(xs, begin) * poly(xs, end) > 0:
begin *= 2.0
end *= 2.0

# Refine the zero estimate using the bisection method.
while end - begin > 1e-10:
center = (begin + end) / 2.0
if poly(xs, center) * poly(xs, begin) > 0:
begin = center
else:
end = center

# Return the zero value.
return begin