 <description for whole class>
# A static class for calculating various statistical measures such as correlation coefficient, skewness, kurtosis, and probability density function (PDF)

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        # Calculate the correlation coefficient between two datasets using the formula: correlation = (sum((xi - x_mean) * (xj - x_mean)) / (sqrt(sum((xi - x_mean) ** 2)) * sqrt(sum((xj - x_mean) ** 2))))
        <description for whole function>
        :param data1: list or array-like, the first dataset
        :param data2: list or array-like, the second dataset
        :return: float, the correlation coefficient between the two datasets

        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator!= 0 else 0

    @staticmethod
    def skewness(data):
        # Calculate the skewness of a dataset using the formula: skewness = (sum((xi - x_mean) ** 3) * n / ((n - 1) * (n - 2) * std_dev ** 3))
        <description for whole function>
        :param data: list or array-like, the dataset
        :return: float, the skewness of the dataset

        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation!= 0 else 0

        return skewness

    @staticmethod
    def kurtosis(data):
        # Calculate the kurtosis of a dataset using the formula: kurtosis = (fourth_moment / std_dev ** 4) - 3
        <description for whole function>
        :param data: list or array-like, the dataset
        :return: float, the kurtosis of the dataset

        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value

    @staticmethod
    def pdf(data, mu, sigma):
        # Calculate the probability density function (PDF) of a dataset using the normal distribution formula: pdf = 1 / (sigma * sqrt(2 * pi)) * exp(-0.5 * ((x - mu) / sigma) ** 2)
        <description for whole function>
        :param data: list or array-like, the dataset
        :param mu: float, the mean value
        :param sigma: float, the standard deviation
        :return: list or array-like, the PDF values for each data point in the dataset

        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values