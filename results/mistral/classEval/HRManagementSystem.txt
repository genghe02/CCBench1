 class HRManagementSystem:
    # This is a class for managing a system of employees, storing their information and providing methods for adding, removing, updating, and getting employee data.
    def __init__(self):
        # Initialize an empty dictionary to store employee information.
        self.employees = {}

    def add_employee(self, employee_id: int, name: str, position: str, department: str, salary: float):
        # Add a new employee to the system by checking if the employee ID already exists and adding the new employee to the dictionary if it doesn't.
        # param employee_id: int, the unique identifier for the employee
        # param name: str, the name of the employee
        # param position: str, the position of the employee
        # param department: str, the department of the employee
        # param salary: float, the salary of the employee
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
               'salary': salary
            }
            return True

    def remove_employee(self, employee_id: int):
        # Remove an employee from the system by checking if the employee ID exists and removing it from the dictionary if it does.
        # param employee_id: int, the unique identifier for the employee to be removed
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        # Update an employee's information by checking if the employee ID exists, and if so, updating the corresponding employee's information in the dictionary.
        # param employee_id: int, the unique identifier for the employee
        # param employee_info: dict, a dictionary containing the new information for the employee
        employee = self.get_employee(employee_id)
        if employee is False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id: int):
        # Retrieve an employee's information by checking if the employee ID exists and returning the corresponding employee's information from the dictionary.
        # param employee_id: int, the unique identifier for the employee
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        # Return a dictionary containing all employees' information in the system.
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data

# Test cases:
# >>> hr_system = HRManagementSystem()
# >>> hr_system.add_employee(1, "John Doe", "Software Engineer", "Engineering", 50000)
# >>> hr_system.add_employee(2, "Jane Doe", "Project Manager", "Projects", 60000)
# >>> hr_system.add_employee(3, "Bob Smith", "Data Analyst", "Data", 45000)
# >>> hr_system.list_employees()
# {1: {'name': 'John Doe', 'position': 'Software Engineer', 'department': 'Engineering','salary': 50000},
#  2: {'name': 'Jane Doe', 'position': 'Project Manager', 'department': 'Projects','salary': 60000},
#  3: {'name': 'Bob Smith', 'position': 'Data Analyst', 'department': 'Data','salary': 45000}}
# >>> hr_system.remove_employee(2)
# True
# >>> hr_system.list_employees()
# {1: {'name': 'John Doe', 'position': 'Software Engineer', 'department': 'Engineering','salary': 50000},
#  3: {'name': 'Bob Smith', 'position': 'Data Analyst', 'department': 'Data','salary': 45000}}
# >>> hr_system.update_employee(1, {'position': 'Senior Software Engineer'})
# True
# >>> hr_system.list_employees()
# {1: {'name': 'John Doe', 'position': 'Senior Software Engineer', 'department': 'Engineering','salary': 50000},
#  3: {'name': 'Bob Smith', 'position': 'Data Analyst', 'department': 'Data','salary': 45000}}