 <description for whole class>
# A class for calculating combinations of elements from a given list of strings using recursion.
class CombinationCalculator:

 <description for whole function>
 # Initializes the CombinationCalculator object with the given list of strings as data.
 def __init__(self, datas: List[str]):
 self.datas = datas

 <description for whole function>
 # Static method to calculate the number of combinations of 'n' items taken'm' at a time.
 @staticmethod
 def count(n: int, m: int) -> int:
 """
 Calculate the number of combinations of 'n' items taken'm' at a time.
 :param n: int, the total number of items.
 :param m: int, the number of items to choose at a time.
 :return: int, the number of combinations.
 """
 if m == 0 or n == m:
 return 1
 return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))

 <description for whole function>
 # Static method to calculate the total number of combinations that can be formed from 'n' items.
 @staticmethod
 def count_all(n: int) -> int:
 """
 Calculate the total number of combinations that can be formed from 'n' items.
 :param n: int, the total number of items.
 :return: int, the total number of combinations.
 """
 if n < 0 or n > 63:
 return False
 return (1 << n) - 1 if n!= 63 else float("inf")

 <description for whole function>
 # Recursive method to generate all combinations of'm' items from the given list.
 def select(self, m: int) -> List[List[str]]:
 """
 Generate all combinations of'm' items from the given list.
 :param m: int, the number of items to choose at a time.
 :return: List[List[str]], a list of lists, where each inner list represents a combination.
 """
 result = []
 self._select(0, [None] * m, 0, result)
 return result

 <description for whole function>
 # Helper function for the select method to generate all combinations recursively.
 def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
 """
 Helper function for the select method to generate all combinations recursively.
 :param dataIndex: int, the index of the current data element in the datas list.
 :param resultList: List[str], the current combination being built.
 :param resultIndex: int, the index of the current position in the result list.
 :param result: List[List[str]], the list to store all combinations.
 """
 resultLen = len(resultList)
 resultCount = resultIndex + 1
 if resultCount > resultLen:
 result.append(resultList.copy())
 return

 for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
 resultList[resultIndex] = self.datas[i]
 self._select(i + 1, resultList, resultIndex + 1, result)