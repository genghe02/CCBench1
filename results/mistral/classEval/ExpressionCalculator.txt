 <description for whole class>
"""
A class for parsing and calculating complex mathematical expressions using postfix notation.
"""

class ExpressionCalculator:
 <description for whole function>
 """
 Initializes the ExpressionCalculator object with an empty postfix stack and a dictionary of operator priorities.
 """
 def __init__(self):
 self.postfix_stack = deque()
 self.operat_priority = {'+': 1, '-': 1, '*': 2, '/': 2, '%': 3, '(': 0, ')': -1}

 <description for whole function>
 """
 Calculates the result of a given mathematical expression using the postfix notation.

 param expression: str, the mathematical expression in infix notation
 """
 def calculate(self, expression):
 self.prepare(self.transform(expression))

 result_stack = deque()
 self.postfix_stack.reverse()

 while self.postfix_stack:
 current_op = self.postfix_stack.pop()
 if not self.is_operator(current_op):
 result_stack.append(current_op)
 else:
 second_value = result_stack.pop()
 first_value = result_stack.pop()

 temp_result = self._calculate(first_value, second_value, current_op)
 result_stack.append(str(temp_result))

 return float(eval("*".join(result_stack)))

 <description for whole function>
 """
 Prepares the given expression for calculation by converting it to postfix notation.

 param expression: str, the mathematical expression in infix notation
 """
 def prepare(self, expression):
 op_stack = deque([','])
 arr = list(expression)
 current_index = 0
 count = 0

 for i, current_op in enumerate(arr):
 if self.is_operator(current_op):
 if count > 0:
 self.postfix_stack.append("".join(arr[current_index: current_index + count]))
 peek_op = op_stack[-1]
 if current_op == ')':
 while op_stack[-1]!= '(':
 self.postfix_stack.append(str(op_stack.pop()))
 op_stack.pop()
 else:
 while current_op!= '(' and peek_op!= ',' and self.compare(current_op, peek_op):
 self.postfix_stack.append(str(op_stack.pop()))
 peek_op = op_stack[-1]
 op_stack.append(current_op)

 count = 0
 current_index = i + 1
 elif current_op == '(':
 op_stack.append(current_op)
 else:
 count += 1

 if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):
 self.postfix_stack.append("".join(arr[current_index: current_index + count]))

 while op_stack[-1]!= ',':
 self.postfix_stack.append(str(op_stack.pop()))

 <description for whole function>
 """
 Checks if a given character is an operator.

 param c: str, the character to check
 """
 @staticmethod
 def is_operator(c):
 """
 Returns True if the given character is an operator, False otherwise.
 """
 return c in {'+', '-', '*', '/', '(', ')', '%'}

 <description for whole function>
 """
 Compares the precedence of two operators.

 param cur: str, the first operator
 param peek: str, the second operator
 """
 @staticmethod
 def compare(cur, peek):
 """
 Returns True if the precedence of the first operator is greater than or equal to the second operator, False otherwise.
 """
 if cur == '%':
 cur = '/'
 if peek == '%':
 peek = '/'
 return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]

 <description for whole function>
 """
 Calculates the result of an arithmetic operation using the given operands and operator.

 param first_value: str or Decimal, the first operand
 param second_value: str or Decimal, the second operand
 param current_op: str, the operator
 """
 @staticmethod
 def _calculate(first_value, second_value, current_op):
 """
 Performs the given arithmetic operation on the given operands and returns the result.
 """
 if current_op == '+':
 return Decimal(first_value) + Decimal(second_value)
 elif current_op == '-':
 return Decimal(first_value) - Decimal(second_value)
 elif current_op == '*':
 return Decimal(first_value) * Decimal(second_value)
 elif current_op == '/':
 return Decimal(first_value) / Decimal(second_value)
 elif current_op == '%':
 return Decimal(first_value) % Decimal(second_value)
 else:
 raise ValueError("Unexpected operator: {}".format(current_op))

 <description for whole function>
 """
 Converts a given mathematical expression from infix notation to postfix notation.

 param expression: str, the mathematical expression in infix notation
 """
 @staticmethod
 def transform(expression):
 """
 Returns the postfix representation of the given mathematical expression.
 """
 expression = re.sub(r"\s+", "", expression)
 expression = re.sub(r"=$", "", expression)
 arr = list(expression)

 for i, c in enumerate(arr):
 if c == '-':
 if i == 0:
 arr[i] = '~'
 else:
 prev_c = arr[i - 1]
 if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:
 arr[i] = '~'

 if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):
 arr[0] = '-'
 return "0" + "".join(arr)
 else:
 return "".join(arr)

 <some test cases for the function>
 >>> calc = ExpressionCalculator()
 >>> calc.calculate("1 + 2 * (3 + 4)")
 7.0
 >>> calc.calculate("100 * (5 + 5) / 2")
 125.0
 >>> calc.calculate("10 * (20 + 3 * 5)")
 350.0
 >>> calc.calculate("10 * (20 + 3 * 5) / 2")
 262.5
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5")
 277.5
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5 * 2")
 305.0
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5 * 2 - 3")
 302.0
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5 * 2 - 3 * 2")
 297.0
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5 * 2 - 3 * 2 % 2")
 295.0
 >>> calc.calculate("10 * (20 + 3 * 5) / 2 + 5 * 2 - 3 * 2 % 2 + 1")
 296.0