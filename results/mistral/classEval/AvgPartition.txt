 class AvgPartition:
    """
    This is a class for partitioning a list into sub-lists of a given size with the last sub-list possibly smaller, ensuring an average sub-list size.
    """

    def __init__(self, lst, limit):
        """
        Initialize the AvgPartition object with the given list and limit.

        :param lst: list, the input list to be partitioned
        :param limit: int, the desired size of each sub-list
        """
        self.lst = lst
        self.limit = limit

    def setNum(self):
        """
        Calculate the number of sub-lists and the remainder.

        :return: tuple, a tuple containing the number of full sub-lists and the remainder
        """
        size = len(self.lst) // self.limit
        remainder = len(self.lst) % self.limit
        return size, remainder

    def get(self, index):
        """
        Retrieve the sub-list at the given index.

        :param index: int, the index of the desired sub-list
        :return: list, the sub-list at the given index
        """
        size, remainder = self.setNum()
        start = index * size + min(index, remainder)
        end = start + size
        if index + 1 <= remainder:
            end += 1
        return self.lst[start:end]

# Test cases
lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
avg_partition = AvgPartition(lst, 5)

# Test get method with valid indices
print(avg_partition.get(0))
print(avg_partition.get(2))

# Test get method with an index larger than the number of sub-lists
print(avg_partition.get(len(avg_partition.setNum()[0])))

# Test get method with an index smaller than 0
print(avg_partition.get(-1))