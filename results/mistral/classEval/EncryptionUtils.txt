 class EncryptionUtils:
    # This class contains methods for performing various encryption techniques

    def __init__(self, key):
        # Initialize the encryption utils with the given key
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        # Function to perform Caesar cipher encryption on the given plaintext with the given shift
        <description for all parameters>
        plain_text = plaintext.lower()
        result = ""
        for char in plain_text:
            if char.isalpha():
                ascii_offset = 97 if char.islower() else 65
                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
                result += shifted_char
            else:
                result += char
        return result.capitalize() if plaintext.isupper() else result

    def vigenere_cipher(self, plain_text):
        # Function to perform Vigenere cipher encryption on the given plaintext using the key
        <description for all parameters>
        key = self.key.lower()
        result = ""
        key_index = 0
        for char in plain_text:
            if char.isalpha():
                shift = ord(key[key_index % len(key)]) - ord('a')
                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
                result += encrypted_char.upper() if char.isupper() else encrypted_char
                key_index += 1
            else:
                result += char
        return result

    def rail_fence_cipher(self, plain_text, rails):
        # Function to perform Rail Fence cipher encryption on the given plaintext with the given number of rails
        <description for all parameters>
        result = ""
        fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for char in plain_text:
            if row == 0 or row == rails-1:
                direction = -direction

            fence[row][col] = char
            col += 1
            row += direction

        for i in range(rails):
            for j in range(len(plain_text)):
                if fence[i][j]!= '\n':
                    result += fence[i][j]

        return result

    # Test cases
    # >>> e = EncryptionUtils("key")
    # >>> e.caesar_cipher("ATTACKATDAWN", 4)
    # 'EHGHFHFGHFHGHFHG'
    # >>> e.vigenere_cipher("ATTACKATDAWN", "LIBERTY")
    # 'FKANMNLOLMMNLOLMMN'
    # >>> e.rail_fence_cipher("PLEASECHANGE THIS PASSWORD", 3)
    # 'PLEASELASTPASSWORDCHGETHISPASSWORDTHE'