 <description for whole class>
"""
This is a class for simulating a game of Blackjack. It initializes a deck of cards, deals hands to the player and dealer, and determines the winner based on the hand values.
"""

class BlackjackGame:
    def __init__(self):
        """
        Initialize the BlackjackGame object by creating a new deck of cards.
        """
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        """
        Create a new deck of 52 cards.

        Returns:
            list: A shuffled list of 52 cards.
        """
        # Generate a list of all possible cards
        suits = ['S', 'C', 'D', 'H']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        deck = []
        for suit in suits:
            for rank in ranks:
                deck.append(rank + suit)

        # Shuffle the deck
        random.shuffle(deck)

        # Return the shuffled deck
        return deck

    def calculate_hand_value(self, hand):
        """
        Calculate the total value of a given hand.

        Parameters:
            hand (list): A list of cards in the hand.

        Returns:
            int: The total value of the hand.
        """
        """
        Calculate the total value of a given hand by summing the values of each card.
        Aces have a value of 11 by default, but if the hand value exceeds 21, the value of an Ace is reduced to 1.
        """
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1

        # Adjust the value of Aces if necessary
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1

        return value

    def deal_card(self, hand):
        """
        Deal a single card to a hand.

        Parameters:
            hand (list): A list of cards in the hand.

        Returns:
            list: The updated hand with a new card added.
        """
        card = self.deck.pop(0)
        hand.append(card)
        return hand

    def deal_hand(self, hand_type='player'):
        """
        Deal two cards to a hand.

        Parameters:
            hand_type (str, optional): The type of hand to deal. Defaults to 'player'.

        Returns:
            list: A list of two cards for the given hand.
        """
        if hand_type == 'player':
            self.player_hand = [self.deal_card(self.player_hand), self.deal_card(self.player_hand)]
        elif hand_type == 'dealer':
            self.dealer_hand = [self.deal_card(self.dealer_hand), self.deal_card(self.dealer_hand)]

    def check_winner(self):
        """
        Determine the winner of the game based on the hand values.

        Returns:
            str: A string indicating the winner ('Player wins', 'Dealer wins', or 'Tie').
        """
        player_value = self.calculate_hand_value(self.player_hand)
        dealer_value = self.calculate_hand_value(self.dealer_hand)

        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        else:
            if player_value <= dealer_value:
                return 'Dealer wins'
            else:
                return 'Player wins'