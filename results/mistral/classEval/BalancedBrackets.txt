 <description for whole class>
"""
This class checks if the given expression has balanced brackets.
"""

class BalancedBrackets:
    def __init__(self, expr):
        """
        Initialize the BalancedBrackets object with the given expression.

        :param expr: str, the expression to check for balanced brackets.
        """
        self.stack = []
        self.left_brackets = ["(", "{", "["]
        self.right_brackets = [")", "}", "]"]
        self.expr = expr

    def clear_expr(self):
        """
        Clear the expression by keeping only the brackets.

        :param expr: str, the expression to clear.
        """
        self.expr = ''.join(c for c in self.expr if (c in self.left_brackets or c in self.right_brackets))

    def check_balanced_brackets(self):
        """
        Check if the given expression has balanced brackets.

        :return: bool, True if the expression has balanced brackets, False otherwise.
        """
        self.clear_expr()
        for Brkt in self.expr:
            if Brkt in self.left_brackets:
                self.stack.append(Brkt)
            else:
                if not self.stack or self.stack.pop()!= Brkt:
                    return False
        if self.stack:
            return False
        return True

    <some test cases for the class>
>>> test_balanced = BalancedBrackets("((()){})[]")
>>> test_unbalanced = BalancedBrackets("((()){})[]]")
>>> test_empty = BalancedBrackets("")
>>> test_balanced.check_balanced_brackets()
True
>>> test_unbalanced.check_balanced_brackets()
False
>>> test_empty.check_balanced_brackets()
True