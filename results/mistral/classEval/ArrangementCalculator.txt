 <description for whole class>
# This class is designed to calculate the number of arrangements of given data.

class ArrangementCalculator:
    def __init__(self, datas):
        # Initialize the data for further calculations
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        # Calculate the number of arrangements for given n and m
        <description for all parameters>:param n: int, the number of total items
        <description for all parameters>:param m (optional): int, the number of items to choose
        result = 0
        if m is None or n == m:
            result = ArrangementCalculator.factorial(n)
        else:
            result = ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)
        return result

    @staticmethod
    def count_all(n):
        # Calculate the total number of arrangements for given n
        <description for all parameters>:param n: int, the total number of items
        result = 0
        for i in range(1, n + 1):
            result += ArrangementCalculator.count(n, i)
        return result

    def select(self, m=None):
        # Generate all arrangements of given data with length m
        <description for all parameters>:param m (optional): int, the length of arrangements
        <description for return statement>:return: list, a list of all arrangements
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        # Generate all arrangements of given data with different lengths
        <description for return statement>:return: list, a list of all arrangements of different lengths
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        # Calculate the factorial of given number
        <description for all parameters>:param n: int, the number to calculate the factorial for
        <description for return statement>:return: int, the factorial of the given number
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result