 <description for whole class>
# A utility class for managing events and their availability in a calendar.
class CalendarUtil:
    def __init__(self):
        # Initialize an empty list to store events.
        self.events = []

    def add_event(self, event):
        # Add an event to the list of events.
        <description for all parameters>: param event: dict, an event with keys'start_time' and 'end_time'.
        self.events.append(event)

        <some test cases for the function>
        >>> event = {'start_time': datetime(2022, 1, 1, 10, 0), 'end_time': datetime(2022, 1, 1, 11, 0)}
        >>> calendar = CalendarUtil()
        >>> calendar.add_event(event)

    def remove_event(self, event):
        # Remove an event from the list of events if it exists.
        <description for all parameters>: param event: dict, an event with keys'start_time' and 'end_time'.
        if event in self.events:
            self.events.remove(event)

        <some test cases for the function>
        >>> event = {'start_time': datetime(2022, 1, 1, 10, 0), 'end_time': datetime(2022, 1, 1, 11, 0)}
        >>> calendar = CalendarUtil()
        >>> calendar.add_event(event)
        >>> calendar.remove_event(event)

    def get_events(self, date):
        # Get all events that occur on the given date.
        <description for all parameters>: param date: datetime, a date in the format of year, month, day.
        <description for return statement>: return: list, a list of events that occur on the given date.
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

        <some test cases for the function>
        >>> date = datetime(2022, 1, 1)
        >>> calendar = CalendarUtil()
        >>> event = {'start_time': datetime(2022, 1, 1, 10, 0), 'end_time': datetime(2022, 1, 1, 11, 0), 'date': date}
        >>> calendar.add_event(event)
        >>> events = calendar.get_events(date)
        >>> print(events)

    def is_available(self, start_time, end_time):
        # Check if there is an event that overlaps with the given time range.
        <description for all parameters>: param start_time: datetime, the start time of the time range.
        param end_time: datetime, the end time of the time range.
        <description for return statement>: return: bool, True if the time range is available, False otherwise.
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

        <some test cases for the function>
        >>> start_time = datetime(2022, 1, 1, 10, 0)
        >>> end_time = datetime(2022, 1, 1, 11, 0)
        >>> calendar = CalendarUtil()
        >>> event = {'start_time': datetime(2022, 1, 1, 9, 0), 'end_time': datetime(2022, 1, 1, 12, 0)}
        >>> calendar.add_event(event)
        >>> available = calendar.is_available(start_time, end_time)
        >>> print(available)

    def get_available_slots(self, date):
        # Get all available slots (time ranges) on the given date.
        <description for all parameters>: param date: datetime, a date in the format of year, month, day.
        <description for return statement>: return: list, a list of available slots (time ranges) on the given date.
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)

        return available_slots

        <some test cases for the function>
        >>> date = datetime(2022, 1, 1)
        >>> calendar = CalendarUtil()
        >>> available_slots = calendar.get_available_slots(date)
        >>> print(available_slots)

    def get_upcoming_events(self, num_events):
        # Get the next num_events that are scheduled to occur.
        <description for all parameters>: param num_events: int, the number of upcoming events to return.
        <description for return statement>: return: list, a list of upcoming events.
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
                if len(upcoming_events) == num_events:
                    break
        return upcoming_events

        <some test cases for the function>
        >>> num_events = 2
        >>> calendar = CalendarUtil()
        >>> event1 = {'start_time': datetime(2022, 1, 1, 10, 0), 'end_time': datetime(2022, 1, 1, 11, 0)}
        >>> event2 = {'start_time': datetime(2022, 1, 1, 12, 0), 'end_time': datetime(2022, 1, 1, 13, 0)}
        >>> calendar.add_event(event1)
        >>> calendar.add_event(event2)
        >>> upcoming_events = calendar.get_upcoming_events(num_events)
        >>> print(upcoming_events)