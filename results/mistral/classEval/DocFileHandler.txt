 <description for whole class>
"""
A class for handling Docx files by reading and writing text, adding headings, and creating tables.
"""

class DocFileHandler:
    def __init__(self, file_path):
        """
        Initialize the DocFileHandler object with the given file path.

        :param file_path: str, the path to the Docx file
        """
        self.file_path = file_path

    def read_text(self):
        """
        Read the text content from the Docx file and return it as a string.

        :return: str, the text content of the Docx file
        """
        doc = Document(self.file_path)
        text = []
        for paragraph in doc.paragraphs:
            text.append(paragraph.text)
        return "\n".join(text)

    def write_text(self, content, font_size=12, alignment='left'):
        """
        Write the given content to the Docx file as a new paragraph with the specified font size and alignment.

        :param content: str, the text content to be written
        :param font_size: int, the font size for the new paragraph (default: 12)
        :param alignment: str, the alignment of the new paragraph ('left', 'center', or 'right')
        :return: bool, True if the content is written successfully, False otherwise
        """
        try:
            doc = Document()
            paragraph = doc.add_paragraph()
            run = paragraph.add_run(content)
            font = run.font
            font.size = Pt(font_size)
            alignment_value = self._get_alignment_value(alignment)
            paragraph.alignment = alignment_value
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_heading(self, heading, level=1):
        """
        Add a new heading with the given level and text to the Docx file.

        :param heading: str, the text content of the new heading
        :param level: int, the heading level (default: 1)
        :return: bool, True if the heading is added successfully, False otherwise
        """
        try:
            doc = Document(self.file_path)
            doc.add_heading(heading, level)
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_table(self, data):
        """
        Add a new table with the given data to the Docx file.

        :param data: list, a list of lists containing the data for each cell in the table
        :return: bool, True if the table is added successfully, False otherwise
        """
        try:
            doc = Document(self.file_path)
            table = doc.add_table(rows=len(data), cols=len(data[0]))
            for i, row in enumerate(data):
                for j, cell_value in enumerate(row):
                    table.cell(i, j).text = str(cell_value)
            doc.save(self.file_path)
            return True
        except:
            return False

    def _get_alignment_value(self, alignment):
        """
        Convert the given alignment string to the corresponding Docx alignment enum value.

        :param alignment: str, the alignment string ('left', 'center', or 'right')
        :return: Docx.enum.text.WD_PARAGRAPH_ALIGNMENT, the corresponding Docx alignment enum value
        """
        alignment_options = {
            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,
            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,
            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT
        }
        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)