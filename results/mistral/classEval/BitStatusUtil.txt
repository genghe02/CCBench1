 class BitStatusUtil:
 # A utility class for managing bit statuses using bitwise operations.

 @staticmethod
 def add(states, stat):
 # Add a given status to the current states using bitwise OR operation.
 <description for all parameters>
 # param states: int, the current bit statuses
 # param stat: int, the status to be added
 result = states | stat
 <description for return statement>
 # return: int, the updated bit statuses
 BitStatusUtil.check([states, stat])
 return result

 @staticmethod
 def has(states, stat):
 # Check if a given status is present in the current states using bitwise AND operation.
 <description for all parameters>
 # param states: int, the current bit statuses
 # param stat: int, the status to be checked
 result = (states & stat) == stat
 <description for return statement>
 # return: bool, True if the given status is present, False otherwise
 BitStatusUtil.check([states, stat])
 return result

 @staticmethod
 def remove(states, stat):
 # Remove a given status from the current states using bitwise XOR operation.
 <description for all parameters>
 # param states: int, the current bit statuses
 # param stat: int, the status to be removed
 if BitStatusUtil.has(states, stat):
 result = states ^ stat
 else:
 raise ValueError(f"Status {stat} not present in current states {states}")
 <description for return statement>
 # return: int, the updated bit statuses
 BitStatusUtil.check([states, stat])
 return result

 @staticmethod
 def check(args):
 # Validate the input arguments for the utility functions.
 <description for all parameters>
 # param args: list, a list of two arguments (states and stat)
 for arg in args:
 if not isinstance(arg, (int)):
 raise TypeError("Both arguments must be integers")
 <description for return statement>
 # return: None, no return value for this function
 for arg in args:
 if arg < 0:
 raise ValueError(f"{arg} must be greater than or equal to 0")
 if arg % 2!= 0:
 raise ValueError(f"{arg} not even")