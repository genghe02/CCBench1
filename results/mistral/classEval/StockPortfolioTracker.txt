 <description for whole class>
# A class for managing a stock portfolio, tracking the stocks owned and their corresponding quantities, as well as the current cash balance.
class StockPortfolioTracker:
    def __init__(self, cash_balance):
        <description for whole function>
        # Initialize the portfolio with an empty list and set the initial cash balance.
        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        <description for whole function>
        # Add a new stock to the portfolio by checking if it already exists and appending it if not.
        <description for all parameters>
        param stock: dict, containing the stock name and quantity.

        for pf in self.portfolio:
            if pf['name'] == stock['name']:
                pf['quantity'] += stock['quantity']
                return

        self.portfolio.append(stock)

    def remove_stock(self, stock):
        <description for whole function>
        # Remove a stock from the portfolio by checking if it exists and reducing its quantity if present.
        <description for all parameters>
        param stock: dict, containing the stock name and quantity to be removed.

        for pf in self.portfolio:
            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:
                pf['quantity'] -= stock['quantity']
                if pf['quantity'] == 0:
                    self.portfolio.remove(pf)
                return True
        return False

    def buy_stock(self, stock):
        <description for whole function>
        # Buy a new stock by checking if the cash balance is sufficient and adding the stock to the portfolio.
        <description for all parameters>
        param stock: dict, containing the stock name, quantity, and price.

        if stock['price'] * stock['quantity'] > self.cash_balance:
            return False
        else:
            self.add_stock(stock)
            self.cash_balance -= stock['price'] * stock['quantity']
            return True

    def sell_stock(self, stock):
        <description for whole function>
        # Sell a stock by checking if it exists in the portfolio and updating the cash balance.
        <description for all parameters>
        param stock: dict, containing the stock name and quantity to be sold.

        if self.remove_stock(stock) == False:
            return False
        self.cash_balance += stock['price'] * stock['quantity']
        return True

    def calculate_portfolio_value(self):
        <description for whole function>
        # Calculate the total value of the portfolio by summing the value of all stocks and the cash balance.
        <description for return statement>
        return self.cash_balance + sum([stock['price'] * stock['quantity'] for stock in self.portfolio])

    def get_portfolio_summary(self):
        <description for whole function>
        # Get a summary of the portfolio by calculating its total value and returning a list of stock dictionaries.
        <description for return statement>
        return self.calculate_portfolio_value(), self.portfolio

    def get_stock_value(self, stock):
        <description for whole function>
        # Calculate the value of a single stock by multiplying its price and quantity.
        <description for all parameters>
        param stock: dict, containing the stock name and quantity.

        return stock['price'] * stock['quantity']