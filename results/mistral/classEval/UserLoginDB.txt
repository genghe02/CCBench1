 <description for whole class>
"""
A class for managing user authentication using SQLite database.
"""

class UserLoginDB:
    def __init__(self, db_name):
        """
        Initialize the UserLoginDB object with the given SQLite database name.

        :param db_name: str, the name of the SQLite database file.
        """
        self.connect_to_db(db_name)

    def connect_to_db(self, db_name):
        """
        Initialize the database connection and cursor.

        :param db_name: str, the name of the SQLite database file.
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def insert_user(self, username, password):
        """
        Insert a new user into the database with the given username and password.

        :param username: str, the new user's username.
        :param password: str, the new user's password.
        :return: None
        """
        self.cursor.execute('''
            INSERT INTO users (username, password)
            VALUES (?,?)
        ''', (username, password))
        self.connection.commit()

    def search_user_by_username(self, username):
        """
        Search for a user in the database with the given username.

        :param username: str, the username to search for.
        :return: tuple, a tuple containing the user data if found, or None if not found.
        """
        self.cursor.execute('''
            SELECT * FROM users WHERE username =?
        ''', (username,))
        return self.cursor.fetchone()

    def delete_user_by_username(self, username):
        """
        Delete a user from the database with the given username.

        :param username: str, the username of the user to delete.
        :return: None
        """
        self.cursor.execute('''
            DELETE FROM users WHERE username =?
        ''', (username,))
        self.connection.commit()

    def validate_user_login(self, username, password):
        """
        Validate a user's login credentials against the database.

        :param username: str, the user's username.
        :param password: str, the user's password.
        :return: bool, True if the credentials are valid, False otherwise.
        """
        user = self.search_user_by_username(username)
        if user is not None and user[1] == password:
            return True
        return False

    def __del__(self):
        """
        Close the database connection when the UserLoginDB object is destroyed.
        """
        self.connection.close()