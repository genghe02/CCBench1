 class DiscountStrategy:
    # This is a class that defines different discount strategies based on customer and cart details.
    def __init__(self, customer, cart, promotion=None):
        # Initialize the DiscountStrategy instance with the given customer, cart, and optional promotion.
        # The promotion argument is a callable object that can be used to apply specific discounts.

        # Description for the 'customer' parameter:
        # The customer is a dictionary containing customer details.
        self.customer = customer

        # Description for the 'cart' parameter:
        # The cart is a list of items in the customer's shopping cart. Each item is a dictionary containing 'product', 'quantity', and 'price'.
        self.cart = cart

        # Description for the 'promotion' parameter:
        # The promotion is an optional callable object that can be used to apply specific discounts.
        self.promotion = promotion

        # Calculate the total price of the cart items.
        self.__total = self.total()

    def total(self):
        # Calculate the total price of the cart items.
        # Return the total price.

        # Description for the'self' parameter:
        # The instance of the DiscountStrategy class.

        # Description for the return statement:
        # Return the total price of the cart items.
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        # Calculate the total price the customer needs to pay after applying any discounts.

        # Description for the'self' parameter:
        # The instance of the DiscountStrategy class.

        # Description for the return statement:
        # Return the total price the customer needs to pay after applying any discounts.
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        # Apply a discount based on the customer's fidelity points.

        # Description for the 'order' parameter:
        # The order is an instance of the DiscountStrategy class.

        # Description for the return statement:
        # Return the discount amount based on the customer's fidelity points.
        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        # Apply a discount for bulk items.

        # Description for the 'order' parameter:
        # The order is an instance of the DiscountStrategy class.

        # Description for the return statement:
        # Return the discount amount for bulk items.
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        # Apply a discount for large orders.

        # Description for the 'order' parameter:
        # The order is an instance of the DiscountStrategy class.

        # Description for the return statement:
        # Return the discount amount for large orders.
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0

<Test cases>
# Test case 1: No promotion applied
filter = DiscountStrategy({'name': 'John Doe', 'fidelity': 999}, [{'product': 'item1', 'quantity': 1, 'price': 10}, {'product': 'item2', 'quantity': 1, 'price': 10}])
assert filter.due() == 20

# Test case 2: Fidelity promotion applied
filter = DiscountStrategy({'name': 'John Doe', 'fidelity': 1001}, [{'product': 'item1', 'quantity': 1, 'price': 10}, {'product': 'item2', 'quantity': 1, 'price': 10}])
assert filter.due() == 18

# Test case 3: Bulk item promotion applied
filter = DiscountStrategy({'name': 'John Doe', 'fidelity': 999}, [{'product': 'item1', 'quantity': 1, 'price': 10}, {'product': 'item1', 'quantity': 21, 'price': 10}, {'product': 'item2', 'quantity': 1, 'price': 10}])
assert filter.due() == 18.9

# Test case 4: Large order promotion applied
filter = DiscountStrategy({'name': 'John Doe', 'fidelity': 999}, [{'product': 'item1', 'quantity': 1, 'price': 10}, {'product': 'item2', 'quantity': 1, 'price': 10}, {'product': 'item3', 'quantity': 1, 'price': 10}, {'product': 'item4', 'quantity': 1, 'price': 10}, {'product': 'item5', 'quantity': 1, 'price': 10}, {'product': 'item6', 'quantity': 1, 'price': 10}, {'product': 'item7', 'quantity': 1, 'price': 10}, {'product': 'item8', 'quantity': 1, 'price': 10}, {'product': 'item9', 'quantity': 1, 'price': 10}, {'product': 'item10', 'quantity': 1, 'price': 10}])
assert filter.due() == 13.6

# Test case 5: Multiple promotions applied
filter = DiscountStrategy({'name': 'John Doe', 'fidelity': 1001}, [{'product': 'item1', 'quantity': 1, 'price': 10}, {'product': 'item1', 'quantity': 21, 'price': 10}, {'product': 'item2', 'quantity': 1, 'price': 10}])
assert filter.due() == 16.35