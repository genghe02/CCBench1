 class PageUtil:
    # This class is designed to handle pagination and data filtering based on given page size and data.
    def __init__(self, data, page_size):
        # Initialize the PageUtil object with the given data and page size.
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        # Fetch the specified page from the data based on the given page number.
        <Return the page data as a list based on the given page number.>
        if page_number < 1 or page_number > self.total_pages:
            return []

        start_index = (page_number - 1) * self.page_size
        end_index = start_index + self.page_size
        return self.data[start_index:end_index]

    def get_page_info(self, page_number):
        # Get detailed information about the specified page, including current page number, total pages, and data.
        <Return a dictionary containing page information, including current page number, total pages, total items, and data.>
        if page_number < 1 or page_number > self.total_pages:
            return {}

        start_index = (page_number - 1) * self.page_size
        end_index = min(start_index + self.page_size, self.total_items)
        page_data = self.data[start_index:end_index]

        page_info = {
            "current_page": page_number,
            "per_page": self.page_size,
            "total_pages": self.total_pages,
            "total_items": self.total_items,
            "has_previous": page_number > 1,
            "has_next": page_number < self.total_pages,
            "data": page_data
        }
        return page_info

    def search(self, keyword):
        # Search for items in the data that match the given keyword and return the search results.
        <Return a dictionary containing search information, including keyword, total results, total pages, and search results.>
        results = [item for item in self.data if keyword in str(item)]
        num_results = len(results)
        num_pages = (num_results + self.page_size - 1) // self.page_size

        search_info = {
            "keyword": keyword,
            "total_results": num_results,
            "total_pages": num_pages,
            "results": results
        }
        return search_info

    # Test cases:
    # >>> page_util = PageUtil(["item1", "item2", "item3", "item4", "item5"], 2)
    # >>> page_util.get_page(1)
    # ['item3', 'item4']
    # >>> page_util.get_page_info(1)
    # {'current_page': 1, 'per_page': 2, 'total_pages': 3, 'total_items': 5, 'has_previous': False, 'has_next': True, 'data': ['item3', 'item4']}
    # >>> page_util.search("item")
    # {'keyword': 'item', 'total_results': 3, 'total_pages': 2,'results': ['item1', 'item3', 'item4']}