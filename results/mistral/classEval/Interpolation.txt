 <description for whole class>
# This class provides static methods for performing interpolation in one and two dimensions.
class Interpolation:
    def __init__(self):
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        # Perform linear interpolation in one dimension.
        # Given an array x and y, and an array x_interp, return an array y_interp where y_interp[i] is the interpolated y value for x_interp[i].
        <description for all parameters>
        # x: 1D NumPy array, the x values.
        # y: 1D NumPy array, the y values.
        # x_interp: 1D NumPy array, the x values at which to interpolate.
        result = np.empty_like(x_interp)
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    result[np.where(x_interp == xi)[0][0]] = yi
                    break
        return result

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        # Perform linear interpolation in two dimensions.
        # Given arrays x, y, and z, and arrays x_interp and y_interp, return an array z_interp where z_interp[i, j] is the interpolated z value for x_interp[i] and y_interp[j].
        <description for all parameters>
        # x: 2D NumPy array, the x values.
        # y: 1D NumPy array, the y values.
        # z: 2D NumPy array, the z values.
        # x_interp: 1D NumPy array, the x values at which to interpolate.
        # y_interp: 1D NumPy array, the y values at which to interpolate.
        result = np.empty((len(x_interp), len(y_interp)))
        for i, xi in enumerate(x_interp):
            for j, yi in enumerate(y_interp):
                for k in range(len(x) - 1):
                    if x[k][0] <= xi <= x[k+1][0]:
                        for l in range(len(y) - 1):
                            if y[l] <= yi <= y[l+1]:
                                zi = (x[k][l+1] * (xi - x[k][0]) * (y[l+1] - yi) +
                                      x[k+1][l+1] * (xi - x[k][0]) * (yi - y[l]) +
                                      x[k][l+1] * (xi - x[k+1][0]) * (yi - y[l]) +
                                      x[k+1][l] * (xi - x[k][0]) * (yi - y[l+1])) / ((x[k+1][0] - x[k][0]) * (y[l+1] - y[l]))
                                result[i, j] = zi
                                break
                        break
        return result
    
    # Test cases for interpolate_1d
    >>> Interpolation.interpolate_1d(np.array([1, 2, 3, 4, 5]), np.array([1, 4, 9, 16, 25]), np.array([2.5, 3.5]))
    # Test cases for interpolate_2d
    >>> Interpolation.interpolate_2d(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([1, 2, 3, 4]), np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]), np.array([2.5, 3.5]), np.array([1.5, 2.5]))