 class Manacher:
    # This is a class for finding the longest palindromic substring in a given input string.
    def __init__(self, input_string: str) -> None:
        # Initialize the input string for further processing.
        self.input_string = input_string

    def palindromic_length(self, center: int, diff: int, string: str) -> int:
        # Helper function to check the length of the palindromic substring with the given center and difference.
        if (center - diff == -1 or center + diff >= len(string)
                or string[center - diff]!= string[center + diff]):
            # Return 0 if the given center and difference do not form a valid palindromic substring.
            return 0
        # Recursively call the function with updated center and difference to find the length of the palindromic substring.
        return 1 + self.palindromic_length(center, diff + 1, string)

    def palindromic_string(self) -> str:
        # Function to find and return the longest palindromic substring in the input string.
        max_length = 0

        new_input_string = ""
        # Create a new input string with '|' added before and after each character for easier processing.
        output_string = ""

        for i in self.input_string[:len(self.input_string) - 1]:
            new_input_string += i + "|"
        new_input_string += self.input_string[-1]

        for i in range(len(new_input_string)):

            length = self.palindromic_length(i, 1, new_input_string)

            if max_length < length:
                max_length = length
                start = i

        # Extract and return the longest palindromic substring from the original input string.
        for i in new_input_string[start - max_length:start + max_length + 1]:
            if i!= "|":
                output_string += i

        return output_string

    # Test cases for the class:
    # >>> manacher = Manacher("racecar")
    # >>> manacher.palindromic_string()
    # 'racecar'

    # >>> manacher = Manacher("hello")
    # >>> manacher.palindromic_string()
    # ''

    # >>> manacher = Manacher("babad")
    # >>> manacher.palindromic_string()
    # 'bab'