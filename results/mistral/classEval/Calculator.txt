 <description for whole class>
# A simple calculator class that performs arithmetic operations using a stack-based approach.
class Calculator:

 <description for whole function>
 # Initializes the calculator with an empty operator dictionary.
 def __init__(self):
 self.operators = {
 '+': lambda x, y: x + y,
 '-': lambda x, y: x - y,
 '*': lambda x, y: x * y,
 '/': lambda x, y: x / y,
 '^': lambda x, y: x ** y
 }

 <description for whole function>
 # Performs the calculation of the given expression using the stack-based approach.
 def calculate(self, expression):
 # Initialize empty stacks for operands and operators.
 operand_stack = []
 operator_stack = []
 num_buffer = ''

 <description for all parameters>
 # Iterate through each character in the expression.
 for char in expression:
 if char.isdigit() or char == '.':
 # Append digits and decimal points to the number buffer.
 num_buffer += char
 else:
 # If there's a number in the number buffer, push it to the operand stack.
 if num_buffer:
 operand_stack.append(float(num_buffer))
 num_buffer = ''

 <description for all conditions>
 # Apply operators based on their precedence and associativity rules.
 if char in '+-*/^':
 while (
 operator_stack and
 operator_stack[-1]!= '(' and
 self.precedence(operator_stack[-1]) >= self.precedence(char)
 ):
 operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

 <description for all conditions>
 # Push the operator to the operator stack.
 operator_stack.append(char)
 elif char == '(':
 # Push the '(' symbol to the operator stack.
 operator_stack.append(char)
 elif char == ')':
 # Pop operators and apply them until the matching '(' is found.
 while operator_stack and operator_stack[-1]!= '(':
 operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)
 operator_stack.pop()

 # Pop the ')' symbol from the operator stack.
 operator_stack.pop()

 <description for all conditions>
 # If there's a number in the number buffer, push it to the operand stack.
 if num_buffer:
 operand_stack.append(float(num_buffer))
 num_buffer = ''

 <description for return statement>
 # Perform the remaining calculations and return the final result.
 while operator_stack:
 operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)
 return operand_stack[-1] if operand_stack else None

 <description for whole function>
 # Calculate the precedence of a given operator.
 def precedence(self, operator):
 # Precedence table for different operators.
 precedences = {
 '+': 1,
 '-': 1,
 '*': 2,
 '/': 2,
 '^': 3
 }
 return precedences.get(operator, 0)

 <description for whole function>
 # Apply an operator to the operand stack and return updated stacks.
 def apply_operator(self, operand_stack, operator_stack):
 operator = operator_stack.pop()
 if operator == '^':
 operand2 = operand_stack.pop()
 operand1 = operand_stack.pop()
 result = self.operators[operator](operand1, operand2)
 operand_stack.append(result)
 else:
 operand2 = operand_stack.pop()
 operand1 = operand_stack.pop()
 result = self.operators[operator](operand1, operand2)
 operand_stack.append(result)
 return operand_stack, operator_stack