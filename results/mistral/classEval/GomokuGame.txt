 class GomokuGame:
    # This class represents a Gomoku game board with the given size.
    def __init__(self, board_size):
        # Initialize the game board with the given size and empty cells.
        self.board_size = board_size
        self.board = [['' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'

    def make_move(self, row, col):
        # Make a move on the board by placing the current player's symbol at the given row and column.
        # If the move is valid, update the current player and return True. Otherwise, return False.
        if self.board[row][col] =='':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False

    def check_winner(self):
        # Check if there is a winner on the board by looking for five consecutive symbols in a row, column, or diagonal.
        # Return the winner's symbol if found, or None if the game is still ongoing.
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col]!='':
                    for direction in directions:
                        if self._check_five_in_a_row(row, col, direction):
                            return self.board[row][col]
        return None

    def _check_five_in_a_row(self, row, col, direction):
        # Helper function to check if there are five consecutive symbols in a row, column, or diagonal.
        # Parameters: row (int), col (int), direction (tuple of two integers)
        # Return: bool, True if there are five consecutive symbols, False otherwise
        dx, dy = direction
        count = 1
        symbol = self.board[row][col]
        for i in range(1, 5):
            new_row = row + dx * i
            new_col = col + dy * i
            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
                return False
            if self.board[new_row][new_col]!= symbol:
                return False
            count += 1
        return count == 5