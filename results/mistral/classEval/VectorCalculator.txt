 <description for whole class>
# A utility class for vector operations using NumPy and Gensim libraries

class VectorUtil:
    @staticmethod
    def similarity(vector_1, vector_2):
        # Calculate the cosine similarity between two vectors
        <description for whole function>
        :param vector_1: numpy array, the first vector
        :param vector_2: numpy array, the second vector
        :return: float, the cosine similarity between the two vectors

        <some test cases for the function>
        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        # Calculate the cosine similarities between a vector and a list of vectors
        <description for whole function>
        :param vector_1: numpy array, the reference vector
        :param vectors_all: list of numpy arrays, the list of vectors to compare
        :return: numpy array, an array of cosine similarities

        <description for all parameters>
        <some test cases for the function>
        norm = np.linalg.norm(vector_1)
        all_norms = np.linalg.norm(vectors_all, axis=1)
        dot_products = dot(vectors_all, vector_1)
        similarities = dot_products / (norm * all_norms)
        return similarities

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        # Calculate the cosine similarity between two lists of vectors
        <description for whole function>
        :param vector_list_1: list of numpy arrays, the first list of vectors
        :param vector_list_2: list of numpy arrays, the second list of vectors
        :return: float, the cosine similarity between the two lists of vectors

        <description for all parameters>
        <description for return statement>
        <some test cases for the function>
        if not (len(vector_list_1) and len(vector_list_2)):
            raise ZeroDivisionError('At least one of the passed lists is empty.')

        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),
                   matutils.unitvec(array(vector_list_2).mean(axis=0)))

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        # Compute the IDF (Inverse Document Frequency) weight dictionary
        <description for whole function>
        :param total_num: int, the total number of documents
        :param number_dict: dict, a dictionary mapping each term to its document frequency
        :return: dict, a dictionary mapping each term to its IDF weight

        <description for all parameters>
        <description for return statement>
        <some test cases for the function>
        index_2_key_map = {}

        index = 0

        count_list = []
        for key, count in number_dict.items():
            index_2_key_map[index] = key
            count_list.append(count)
            index = index + 1

        a = np.array(count_list)
        ## smooth, in case the divide by zero error
        a = np.log((total_num + 1) / (a + 1))
        result = {}

        for index, w in enumerate(a):
            key = index_2_key_map[index]
            result[key] = w

        return result