 class AssessmentSystem:
    # This class manages student information, including adding students, their grades, majors, courses, and calculating GPAs.
    def __init__(self):
        # Initialize an empty dictionary to store student information.
        self.students = {}

    def add_student(self, name, grade, major):
        # Add a new student to the system with the given name, grade, and major.
        <param name: str, the name of the student to be added>
        <param grade: int, the grade level of the student>
        <param major: str, the major of the student>
        self.students[name] = {'name': name, 'grade': grade,'major': major, 'courses': {}}

    def add_course_score(self, name, course, score):
        # Add a course and its corresponding score for a student.
        <param name: str, the name of the student whose course score is to be added>
        <param course: str, the name of the course>
        <param score: int, the score obtained in the course>
        if name not in self.students:
            self.add_student(name, 0, '')
        self.students[name]['courses'][course] = score

    def get_gpa(self, name):
        # Calculate and return the GPA for a student.
        <param name: str, the name of the student whose GPA is to be calculated>
        if name not in self.students or not self.students[name]['courses']:
            return None
        return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])

    def get_all_students_with_fail_course(self):
        # Return a list of names of students who have failed in any course.
        students = []
        for name, student in self.students.items():
            if not student['courses'] or any(score < 60 for score in student['courses'].values()):
                students.append(name)
        return students

    def get_course_average(self, course):
        # Calculate and return the average score for a given course across all students.
        <param course: str, the name of the course>
        total = 0
        count = 0
        for student in self.students.values():
            if course in student['courses'] and student['courses'][course] is not None:
                total += student['courses'][course]
                count += 1
        return total / count if count > 0 else None

    def get_top_student(self):
        # Return the name of the student with the highest GPA.
        top_student = None
        top_gpa = 0
        for name, student in self.students.items():
            gpa = self.get_gpa(name)
            if gpa is not None and gpa > top_gpa:
                top_gpa = gpa
                top_student = name
        return top_student

<Some test cases for the class>
>>> assessment_system = AssessmentSystem()
>>> assessment_system.add_student('Alice', 2, 'Math')
>>> assessment_system.add_student('Bob', 3, 'Science')
>>> assessment_system.add_course_score('Alice', 'Math', 85)
>>> assessment_system.add_course_score('Alice', 'Science', 75)
>>> assessment_system.add_course_score('Bob', 'Math', 90)
>>> assessment_system.add_course_score('Bob', 'Science', 85)
>>> print(assessment_system.get_gpa('Alice'))
8.0
>>> print(assessment_system.get_gpa('Bob'))
8.25
>>> print(assessment_system.get_all_students_with_fail_course())
[]
>>> assessment_system.add_course_score('Alice', 'Math', 70)
>>> print(assessment_system.get_all_students_with_fail_course())
['Alice']
>>> print(assessment_system.get_course_average('Math'))
8.25
>>> print(assessment_system.get_top_student())
'Bob'