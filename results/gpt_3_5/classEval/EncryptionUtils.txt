```python
<description for whole class>
class EncryptionUtils:
    def __init__(self, key):
        <description for whole function>: Constructor for EncryptionUtils class that initializes the key used for encryption.
        <description for all parameters>: param key: str, the key used for encryption
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        <description for whole function>: Implements the Caesar cipher encryption technique.
        <description for all parameters>: param plaintext: str, the plain text to be encrypted
                                         param shift: int, the number of positions to shift the characters
        <description for return statement>: return: str, the resulting encrypted text
        <some test cases for the function>: 
        # Test case 1: Encrypting "Hello World" with shift 3
        # Expected output: "Khoor Zruog"
        assert caesar_cipher("Hello World", 3) == "Khoor Zruog"
        
        ciphertext = ""
        for char in plaintext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
                ciphertext += shifted_char
            else:
                ciphertext += char
        return ciphertext
    
    def vigenere_cipher(self, plain_text):
        <description for whole function>: Implements the Vigenere cipher encryption technique.
        <description for all parameters>: param plain_text: str, the plain text to be encrypted
        <description for return statement>: return: str, the resulting encrypted text
        <some test cases for the function>:
        # Test case 1: Encrypting "Hello World" with key "KEY"
        # Expected output: "RIJVS UYVJN"
        assert vigenere_cipher("Hello World") == "RIJVS UYVJN"
        
        encrypted_text = ""
        key_index = 0
        for char in plain_text:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
                key_index += 1
            else:
                encrypted_text += char
        return encrypted_text

    def rail_fence_cipher(self, plain_text, rails):
        <description for whole function>: Implements the Rail Fence cipher encryption technique.
        <description for all parameters>: param plain_text: str, the plain text to be encrypted
                                         param rails: int, the number of rails (rows) for the rail fence
        <description for return statement>: return: str, the resulting encrypted text
        <some test cases for the function>:
        # Test case 1: Encrypting "Hello World" using 3 rails
        # Expected output: "HorelWloolld"
        assert rail_fence_cipher("Hello World", 3) == "HorelWloolld"
        
        fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for char in plain_text:
            if row == 0 or row == rails-1:
                direction = -direction

            fence[row][col] = char
            col += 1
            row += direction

        encrypted_text = ''
        for i in range(rails):
            for j in range(len(plain_text)):
                if fence[i][j] != '\n':
                    encrypted_text += fence[i][j]

        return encrypted_text
```