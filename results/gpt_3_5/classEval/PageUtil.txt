```python
# This class provides utility functions for pagination and searching within a dataset.

class PageUtil:
    def __init__(self, data, page_size):
        # Initialize the PageUtil object with the given data and page size.

        # Parameters:
        # data: list, the dataset to be paginated or searched
        # page_size: int, the number of items per page
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        # Retrieve a specific page of data based on the page number.

        # Parameters:
        # page_number: int, the page number to retrieve
        # Returns:
        # list, the data for the specified page or an empty list if the page number is out of range
        # Test Cases:
        # page_number = 1, page_number = 2, page_number = 0, page_number = self.total_pages
        if page_number < 1 or page_number > self.total_pages:
            return []

        start_index = (page_number - 1) * self.page_size
        end_index = start_index + self.page_size
        return self.data[start_index:end_index]

    def get_page_info(self, page_number):
        # Retrieve detailed information about a specific page.

        # Parameters:
        # page_number: int, the page number to retrieve info for
        # Returns:
        # dict, information about the specified page or an empty dictionary if the page number is out of range
        # Test Cases:
        # page_number = 1, page_number = 2, page_number = 0, page_number = self.total_pages
        if page_number < 1 or page_number > self.total_pages:
            return {}

        start_index = (page_number - 1) * self.page_size
        end_index = min(start_index + self.page_size, self.total_items)
        page_data = self.data[start_index:end_index]

        page_info = {
            "current_page": page_number,
            "per_page": self.page_size,
            "total_pages": self.total_pages,
            "total_items": self.total_items,
            "has_previous": page_number > 1,
            "has_next": page_number < self.total_pages,
            "data": page_data
        }
        return page_info

    def search(self, keyword):
        # Search for items in the dataset based on a keyword.

        # Parameters:
        # keyword: str, the keyword to search for in the dataset
        # Returns:
        # dict, information about the search results including total results, total pages, and the actual results
        # Test Cases:
        # keyword = 'example', keyword = 'test', keyword = '', keyword = '123'
        results = [item for item in self.data if keyword in str(item)]
        num_results = len(results)
        num_pages = (num_results + self.page_size - 1) // self.page_size

        search_info = {
            "keyword": keyword,
            "total_results": num_results,
            "total_pages": num_pages,
            "results": results
        }
        return search_info
```