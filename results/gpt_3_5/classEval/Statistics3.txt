```python
import math

class Statistics3:
    # A class that provides various statistical functions such as median, mode, correlation, mean, correlation matrix, standard deviation, and z-score.

    @staticmethod
    def median(data):
        # Calculate the median value from a given list of data.
        # param data: list, the input data for which the median needs to be calculated
        # return: float, the median value of the input data
        # Test cases: median([1, 2, 3, 4, 5]) => 3
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        # Find the mode(s) of a given list of data.
        # param data: list, the input data for which the mode needs to be calculated
        # return: list, the mode value(s) of the input data
        # Test cases: mode([1, 2, 2, 3, 3, 3, 4]) => [3]
        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        # Calculate the correlation coefficient between two lists of data.
        # param x: list, the first input data for correlation calculation
        # param y: list, the second input data for correlation calculation
        # return: float, the correlation coefficient between the two input data sets
        # Test cases: correlation([1, 2, 3], [4, 5, 6]) => 1.0
        n = len(x)
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        # Calculate the mean value of a given list of data.
        # param data: list, the input data for which the mean needs to be calculated
        # return: float, the mean value of the input data
        # Test cases: mean([1, 2, 3, 4, 5]) => 3.0
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        # Generate a correlation matrix for a list of data sets.
        # param data: list of lists, the input data sets for correlation matrix computation
        # return: list of lists, the correlation matrix for the input data sets
        # Test cases: correlation_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]
        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        # Calculate the standard deviation of a given list of data.
        # param data: list, the input data for which the standard deviation needs to be calculated
        # return: float, the standard deviation of the input data
        # Test cases: standard_deviation([1, 2, 3, 4, 5]) => 1.5811388300841898
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        # Calculate the z-scores of a given list of data.
        # param data: list, the input data for which the z-scores need to be calculated
        # return: list, the z-scores of the input data
        # Test cases: z_score([1, 2, 3, 4, 5]) => [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]
```