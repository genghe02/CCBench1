from datetime import datetime, timedelta

class CalendarUtil:
    # This class provides utility functions for managing calendar events.

    def __init__(self):
        # Initialize the CalendarUtil class with an empty list of events.
        self.events = []

    def add_event(self, event):
        # Add a new event to the list of events.
        # param event: dict, the event to be added
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        self.events.append(event)

    def remove_event(self, event):
        # Remove a specified event from the list of events.
        # param event: dict, the event to be removed
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        # >>> util.remove_event({'event_name': 'Meeting'})
        if event in self.events:
            self.events.remove(event)

    def get_events(self, date):
        # Get all events happening on a specific date.
        # param date: datetime, the date to filter events
        # return: list, list of events on the specified date
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        # >>> util.get_events(datetime(2022, 12, 25, 0, 0))
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

    def is_available(self, start_time, end_time):
        # Check if there is availability between the specified start and end times.
        # param start_time: datetime, start time of the availability slot
        # param end_time: datetime, end time of the availability slot
        # return: bool, True if available, False if not
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        # >>> util.is_available(datetime(2022, 12, 25, 16, 0), datetime(2022, 12, 25, 17, 0))
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

    def get_available_slots(self, date):
        # Get available time slots on a specific date.
        # param date: datetime, the date to check availability
        # return: list, list of tuples representing available time slots
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        # >>> util.get_available_slots(datetime(2022, 12, 25, 0, 0))
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)

        return available_slots

    def get_upcoming_events(self, num_events):
        # Get the upcoming events based on the current date.
        # param num_events: int, number of upcoming events to retrieve
        # return: list, list of upcoming events
        # >>> util = CalendarUtil()
        # >>> util.add_event({'event_name': 'Meeting', 'date': datetime(2022, 12, 25, 14, 0), 'start_time': datetime(2022, 12, 25, 14, 0), 'end_time': datetime(2022, 12, 25, 15, 0)})
        # >>> util.get_upcoming_events(1)
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
            if len(upcoming_events) == num_events:
                break
        return upcoming_events