from collections import Counter


class DataStatistics:
    <A class that provides methods to calculate mean, median, and mode of a given dataset.>

    def mean(self, data):
        <Calculates the mean of the input data by summing all elements and dividing by the total number of elements.>
        <param data: list, the dataset for which mean needs to be calculated.>
        <return: float, the mean value of the input dataset.>
        <Test Cases:
            >>> stats = DataStatistics()
            >>> stats.mean([1, 2, 3, 4, 5])
            3.0
            >>> stats.mean([1, 1, 2, 2, 3, 3, 4, 4])
            2.5
        >
        return round(sum(data) / len(data), 2)

    def median(self, data):
        <Calculates the median of the input data by sorting the dataset and finding the middle value(s) based on length.>
        <param data: list, the dataset for which median needs to be calculated.>
        <return: float, the median value of the input dataset.>
        <Test Cases:
            >>> stats = DataStatistics()
            >>> stats.median([1, 2, 3, 4, 5])
            3
            >>> stats.median([1, 2, 3, 4, 5, 6])
            3.5
        >
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 0:
            middle = n // 2
            return round((sorted_data[middle - 1] + sorted_data[middle]) / 2, 2)
        else:
            middle = n // 2
            return sorted_data[middle]

    def mode(self, data):
        <Calculates the mode of the input data by finding the element(s) that appear most frequently.>
        <param data: list, the dataset for which mode needs to be calculated.>
        <return: list, the mode value(s) of the input dataset.>
        <Test Cases:
            >>> stats = DataStatistics()
            >>> stats.mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])
            [4]
            >>> stats.mode([1, 2, 2, 3, 3, 3, 4, 4])
            [3]
        >
        counter = Counter(data)
        mode_count = max(counter.values())
        mode = [x for x, count in counter.items() if count == mode_count]
        return mode