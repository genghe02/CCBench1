import datetime
import time

class TimeUtils:
    # This class provides various utility functions related to time manipulation.

    def __init__(self):
        # Initialize the TimeUtils class with the current date and time.
        self.datetime = datetime.datetime.now()

    def get_current_time(self):
        # Get the current time in the format HH:MM:SS.
        # return: str, the current time in HH:MM:SS format.
        # Test cases: 
        # Expected output should be the current time in HH:MM:SS format.
        format = "%H:%M:%S"
        return self.datetime.strftime(format)

    def get_current_date(self):
        # Get the current date in the format YYYY-MM-DD.
        # return: str, the current date in YYYY-MM-DD format.
        # Test cases: 
        # Expected output should be the current date in YYYY-MM-DD format.
        format = "%Y-%m-%d"
        return self.datetime.strftime(format)

    def add_seconds(self, seconds):
        # Add the specified number of seconds to the current datetime.
        # param seconds: int, the number of seconds to add.
        # return: str, the new datetime after adding the seconds in the format HH:MM:SS.
        # Test cases: 
        # For example, adding 10 seconds should result in a new datetime in HH:MM:SS format.
        new_datetime = self.datetime + datetime.timedelta(seconds=seconds)
        format = "%H:%M:%S"
        return new_datetime.strftime(format)

    def string_to_datetime(self, string):
        # Convert a string in the format YYYY-MM-DD HH:MM:SS to a datetime object.
        # param string: str, the string representing a datetime.
        # return: datetime, the converted datetime object.
        # Test cases: 
        # Given a string in the format "2022-10-31 12:30:00", the function should return a corresponding datetime object.
        return datetime.datetime.strptime(string, "%Y-%m-%d %H:%M:%S")

    def datetime_to_string(self, datetime_obj):
        # Convert a datetime object to a string in the format YYYY-MM-DD HH:MM:SS.
        # param datetime_obj: datetime, the datetime object to convert.
        # return: str, the datetime object as a string in YYYY-MM-DD HH:MM:SS format.
        # Test cases: 
        # Given a datetime object representing a specific date and time, the function should return a string in the specified format.
        return datetime_obj.strftime("%Y-%m-%d %H:%M:%S")

    def get_minutes(self, string_time1, string_time2):
        # Calculate the difference in minutes between two datetime strings.
        # param string_time1: str, the first datetime string.
        # param string_time2: str, the second datetime string.
        # return: int, the difference in minutes between the two datetime strings.
        # Test cases: 
        # Given two datetime strings, the function should return the difference in minutes between them.
        time1 = self.string_to_datetime(string_time1)
        time2 = self.string_to_datetime(string_time2)
        return round((time2 - time1).seconds / 60)

    def get_format_time(self, year, month, day, hour, minute, second):
        # Get a formatted string representing a specific date and time.
        # param year: int, the year.
        # param month: int, the month.
        # param day: int, the day.
        # param hour: int, the hour.
        # param minute: int, the minute.
        # param second: int, the second.
        # return: str, the formatted date and time string in YYYY-MM-DD HH:MM:SS format.
        # Test cases: 
        # Given specific values for year, month, day, hour, minute, and second, the function should return a formatted string.
        format = "%Y-%m-%d %H:%M:%S"
        time_item = datetime.datetime(year, month, day, hour, minute, second)
        return time_item.strftime(format)