```python
<description for whole class>
# This class provides static methods for building SQL queries like SELECT, INSERT, DELETE, and UPDATE.

    @staticmethod
    def select(table, columns='*', where=None):
        <description for whole function>
        # Construct a SELECT query with optional columns and WHERE clause.
        <description for all parameters>
        # param table: str, the name of the table to query
        # param columns: str or list, columns to select, default is '*', representing all columns
        # param where: dict, key-value pairs for filtering results
        <description for return statement>
        # return: str, the constructed SQL SELECT query
        <some test cases for the function>
        # Test case 1: select specific columns
        query = SQLQueryBuilder.select('users', ['name', 'email'], {'age': 30})
        # Test case 2: select all columns with a WHERE clause
        query = SQLQueryBuilder.select('orders', where={'status': 'pending'})

        if columns != '*':
            columns = ', '.join(columns)
        query = f"SELECT {columns} FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def insert(table, data):
        <description for whole function>
        # Construct an INSERT query to add data into the specified table.
        <description for all parameters>
        # param table: str, the name of the table to insert data into
        # param data: dict, key-value pairs of data to be inserted
        <description for return statement>
        # return: str, the constructed SQL INSERT query
        <some test cases for the function>
        # Test case 1: insert a new user record
        query = SQLQueryBuilder.insert('users', {'name': 'Alice', 'age': 25})
        # Test case 2: insert an order entry
        query = SQLQueryBuilder.insert('orders', {'product': 'Laptop', 'quantity': 2})

        keys = ', '.join(data.keys())
        values = ', '.join(f"'{v}'" for v in data.values())
        return f"INSERT INTO {table} ({keys}) VALUES ({values}) 

    @staticmethod
    def delete(table, where=None):
        <description for whole function>
        # Construct a DELETE query with an optional WHERE clause for deleting records.
        <description for all parameters>
        # param table: str, the name of the table to delete records from
        # param where: dict, key-value pairs for filtering records to be deleted
        <description for return statement>
        # return: str, the constructed SQL DELETE query
        <some test cases for the function>
        # Test case 1: delete records based on a condition
        query = SQLQueryBuilder.delete('users', {'age': 30})
        # Test case 2: delete all records from the 'logs' table
        query = SQLQueryBuilder.delete('logs')

        query = f"DELETE FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def update(table, data, where=None):
        <description for whole function>
        # Construct an UPDATE query to modify records in the specified table.
        <description for all parameters>
        # param table: str, the name of the table to update records in
        # param data: dict, key-value pairs of data to be updated
        # param where: dict, key-value pairs for filtering records to be updated
        <description for return statement>
        # return: str, the constructed SQL UPDATE query
        <some test cases for the function>
        # Test case 1: update user information
        query = SQLQueryBuilder.update('users', {'age': 26}, {'name': 'Alice'})
        # Test case 2: update order status
        query = SQLQueryBuilder.update('orders', {'status': 'shipped'}, {'id': 123})

        update_str = ', '.join(f"{k}='{v}'" for k, v in data.items())
        query = f"UPDATE {table} SET {update_str}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query
```