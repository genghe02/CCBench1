from collections import Counter
import re

class NLPDataProcessor2:

    def process_data(self, string_list):
        # Process each string in the list by removing non-English letters and converting to lowercase, then split into words
        # Input: string_list, a list of strings to process
        # Return: words_list, a list of words extracted from the processed strings
        # Test Case: process_data(['Hello World', 'Python is great']) will return [['hello', 'world'], ['python', 'is', 'great']]
        words_list = []
        for string in string_list:
            processed_string = re.sub(r'[^a-zA-Z\s]', '', string.lower())
            words = processed_string.split()
            words_list.append(words)
        return words_list

    def calculate_word_frequency(self, words_list):
        # Calculate the frequency of each word in the list of words
        # Input: words_list, a list of words to calculate frequency
        # Return: top_5_word_frequency, a dictionary of the top 5 words with their frequencies
        # Test Case: calculate_word_frequency([['hello', 'world'], ['python', 'is', 'great']]) will return {'hello': 1, 'world': 1, 'python': 1, 'is': 1, 'great': 1}
        word_frequency = Counter()
        for words in words_list:
            word_frequency.update(words)
        sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
        top_5_word_frequency = dict(list(sorted_word_frequency.items())[:5])
        return top_5_word_frequency

    def process(self, string_list):
        # Process the input string list by extracting words and calculating word frequency
        # Input: string_list, a list of strings to process
        # Return: word_frequency_dict, a dictionary of the top 5 words with their frequencies
        # Test Case: process(['Hello World', 'Python is great']) will return {'hello': 1, 'world': 1, 'python': 1, 'is': 1, 'great': 1}
        words_list = self.process_data(string_list)
        word_frequency_dict = self.calculate_word_frequency(words_list)
        return word_frequency_dict