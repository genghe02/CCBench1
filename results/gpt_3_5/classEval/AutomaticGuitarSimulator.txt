class AutomaticGuitarSimulator:
    def __init__(self, text) -> None:
        # Initialize the class with the provided text.
        # Parameters:
        # text: str, the text representing the guitar chords and tunes to be played.
        self.play_text = text

    def interpret(self, display=False):
        # Interpret the guitar chords and tunes from the provided text.
        # Parameters:
        # display: bool, if True, displays the chords and tunes being played.
        # Returns:
        # list of dictionaries, each containing chord and tune details.
        # Test cases:
        # If the provided text is empty, return without processing.
        # Otherwise, split the text into segments based on spaces and extract chord and tune information.
        # Create a list of dictionaries with chord and tune details for each segment.
        # If display is True, call the display function to show the chord and tune being played.
        if len(self.play_text) == 0:
            return
        else:
            play_list = []
            play_segs = self.play_text.split(" ")
            for play_seg in play_segs:
                pos = 0
                for ele in play_seg:
                    if ele.isalpha():
                        pos += 1
                        continue
                    break
                play_chord = play_seg[0:pos]
                play_value = play_seg[pos:]
                play_list.append({'Chord': play_chord, 'Tune': play_value})
                if display:
                    self.display(play_chord, play_value)
            return play_list

    def display(self, key, value):
        # Display the guitar playing information.
        # Parameters:
        # key: str, the chord being played.
        # value: str, the tune being played.
        # Returns:
        # str, message displaying the chord and tune being played.
        # Test cases:
        # Return a formatted message showing the chord and tune being played.
        return "Normal Guitar Playing -- Chord: %s, Play Tune: %s" % (key, value)