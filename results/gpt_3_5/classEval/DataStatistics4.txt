import math

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        # Calculate the correlation coefficient between two sets of data.
        # param data1: list, first set of data
        # param data2: list, second set of data
        # return: float, the correlation coefficient value
        # Some test cases for the function
        # Test case 1: correlation_coefficient([1, 2, 3, 4], [1, 2, 3, 4]) -> 1.0
        # Test case 2: correlation_coefficient([1, 2, 3, 4], [4, 3, 2, 1]) -> -1.0
        # Test case 3: correlation_coefficient([1, 2, 3, 4], [1, 1, 1, 1]) -> 0.0
        
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0
    
    @staticmethod
    def skewness(data):
        # Calculate the skewness of a set of data.
        # param data: list, the data for which skewness is calculated
        # return: float, the skewness value
        # Some test cases for the function
        # Test case 1: skewness([1, 2, 3, 4]) -> 0.0
        # Test case 2: skewness([1, 2, 3, 4, 5]) -> 0.0
        # Test case 3: skewness([1, 1, 1, 1]) -> 0.0
        
        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness
    
    @staticmethod
    def kurtosis(data):
        # Calculate the kurtosis of a set of data.
        # param data: list, the data for which kurtosis is calculated
        # return: float, the kurtosis value
        # Some test cases for the function
        # Test case 1: kurtosis([1, 2, 3, 4]) -> -1.3
        # Test case 2: kurtosis([1, 1, 1, 1]) -> 1.0
        # Test case 3: kurtosis([1, 2, 3, 4, 5]) -> -1.2
        
        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        # Calculate the probability density function (pdf) values for a set of data given mean and standard deviation.
        # param data: list, the data points for which pdf is calculated
        # param mu: float, the mean of the data
        # param sigma: float, the standard deviation of the data
        # return: list, the pdf values for each data point
        # Some test cases for the function
        # Test case 1: pdf([1, 2, 3, 4], 2, 1) -> [0.24197072451914337, 0.3989422804014327, 0.24197072451914337, 0.05399096651318806]
        # Test case 2: pdf([1, 2, 3, 4, 5], 3, 1) -> [0.24197072451914337, 0.3989422804014327, 0.24197072451914337, 0.05399096651318806, 0.004431848411938007]
        # Test case 3: pdf([1, 2, 3, 4], 2, 1.5) -> [0.2659617995551762, 0.2866515718799815, 0.2659617995551762, 0.1980288293120119]
        
        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values