class StockPortfolioTracker:
    # This class represents a stock portfolio tracker that allows users to manage their stock portfolio.

    def __init__(self, cash_balance):
        # Initializes the StockPortfolioTracker with the given cash balance.
        # cash_balance: float, the initial cash balance of the portfolio.

        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        # Adds a stock to the portfolio or increments the quantity if the stock is already present.
        # stock: dict, contains information about the stock to be added.
        #           Should have keys 'name', 'price', and 'quantity'.
        # Test cases:
        # 1. Add a new stock to the portfolio.
        # 2. Increment the quantity of an existing stock.
        for pf in self.portfolio:
            if pf['name'] == stock['name']:
                pf['quantity'] += stock['quantity']
                return

        self.portfolio.append(stock)

    def remove_stock(self, stock):
        # Removes a stock from the portfolio or decreases the quantity if sufficient quantity exists.
        # stock: dict, contains information about the stock to be removed.
        #           Should have keys 'name', 'price', and 'quantity'.
        # Test cases:
        # 1. Remove a stock with full quantity.
        # 2. Reduce the quantity of an existing stock.
        for pf in self.portfolio:
            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:
                pf['quantity'] -= stock['quantity']
                if pf['quantity'] == 0:
                    self.portfolio.remove(pf)
                return True
        return False

    def buy_stock(self, stock):
        # Buys a stock by adding it to the portfolio and updating the cash balance accordingly.
        # stock: dict, contains information about the stock to be bought.
        #           Should have keys 'name', 'price', and 'quantity'.
        # Returns: bool, True if the stock is successfully bought, False if insufficient balance.
        # Test cases:
        # 1. Buy a stock with enough cash balance.
        # 2. Attempt to buy a stock with insufficient cash balance.
        if stock['price'] * stock['quantity'] > self.cash_balance:
            return False
        else:
            self.add_stock(stock)
            self.cash_balance -= stock['price'] * stock['quantity']
            return True

    def sell_stock(self, stock):
        # Sells a stock by removing it from the portfolio and updating the cash balance accordingly.
        # stock: dict, contains information about the stock to be sold.
        #           Should have keys 'name', 'price', and 'quantity'.
        # Returns: bool, True if the stock is successfully sold, False if stock not found or quantity exceeds.
        # Test cases:
        # 1. Sell a stock with enough quantity in the portfolio.
        # 2. Attempt to sell a stock not in the portfolio or with excess quantity.
        if self.remove_stock(stock) == False:
            return False
        self.cash_balance += stock['price'] * stock['quantity']
        return True

    def calculate_portfolio_value(self):
        # Calculates the total value of the portfolio including cash balance and stock values.
        # Returns: float, the total value of the portfolio.
        # Test cases:
        # 1. Calculate portfolio value with multiple stocks.
        # 2. Calculate portfolio value with only cash balance.
        total_value = self.cash_balance
        for stock in self.portfolio:
            total_value += stock['price'] * stock['quantity']
        return total_value

    def get_portfolio_summary(self):
        # Generates a summary of the portfolio including individual stock values and total portfolio value.
        # Returns: tuple, (portfolio_value, stock_summary).
        # portfolio_value: float, the total value of the portfolio.
        # stock_summary: list of dicts, contains stock name and value.
        # Test cases:
        # 1. Get summary with multiple stocks.
        # 2. Get summary with only cash balance.
        summary = []
        for stock in self.portfolio:
            value = self.get_stock_value(stock)
            summary.append({"name": stock["name"], "value": value})
        portfolio_value = self.calculate_portfolio_value()
        return portfolio_value, summary

    def get_stock_value(self, stock):
        # Calculates the value of a specific stock in the portfolio.
        # stock: dict, contains information about the stock.
        #           Should have keys 'price' and 'quantity'.
        # Returns: float, the total value of the stock.
        # Test cases:
        # 1. Calculate value of a stock with positive quantity.
        # 2. Calculate value of a stock with zero quantity.
        return stock['price'] * stock['quantity']