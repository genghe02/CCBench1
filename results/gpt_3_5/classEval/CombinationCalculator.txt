import math
from typing import List

class CombinationCalculator:
    # This class provides methods for calculating combinations of elements and selecting subsets from a given list.

    def __init__(self, datas: List[str]):
        # Initializes the CombinationCalculator object with the provided list of strings.
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        # Calculates the number of combinations of n elements taken m at a time.
        # param n: int, total number of elements
        # param m: int, number of elements to choose
        # return: int, number of combinations
        # Test Cases:
        # count(5, 2) -> 10
        # count(0, 0) -> 1
        if m == 0 or n == m:
            return 1
        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))

    @staticmethod
    def count_all(n: int) -> int:
        # Calculates the total number of possible combinations of selecting elements from a set of size n.
        # param n: int, total number of elements
        # return: int, total number of combinations
        # Test Cases:
        # count_all(3) -> 7
        # count_all(64) -> inf
        if n < 0 or n > 63:
            return False
        return (1 << n) - 1 if n != 63 else float("inf")

    def select(self, m: int) -> List[List[str]]:
        # Selects all possible combinations of m elements from the provided list of strings.
        # param m: int, number of elements to choose
        # return: List[List[str]], list of selected combinations
        # Test Cases:
        # select(2) -> [['a', 'b'], ['a', 'c'], ['b', 'c']]
        # select(3) -> [['a', 'b', 'c']]
        result = []
        self._select(0, [None] * m, 0, result)
        return result

    def select_all(self) -> List[List[str]]:
        # Selects all possible combinations of different sizes from the provided list of strings.
        # return: List[List[str]], list of selected combinations
        # Test Cases:
        # select_all() -> [['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        # Helper method to recursively select combinations of elements.
        # param dataIndex: int, index to start selection
        # param resultList: List[str], current list of selected elements
        # param resultIndex: int, current index in the result list
        # param result: List[List[str]], list to store selected combinations
        # Test Cases:
        # _select(0, [None, None], 0, []) -> [['a', 'b'], ['a', 'c'], ['b', 'c']]
        resultLen = len(resultList)
        resultCount = resultIndex + 1
        if resultCount > resultLen:
            result.append(resultList.copy())
            return

        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
            resultList[resultIndex] = self.datas[i]
            self._select(i + 1, resultList, resultIndex + 1, result)