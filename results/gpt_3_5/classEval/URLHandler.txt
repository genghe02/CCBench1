<description for whole class>
class URLHandler:
    def __init__(self, url):
        # Initialize the URLHandler object with the provided URL.
        self.url = url

    def get_scheme(self):
        # Extracts the scheme portion from the URL.
        # Returns the scheme if present, otherwise returns None.
        # Test cases: 
        # >>> handler = URLHandler('https://www.example.com')
        # >>> handler.get_scheme()  # Expected output: 'https'
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            return self.url[:scheme_end]
        return None

    def get_host(self):
        # Extracts the host portion from the URL.
        # Returns the host if present, otherwise returns None.
        # Test cases:
        # >>> handler = URLHandler('https://www.example.com/path')
        # >>> handler.get_host()  # Expected output: 'www.example.com'
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[:host_end]
            return url_without_scheme
        return None

    def get_path(self):
        # Extracts the path portion from the URL.
        # Returns the path if present, otherwise returns None.
        # Test cases:
        # >>> handler = URLHandler('https://www.example.com/path/to/resource')
        # >>> handler.get_path()  # Expected output: '/path/to/resource'
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[host_end:]
        return None

    def get_query_params(self):
        # Extracts the query parameters from the URL.
        # Returns a dictionary of query parameters if present, otherwise returns None.
        # Test cases:
        # >>> handler = URLHandler('https://www.example.com/path?param1=value1&param2=value2')
        # >>> handler.get_query_params()  # Expected output: {'param1': 'value1', 'param2': 'value2'}
        query_start = self.url.find("?")
        fragment_start = self.url.find("#")
        if query_start != -1:
            query_string = self.url[query_start + 1:fragment_start]
            params = {}
            if len(query_string) > 0:
                param_pairs = query_string.split("&")
                for pair in param_pairs:
                    key_value = pair.split("=")
                    if len(key_value) == 2:
                        key, value = key_value
                        params[key] = value
            return params
        return None

    def get_fragment(self):
        # Extracts the fragment portion from the URL.
        # Returns the fragment if present, otherwise returns None.
        # Test cases:
        # >>> handler = URLHandler('https://www.example.com#section1')
        # >>> handler.get_fragment()  # Expected output: 'section1'
        fragment_start = self.url.find("#")
        if fragment_start != -1:
            return self.url[fragment_start + 1:]
        return None