import sqlite3


class UserLoginDB:
    # This class represents a database for user login functionalities using SQLite3.

    def __init__(self, db_name):
        # Initialize the UserLoginDB class with the given database name.
        # param db_name: str, the name of the database to connect to
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def insert_user(self, username, password):
        # Insert a new user into the database with the provided username and password.
        # param username: str, the username of the user to insert
        # param password: str, the password of the user to insert
        # return: None
        # Test case: insert_user("test_user", "password123")
        self.cursor.execute('''
            INSERT INTO users (username, password)
            VALUES (?, ?)
        ''', (username, password))
        self.connection.commit()

    def search_user_by_username(self, username):
        # Search for a user in the database based on the provided username.
        # param username: str, the username to search for
        # return: tuple containing user information or None if user not found
        # Test case: search_user_by_username("test_user")
        self.cursor.execute('''
            SELECT * FROM users WHERE username = ?
        ''', (username,))
        user = self.cursor.fetchone()
        return user

    def delete_user_by_username(self, username):
        # Delete a user from the database based on the provided username.
        # param username: str, the username of the user to delete
        # return: None
        # Test case: delete_user_by_username("test_user")
        self.cursor.execute('''
            DELETE FROM users WHERE username = ?
        ''', (username,))
        self.connection.commit()

    def validate_user_login(self, username, password):
        # Validate a user login by checking the provided username and password against the database.
        # param username: str, the username of the user to validate
        # param password: str, the password of the user to validate
        # return: bool, True if login is valid, False otherwise
        # Test case: validate_user_login("test_user", "password123")
        user = self.search_user_by_username(username)
        if user is not None and user[1] == password:
            return True
        return False