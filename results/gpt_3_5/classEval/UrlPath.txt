import urllib.parse


class UrlPath:
    # This class represents a utility for handling URL paths by parsing and fixing segments.

    def __init__(self):
        # Initialize an instance of UrlPath with an empty list of segments and a flag indicating if the path ends with a '/'.

        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        # Add a segment to the list of segments after fixing the path.
        # param segment: str, the segment to add to the URL path
        # Test Case:
        # >>> url = UrlPath()
        # >>> url.add('/home/')
        # Expected Output: ['home']

        self.segments.append(self.fix_path(segment))

    def parse(self, path, charset):
        # Parse a given path by decoding segments and storing them in the segments list.
        # param path: str, the path to parse
        # param charset: str, the character encoding to use for decoding
        # Test Case:
        # >>> url = UrlPath()
        # >>> url.parse('/%E6%B5%8B%E8%AF%95/', 'utf-8')
        # Expected Output: ['测试']

        if path:
            if path.endswith('/'):
                self.with_end_tag = True

            path = self.fix_path(path)
            if path:
                split = path.split('/')
                for seg in split:
                    decoded_seg = urllib.parse.unquote(seg, encoding=charset)
                    self.segments.append(decoded_seg)

    @staticmethod
    def fix_path(path):
        # Fix the given path by stripping leading and trailing slashes.
        # param path: str, the path to fix
        # return: str, the fixed path without leading and trailing slashes
        # Test Case:
        # >>> fixed_path = UrlPath.fix_path('/home/')
        # Expected Output: 'home'
        
        if not path:
            return ''

        segment_str = path.strip('/')
        return segment_str