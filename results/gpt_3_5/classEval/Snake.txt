import random


class Snake:
    # This class represents the snake in the game.
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        # Initialize the Snake object with the provided parameters.
        # param SCREEN_WIDTH: int, the width of the game screen
        # param SCREEN_HEIGHT: int, the height of the game screen
        # param BLOCK_SIZE: int, the size of each block in the game
        # param food_position: tuple, the initial position of the food
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        # Move the snake in the specified direction.
        # param direction: tuple, the direction in which the snake should move
        # return: None
        # Test cases:
        # move((0, -1))  # Move up
        # move((1, 0))   # Move right
        cur = self.positions[0]
        x, y = direction

        new = (
            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
        )

        if new == self.food_position:
            self.eat_food()

        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        # Generate a random position for the food that is not occupied by the snake.
        # return: None
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,
                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        # Reset the game state when the snake collides with itself.
        # return: None
        # Test cases:
        # reset()  # Reset the game
        self.length = 1
        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        # Increase the length of the snake and update the score when it eats the food.
        # return: None
        # Test cases:
        # eat_food()  # Snake eats the food
        self.length += 1
        self.score += 100
        self.random_food_position()