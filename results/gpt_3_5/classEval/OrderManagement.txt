class Order:
    # This class represents an order containing a menu, selected dishes, and sales information.

    def __init__(self):
        # Initialize the Order object with an empty menu, selected dishes, and sales dictionary.
        self.menu = []
        # menu = [{"dish": dish name, "price": price, "count": count}, ...]
        self.selected_dishes = []
        # selected_dish = {"dish": dish name, "count": count, price: price}
        self.sales = {}
        #

    def add_dish(self, dish):
        # Add a dish to the selected dishes from the menu if available.
        # param dish: dict, {"dish": dish name, "count": count, price: price}
        # return: bool, True if dish is successfully added, False otherwise
        # Test cases:
        # >>> order = Order()
        # >>> order.menu = [{"dish": "Pizza", "price": 10, "count": 5}]
        # >>> order.add_dish({"dish": "Pizza", "count": 3, "price": 10})
        for menu_dish in self.menu:
            if dish["dish"] == menu_dish["dish"]:
                if menu_dish["count"] < dish["count"]:
                    return False
                else:
                    menu_dish["count"] -= dish["count"]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        # Calculate the total price of the selected dishes based on sales information.
        # return: int, total price of the selected dishes
        # Test cases:
        # >>> order = Order()
        # >>> order.sales = {"Pizza": 0.9, "Burger": 1.1}
        # >>> order.selected_dishes = [{"dish": "Pizza", "count": 2, "price": 10}, {"dish": "Burger", "count": 1, "price": 8}]
        total = 0
        for dish in self.selected_dishes:
            total += dish["price"] * dish["count"] * self.sales[dish["dish"]]
        return total

    def checkout(self):
        # Process the checkout by calculating the total price and clearing selected dishes.
        # return: int, total price if selected dishes are not empty, False otherwise
        # Test cases:
        # >>> order = Order()
        # >>> order.sales = {"Pizza": 0.9, "Burger": 1.1}
        # >>> order.selected_dishes = [{"dish": "Pizza", "count": 2, "price": 10}, {"dish": "Burger", "count": 1, "price": 8}]
        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total