<description for whole class>
# This class provides methods for generating SQL queries for common operations like SELECT, INSERT, UPDATE, and DELETE on a specified table.

def __init__(self, table_name):
    # Initializes the SQLGenerator object with the provided table_name.
    # table_name: str, the name of the table to operate on.

def select(self, fields=None, condition=None):
    # Generates a SELECT SQL query based on the specified fields and condition.
    # fields: list or None, the list of fields to select. If None, select all fields.
    # condition: str or None, the condition to apply to the query.
    # return: str, the generated SQL SELECT query.
    # Test cases:
    # select(None) -> "SELECT * FROM {table_name};"
    # select(['name', 'age']) -> "SELECT name, age FROM {table_name};"
    # select(['name', 'age'], "age > 18") -> "SELECT name, age FROM {table_name} WHERE age > 18;"

def insert(self, data):
    # Generates an INSERT SQL query for inserting data into the table.
    # data: dict, the data to be inserted where keys are column names and values are values to be inserted.
    # return: str, the generated SQL INSERT query.
    # Test cases:
    # insert({'name': 'Alice', 'age': 25}) -> "INSERT INTO {table_name} (name, age) VALUES ('Alice', '25');"

def update(self, data, condition):
    # Generates an UPDATE SQL query to update data based on the provided condition.
    # data: dict, the data to be updated where keys are column names and values are new values.
    # condition: str, the condition to apply to the query.
    # return: str, the generated SQL UPDATE query.
    # Test cases:
    # update({'age': 26}, "name = 'Alice'") -> "UPDATE {table_name} SET age = '26' WHERE name = 'Alice';"

def delete(self, condition):
    # Generates a DELETE SQL query to delete rows based on the provided condition.
    # condition: str, the condition to apply to the query.
    # return: str, the generated SQL DELETE query.
    # Test cases:
    # delete("age < 18") -> "DELETE FROM {table_name} WHERE age < 18;"

def select_female_under_age(self, age):
    # Generates a SELECT SQL query to select females under a specified age.
    # age: int, the maximum age limit for females.
    # return: str, the generated SQL SELECT query.
    # Test cases:
    # select_female_under_age(30) -> "SELECT * FROM {table_name} WHERE age < 30 AND gender = 'female';"

def select_by_age_range(self, min_age, max_age):
    # Generates a SELECT SQL query to select rows within a specified age range.
    # min_age: int, the minimum age in the range.
    # max_age: int, the maximum age in the range.
    # return: str, the generated SQL SELECT query.
    # Test cases:
    # select_by_age_range(20, 30) -> "SELECT * FROM {table_name} WHERE age BETWEEN 20 AND 30;"