<description for whole class>
class VendingMachine:
    # This class represents a vending machine that allows users to add items, insert coins, purchase items, restock items, and display available items.

    def __init__(self):
        # Initialize the VendingMachine with an empty inventory and zero balance.
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        # Add an item to the vending machine's inventory if it does not already exist.
        # param item_name: str, the name of the item to add
        # param price: float, the price of the item
        # param quantity: int, the quantity of the item to add
        # return: None
        # some test cases for the function
        # Test adding an item that does not exist in the inventory
        # Test adding an item that already exists in the inventory
        if not self.restock_item(item_name, quantity):
            self.inventory[item_name] = {'price': price, 'quantity': quantity}

    def insert_coin(self, amount):
        # Insert a coin into the vending machine's balance.
        # param amount: float, the amount of the coin to insert
        # return: float, the updated balance after inserting the coin
        # some test cases for the function
        # Test inserting coins with different values
        # Test inserting negative amount
        self.balance += amount
        return self.balance

    def purchase_item(self, item_name):
        # Purchase an item from the vending machine if it exists in the inventory and user has enough balance.
        # param item_name: str, the name of the item to purchase
        # return: float or bool, the remaining balance after purchase or False if purchase failed
        # some test cases for the function
        # Test purchasing an item that exists with enough balance
        # Test purchasing an item that does not exist
        # Test purchasing an item with insufficient balance
        if item_name in self.inventory:
            item = self.inventory[item_name]
            if item['quantity'] > 0 and self.balance >= item['price']:
                self.balance -= item['price']
                item['quantity'] -= 1
                return self.balance
            else:
                return False
        else:
            return False

    def restock_item(self, item_name, quantity):
        # Restock an existing item in the vending machine's inventory with the provided quantity.
        # param item_name: str, the name of the item to restock
        # param quantity: int, the quantity to restock
        # return: bool, True if item restocked successfully, False otherwise
        # some test cases for the function
        # Test restocking an existing item
        # Test restocking a non-existent item
        if item_name in self.inventory:
            self.inventory[item_name]['quantity'] += quantity
            return True
        else:
            return False

    def display_items(self):
        # Display all items in the vending machine's inventory with their prices and quantities.
        # return: str or bool, formatted string of items if inventory is not empty, False otherwise
        # some test cases for the function
        # Test displaying items with inventory being empty
        # Test displaying items with inventory having multiple items
        if not self.inventory:
            return False
        else:
            items = []
            for item_name, item_info in self.inventory.items():
                items.append(f"{item_name} - ${item_info['price']} [{item_info['quantity']}]")
            return "\n".join(items)