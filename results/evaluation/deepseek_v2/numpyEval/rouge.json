[
  {
    "id": 0,
    "filename": "NumpyEval_0.txt",
    "dataset_comment": "Find each index where the value changes in an efficient way using numpy by comparing each element with its neighbor and utilizing np.where(condition).",
    "generated_comment": "Find each index where the value changes in an efficient way using numpy by comparing each element with its neighbor and utilizing np.where(condition).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 1.0,
      "rouge_1_recall_cb": 1.0,
      "rouge_1_recall_ce": 1.0,
      "rouge_1_precision": 1.0,
      "rouge_1_precision_cb": 1.0,
      "rouge_1_precision_ce": 1.0,
      "rouge_1_f_score": 1.0,
      "rouge_1_f_score_cb": 1.0,
      "rouge_1_f_score_ce": 1.0,
      "rouge_2_recall": 1.0,
      "rouge_2_recall_cb": 1.0,
      "rouge_2_recall_ce": 1.0,
      "rouge_2_precision": 1.0,
      "rouge_2_precision_cb": 1.0,
      "rouge_2_precision_ce": 1.0,
      "rouge_2_f_score": 1.0,
      "rouge_2_f_score_cb": 1.0,
      "rouge_2_f_score_ce": 1.0,
      "rouge_3_recall": 1.0,
      "rouge_3_recall_cb": 1.0,
      "rouge_3_recall_ce": 1.0,
      "rouge_3_precision": 1.0,
      "rouge_3_precision_cb": 1.0,
      "rouge_3_precision_ce": 1.0,
      "rouge_3_f_score": 1.0,
      "rouge_3_f_score_cb": 1.0,
      "rouge_3_f_score_ce": 1.0,
      "rouge_4_recall": 1.0,
      "rouge_4_recall_cb": 1.0,
      "rouge_4_recall_ce": 1.0,
      "rouge_4_precision": 1.0,
      "rouge_4_precision_cb": 1.0,
      "rouge_4_precision_ce": 1.0,
      "rouge_4_f_score": 1.0,
      "rouge_4_f_score_cb": 1.0,
      "rouge_4_f_score_ce": 1.0,
      "rouge_l_recall": 1.0,
      "rouge_l_recall_cb": 1.0,
      "rouge_l_recall_ce": 1.0,
      "rouge_l_precision": 1.0,
      "rouge_l_precision_cb": 1.0,
      "rouge_l_precision_ce": 1.0,
      "rouge_l_f_score": 1.0,
      "rouge_l_f_score_cb": 1.0,
      "rouge_l_f_score_ce": 1.0,
      "rouge_w_1.2_recall": 0.52531,
      "rouge_w_1.2_recall_cb": 0.52531,
      "rouge_w_1.2_recall_ce": 0.52531,
      "rouge_w_1.2_precision": 1.0,
      "rouge_w_1.2_precision_cb": 1.0,
      "rouge_w_1.2_precision_ce": 1.0,
      "rouge_w_1.2_f_score": 0.68879,
      "rouge_w_1.2_f_score_cb": 0.68879,
      "rouge_w_1.2_f_score_ce": 0.68879,
      "rouge_s*_recall": 1.0,
      "rouge_s*_recall_cb": 1.0,
      "rouge_s*_recall_ce": 1.0,
      "rouge_s*_precision": 1.0,
      "rouge_s*_precision_cb": 1.0,
      "rouge_s*_precision_ce": 1.0,
      "rouge_s*_f_score": 1.0,
      "rouge_s*_f_score_cb": 1.0,
      "rouge_s*_f_score_ce": 1.0,
      "rouge_su*_recall": 1.0,
      "rouge_su*_recall_cb": 1.0,
      "rouge_su*_recall_ce": 1.0,
      "rouge_su*_precision": 1.0,
      "rouge_su*_precision_cb": 1.0,
      "rouge_su*_precision_ce": 1.0,
      "rouge_su*_f_score": 1.0,
      "rouge_su*_f_score_cb": 1.0,
      "rouge_su*_f_score_ce": 1.0
    }
  },
  {
    "id": 1,
    "filename": "NumpyEval_1.txt",
    "dataset_comment": "Convert a 2D array with shape (x, y) to a 3D array with shape (x, y, 1) in a Pythonic way.",
    "generated_comment": "Create a new array `b` by adding a new axis to the last dimension of `a`. This operation reshapes `a` from a 2D array to a 3D array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.38095,
      "rouge_1_recall_cb": 0.38095,
      "rouge_1_recall_ce": 0.38095,
      "rouge_1_precision": 0.28571,
      "rouge_1_precision_cb": 0.28571,
      "rouge_1_precision_ce": 0.28571,
      "rouge_1_f_score": 0.32653,
      "rouge_1_f_score_cb": 0.32653,
      "rouge_1_f_score_ce": 0.32653,
      "rouge_2_recall": 0.25,
      "rouge_2_recall_cb": 0.25,
      "rouge_2_recall_ce": 0.25,
      "rouge_2_precision": 0.18519,
      "rouge_2_precision_cb": 0.18519,
      "rouge_2_precision_ce": 0.18519,
      "rouge_2_f_score": 0.21277,
      "rouge_2_f_score_cb": 0.21277,
      "rouge_2_f_score_ce": 0.21277,
      "rouge_3_recall": 0.15789,
      "rouge_3_recall_cb": 0.15789,
      "rouge_3_recall_ce": 0.15789,
      "rouge_3_precision": 0.11538,
      "rouge_3_precision_cb": 0.11538,
      "rouge_3_precision_ce": 0.11538,
      "rouge_3_f_score": 0.13333,
      "rouge_3_f_score_cb": 0.13333,
      "rouge_3_f_score_ce": 0.13333,
      "rouge_4_recall": 0.05556,
      "rouge_4_recall_cb": 0.05556,
      "rouge_4_recall_ce": 0.05556,
      "rouge_4_precision": 0.04,
      "rouge_4_precision_cb": 0.04,
      "rouge_4_precision_ce": 0.04,
      "rouge_4_f_score": 0.04651,
      "rouge_4_f_score_cb": 0.04651,
      "rouge_4_f_score_ce": 0.04651,
      "rouge_l_recall": 0.33333,
      "rouge_l_recall_cb": 0.33333,
      "rouge_l_recall_ce": 0.33333,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.28571,
      "rouge_l_f_score_cb": 0.28571,
      "rouge_l_f_score_ce": 0.28571,
      "rouge_w_1.2_recall": 0.16186,
      "rouge_w_1.2_recall_cb": 0.16186,
      "rouge_w_1.2_recall_ce": 0.16186,
      "rouge_w_1.2_precision": 0.22318,
      "rouge_w_1.2_precision_cb": 0.22318,
      "rouge_w_1.2_precision_ce": 0.22318,
      "rouge_w_1.2_f_score": 0.18764,
      "rouge_w_1.2_f_score_cb": 0.18764,
      "rouge_w_1.2_f_score_ce": 0.18764,
      "rouge_s*_recall": 0.12381,
      "rouge_s*_recall_cb": 0.12381,
      "rouge_s*_recall_ce": 0.12381,
      "rouge_s*_precision": 0.06878,
      "rouge_s*_precision_cb": 0.06878,
      "rouge_s*_precision_ce": 0.06878,
      "rouge_s*_f_score": 0.08843,
      "rouge_s*_f_score_cb": 0.08843,
      "rouge_s*_f_score_ce": 0.08843,
      "rouge_su*_recall": 0.14783,
      "rouge_su*_recall_cb": 0.14783,
      "rouge_su*_recall_ce": 0.14783,
      "rouge_su*_precision": 0.08395,
      "rouge_su*_precision_cb": 0.08395,
      "rouge_su*_precision_ce": 0.08395,
      "rouge_su*_f_score": 0.10709,
      "rouge_su*_f_score_cb": 0.10709,
      "rouge_su*_f_score_ce": 0.10709
    }
  },
  {
    "id": 2,
    "filename": "NumpyEval_2.txt",
    "dataset_comment": "Get the cumulative distribution function using NumPy by setting bins to 10 and generating a cumulative sum of the histogram contents to the variable hist.",
    "generated_comment": "Compute the histogram of the flattened array with 10 bins and then compute the cumulative sum of the histogram values.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.44444,
      "rouge_1_f_score_cb": 0.44444,
      "rouge_1_f_score_ce": 0.44444,
      "rouge_2_recall": 0.20833,
      "rouge_2_recall_cb": 0.20833,
      "rouge_2_recall_ce": 0.20833,
      "rouge_2_precision": 0.26316,
      "rouge_2_precision_cb": 0.26316,
      "rouge_2_precision_ce": 0.26316,
      "rouge_2_f_score": 0.23256,
      "rouge_2_f_score_cb": 0.23256,
      "rouge_2_f_score_ce": 0.23256,
      "rouge_3_recall": 0.13043,
      "rouge_3_recall_cb": 0.13043,
      "rouge_3_recall_ce": 0.13043,
      "rouge_3_precision": 0.16667,
      "rouge_3_precision_cb": 0.16667,
      "rouge_3_precision_ce": 0.16667,
      "rouge_3_f_score": 0.14634,
      "rouge_3_f_score_cb": 0.14634,
      "rouge_3_f_score_ce": 0.14634,
      "rouge_4_recall": 0.09091,
      "rouge_4_recall_cb": 0.09091,
      "rouge_4_recall_ce": 0.09091,
      "rouge_4_precision": 0.11765,
      "rouge_4_precision_cb": 0.11765,
      "rouge_4_precision_ce": 0.11765,
      "rouge_4_f_score": 0.10257,
      "rouge_4_f_score_cb": 0.10257,
      "rouge_4_f_score_ce": 0.10257,
      "rouge_l_recall": 0.32,
      "rouge_l_recall_cb": 0.32,
      "rouge_l_recall_ce": 0.32,
      "rouge_l_precision": 0.4,
      "rouge_l_precision_cb": 0.4,
      "rouge_l_precision_ce": 0.4,
      "rouge_l_f_score": 0.35556,
      "rouge_l_f_score_cb": 0.35556,
      "rouge_l_f_score_ce": 0.35556,
      "rouge_w_1.2_recall": 0.14194,
      "rouge_w_1.2_recall_cb": 0.14194,
      "rouge_w_1.2_recall_ce": 0.14194,
      "rouge_w_1.2_precision": 0.33777,
      "rouge_w_1.2_precision_cb": 0.33777,
      "rouge_w_1.2_precision_ce": 0.33777,
      "rouge_w_1.2_f_score": 0.19988,
      "rouge_w_1.2_f_score_cb": 0.19988,
      "rouge_w_1.2_f_score_ce": 0.19988,
      "rouge_s*_recall": 0.14333,
      "rouge_s*_recall_cb": 0.14333,
      "rouge_s*_recall_ce": 0.14333,
      "rouge_s*_precision": 0.22632,
      "rouge_s*_precision_cb": 0.22632,
      "rouge_s*_precision_ce": 0.22632,
      "rouge_s*_f_score": 0.17551,
      "rouge_s*_f_score_cb": 0.17551,
      "rouge_s*_f_score_ce": 0.17551,
      "rouge_su*_recall": 0.16358,
      "rouge_su*_recall_cb": 0.16358,
      "rouge_su*_recall_ce": 0.16358,
      "rouge_su*_precision": 0.25359,
      "rouge_su*_precision_cb": 0.25359,
      "rouge_su*_precision_ce": 0.25359,
      "rouge_su*_f_score": 0.19887,
      "rouge_su*_f_score_cb": 0.19887,
      "rouge_su*_f_score_ce": 0.19887
    }
  },
  {
    "id": 3,
    "filename": "NumpyEval_3.txt",
    "dataset_comment": "Convert an array of strings to an array of floats in NumPy and return the final result.",
    "generated_comment": "Convert an array of string elements to an array of float elements using numpy's astype method.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.64706,
      "rouge_1_recall_cb": 0.64706,
      "rouge_1_recall_ce": 0.64706,
      "rouge_1_precision": 0.64706,
      "rouge_1_precision_cb": 0.64706,
      "rouge_1_precision_ce": 0.64706,
      "rouge_1_f_score": 0.64706,
      "rouge_1_f_score_cb": 0.64706,
      "rouge_1_f_score_ce": 0.64706,
      "rouge_2_recall": 0.5,
      "rouge_2_recall_cb": 0.5,
      "rouge_2_recall_ce": 0.5,
      "rouge_2_precision": 0.5,
      "rouge_2_precision_cb": 0.5,
      "rouge_2_precision_ce": 0.5,
      "rouge_2_f_score": 0.5,
      "rouge_2_f_score_cb": 0.5,
      "rouge_2_f_score_ce": 0.5,
      "rouge_3_recall": 0.4,
      "rouge_3_recall_cb": 0.4,
      "rouge_3_recall_ce": 0.4,
      "rouge_3_precision": 0.4,
      "rouge_3_precision_cb": 0.4,
      "rouge_3_precision_ce": 0.4,
      "rouge_3_f_score": 0.4,
      "rouge_3_f_score_cb": 0.4,
      "rouge_3_f_score_ce": 0.4,
      "rouge_4_recall": 0.28571,
      "rouge_4_recall_cb": 0.28571,
      "rouge_4_recall_ce": 0.28571,
      "rouge_4_precision": 0.28571,
      "rouge_4_precision_cb": 0.28571,
      "rouge_4_precision_ce": 0.28571,
      "rouge_4_f_score": 0.28571,
      "rouge_4_f_score_cb": 0.28571,
      "rouge_4_f_score_ce": 0.28571,
      "rouge_l_recall": 0.64706,
      "rouge_l_recall_cb": 0.64706,
      "rouge_l_recall_ce": 0.64706,
      "rouge_l_precision": 0.64706,
      "rouge_l_precision_cb": 0.64706,
      "rouge_l_precision_ce": 0.64706,
      "rouge_l_f_score": 0.64706,
      "rouge_l_f_score_cb": 0.64706,
      "rouge_l_f_score_ce": 0.64706,
      "rouge_w_1.2_recall": 0.35124,
      "rouge_w_1.2_recall_cb": 0.35124,
      "rouge_w_1.2_recall_ce": 0.35124,
      "rouge_w_1.2_precision": 0.61901,
      "rouge_w_1.2_precision_cb": 0.61901,
      "rouge_w_1.2_precision_ce": 0.61901,
      "rouge_w_1.2_f_score": 0.44818,
      "rouge_w_1.2_f_score_cb": 0.44818,
      "rouge_w_1.2_f_score_ce": 0.44818,
      "rouge_s*_recall": 0.40441,
      "rouge_s*_recall_cb": 0.40441,
      "rouge_s*_recall_ce": 0.40441,
      "rouge_s*_precision": 0.40441,
      "rouge_s*_precision_cb": 0.40441,
      "rouge_s*_precision_ce": 0.40441,
      "rouge_s*_f_score": 0.40441,
      "rouge_s*_f_score_cb": 0.40441,
      "rouge_s*_f_score_ce": 0.40441,
      "rouge_su*_recall": 0.43421,
      "rouge_su*_recall_cb": 0.43421,
      "rouge_su*_recall_ce": 0.43421,
      "rouge_su*_precision": 0.43421,
      "rouge_su*_precision_cb": 0.43421,
      "rouge_su*_precision_ce": 0.43421,
      "rouge_su*_f_score": 0.43421,
      "rouge_su*_f_score_cb": 0.43421,
      "rouge_su*_f_score_ce": 0.43421
    }
  },
  {
    "id": 4,
    "filename": "NumpyEval_4.txt",
    "dataset_comment": "Convert Python sequence to NumPy array and fill missing values with 0.",
    "generated_comment": "Flatten the list of lists into a single list, filling shorter lists with 0s to match the length of the longest list, and then transpose the result.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.14815,
      "rouge_1_precision_cb": 0.14815,
      "rouge_1_precision_ce": 0.14815,
      "rouge_1_f_score": 0.20513,
      "rouge_1_f_score_cb": 0.20513,
      "rouge_1_f_score_ce": 0.20513,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.16667,
      "rouge_l_recall_cb": 0.16667,
      "rouge_l_recall_ce": 0.16667,
      "rouge_l_precision": 0.07407,
      "rouge_l_precision_cb": 0.07407,
      "rouge_l_precision_ce": 0.07407,
      "rouge_l_f_score": 0.10256,
      "rouge_l_f_score_cb": 0.10256,
      "rouge_l_f_score_ce": 0.10256,
      "rouge_w_1.2_recall": 0.09033,
      "rouge_w_1.2_recall_cb": 0.09033,
      "rouge_w_1.2_recall_ce": 0.09033,
      "rouge_w_1.2_precision": 0.06599,
      "rouge_w_1.2_precision_cb": 0.06599,
      "rouge_w_1.2_precision_ce": 0.06599,
      "rouge_w_1.2_f_score": 0.07627,
      "rouge_w_1.2_f_score_cb": 0.07627,
      "rouge_w_1.2_f_score_ce": 0.07627,
      "rouge_s*_recall": 0.0303,
      "rouge_s*_recall_cb": 0.0303,
      "rouge_s*_recall_ce": 0.0303,
      "rouge_s*_precision": 0.0057,
      "rouge_s*_precision_cb": 0.0057,
      "rouge_s*_precision_ce": 0.0057,
      "rouge_s*_f_score": 0.00959,
      "rouge_s*_f_score_cb": 0.00959,
      "rouge_s*_f_score_ce": 0.00959,
      "rouge_su*_recall": 0.07792,
      "rouge_su*_recall_cb": 0.07792,
      "rouge_su*_recall_ce": 0.07792,
      "rouge_su*_precision": 0.01592,
      "rouge_su*_precision_cb": 0.01592,
      "rouge_su*_precision_ce": 0.01592,
      "rouge_su*_f_score": 0.02644,
      "rouge_su*_f_score_cb": 0.02644,
      "rouge_su*_f_score_ce": 0.02644
    }
  },
  {
    "id": 5,
    "filename": "NumpyEval_5.txt",
    "dataset_comment": "Given a matrix with 1 column and N rows, extract an array with N elements and return it.",
    "generated_comment": "Convert a given matrix to a 1D array by flattening it and removing any extra dimensions.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.35294,
      "rouge_1_f_score_cb": 0.35294,
      "rouge_1_f_score_ce": 0.35294,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.22222,
      "rouge_l_recall_cb": 0.22222,
      "rouge_l_recall_ce": 0.22222,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.23529,
      "rouge_l_f_score_cb": 0.23529,
      "rouge_l_f_score_ce": 0.23529,
      "rouge_w_1.2_recall": 0.10504,
      "rouge_w_1.2_recall_cb": 0.10504,
      "rouge_w_1.2_recall_ce": 0.10504,
      "rouge_w_1.2_precision": 0.21065,
      "rouge_w_1.2_precision_cb": 0.21065,
      "rouge_w_1.2_precision_ce": 0.21065,
      "rouge_w_1.2_f_score": 0.14018,
      "rouge_w_1.2_f_score_cb": 0.14018,
      "rouge_w_1.2_f_score_ce": 0.14018,
      "rouge_s*_recall": 0.09804,
      "rouge_s*_recall_cb": 0.09804,
      "rouge_s*_recall_ce": 0.09804,
      "rouge_s*_precision": 0.125,
      "rouge_s*_precision_cb": 0.125,
      "rouge_s*_precision_ce": 0.125,
      "rouge_s*_f_score": 0.10989,
      "rouge_s*_f_score_cb": 0.10989,
      "rouge_s*_f_score_ce": 0.10989,
      "rouge_su*_recall": 0.11765,
      "rouge_su*_recall_cb": 0.11765,
      "rouge_su*_recall_ce": 0.11765,
      "rouge_su*_precision": 0.14815,
      "rouge_su*_precision_cb": 0.14815,
      "rouge_su*_precision_ce": 0.14815,
      "rouge_su*_f_score": 0.13115,
      "rouge_su*_f_score_cb": 0.13115,
      "rouge_su*_f_score_ce": 0.13115
    }
  },
  {
    "id": 6,
    "filename": "NumpyEval_6.txt",
    "dataset_comment": "Convert a numpy array to a tuple and return the transformed tuple.",
    "generated_comment": "Convert a numpy array of any shape to a nested tuple by mapping each element to a tuple.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.66667,
      "rouge_1_recall_cb": 0.66667,
      "rouge_1_recall_ce": 0.66667,
      "rouge_1_precision": 0.44444,
      "rouge_1_precision_cb": 0.44444,
      "rouge_1_precision_ce": 0.44444,
      "rouge_1_f_score": 0.53333,
      "rouge_1_f_score_cb": 0.53333,
      "rouge_1_f_score_ce": 0.53333,
      "rouge_2_recall": 0.45455,
      "rouge_2_recall_cb": 0.45455,
      "rouge_2_recall_ce": 0.45455,
      "rouge_2_precision": 0.29412,
      "rouge_2_precision_cb": 0.29412,
      "rouge_2_precision_ce": 0.29412,
      "rouge_2_f_score": 0.35715,
      "rouge_2_f_score_cb": 0.35715,
      "rouge_2_f_score_ce": 0.35715,
      "rouge_3_recall": 0.3,
      "rouge_3_recall_cb": 0.3,
      "rouge_3_recall_ce": 0.3,
      "rouge_3_precision": 0.1875,
      "rouge_3_precision_cb": 0.1875,
      "rouge_3_precision_ce": 0.1875,
      "rouge_3_f_score": 0.23077,
      "rouge_3_f_score_cb": 0.23077,
      "rouge_3_f_score_ce": 0.23077,
      "rouge_4_recall": 0.11111,
      "rouge_4_recall_cb": 0.11111,
      "rouge_4_recall_ce": 0.11111,
      "rouge_4_precision": 0.06667,
      "rouge_4_precision_cb": 0.06667,
      "rouge_4_precision_ce": 0.06667,
      "rouge_4_f_score": 0.08334,
      "rouge_4_f_score_cb": 0.08334,
      "rouge_4_f_score_ce": 0.08334,
      "rouge_l_recall": 0.66667,
      "rouge_l_recall_cb": 0.66667,
      "rouge_l_recall_ce": 0.66667,
      "rouge_l_precision": 0.44444,
      "rouge_l_precision_cb": 0.44444,
      "rouge_l_precision_ce": 0.44444,
      "rouge_l_f_score": 0.53333,
      "rouge_l_f_score_cb": 0.53333,
      "rouge_l_f_score_ce": 0.53333,
      "rouge_w_1.2_recall": 0.38328,
      "rouge_w_1.2_recall_cb": 0.38328,
      "rouge_w_1.2_recall_ce": 0.38328,
      "rouge_w_1.2_precision": 0.42002,
      "rouge_w_1.2_precision_cb": 0.42002,
      "rouge_w_1.2_precision_ce": 0.42002,
      "rouge_w_1.2_f_score": 0.40081,
      "rouge_w_1.2_f_score_cb": 0.40081,
      "rouge_w_1.2_f_score_ce": 0.40081,
      "rouge_s*_recall": 0.42424,
      "rouge_s*_recall_cb": 0.42424,
      "rouge_s*_recall_ce": 0.42424,
      "rouge_s*_precision": 0.18301,
      "rouge_s*_precision_cb": 0.18301,
      "rouge_s*_precision_ce": 0.18301,
      "rouge_s*_f_score": 0.25571,
      "rouge_s*_f_score_cb": 0.25571,
      "rouge_s*_f_score_ce": 0.25571,
      "rouge_su*_recall": 0.45455,
      "rouge_su*_recall_cb": 0.45455,
      "rouge_su*_recall_ce": 0.45455,
      "rouge_su*_precision": 0.20588,
      "rouge_su*_precision_cb": 0.20588,
      "rouge_su*_precision_ce": 0.20588,
      "rouge_su*_f_score": 0.2834,
      "rouge_su*_f_score_cb": 0.2834,
      "rouge_su*_f_score_ce": 0.2834
    }
  },
  {
    "id": 7,
    "filename": "NumpyEval_7.txt",
    "dataset_comment": "Conduct the reverse operation along the last dimension.",
    "generated_comment": "Reverse the order of elements in the innermost dimension of each sub-array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.30769,
      "rouge_1_precision_cb": 0.30769,
      "rouge_1_precision_ce": 0.30769,
      "rouge_1_f_score": 0.38095,
      "rouge_1_f_score_cb": 0.38095,
      "rouge_1_f_score_ce": 0.38095,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.375,
      "rouge_l_recall_cb": 0.375,
      "rouge_l_recall_ce": 0.375,
      "rouge_l_precision": 0.23077,
      "rouge_l_precision_cb": 0.23077,
      "rouge_l_precision_ce": 0.23077,
      "rouge_l_f_score": 0.28571,
      "rouge_l_f_score_cb": 0.28571,
      "rouge_l_f_score_ce": 0.28571,
      "rouge_w_1.2_recall": 0.20601,
      "rouge_w_1.2_recall_cb": 0.20601,
      "rouge_w_1.2_recall_ce": 0.20601,
      "rouge_w_1.2_precision": 0.19216,
      "rouge_w_1.2_precision_cb": 0.19216,
      "rouge_w_1.2_precision_ce": 0.19216,
      "rouge_w_1.2_f_score": 0.19884,
      "rouge_w_1.2_f_score_cb": 0.19884,
      "rouge_w_1.2_f_score_ce": 0.19884,
      "rouge_s*_recall": 0.17857,
      "rouge_s*_recall_cb": 0.17857,
      "rouge_s*_recall_ce": 0.17857,
      "rouge_s*_precision": 0.0641,
      "rouge_s*_precision_cb": 0.0641,
      "rouge_s*_precision_ce": 0.0641,
      "rouge_s*_f_score": 0.09434,
      "rouge_s*_f_score_cb": 0.09434,
      "rouge_s*_f_score_ce": 0.09434,
      "rouge_su*_recall": 0.22857,
      "rouge_su*_recall_cb": 0.22857,
      "rouge_su*_recall_ce": 0.22857,
      "rouge_su*_precision": 0.08889,
      "rouge_su*_precision_cb": 0.08889,
      "rouge_su*_precision_ce": 0.08889,
      "rouge_su*_f_score": 0.128,
      "rouge_su*_f_score_cb": 0.128,
      "rouge_su*_f_score_ce": 0.128
    }
  },
  {
    "id": 8,
    "filename": "NumpyEval_8.txt",
    "dataset_comment": "Remove all rows in a numpy.ndarray that contain non-numeric values and return the final result.",
    "generated_comment": "Remove all rows that contain any non-numeric values (NaN) by checking each row for NaN values and utilizing np.isnan(arr).any(axis=1) to identify such rows.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.52941,
      "rouge_1_recall_cb": 0.52941,
      "rouge_1_recall_ce": 0.52941,
      "rouge_1_precision": 0.31034,
      "rouge_1_precision_cb": 0.31034,
      "rouge_1_precision_ce": 0.31034,
      "rouge_1_f_score": 0.3913,
      "rouge_1_f_score_cb": 0.3913,
      "rouge_1_f_score_ce": 0.3913,
      "rouge_2_recall": 0.375,
      "rouge_2_recall_cb": 0.375,
      "rouge_2_recall_ce": 0.375,
      "rouge_2_precision": 0.21429,
      "rouge_2_precision_cb": 0.21429,
      "rouge_2_precision_ce": 0.21429,
      "rouge_2_f_score": 0.27273,
      "rouge_2_f_score_cb": 0.27273,
      "rouge_2_f_score_ce": 0.27273,
      "rouge_3_recall": 0.13333,
      "rouge_3_recall_cb": 0.13333,
      "rouge_3_recall_ce": 0.13333,
      "rouge_3_precision": 0.07407,
      "rouge_3_precision_cb": 0.07407,
      "rouge_3_precision_ce": 0.07407,
      "rouge_3_f_score": 0.09523,
      "rouge_3_f_score_cb": 0.09523,
      "rouge_3_f_score_ce": 0.09523,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.52941,
      "rouge_l_recall_cb": 0.52941,
      "rouge_l_recall_ce": 0.52941,
      "rouge_l_precision": 0.31034,
      "rouge_l_precision_cb": 0.31034,
      "rouge_l_precision_ce": 0.31034,
      "rouge_l_f_score": 0.3913,
      "rouge_l_f_score_cb": 0.3913,
      "rouge_l_f_score_ce": 0.3913,
      "rouge_w_1.2_recall": 0.27064,
      "rouge_w_1.2_recall_cb": 0.27064,
      "rouge_w_1.2_recall_ce": 0.27064,
      "rouge_w_1.2_precision": 0.2796,
      "rouge_w_1.2_precision_cb": 0.2796,
      "rouge_w_1.2_precision_ce": 0.2796,
      "rouge_w_1.2_f_score": 0.27505,
      "rouge_w_1.2_f_score_cb": 0.27505,
      "rouge_w_1.2_f_score_ce": 0.27505,
      "rouge_s*_recall": 0.26471,
      "rouge_s*_recall_cb": 0.26471,
      "rouge_s*_recall_ce": 0.26471,
      "rouge_s*_precision": 0.08867,
      "rouge_s*_precision_cb": 0.08867,
      "rouge_s*_precision_ce": 0.08867,
      "rouge_s*_f_score": 0.13284,
      "rouge_s*_f_score_cb": 0.13284,
      "rouge_s*_f_score_ce": 0.13284,
      "rouge_su*_recall": 0.29605,
      "rouge_su*_recall_cb": 0.29605,
      "rouge_su*_recall_ce": 0.29605,
      "rouge_su*_precision": 0.10369,
      "rouge_su*_precision_cb": 0.10369,
      "rouge_su*_precision_ce": 0.10369,
      "rouge_su*_f_score": 0.15359,
      "rouge_su*_f_score_cb": 0.15359,
      "rouge_su*_f_score_ce": 0.15359
    }
  },
  {
    "id": 9,
    "filename": "NumpyEval_9.txt",
    "dataset_comment": "Set the diagonal elements of the Pandas DataFrame to 0.",
    "generated_comment": "Fill the diagonal of the DataFrame with zeros using numpy's fill_diagonal function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.35714,
      "rouge_1_precision_cb": 0.35714,
      "rouge_1_precision_ce": 0.35714,
      "rouge_1_f_score": 0.41666,
      "rouge_1_f_score_cb": 0.41666,
      "rouge_1_f_score_ce": 0.41666,
      "rouge_2_recall": 0.22222,
      "rouge_2_recall_cb": 0.22222,
      "rouge_2_recall_ce": 0.22222,
      "rouge_2_precision": 0.15385,
      "rouge_2_precision_cb": 0.15385,
      "rouge_2_precision_ce": 0.15385,
      "rouge_2_f_score": 0.18182,
      "rouge_2_f_score_cb": 0.18182,
      "rouge_2_f_score_ce": 0.18182,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.5,
      "rouge_l_recall_cb": 0.5,
      "rouge_l_recall_ce": 0.5,
      "rouge_l_precision": 0.35714,
      "rouge_l_precision_cb": 0.35714,
      "rouge_l_precision_ce": 0.35714,
      "rouge_l_f_score": 0.41666,
      "rouge_l_f_score_cb": 0.41666,
      "rouge_l_f_score_ce": 0.41666,
      "rouge_w_1.2_recall": 0.26494,
      "rouge_w_1.2_recall_cb": 0.26494,
      "rouge_w_1.2_recall_ce": 0.26494,
      "rouge_w_1.2_precision": 0.29993,
      "rouge_w_1.2_precision_cb": 0.29993,
      "rouge_w_1.2_precision_ce": 0.29993,
      "rouge_w_1.2_f_score": 0.28135,
      "rouge_w_1.2_f_score_cb": 0.28135,
      "rouge_w_1.2_f_score_ce": 0.28135,
      "rouge_s*_recall": 0.22222,
      "rouge_s*_recall_cb": 0.22222,
      "rouge_s*_recall_ce": 0.22222,
      "rouge_s*_precision": 0.10989,
      "rouge_s*_precision_cb": 0.10989,
      "rouge_s*_precision_ce": 0.10989,
      "rouge_s*_f_score": 0.14706,
      "rouge_s*_f_score_cb": 0.14706,
      "rouge_s*_f_score_ce": 0.14706,
      "rouge_su*_recall": 0.27778,
      "rouge_su*_recall_cb": 0.27778,
      "rouge_su*_recall_ce": 0.27778,
      "rouge_su*_precision": 0.14423,
      "rouge_su*_precision_cb": 0.14423,
      "rouge_su*_precision_ce": 0.14423,
      "rouge_su*_f_score": 0.18987,
      "rouge_su*_f_score_cb": 0.18987,
      "rouge_su*_f_score_ce": 0.18987
    }
  },
  {
    "id": 10,
    "filename": "NumpyEval_10.txt",
    "dataset_comment": "Count the number of elements in a Numpy array that fulfill the condition 2 < x < 8.",
    "generated_comment": "Count the number of elements in the array 'a' that are greater than 2 and less than 8.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.78571,
      "rouge_1_recall_cb": 0.78571,
      "rouge_1_recall_ce": 0.78571,
      "rouge_1_precision": 0.61111,
      "rouge_1_precision_cb": 0.61111,
      "rouge_1_precision_ce": 0.61111,
      "rouge_1_f_score": 0.6875,
      "rouge_1_f_score_cb": 0.6875,
      "rouge_1_f_score_ce": 0.6875,
      "rouge_2_recall": 0.38462,
      "rouge_2_recall_cb": 0.38462,
      "rouge_2_recall_ce": 0.38462,
      "rouge_2_precision": 0.29412,
      "rouge_2_precision_cb": 0.29412,
      "rouge_2_precision_ce": 0.29412,
      "rouge_2_f_score": 0.33334,
      "rouge_2_f_score_cb": 0.33334,
      "rouge_2_f_score_ce": 0.33334,
      "rouge_3_recall": 0.33333,
      "rouge_3_recall_cb": 0.33333,
      "rouge_3_recall_ce": 0.33333,
      "rouge_3_precision": 0.25,
      "rouge_3_precision_cb": 0.25,
      "rouge_3_precision_ce": 0.25,
      "rouge_3_f_score": 0.28571,
      "rouge_3_f_score_cb": 0.28571,
      "rouge_3_f_score_ce": 0.28571,
      "rouge_4_recall": 0.27273,
      "rouge_4_recall_cb": 0.27273,
      "rouge_4_recall_ce": 0.27273,
      "rouge_4_precision": 0.2,
      "rouge_4_precision_cb": 0.2,
      "rouge_4_precision_ce": 0.2,
      "rouge_4_f_score": 0.23077,
      "rouge_4_f_score_cb": 0.23077,
      "rouge_4_f_score_ce": 0.23077,
      "rouge_l_recall": 0.64286,
      "rouge_l_recall_cb": 0.64286,
      "rouge_l_recall_ce": 0.64286,
      "rouge_l_precision": 0.5,
      "rouge_l_precision_cb": 0.5,
      "rouge_l_precision_ce": 0.5,
      "rouge_l_f_score": 0.5625,
      "rouge_l_f_score_cb": 0.5625,
      "rouge_l_f_score_ce": 0.5625,
      "rouge_w_1.2_recall": 0.34182,
      "rouge_w_1.2_recall_cb": 0.34182,
      "rouge_w_1.2_recall_ce": 0.34182,
      "rouge_w_1.2_precision": 0.45069,
      "rouge_w_1.2_precision_cb": 0.45069,
      "rouge_w_1.2_precision_ce": 0.45069,
      "rouge_w_1.2_f_score": 0.38878,
      "rouge_w_1.2_f_score_cb": 0.38878,
      "rouge_w_1.2_f_score_ce": 0.38878,
      "rouge_s*_recall": 0.56044,
      "rouge_s*_recall_cb": 0.56044,
      "rouge_s*_recall_ce": 0.56044,
      "rouge_s*_precision": 0.33333,
      "rouge_s*_precision_cb": 0.33333,
      "rouge_s*_precision_ce": 0.33333,
      "rouge_s*_f_score": 0.41803,
      "rouge_s*_f_score_cb": 0.41803,
      "rouge_s*_f_score_ce": 0.41803,
      "rouge_su*_recall": 0.58654,
      "rouge_su*_recall_cb": 0.58654,
      "rouge_su*_recall_ce": 0.58654,
      "rouge_su*_precision": 0.35882,
      "rouge_su*_precision_cb": 0.35882,
      "rouge_su*_precision_ce": 0.35882,
      "rouge_su*_f_score": 0.44525,
      "rouge_su*_f_score_cb": 0.44525,
      "rouge_su*_f_score_ce": 0.44525
    }
  },
  {
    "id": 11,
    "filename": "NumpyEval_11.txt",
    "dataset_comment": "Flatten a list of NumPy arrays by using numpy.concatenate to concatenate all elements of the input list into a single NumPy array, and then apply numpy.ravel to flatten the array.",
    "generated_comment": "Concatenate a list of numpy arrays into a single array and then flatten it to a 1D array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.46875,
      "rouge_1_recall_cb": 0.46875,
      "rouge_1_recall_ce": 0.46875,
      "rouge_1_precision": 0.83333,
      "rouge_1_precision_cb": 0.83333,
      "rouge_1_precision_ce": 0.83333,
      "rouge_1_f_score": 0.6,
      "rouge_1_f_score_cb": 0.6,
      "rouge_1_f_score_ce": 0.6,
      "rouge_2_recall": 0.25806,
      "rouge_2_recall_cb": 0.25806,
      "rouge_2_recall_ce": 0.25806,
      "rouge_2_precision": 0.47059,
      "rouge_2_precision_cb": 0.47059,
      "rouge_2_precision_ce": 0.47059,
      "rouge_2_f_score": 0.33333,
      "rouge_2_f_score_cb": 0.33333,
      "rouge_2_f_score_ce": 0.33333,
      "rouge_3_recall": 0.16667,
      "rouge_3_recall_cb": 0.16667,
      "rouge_3_recall_ce": 0.16667,
      "rouge_3_precision": 0.3125,
      "rouge_3_precision_cb": 0.3125,
      "rouge_3_precision_ce": 0.3125,
      "rouge_3_f_score": 0.21739,
      "rouge_3_f_score_cb": 0.21739,
      "rouge_3_f_score_ce": 0.21739,
      "rouge_4_recall": 0.06897,
      "rouge_4_recall_cb": 0.06897,
      "rouge_4_recall_ce": 0.06897,
      "rouge_4_precision": 0.13333,
      "rouge_4_precision_cb": 0.13333,
      "rouge_4_precision_ce": 0.13333,
      "rouge_4_f_score": 0.09091,
      "rouge_4_f_score_cb": 0.09091,
      "rouge_4_f_score_ce": 0.09091,
      "rouge_l_recall": 0.40625,
      "rouge_l_recall_cb": 0.40625,
      "rouge_l_recall_ce": 0.40625,
      "rouge_l_precision": 0.72222,
      "rouge_l_precision_cb": 0.72222,
      "rouge_l_precision_ce": 0.72222,
      "rouge_l_f_score": 0.52,
      "rouge_l_f_score_cb": 0.52,
      "rouge_l_f_score_ce": 0.52,
      "rouge_w_1.2_recall": 0.16054,
      "rouge_w_1.2_recall_cb": 0.16054,
      "rouge_w_1.2_recall_ce": 0.16054,
      "rouge_w_1.2_precision": 0.57082,
      "rouge_w_1.2_precision_cb": 0.57082,
      "rouge_w_1.2_precision_ce": 0.57082,
      "rouge_w_1.2_f_score": 0.2506,
      "rouge_w_1.2_f_score_cb": 0.2506,
      "rouge_w_1.2_f_score_ce": 0.2506,
      "rouge_s*_recall": 0.22177,
      "rouge_s*_recall_cb": 0.22177,
      "rouge_s*_recall_ce": 0.22177,
      "rouge_s*_precision": 0.71895,
      "rouge_s*_precision_cb": 0.71895,
      "rouge_s*_precision_ce": 0.71895,
      "rouge_s*_f_score": 0.33898,
      "rouge_s*_f_score_cb": 0.33898,
      "rouge_s*_f_score_ce": 0.33898,
      "rouge_su*_recall": 0.23529,
      "rouge_su*_recall_cb": 0.23529,
      "rouge_su*_recall_ce": 0.23529,
      "rouge_su*_precision": 0.72941,
      "rouge_su*_precision_cb": 0.72941,
      "rouge_su*_precision_ce": 0.72941,
      "rouge_su*_f_score": 0.35581,
      "rouge_su*_f_score_cb": 0.35581,
      "rouge_su*_f_score_ce": 0.35581
    }
  },
  {
    "id": 12,
    "filename": "NumpyEval_12.txt",
    "dataset_comment": "Get the shape of a NumPy array.",
    "generated_comment": "Create a 2x5 array filled with zeros.Retrieve the shape of the array 'a' and store it in the variable 'a_shape'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.71429,
      "rouge_1_recall_cb": 0.71429,
      "rouge_1_recall_ce": 0.71429,
      "rouge_1_precision": 0.22727,
      "rouge_1_precision_cb": 0.22727,
      "rouge_1_precision_ce": 0.22727,
      "rouge_1_f_score": 0.34482,
      "rouge_1_f_score_cb": 0.34482,
      "rouge_1_f_score_ce": 0.34482,
      "rouge_2_recall": 0.33333,
      "rouge_2_recall_cb": 0.33333,
      "rouge_2_recall_ce": 0.33333,
      "rouge_2_precision": 0.09524,
      "rouge_2_precision_cb": 0.09524,
      "rouge_2_precision_ce": 0.09524,
      "rouge_2_f_score": 0.14815,
      "rouge_2_f_score_cb": 0.14815,
      "rouge_2_f_score_ce": 0.14815,
      "rouge_3_recall": 0.2,
      "rouge_3_recall_cb": 0.2,
      "rouge_3_recall_ce": 0.2,
      "rouge_3_precision": 0.05,
      "rouge_3_precision_cb": 0.05,
      "rouge_3_precision_ce": 0.05,
      "rouge_3_f_score": 0.08,
      "rouge_3_f_score_cb": 0.08,
      "rouge_3_f_score_ce": 0.08,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.57143,
      "rouge_l_recall_cb": 0.57143,
      "rouge_l_recall_ce": 0.57143,
      "rouge_l_precision": 0.18182,
      "rouge_l_precision_cb": 0.18182,
      "rouge_l_precision_ce": 0.18182,
      "rouge_l_f_score": 0.27586,
      "rouge_l_f_score_cb": 0.27586,
      "rouge_l_f_score_ce": 0.27586,
      "rouge_w_1.2_recall": 0.38721,
      "rouge_w_1.2_recall_cb": 0.38721,
      "rouge_w_1.2_recall_ce": 0.38721,
      "rouge_w_1.2_precision": 0.18182,
      "rouge_w_1.2_precision_cb": 0.18182,
      "rouge_w_1.2_precision_ce": 0.18182,
      "rouge_w_1.2_f_score": 0.24745,
      "rouge_w_1.2_f_score_cb": 0.24745,
      "rouge_w_1.2_f_score_ce": 0.24745,
      "rouge_s*_recall": 0.47619,
      "rouge_s*_recall_cb": 0.47619,
      "rouge_s*_recall_ce": 0.47619,
      "rouge_s*_precision": 0.04329,
      "rouge_s*_precision_cb": 0.04329,
      "rouge_s*_precision_ce": 0.04329,
      "rouge_s*_f_score": 0.07936,
      "rouge_s*_f_score_cb": 0.07936,
      "rouge_s*_f_score_ce": 0.07936,
      "rouge_su*_recall": 0.51852,
      "rouge_su*_recall_cb": 0.51852,
      "rouge_su*_recall_ce": 0.51852,
      "rouge_su*_precision": 0.05556,
      "rouge_su*_precision_cb": 0.05556,
      "rouge_su*_precision_ce": 0.05556,
      "rouge_su*_f_score": 0.10037,
      "rouge_su*_f_score_cb": 0.10037,
      "rouge_su*_f_score_ce": 0.10037
    }
  },
  {
    "id": 13,
    "filename": "NumpyEval_13.txt",
    "dataset_comment": "Inverse a matrix using numpy and return it. Input:   matrix: numpy array, shape (n, n) Output:   inverse: numpy array, shape (n, n)",
    "generated_comment": "Compute the inverse of a given matrix using numpy's linear algebra function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.22727,
      "rouge_1_recall_cb": 0.22727,
      "rouge_1_recall_ce": 0.22727,
      "rouge_1_precision": 0.38462,
      "rouge_1_precision_cb": 0.38462,
      "rouge_1_precision_ce": 0.38462,
      "rouge_1_f_score": 0.28571,
      "rouge_1_f_score_cb": 0.28571,
      "rouge_1_f_score_ce": 0.28571,
      "rouge_2_recall": 0.09524,
      "rouge_2_recall_cb": 0.09524,
      "rouge_2_recall_ce": 0.09524,
      "rouge_2_precision": 0.16667,
      "rouge_2_precision_cb": 0.16667,
      "rouge_2_precision_ce": 0.16667,
      "rouge_2_f_score": 0.12121,
      "rouge_2_f_score_cb": 0.12121,
      "rouge_2_f_score_ce": 0.12121,
      "rouge_3_recall": 0.05,
      "rouge_3_recall_cb": 0.05,
      "rouge_3_recall_ce": 0.05,
      "rouge_3_precision": 0.09091,
      "rouge_3_precision_cb": 0.09091,
      "rouge_3_precision_ce": 0.09091,
      "rouge_3_f_score": 0.06452,
      "rouge_3_f_score_cb": 0.06452,
      "rouge_3_f_score_ce": 0.06452,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.22727,
      "rouge_l_recall_cb": 0.22727,
      "rouge_l_recall_ce": 0.22727,
      "rouge_l_precision": 0.38462,
      "rouge_l_precision_cb": 0.38462,
      "rouge_l_precision_ce": 0.38462,
      "rouge_l_f_score": 0.28571,
      "rouge_l_f_score_cb": 0.28571,
      "rouge_l_f_score_ce": 0.28571,
      "rouge_w_1.2_recall": 0.12248,
      "rouge_w_1.2_recall_cb": 0.12248,
      "rouge_w_1.2_recall_ce": 0.12248,
      "rouge_w_1.2_precision": 0.38462,
      "rouge_w_1.2_precision_cb": 0.38462,
      "rouge_w_1.2_precision_ce": 0.38462,
      "rouge_w_1.2_f_score": 0.18579,
      "rouge_w_1.2_f_score_cb": 0.18579,
      "rouge_w_1.2_f_score_ce": 0.18579,
      "rouge_s*_recall": 0.04329,
      "rouge_s*_recall_cb": 0.04329,
      "rouge_s*_recall_ce": 0.04329,
      "rouge_s*_precision": 0.12821,
      "rouge_s*_precision_cb": 0.12821,
      "rouge_s*_precision_ce": 0.12821,
      "rouge_s*_f_score": 0.06473,
      "rouge_s*_f_score_cb": 0.06473,
      "rouge_s*_f_score_ce": 0.06473,
      "rouge_su*_recall": 0.05952,
      "rouge_su*_recall_cb": 0.05952,
      "rouge_su*_recall_ce": 0.05952,
      "rouge_su*_precision": 0.16667,
      "rouge_su*_precision_cb": 0.16667,
      "rouge_su*_precision_ce": 0.16667,
      "rouge_su*_f_score": 0.08772,
      "rouge_su*_f_score_cb": 0.08772,
      "rouge_su*_f_score_ce": 0.08772
    }
  },
  {
    "id": 14,
    "filename": "NumpyEval_14.txt",
    "dataset_comment": "Check whether a numpy array is empty and return the result as True or False.",
    "generated_comment": "Check if the given numpy array is empty by comparing its size to 0.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.42857,
      "rouge_1_precision_cb": 0.42857,
      "rouge_1_precision_ce": 0.42857,
      "rouge_1_f_score": 0.41379,
      "rouge_1_f_score_cb": 0.41379,
      "rouge_1_f_score_ce": 0.41379,
      "rouge_2_recall": 0.21429,
      "rouge_2_recall_cb": 0.21429,
      "rouge_2_recall_ce": 0.21429,
      "rouge_2_precision": 0.23077,
      "rouge_2_precision_cb": 0.23077,
      "rouge_2_precision_ce": 0.23077,
      "rouge_2_f_score": 0.22222,
      "rouge_2_f_score_cb": 0.22222,
      "rouge_2_f_score_ce": 0.22222,
      "rouge_3_recall": 0.15385,
      "rouge_3_recall_cb": 0.15385,
      "rouge_3_recall_ce": 0.15385,
      "rouge_3_precision": 0.16667,
      "rouge_3_precision_cb": 0.16667,
      "rouge_3_precision_ce": 0.16667,
      "rouge_3_f_score": 0.16,
      "rouge_3_f_score_cb": 0.16,
      "rouge_3_f_score_ce": 0.16,
      "rouge_4_recall": 0.08333,
      "rouge_4_recall_cb": 0.08333,
      "rouge_4_recall_ce": 0.08333,
      "rouge_4_precision": 0.09091,
      "rouge_4_precision_cb": 0.09091,
      "rouge_4_precision_ce": 0.09091,
      "rouge_4_f_score": 0.08696,
      "rouge_4_f_score_cb": 0.08696,
      "rouge_4_f_score_ce": 0.08696,
      "rouge_l_recall": 0.33333,
      "rouge_l_recall_cb": 0.33333,
      "rouge_l_recall_ce": 0.33333,
      "rouge_l_precision": 0.35714,
      "rouge_l_precision_cb": 0.35714,
      "rouge_l_precision_ce": 0.35714,
      "rouge_l_f_score": 0.34482,
      "rouge_l_f_score_cb": 0.34482,
      "rouge_l_f_score_ce": 0.34482,
      "rouge_w_1.2_recall": 0.17928,
      "rouge_w_1.2_recall_cb": 0.17928,
      "rouge_w_1.2_recall_ce": 0.17928,
      "rouge_w_1.2_precision": 0.33016,
      "rouge_w_1.2_precision_cb": 0.33016,
      "rouge_w_1.2_precision_ce": 0.33016,
      "rouge_w_1.2_f_score": 0.23238,
      "rouge_w_1.2_f_score_cb": 0.23238,
      "rouge_w_1.2_f_score_ce": 0.23238,
      "rouge_s*_recall": 0.10476,
      "rouge_s*_recall_cb": 0.10476,
      "rouge_s*_recall_ce": 0.10476,
      "rouge_s*_precision": 0.12088,
      "rouge_s*_precision_cb": 0.12088,
      "rouge_s*_precision_ce": 0.12088,
      "rouge_s*_f_score": 0.11224,
      "rouge_s*_f_score_cb": 0.11224,
      "rouge_s*_f_score_ce": 0.11224,
      "rouge_su*_recall": 0.14286,
      "rouge_su*_recall_cb": 0.14286,
      "rouge_su*_recall_ce": 0.14286,
      "rouge_su*_precision": 0.16346,
      "rouge_su*_precision_cb": 0.16346,
      "rouge_su*_precision_ce": 0.16346,
      "rouge_su*_f_score": 0.15247,
      "rouge_su*_f_score_cb": 0.15247,
      "rouge_su*_f_score_ce": 0.15247
    }
  },
  {
    "id": 15,
    "filename": "NumpyEval_15.txt",
    "dataset_comment": "Assign the array x to the 2nd column of the array a.",
    "generated_comment": "Replace the second column of array 'a' with the values from array 'x'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.66667,
      "rouge_1_recall_cb": 0.66667,
      "rouge_1_recall_ce": 0.66667,
      "rouge_1_precision": 0.61538,
      "rouge_1_precision_cb": 0.61538,
      "rouge_1_precision_ce": 0.61538,
      "rouge_1_f_score": 0.64,
      "rouge_1_f_score_cb": 0.64,
      "rouge_1_f_score_ce": 0.64,
      "rouge_2_recall": 0.27273,
      "rouge_2_recall_cb": 0.27273,
      "rouge_2_recall_ce": 0.27273,
      "rouge_2_precision": 0.25,
      "rouge_2_precision_cb": 0.25,
      "rouge_2_precision_ce": 0.25,
      "rouge_2_f_score": 0.26087,
      "rouge_2_f_score_cb": 0.26087,
      "rouge_2_f_score_ce": 0.26087,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.41667,
      "rouge_l_recall_cb": 0.41667,
      "rouge_l_recall_ce": 0.41667,
      "rouge_l_precision": 0.38462,
      "rouge_l_precision_cb": 0.38462,
      "rouge_l_precision_ce": 0.38462,
      "rouge_l_f_score": 0.4,
      "rouge_l_f_score_cb": 0.4,
      "rouge_l_f_score_ce": 0.4,
      "rouge_w_1.2_recall": 0.21288,
      "rouge_w_1.2_recall_cb": 0.21288,
      "rouge_w_1.2_recall_ce": 0.21288,
      "rouge_w_1.2_precision": 0.32301,
      "rouge_w_1.2_precision_cb": 0.32301,
      "rouge_w_1.2_precision_ce": 0.32301,
      "rouge_w_1.2_f_score": 0.25663,
      "rouge_w_1.2_f_score_cb": 0.25663,
      "rouge_w_1.2_f_score_ce": 0.25663,
      "rouge_s*_recall": 0.28788,
      "rouge_s*_recall_cb": 0.28788,
      "rouge_s*_recall_ce": 0.28788,
      "rouge_s*_precision": 0.24359,
      "rouge_s*_precision_cb": 0.24359,
      "rouge_s*_precision_ce": 0.24359,
      "rouge_s*_f_score": 0.26389,
      "rouge_s*_f_score_cb": 0.26389,
      "rouge_s*_f_score_ce": 0.26389,
      "rouge_su*_recall": 0.32468,
      "rouge_su*_recall_cb": 0.32468,
      "rouge_su*_recall_ce": 0.32468,
      "rouge_su*_precision": 0.27778,
      "rouge_su*_precision_cb": 0.27778,
      "rouge_su*_precision_ce": 0.27778,
      "rouge_su*_f_score": 0.2994,
      "rouge_su*_f_score_cb": 0.2994,
      "rouge_su*_f_score_ce": 0.2994
    }
  },
  {
    "id": 16,
    "filename": "NumpyEval_16.txt",
    "dataset_comment": "Find indices of a list of values in a NumPy array.",
    "generated_comment": "Find the indices where each element of `search` would be inserted into `master` to maintain order, using `np.searchsorted`.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.27273,
      "rouge_1_recall_cb": 0.27273,
      "rouge_1_recall_ce": 0.27273,
      "rouge_1_precision": 0.15789,
      "rouge_1_precision_cb": 0.15789,
      "rouge_1_precision_ce": 0.15789,
      "rouge_1_f_score": 0.2,
      "rouge_1_f_score_cb": 0.2,
      "rouge_1_f_score_ce": 0.2,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.27273,
      "rouge_l_recall_cb": 0.27273,
      "rouge_l_recall_ce": 0.27273,
      "rouge_l_precision": 0.15789,
      "rouge_l_precision_cb": 0.15789,
      "rouge_l_precision_ce": 0.15789,
      "rouge_l_f_score": 0.2,
      "rouge_l_f_score_cb": 0.2,
      "rouge_l_f_score_ce": 0.2,
      "rouge_w_1.2_recall": 0.16883,
      "rouge_w_1.2_recall_cb": 0.16883,
      "rouge_w_1.2_recall_ce": 0.16883,
      "rouge_w_1.2_precision": 0.15789,
      "rouge_w_1.2_precision_cb": 0.15789,
      "rouge_w_1.2_precision_ce": 0.15789,
      "rouge_w_1.2_f_score": 0.16318,
      "rouge_w_1.2_f_score_cb": 0.16318,
      "rouge_w_1.2_f_score_ce": 0.16318,
      "rouge_s*_recall": 0.05455,
      "rouge_s*_recall_cb": 0.05455,
      "rouge_s*_recall_ce": 0.05455,
      "rouge_s*_precision": 0.01754,
      "rouge_s*_precision_cb": 0.01754,
      "rouge_s*_precision_ce": 0.01754,
      "rouge_s*_f_score": 0.02654,
      "rouge_s*_f_score_cb": 0.02654,
      "rouge_s*_f_score_ce": 0.02654,
      "rouge_su*_recall": 0.09231,
      "rouge_su*_recall_cb": 0.09231,
      "rouge_su*_recall_ce": 0.09231,
      "rouge_su*_precision": 0.03175,
      "rouge_su*_precision_cb": 0.03175,
      "rouge_su*_precision_ce": 0.03175,
      "rouge_su*_f_score": 0.04725,
      "rouge_su*_f_score_cb": 0.04725,
      "rouge_su*_f_score_ce": 0.04725
    }
  },
  {
    "id": 17,
    "filename": "NumpyEval_17.txt",
    "dataset_comment": "Flatten the array into a single array of N elements, where N is the total number of float elements in all the sub-arrays.",
    "generated_comment": "Flatten the list of numpy arrays into a single numpy array by horizontally stacking them.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.53333,
      "rouge_1_precision_cb": 0.53333,
      "rouge_1_precision_ce": 0.53333,
      "rouge_1_f_score": 0.41025,
      "rouge_1_f_score_cb": 0.41025,
      "rouge_1_f_score_ce": 0.41025,
      "rouge_2_recall": 0.17391,
      "rouge_2_recall_cb": 0.17391,
      "rouge_2_recall_ce": 0.17391,
      "rouge_2_precision": 0.28571,
      "rouge_2_precision_cb": 0.28571,
      "rouge_2_precision_ce": 0.28571,
      "rouge_2_f_score": 0.21621,
      "rouge_2_f_score_cb": 0.21621,
      "rouge_2_f_score_ce": 0.21621,
      "rouge_3_recall": 0.09091,
      "rouge_3_recall_cb": 0.09091,
      "rouge_3_recall_ce": 0.09091,
      "rouge_3_precision": 0.15385,
      "rouge_3_precision_cb": 0.15385,
      "rouge_3_precision_ce": 0.15385,
      "rouge_3_f_score": 0.11429,
      "rouge_3_f_score_cb": 0.11429,
      "rouge_3_f_score_ce": 0.11429,
      "rouge_4_recall": 0.04762,
      "rouge_4_recall_cb": 0.04762,
      "rouge_4_recall_ce": 0.04762,
      "rouge_4_precision": 0.08333,
      "rouge_4_precision_cb": 0.08333,
      "rouge_4_precision_ce": 0.08333,
      "rouge_4_f_score": 0.06061,
      "rouge_4_f_score_cb": 0.06061,
      "rouge_4_f_score_ce": 0.06061,
      "rouge_l_recall": 0.29167,
      "rouge_l_recall_cb": 0.29167,
      "rouge_l_recall_ce": 0.29167,
      "rouge_l_precision": 0.46667,
      "rouge_l_precision_cb": 0.46667,
      "rouge_l_precision_ce": 0.46667,
      "rouge_l_f_score": 0.35898,
      "rouge_l_f_score_cb": 0.35898,
      "rouge_l_f_score_ce": 0.35898,
      "rouge_w_1.2_recall": 0.15447,
      "rouge_w_1.2_recall_cb": 0.15447,
      "rouge_w_1.2_recall_ce": 0.15447,
      "rouge_w_1.2_precision": 0.46667,
      "rouge_w_1.2_precision_cb": 0.46667,
      "rouge_w_1.2_precision_ce": 0.46667,
      "rouge_w_1.2_f_score": 0.23211,
      "rouge_w_1.2_f_score_cb": 0.23211,
      "rouge_w_1.2_f_score_ce": 0.23211,
      "rouge_s*_recall": 0.09058,
      "rouge_s*_recall_cb": 0.09058,
      "rouge_s*_recall_ce": 0.09058,
      "rouge_s*_precision": 0.2381,
      "rouge_s*_precision_cb": 0.2381,
      "rouge_s*_precision_ce": 0.2381,
      "rouge_s*_f_score": 0.13123,
      "rouge_s*_f_score_cb": 0.13123,
      "rouge_s*_f_score_ce": 0.13123,
      "rouge_su*_recall": 0.11037,
      "rouge_su*_recall_cb": 0.11037,
      "rouge_su*_recall_ce": 0.11037,
      "rouge_su*_precision": 0.27731,
      "rouge_su*_precision_cb": 0.27731,
      "rouge_su*_precision_ce": 0.27731,
      "rouge_su*_f_score": 0.1579,
      "rouge_su*_f_score_cb": 0.1579,
      "rouge_su*_f_score_ce": 0.1579
    }
  },
  {
    "id": 18,
    "filename": "NumpyEval_18.txt",
    "dataset_comment": "Find and return the minimum value in the 2D array by implementing the following code.",
    "generated_comment": "Find the minimum value in the array using numpy's np.min function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.46667,
      "rouge_1_recall_cb": 0.46667,
      "rouge_1_recall_ce": 0.46667,
      "rouge_1_precision": 0.53846,
      "rouge_1_precision_cb": 0.53846,
      "rouge_1_precision_ce": 0.53846,
      "rouge_1_f_score": 0.5,
      "rouge_1_f_score_cb": 0.5,
      "rouge_1_f_score_ce": 0.5,
      "rouge_2_recall": 0.28571,
      "rouge_2_recall_cb": 0.28571,
      "rouge_2_recall_ce": 0.28571,
      "rouge_2_precision": 0.33333,
      "rouge_2_precision_cb": 0.33333,
      "rouge_2_precision_ce": 0.33333,
      "rouge_2_f_score": 0.30769,
      "rouge_2_f_score_cb": 0.30769,
      "rouge_2_f_score_ce": 0.30769,
      "rouge_3_recall": 0.23077,
      "rouge_3_recall_cb": 0.23077,
      "rouge_3_recall_ce": 0.23077,
      "rouge_3_precision": 0.27273,
      "rouge_3_precision_cb": 0.27273,
      "rouge_3_precision_ce": 0.27273,
      "rouge_3_f_score": 0.25,
      "rouge_3_f_score_cb": 0.25,
      "rouge_3_f_score_ce": 0.25,
      "rouge_4_recall": 0.16667,
      "rouge_4_recall_cb": 0.16667,
      "rouge_4_recall_ce": 0.16667,
      "rouge_4_precision": 0.2,
      "rouge_4_precision_cb": 0.2,
      "rouge_4_precision_ce": 0.2,
      "rouge_4_f_score": 0.18182,
      "rouge_4_f_score_cb": 0.18182,
      "rouge_4_f_score_ce": 0.18182,
      "rouge_l_recall": 0.46667,
      "rouge_l_recall_cb": 0.46667,
      "rouge_l_recall_ce": 0.46667,
      "rouge_l_precision": 0.53846,
      "rouge_l_precision_cb": 0.53846,
      "rouge_l_precision_ce": 0.53846,
      "rouge_l_f_score": 0.5,
      "rouge_l_f_score_cb": 0.5,
      "rouge_l_f_score_ce": 0.5,
      "rouge_w_1.2_recall": 0.23977,
      "rouge_w_1.2_recall_cb": 0.23977,
      "rouge_w_1.2_recall_ce": 0.23977,
      "rouge_w_1.2_precision": 0.47551,
      "rouge_w_1.2_precision_cb": 0.47551,
      "rouge_w_1.2_precision_ce": 0.47551,
      "rouge_w_1.2_f_score": 0.31879,
      "rouge_w_1.2_f_score_cb": 0.31879,
      "rouge_w_1.2_f_score_ce": 0.31879,
      "rouge_s*_recall": 0.2,
      "rouge_s*_recall_cb": 0.2,
      "rouge_s*_recall_ce": 0.2,
      "rouge_s*_precision": 0.26923,
      "rouge_s*_precision_cb": 0.26923,
      "rouge_s*_precision_ce": 0.26923,
      "rouge_s*_f_score": 0.22951,
      "rouge_s*_f_score_cb": 0.22951,
      "rouge_s*_f_score_ce": 0.22951,
      "rouge_su*_recall": 0.23529,
      "rouge_su*_recall_cb": 0.23529,
      "rouge_su*_recall_ce": 0.23529,
      "rouge_su*_precision": 0.31111,
      "rouge_su*_precision_cb": 0.31111,
      "rouge_su*_precision_ce": 0.31111,
      "rouge_su*_f_score": 0.26794,
      "rouge_su*_f_score_cb": 0.26794,
      "rouge_su*_f_score_ce": 0.26794
    }
  },
  {
    "id": 19,
    "filename": "NumpyEval_19.txt",
    "dataset_comment": "Create an array of shape (5, 5) where every entry is the same value, specifically -1.",
    "generated_comment": "Create a 5x5 array filled with -1.0",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.1875,
      "rouge_1_recall_cb": 0.1875,
      "rouge_1_recall_ce": 0.1875,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.25,
      "rouge_1_f_score_cb": 0.25,
      "rouge_1_f_score_ce": 0.25,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.1875,
      "rouge_l_recall_cb": 0.1875,
      "rouge_l_recall_ce": 0.1875,
      "rouge_l_precision": 0.375,
      "rouge_l_precision_cb": 0.375,
      "rouge_l_precision_ce": 0.375,
      "rouge_l_f_score": 0.25,
      "rouge_l_f_score_cb": 0.25,
      "rouge_l_f_score_ce": 0.25,
      "rouge_w_1.2_recall": 0.08967,
      "rouge_w_1.2_recall_cb": 0.08967,
      "rouge_w_1.2_recall_ce": 0.08967,
      "rouge_w_1.2_precision": 0.31226,
      "rouge_w_1.2_precision_cb": 0.31226,
      "rouge_w_1.2_precision_ce": 0.31226,
      "rouge_w_1.2_f_score": 0.13933,
      "rouge_w_1.2_f_score_cb": 0.13933,
      "rouge_w_1.2_f_score_ce": 0.13933,
      "rouge_s*_recall": 0.025,
      "rouge_s*_recall_cb": 0.025,
      "rouge_s*_recall_ce": 0.025,
      "rouge_s*_precision": 0.10714,
      "rouge_s*_precision_cb": 0.10714,
      "rouge_s*_precision_ce": 0.10714,
      "rouge_s*_f_score": 0.04054,
      "rouge_s*_f_score_cb": 0.04054,
      "rouge_s*_f_score_ce": 0.04054,
      "rouge_su*_recall": 0.03704,
      "rouge_su*_recall_cb": 0.03704,
      "rouge_su*_recall_ce": 0.03704,
      "rouge_su*_precision": 0.14286,
      "rouge_su*_precision_cb": 0.14286,
      "rouge_su*_precision_ce": 0.14286,
      "rouge_su*_f_score": 0.05883,
      "rouge_su*_f_score_cb": 0.05883,
      "rouge_su*_f_score_ce": 0.05883
    }
  },
  {
    "id": 20,
    "filename": "NumpyEval_20.txt",
    "dataset_comment": "Convert a numpy.ndarray to a string and then convert it back to a numpy.ndarray with dtype=int.",
    "generated_comment": "Convert the numpy array to a byte string and then convert it back to a numpy array of integers.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.68421,
      "rouge_1_recall_cb": 0.68421,
      "rouge_1_recall_ce": 0.68421,
      "rouge_1_precision": 0.68421,
      "rouge_1_precision_cb": 0.68421,
      "rouge_1_precision_ce": 0.68421,
      "rouge_1_f_score": 0.68421,
      "rouge_1_f_score_cb": 0.68421,
      "rouge_1_f_score_ce": 0.68421,
      "rouge_2_recall": 0.5,
      "rouge_2_recall_cb": 0.5,
      "rouge_2_recall_ce": 0.5,
      "rouge_2_precision": 0.5,
      "rouge_2_precision_cb": 0.5,
      "rouge_2_precision_ce": 0.5,
      "rouge_2_f_score": 0.5,
      "rouge_2_f_score_cb": 0.5,
      "rouge_2_f_score_ce": 0.5,
      "rouge_3_recall": 0.41176,
      "rouge_3_recall_cb": 0.41176,
      "rouge_3_recall_ce": 0.41176,
      "rouge_3_precision": 0.41176,
      "rouge_3_precision_cb": 0.41176,
      "rouge_3_precision_ce": 0.41176,
      "rouge_3_f_score": 0.41176,
      "rouge_3_f_score_cb": 0.41176,
      "rouge_3_f_score_ce": 0.41176,
      "rouge_4_recall": 0.375,
      "rouge_4_recall_cb": 0.375,
      "rouge_4_recall_ce": 0.375,
      "rouge_4_precision": 0.375,
      "rouge_4_precision_cb": 0.375,
      "rouge_4_precision_ce": 0.375,
      "rouge_4_f_score": 0.375,
      "rouge_4_f_score_cb": 0.375,
      "rouge_4_f_score_ce": 0.375,
      "rouge_l_recall": 0.68421,
      "rouge_l_recall_cb": 0.68421,
      "rouge_l_recall_ce": 0.68421,
      "rouge_l_precision": 0.68421,
      "rouge_l_precision_cb": 0.68421,
      "rouge_l_precision_ce": 0.68421,
      "rouge_l_f_score": 0.68421,
      "rouge_l_f_score_cb": 0.68421,
      "rouge_l_f_score_ce": 0.68421,
      "rouge_w_1.2_recall": 0.35115,
      "rouge_w_1.2_recall_cb": 0.35115,
      "rouge_w_1.2_recall_ce": 0.35115,
      "rouge_w_1.2_precision": 0.63276,
      "rouge_w_1.2_precision_cb": 0.63276,
      "rouge_w_1.2_precision_ce": 0.63276,
      "rouge_w_1.2_f_score": 0.45165,
      "rouge_w_1.2_f_score_cb": 0.45165,
      "rouge_w_1.2_f_score_ce": 0.45165,
      "rouge_s*_recall": 0.45614,
      "rouge_s*_recall_cb": 0.45614,
      "rouge_s*_recall_ce": 0.45614,
      "rouge_s*_precision": 0.45614,
      "rouge_s*_precision_cb": 0.45614,
      "rouge_s*_precision_ce": 0.45614,
      "rouge_s*_f_score": 0.45614,
      "rouge_s*_f_score_cb": 0.45614,
      "rouge_s*_f_score_ce": 0.45614,
      "rouge_su*_recall": 0.48148,
      "rouge_su*_recall_cb": 0.48148,
      "rouge_su*_recall_ce": 0.48148,
      "rouge_su*_precision": 0.48148,
      "rouge_su*_precision_cb": 0.48148,
      "rouge_su*_precision_ce": 0.48148,
      "rouge_su*_f_score": 0.48148,
      "rouge_su*_f_score_cb": 0.48148,
      "rouge_su*_f_score_ce": 0.48148
    }
  },
  {
    "id": 21,
    "filename": "NumpyEval_21.txt",
    "dataset_comment": "Print a Numpy array without brackets by converting it into a string format, for example, converting a = np.array([1,2,3,4,5]) into a_string = \"1 2 3 4 5\".",
    "generated_comment": "Generate a string representation of the array by joining each element with a space.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.15625,
      "rouge_1_recall_cb": 0.15625,
      "rouge_1_recall_ce": 0.15625,
      "rouge_1_precision": 0.35714,
      "rouge_1_precision_cb": 0.35714,
      "rouge_1_precision_ce": 0.35714,
      "rouge_1_f_score": 0.21739,
      "rouge_1_f_score_cb": 0.21739,
      "rouge_1_f_score_ce": 0.21739,
      "rouge_2_recall": 0.03226,
      "rouge_2_recall_cb": 0.03226,
      "rouge_2_recall_ce": 0.03226,
      "rouge_2_precision": 0.07692,
      "rouge_2_precision_cb": 0.07692,
      "rouge_2_precision_ce": 0.07692,
      "rouge_2_f_score": 0.04546,
      "rouge_2_f_score_cb": 0.04546,
      "rouge_2_f_score_ce": 0.04546,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.125,
      "rouge_l_recall_cb": 0.125,
      "rouge_l_recall_ce": 0.125,
      "rouge_l_precision": 0.28571,
      "rouge_l_precision_cb": 0.28571,
      "rouge_l_precision_ce": 0.28571,
      "rouge_l_f_score": 0.17391,
      "rouge_l_f_score_cb": 0.17391,
      "rouge_l_f_score_ce": 0.17391,
      "rouge_w_1.2_recall": 0.05266,
      "rouge_w_1.2_recall_cb": 0.05266,
      "rouge_w_1.2_recall_ce": 0.05266,
      "rouge_w_1.2_precision": 0.24074,
      "rouge_w_1.2_precision_cb": 0.24074,
      "rouge_w_1.2_precision_ce": 0.24074,
      "rouge_w_1.2_f_score": 0.08642,
      "rouge_w_1.2_f_score_cb": 0.08642,
      "rouge_w_1.2_f_score_ce": 0.08642,
      "rouge_s*_recall": 0.01815,
      "rouge_s*_recall_cb": 0.01815,
      "rouge_s*_recall_ce": 0.01815,
      "rouge_s*_precision": 0.0989,
      "rouge_s*_precision_cb": 0.0989,
      "rouge_s*_precision_ce": 0.0989,
      "rouge_s*_f_score": 0.03067,
      "rouge_s*_f_score_cb": 0.03067,
      "rouge_s*_f_score_ce": 0.03067,
      "rouge_su*_recall": 0.02657,
      "rouge_su*_recall_cb": 0.02657,
      "rouge_su*_recall_ce": 0.02657,
      "rouge_su*_precision": 0.13462,
      "rouge_su*_precision_cb": 0.13462,
      "rouge_su*_precision_ce": 0.13462,
      "rouge_su*_f_score": 0.04438,
      "rouge_su*_f_score_cb": 0.04438,
      "rouge_su*_f_score_ce": 0.04438
    }
  },
  {
    "id": 22,
    "filename": "NumpyEval_22.txt",
    "dataset_comment": "Given a numpy array, create a new array that contains the average of every consecutive triplet of elements, resulting in an array that is one third the size of the original, and return it.",
    "generated_comment": "Calculate the average of every 3 consecutive elements in the array by reshaping the array into a 2D array with 3 columns and then taking the mean along the rows.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.41176,
      "rouge_1_recall_cb": 0.41176,
      "rouge_1_recall_ce": 0.41176,
      "rouge_1_precision": 0.46667,
      "rouge_1_precision_cb": 0.46667,
      "rouge_1_precision_ce": 0.46667,
      "rouge_1_f_score": 0.4375,
      "rouge_1_f_score_cb": 0.4375,
      "rouge_1_f_score_ce": 0.4375,
      "rouge_2_recall": 0.09091,
      "rouge_2_recall_cb": 0.09091,
      "rouge_2_recall_ce": 0.09091,
      "rouge_2_precision": 0.10345,
      "rouge_2_precision_cb": 0.10345,
      "rouge_2_precision_ce": 0.10345,
      "rouge_2_f_score": 0.09678,
      "rouge_2_f_score_cb": 0.09678,
      "rouge_2_f_score_ce": 0.09678,
      "rouge_3_recall": 0.0625,
      "rouge_3_recall_cb": 0.0625,
      "rouge_3_recall_ce": 0.0625,
      "rouge_3_precision": 0.07143,
      "rouge_3_precision_cb": 0.07143,
      "rouge_3_precision_ce": 0.07143,
      "rouge_3_f_score": 0.06667,
      "rouge_3_f_score_cb": 0.06667,
      "rouge_3_f_score_ce": 0.06667,
      "rouge_4_recall": 0.03226,
      "rouge_4_recall_cb": 0.03226,
      "rouge_4_recall_ce": 0.03226,
      "rouge_4_precision": 0.03704,
      "rouge_4_precision_cb": 0.03704,
      "rouge_4_precision_ce": 0.03704,
      "rouge_4_f_score": 0.03449,
      "rouge_4_f_score_cb": 0.03449,
      "rouge_4_f_score_ce": 0.03449,
      "rouge_l_recall": 0.29412,
      "rouge_l_recall_cb": 0.29412,
      "rouge_l_recall_ce": 0.29412,
      "rouge_l_precision": 0.33333,
      "rouge_l_precision_cb": 0.33333,
      "rouge_l_precision_ce": 0.33333,
      "rouge_l_f_score": 0.3125,
      "rouge_l_f_score_cb": 0.3125,
      "rouge_l_f_score_ce": 0.3125,
      "rouge_w_1.2_recall": 0.11441,
      "rouge_w_1.2_recall_cb": 0.11441,
      "rouge_w_1.2_recall_ce": 0.11441,
      "rouge_w_1.2_precision": 0.2625,
      "rouge_w_1.2_precision_cb": 0.2625,
      "rouge_w_1.2_precision_ce": 0.2625,
      "rouge_w_1.2_f_score": 0.15936,
      "rouge_w_1.2_f_score_cb": 0.15936,
      "rouge_w_1.2_f_score_ce": 0.15936,
      "rouge_s*_recall": 0.13012,
      "rouge_s*_recall_cb": 0.13012,
      "rouge_s*_recall_ce": 0.13012,
      "rouge_s*_precision": 0.16782,
      "rouge_s*_precision_cb": 0.16782,
      "rouge_s*_precision_ce": 0.16782,
      "rouge_s*_f_score": 0.14658,
      "rouge_s*_f_score_cb": 0.14658,
      "rouge_s*_f_score_ce": 0.14658,
      "rouge_su*_recall": 0.14646,
      "rouge_su*_recall_cb": 0.14646,
      "rouge_su*_recall_ce": 0.14646,
      "rouge_su*_precision": 0.1875,
      "rouge_su*_precision_cb": 0.1875,
      "rouge_su*_precision_ce": 0.1875,
      "rouge_su*_f_score": 0.16446,
      "rouge_su*_f_score_cb": 0.16446,
      "rouge_su*_f_score_ce": 0.16446
    }
  },
  {
    "id": 23,
    "filename": "NumpyEval_23.txt",
    "dataset_comment": "Define a numpy matrix that uses operations modulo 2, known as \"xor\". Arguments:    x: a numpy array    y: a numpy array    z: a numpy array Returns:    A numpy array containing the result of the operation.",
    "generated_comment": "Perform a bitwise XOR operation on three inputs and return the result.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.17143,
      "rouge_1_recall_cb": 0.17143,
      "rouge_1_recall_ce": 0.17143,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.25532,
      "rouge_1_f_score_cb": 0.25532,
      "rouge_1_f_score_ce": 0.25532,
      "rouge_2_recall": 0.02941,
      "rouge_2_recall_cb": 0.02941,
      "rouge_2_recall_ce": 0.02941,
      "rouge_2_precision": 0.09091,
      "rouge_2_precision_cb": 0.09091,
      "rouge_2_precision_ce": 0.09091,
      "rouge_2_f_score": 0.04444,
      "rouge_2_f_score_cb": 0.04444,
      "rouge_2_f_score_ce": 0.04444,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.14286,
      "rouge_l_recall_cb": 0.14286,
      "rouge_l_recall_ce": 0.14286,
      "rouge_l_precision": 0.41667,
      "rouge_l_precision_cb": 0.41667,
      "rouge_l_precision_ce": 0.41667,
      "rouge_l_f_score": 0.21277,
      "rouge_l_f_score_cb": 0.21277,
      "rouge_l_f_score_ce": 0.21277,
      "rouge_w_1.2_recall": 0.0563,
      "rouge_w_1.2_recall_cb": 0.0563,
      "rouge_w_1.2_recall_ce": 0.0563,
      "rouge_w_1.2_precision": 0.33435,
      "rouge_w_1.2_precision_cb": 0.33435,
      "rouge_w_1.2_precision_ce": 0.33435,
      "rouge_w_1.2_f_score": 0.09637,
      "rouge_w_1.2_f_score_cb": 0.09637,
      "rouge_w_1.2_f_score_ce": 0.09637,
      "rouge_s*_recall": 0.02521,
      "rouge_s*_recall_cb": 0.02521,
      "rouge_s*_recall_ce": 0.02521,
      "rouge_s*_precision": 0.22727,
      "rouge_s*_precision_cb": 0.22727,
      "rouge_s*_precision_ce": 0.22727,
      "rouge_s*_f_score": 0.04539,
      "rouge_s*_f_score_cb": 0.04539,
      "rouge_s*_f_score_ce": 0.04539,
      "rouge_su*_recall": 0.0318,
      "rouge_su*_recall_cb": 0.0318,
      "rouge_su*_recall_ce": 0.0318,
      "rouge_su*_precision": 0.25974,
      "rouge_su*_precision_cb": 0.25974,
      "rouge_su*_precision_ce": 0.25974,
      "rouge_su*_f_score": 0.05666,
      "rouge_su*_f_score_cb": 0.05666,
      "rouge_su*_f_score_ce": 0.05666
    }
  },
  {
    "id": 24,
    "filename": "NumpyEval_24.txt",
    "dataset_comment": "Define the function c(i, j) as c(i, j) = a(i) + b(j) * 2.",
    "generated_comment": "Compute the outer sum of array 'a' with each element of array 'b' multiplied by 2.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.26667,
      "rouge_1_recall_cb": 0.26667,
      "rouge_1_recall_ce": 0.26667,
      "rouge_1_precision": 0.25,
      "rouge_1_precision_cb": 0.25,
      "rouge_1_precision_ce": 0.25,
      "rouge_1_f_score": 0.25807,
      "rouge_1_f_score_cb": 0.25807,
      "rouge_1_f_score_ce": 0.25807,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.26667,
      "rouge_l_recall_cb": 0.26667,
      "rouge_l_recall_ce": 0.26667,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.25807,
      "rouge_l_f_score_cb": 0.25807,
      "rouge_l_f_score_ce": 0.25807,
      "rouge_w_1.2_recall": 0.12314,
      "rouge_w_1.2_recall_cb": 0.12314,
      "rouge_w_1.2_recall_ce": 0.12314,
      "rouge_w_1.2_precision": 0.19843,
      "rouge_w_1.2_precision_cb": 0.19843,
      "rouge_w_1.2_precision_ce": 0.19843,
      "rouge_w_1.2_f_score": 0.15197,
      "rouge_w_1.2_f_score_cb": 0.15197,
      "rouge_w_1.2_f_score_ce": 0.15197,
      "rouge_s*_recall": 0.05714,
      "rouge_s*_recall_cb": 0.05714,
      "rouge_s*_recall_ce": 0.05714,
      "rouge_s*_precision": 0.05,
      "rouge_s*_precision_cb": 0.05,
      "rouge_s*_precision_ce": 0.05,
      "rouge_s*_f_score": 0.05333,
      "rouge_s*_f_score_cb": 0.05333,
      "rouge_s*_f_score_ce": 0.05333,
      "rouge_su*_recall": 0.07563,
      "rouge_su*_recall_cb": 0.07563,
      "rouge_su*_recall_ce": 0.07563,
      "rouge_su*_precision": 0.06667,
      "rouge_su*_precision_cb": 0.06667,
      "rouge_su*_precision_ce": 0.06667,
      "rouge_su*_f_score": 0.07087,
      "rouge_su*_f_score_cb": 0.07087,
      "rouge_su*_f_score_ce": 0.07087
    }
  },
  {
    "id": 25,
    "filename": "NumpyEval_25.txt",
    "dataset_comment": "Implement a function that returns an array with the results of dividing each element by the previous one, similar to a \"diff()\" operation. Example (non-numpy): source = [1, 3, 6, 24, 36] target = [j / i for i, j in zip(source[:-1], source[1:])] Return the target array implemented in numpy.",
    "generated_comment": "Calculate the multiplicative difference between each element and its neighbor in the array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.11765,
      "rouge_1_recall_cb": 0.11765,
      "rouge_1_recall_ce": 0.11765,
      "rouge_1_precision": 0.46154,
      "rouge_1_precision_cb": 0.46154,
      "rouge_1_precision_ce": 0.46154,
      "rouge_1_f_score": 0.1875,
      "rouge_1_f_score_cb": 0.1875,
      "rouge_1_f_score_ce": 0.1875,
      "rouge_2_recall": 0.02,
      "rouge_2_recall_cb": 0.02,
      "rouge_2_recall_ce": 0.02,
      "rouge_2_precision": 0.08333,
      "rouge_2_precision_cb": 0.08333,
      "rouge_2_precision_ce": 0.08333,
      "rouge_2_f_score": 0.03226,
      "rouge_2_f_score_cb": 0.03226,
      "rouge_2_f_score_ce": 0.03226,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.11765,
      "rouge_l_recall_cb": 0.11765,
      "rouge_l_recall_ce": 0.11765,
      "rouge_l_precision": 0.46154,
      "rouge_l_precision_cb": 0.46154,
      "rouge_l_precision_ce": 0.46154,
      "rouge_l_f_score": 0.1875,
      "rouge_l_f_score_cb": 0.1875,
      "rouge_l_f_score_ce": 0.1875,
      "rouge_w_1.2_recall": 0.04139,
      "rouge_w_1.2_recall_cb": 0.04139,
      "rouge_w_1.2_recall_ce": 0.04139,
      "rouge_w_1.2_precision": 0.35647,
      "rouge_w_1.2_precision_cb": 0.35647,
      "rouge_w_1.2_precision_ce": 0.35647,
      "rouge_w_1.2_f_score": 0.07417,
      "rouge_w_1.2_f_score_cb": 0.07417,
      "rouge_w_1.2_f_score_ce": 0.07417,
      "rouge_s*_recall": 0.01176,
      "rouge_s*_recall_cb": 0.01176,
      "rouge_s*_recall_ce": 0.01176,
      "rouge_s*_precision": 0.19231,
      "rouge_s*_precision_cb": 0.19231,
      "rouge_s*_precision_ce": 0.19231,
      "rouge_s*_f_score": 0.02216,
      "rouge_s*_f_score_cb": 0.02216,
      "rouge_s*_f_score_ce": 0.02216,
      "rouge_su*_recall": 0.01509,
      "rouge_su*_recall_cb": 0.01509,
      "rouge_su*_recall_ce": 0.01509,
      "rouge_su*_precision": 0.22222,
      "rouge_su*_precision_cb": 0.22222,
      "rouge_su*_precision_ce": 0.22222,
      "rouge_su*_f_score": 0.02826,
      "rouge_su*_f_score_cb": 0.02826,
      "rouge_su*_f_score_ce": 0.02826
    }
  },
  {
    "id": 26,
    "filename": "NumpyEval_26.txt",
    "dataset_comment": "Stack them using the negative one axis.",
    "generated_comment": "List of arrays.Stack the list of arrays along a new axis at the end.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.42857,
      "rouge_1_recall_cb": 0.42857,
      "rouge_1_recall_ce": 0.42857,
      "rouge_1_precision": 0.2,
      "rouge_1_precision_cb": 0.2,
      "rouge_1_precision_ce": 0.2,
      "rouge_1_f_score": 0.27273,
      "rouge_1_f_score_cb": 0.27273,
      "rouge_1_f_score_ce": 0.27273,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.42857,
      "rouge_l_recall_cb": 0.42857,
      "rouge_l_recall_ce": 0.42857,
      "rouge_l_precision": 0.2,
      "rouge_l_precision_cb": 0.2,
      "rouge_l_precision_ce": 0.2,
      "rouge_l_f_score": 0.27273,
      "rouge_l_f_score_cb": 0.27273,
      "rouge_l_f_score_ce": 0.27273,
      "rouge_w_1.2_recall": 0.24182,
      "rouge_w_1.2_recall_cb": 0.24182,
      "rouge_w_1.2_recall_ce": 0.24182,
      "rouge_w_1.2_precision": 0.16654,
      "rouge_w_1.2_precision_cb": 0.16654,
      "rouge_w_1.2_precision_ce": 0.16654,
      "rouge_w_1.2_f_score": 0.19724,
      "rouge_w_1.2_f_score_cb": 0.19724,
      "rouge_w_1.2_f_score_ce": 0.19724,
      "rouge_s*_recall": 0.14286,
      "rouge_s*_recall_cb": 0.14286,
      "rouge_s*_recall_ce": 0.14286,
      "rouge_s*_precision": 0.02857,
      "rouge_s*_precision_cb": 0.02857,
      "rouge_s*_precision_ce": 0.02857,
      "rouge_s*_f_score": 0.04762,
      "rouge_s*_f_score_cb": 0.04762,
      "rouge_s*_f_score_ce": 0.04762,
      "rouge_su*_recall": 0.18519,
      "rouge_su*_recall_cb": 0.18519,
      "rouge_su*_recall_ce": 0.18519,
      "rouge_su*_precision": 0.04202,
      "rouge_su*_precision_cb": 0.04202,
      "rouge_su*_precision_ce": 0.04202,
      "rouge_su*_f_score": 0.0685,
      "rouge_su*_f_score_cb": 0.0685,
      "rouge_su*_f_score_ce": 0.0685
    }
  },
  {
    "id": 27,
    "filename": "NumpyEval_27.txt",
    "dataset_comment": "Invoke the standard deviation function on a 2D array with axis=0 to return a 1D array containing the standard deviation of each column.",
    "generated_comment": "Calculate the standard deviation along the specified axis (axis=0) for the given 2D numpy array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.4,
      "rouge_1_f_score_cb": 0.4,
      "rouge_1_f_score_ce": 0.4,
      "rouge_2_recall": 0.13043,
      "rouge_2_recall_cb": 0.13043,
      "rouge_2_recall_ce": 0.13043,
      "rouge_2_precision": 0.2,
      "rouge_2_precision_cb": 0.2,
      "rouge_2_precision_ce": 0.2,
      "rouge_2_f_score": 0.15789,
      "rouge_2_f_score_cb": 0.15789,
      "rouge_2_f_score_ce": 0.15789,
      "rouge_3_recall": 0.04545,
      "rouge_3_recall_cb": 0.04545,
      "rouge_3_recall_ce": 0.04545,
      "rouge_3_precision": 0.07143,
      "rouge_3_precision_cb": 0.07143,
      "rouge_3_precision_ce": 0.07143,
      "rouge_3_f_score": 0.05555,
      "rouge_3_f_score_cb": 0.05555,
      "rouge_3_f_score_ce": 0.05555,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.25,
      "rouge_l_recall_cb": 0.25,
      "rouge_l_recall_ce": 0.25,
      "rouge_l_precision": 0.375,
      "rouge_l_precision_cb": 0.375,
      "rouge_l_precision_ce": 0.375,
      "rouge_l_f_score": 0.3,
      "rouge_l_f_score_cb": 0.3,
      "rouge_l_f_score_ce": 0.3,
      "rouge_w_1.2_recall": 0.11214,
      "rouge_w_1.2_recall_cb": 0.11214,
      "rouge_w_1.2_recall_ce": 0.11214,
      "rouge_w_1.2_precision": 0.31762,
      "rouge_w_1.2_precision_cb": 0.31762,
      "rouge_w_1.2_precision_ce": 0.31762,
      "rouge_w_1.2_f_score": 0.16576,
      "rouge_w_1.2_f_score_cb": 0.16576,
      "rouge_w_1.2_f_score_ce": 0.16576,
      "rouge_s*_recall": 0.09058,
      "rouge_s*_recall_cb": 0.09058,
      "rouge_s*_recall_ce": 0.09058,
      "rouge_s*_precision": 0.20833,
      "rouge_s*_precision_cb": 0.20833,
      "rouge_s*_precision_ce": 0.20833,
      "rouge_s*_f_score": 0.12626,
      "rouge_s*_f_score_cb": 0.12626,
      "rouge_s*_f_score_ce": 0.12626,
      "rouge_su*_recall": 0.10702,
      "rouge_su*_recall_cb": 0.10702,
      "rouge_su*_recall_ce": 0.10702,
      "rouge_su*_precision": 0.23704,
      "rouge_su*_precision_cb": 0.23704,
      "rouge_su*_precision_ce": 0.23704,
      "rouge_su*_f_score": 0.14746,
      "rouge_su*_f_score_cb": 0.14746,
      "rouge_su*_f_score_ce": 0.14746
    }
  },
  {
    "id": 28,
    "filename": "NumpyEval_28.txt",
    "dataset_comment": "Given a matrix `M` of shape 1*N, extract an array containing N elements in an elegant manner.",
    "generated_comment": "Convert a matrix to a 1D array by removing any singleton dimensions and converting to a numpy array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.16667,
      "rouge_1_recall_cb": 0.16667,
      "rouge_1_recall_ce": 0.16667,
      "rouge_1_precision": 0.16667,
      "rouge_1_precision_cb": 0.16667,
      "rouge_1_precision_ce": 0.16667,
      "rouge_1_f_score": 0.16667,
      "rouge_1_f_score_cb": 0.16667,
      "rouge_1_f_score_ce": 0.16667,
      "rouge_2_recall": 0.05882,
      "rouge_2_recall_cb": 0.05882,
      "rouge_2_recall_ce": 0.05882,
      "rouge_2_precision": 0.05882,
      "rouge_2_precision_cb": 0.05882,
      "rouge_2_precision_ce": 0.05882,
      "rouge_2_f_score": 0.05882,
      "rouge_2_f_score_cb": 0.05882,
      "rouge_2_f_score_ce": 0.05882,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.16667,
      "rouge_l_recall_cb": 0.16667,
      "rouge_l_recall_ce": 0.16667,
      "rouge_l_precision": 0.16667,
      "rouge_l_precision_cb": 0.16667,
      "rouge_l_precision_ce": 0.16667,
      "rouge_l_f_score": 0.16667,
      "rouge_l_f_score_cb": 0.16667,
      "rouge_l_f_score_ce": 0.16667,
      "rouge_w_1.2_recall": 0.08423,
      "rouge_w_1.2_recall_cb": 0.08423,
      "rouge_w_1.2_recall_ce": 0.08423,
      "rouge_w_1.2_precision": 0.15015,
      "rouge_w_1.2_precision_cb": 0.15015,
      "rouge_w_1.2_precision_ce": 0.15015,
      "rouge_w_1.2_f_score": 0.10792,
      "rouge_w_1.2_f_score_cb": 0.10792,
      "rouge_w_1.2_f_score_ce": 0.10792,
      "rouge_s*_recall": 0.01961,
      "rouge_s*_recall_cb": 0.01961,
      "rouge_s*_recall_ce": 0.01961,
      "rouge_s*_precision": 0.01961,
      "rouge_s*_precision_cb": 0.01961,
      "rouge_s*_precision_ce": 0.01961,
      "rouge_s*_f_score": 0.01961,
      "rouge_s*_f_score_cb": 0.01961,
      "rouge_s*_f_score_ce": 0.01961,
      "rouge_su*_recall": 0.03529,
      "rouge_su*_recall_cb": 0.03529,
      "rouge_su*_recall_ce": 0.03529,
      "rouge_su*_precision": 0.03529,
      "rouge_su*_precision_cb": 0.03529,
      "rouge_su*_precision_ce": 0.03529,
      "rouge_su*_f_score": 0.03529,
      "rouge_su*_f_score_cb": 0.03529,
      "rouge_su*_f_score_ce": 0.03529
    }
  },
  {
    "id": 29,
    "filename": "NumpyEval_29.txt",
    "dataset_comment": "Get the index of the maximum element in a NumPy array along the specified axis_value and return the result.",
    "generated_comment": "Find the index of the maximum element along the specified axis in a numpy array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.7,
      "rouge_1_recall_cb": 0.7,
      "rouge_1_recall_ce": 0.7,
      "rouge_1_precision": 0.93333,
      "rouge_1_precision_cb": 0.93333,
      "rouge_1_precision_ce": 0.93333,
      "rouge_1_f_score": 0.8,
      "rouge_1_f_score_cb": 0.8,
      "rouge_1_f_score_ce": 0.8,
      "rouge_2_recall": 0.57895,
      "rouge_2_recall_cb": 0.57895,
      "rouge_2_recall_ce": 0.57895,
      "rouge_2_precision": 0.78571,
      "rouge_2_precision_cb": 0.78571,
      "rouge_2_precision_ce": 0.78571,
      "rouge_2_f_score": 0.66667,
      "rouge_2_f_score_cb": 0.66667,
      "rouge_2_f_score_ce": 0.66667,
      "rouge_3_recall": 0.44444,
      "rouge_3_recall_cb": 0.44444,
      "rouge_3_recall_ce": 0.44444,
      "rouge_3_precision": 0.61538,
      "rouge_3_precision_cb": 0.61538,
      "rouge_3_precision_ce": 0.61538,
      "rouge_3_f_score": 0.51612,
      "rouge_3_f_score_cb": 0.51612,
      "rouge_3_f_score_ce": 0.51612,
      "rouge_4_recall": 0.29412,
      "rouge_4_recall_cb": 0.29412,
      "rouge_4_recall_ce": 0.29412,
      "rouge_4_precision": 0.41667,
      "rouge_4_precision_cb": 0.41667,
      "rouge_4_precision_ce": 0.41667,
      "rouge_4_f_score": 0.34483,
      "rouge_4_f_score_cb": 0.34483,
      "rouge_4_f_score_ce": 0.34483,
      "rouge_l_recall": 0.5,
      "rouge_l_recall_cb": 0.5,
      "rouge_l_recall_ce": 0.5,
      "rouge_l_precision": 0.66667,
      "rouge_l_precision_cb": 0.66667,
      "rouge_l_precision_ce": 0.66667,
      "rouge_l_f_score": 0.57143,
      "rouge_l_f_score_cb": 0.57143,
      "rouge_l_f_score_ce": 0.57143,
      "rouge_w_1.2_recall": 0.27464,
      "rouge_w_1.2_recall_cb": 0.27464,
      "rouge_w_1.2_recall_ce": 0.27464,
      "rouge_w_1.2_precision": 0.66667,
      "rouge_w_1.2_precision_cb": 0.66667,
      "rouge_w_1.2_precision_ce": 0.66667,
      "rouge_w_1.2_f_score": 0.38902,
      "rouge_w_1.2_f_score_cb": 0.38902,
      "rouge_w_1.2_f_score_ce": 0.38902,
      "rouge_s*_recall": 0.39474,
      "rouge_s*_recall_cb": 0.39474,
      "rouge_s*_recall_ce": 0.39474,
      "rouge_s*_precision": 0.71429,
      "rouge_s*_precision_cb": 0.71429,
      "rouge_s*_precision_ce": 0.71429,
      "rouge_s*_f_score": 0.50848,
      "rouge_s*_f_score_cb": 0.50848,
      "rouge_s*_f_score_ce": 0.50848,
      "rouge_su*_recall": 0.42105,
      "rouge_su*_recall_cb": 0.42105,
      "rouge_su*_recall_ce": 0.42105,
      "rouge_su*_precision": 0.7395,
      "rouge_su*_precision_cb": 0.7395,
      "rouge_su*_precision_ce": 0.7395,
      "rouge_su*_f_score": 0.53658,
      "rouge_su*_f_score_cb": 0.53658,
      "rouge_su*_f_score_ce": 0.53658
    }
  },
  {
    "id": 30,
    "filename": "NumpyEval_30.txt",
    "dataset_comment": "Convert numpy array type and values from Float64 to Float32.",
    "generated_comment": "Convert the array 'a' from float64 to float32 data type.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.7,
      "rouge_1_recall_cb": 0.7,
      "rouge_1_recall_ce": 0.7,
      "rouge_1_precision": 0.7,
      "rouge_1_precision_cb": 0.7,
      "rouge_1_precision_ce": 0.7,
      "rouge_1_f_score": 0.7,
      "rouge_1_f_score_cb": 0.7,
      "rouge_1_f_score_ce": 0.7,
      "rouge_2_recall": 0.33333,
      "rouge_2_recall_cb": 0.33333,
      "rouge_2_recall_ce": 0.33333,
      "rouge_2_precision": 0.33333,
      "rouge_2_precision_cb": 0.33333,
      "rouge_2_precision_ce": 0.33333,
      "rouge_2_f_score": 0.33333,
      "rouge_2_f_score_cb": 0.33333,
      "rouge_2_f_score_ce": 0.33333,
      "rouge_3_recall": 0.25,
      "rouge_3_recall_cb": 0.25,
      "rouge_3_recall_ce": 0.25,
      "rouge_3_precision": 0.25,
      "rouge_3_precision_cb": 0.25,
      "rouge_3_precision_ce": 0.25,
      "rouge_3_f_score": 0.25,
      "rouge_3_f_score_cb": 0.25,
      "rouge_3_f_score_ce": 0.25,
      "rouge_4_recall": 0.14286,
      "rouge_4_recall_cb": 0.14286,
      "rouge_4_recall_ce": 0.14286,
      "rouge_4_precision": 0.14286,
      "rouge_4_precision_cb": 0.14286,
      "rouge_4_precision_ce": 0.14286,
      "rouge_4_f_score": 0.14286,
      "rouge_4_f_score_cb": 0.14286,
      "rouge_4_f_score_ce": 0.14286,
      "rouge_l_recall": 0.6,
      "rouge_l_recall_cb": 0.6,
      "rouge_l_recall_ce": 0.6,
      "rouge_l_precision": 0.6,
      "rouge_l_precision_cb": 0.6,
      "rouge_l_precision_ce": 0.6,
      "rouge_l_f_score": 0.6,
      "rouge_l_f_score_cb": 0.6,
      "rouge_l_f_score_ce": 0.6,
      "rouge_w_1.2_recall": 0.32987,
      "rouge_w_1.2_recall_cb": 0.32987,
      "rouge_w_1.2_recall_ce": 0.32987,
      "rouge_w_1.2_precision": 0.52281,
      "rouge_w_1.2_precision_cb": 0.52281,
      "rouge_w_1.2_precision_ce": 0.52281,
      "rouge_w_1.2_f_score": 0.40451,
      "rouge_w_1.2_f_score_cb": 0.40451,
      "rouge_w_1.2_f_score_ce": 0.40451,
      "rouge_s*_recall": 0.37778,
      "rouge_s*_recall_cb": 0.37778,
      "rouge_s*_recall_ce": 0.37778,
      "rouge_s*_precision": 0.37778,
      "rouge_s*_precision_cb": 0.37778,
      "rouge_s*_precision_ce": 0.37778,
      "rouge_s*_f_score": 0.37778,
      "rouge_s*_f_score_cb": 0.37778,
      "rouge_s*_f_score_ce": 0.37778,
      "rouge_su*_recall": 0.40741,
      "rouge_su*_recall_cb": 0.40741,
      "rouge_su*_recall_ce": 0.40741,
      "rouge_su*_precision": 0.40741,
      "rouge_su*_precision_cb": 0.40741,
      "rouge_su*_precision_ce": 0.40741,
      "rouge_su*_f_score": 0.40741,
      "rouge_su*_f_score_cb": 0.40741,
      "rouge_su*_f_score_ce": 0.40741
    }
  },
  {
    "id": 31,
    "filename": "NumpyEval_31.txt",
    "dataset_comment": "Use b to index a to obtain the value 4 instead of the list [a[1], a[1]]. The code below provides the solution.",
    "generated_comment": "Access the element in the array 'a' using the indices specified in the array 'b'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.29167,
      "rouge_1_recall_cb": 0.29167,
      "rouge_1_recall_ce": 0.29167,
      "rouge_1_precision": 0.46667,
      "rouge_1_precision_cb": 0.46667,
      "rouge_1_precision_ce": 0.46667,
      "rouge_1_f_score": 0.35898,
      "rouge_1_f_score_cb": 0.35898,
      "rouge_1_f_score_ce": 0.35898,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.20833,
      "rouge_l_recall_cb": 0.20833,
      "rouge_l_recall_ce": 0.20833,
      "rouge_l_precision": 0.33333,
      "rouge_l_precision_cb": 0.33333,
      "rouge_l_precision_ce": 0.33333,
      "rouge_l_f_score": 0.25641,
      "rouge_l_f_score_cb": 0.25641,
      "rouge_l_f_score_ce": 0.25641,
      "rouge_w_1.2_recall": 0.08438,
      "rouge_w_1.2_recall_cb": 0.08438,
      "rouge_w_1.2_recall_ce": 0.08438,
      "rouge_w_1.2_precision": 0.25491,
      "rouge_w_1.2_precision_cb": 0.25491,
      "rouge_w_1.2_precision_ce": 0.25491,
      "rouge_w_1.2_f_score": 0.12679,
      "rouge_w_1.2_f_score_cb": 0.12679,
      "rouge_w_1.2_f_score_ce": 0.12679,
      "rouge_s*_recall": 0.03986,
      "rouge_s*_recall_cb": 0.03986,
      "rouge_s*_recall_ce": 0.03986,
      "rouge_s*_precision": 0.10476,
      "rouge_s*_precision_cb": 0.10476,
      "rouge_s*_precision_ce": 0.10476,
      "rouge_s*_f_score": 0.05775,
      "rouge_s*_f_score_cb": 0.05775,
      "rouge_s*_f_score_ce": 0.05775,
      "rouge_su*_recall": 0.05686,
      "rouge_su*_recall_cb": 0.05686,
      "rouge_su*_recall_ce": 0.05686,
      "rouge_su*_precision": 0.14286,
      "rouge_su*_precision_cb": 0.14286,
      "rouge_su*_precision_ce": 0.14286,
      "rouge_su*_f_score": 0.08134,
      "rouge_su*_f_score_cb": 0.08134,
      "rouge_su*_f_score_ce": 0.08134
    }
  },
  {
    "id": 32,
    "filename": "NumpyEval_32.txt",
    "dataset_comment": "Create a matrix of sub-sequences from the given array of length L with stride S and return the numpy array of sub-sequences.",
    "generated_comment": "Generate a 2D array where each row is a window of length L with stride S from the input array a.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.45833,
      "rouge_1_recall_cb": 0.45833,
      "rouge_1_recall_ce": 0.45833,
      "rouge_1_precision": 0.52381,
      "rouge_1_precision_cb": 0.52381,
      "rouge_1_precision_ce": 0.52381,
      "rouge_1_f_score": 0.48889,
      "rouge_1_f_score_cb": 0.48889,
      "rouge_1_f_score_ce": 0.48889,
      "rouge_2_recall": 0.26087,
      "rouge_2_recall_cb": 0.26087,
      "rouge_2_recall_ce": 0.26087,
      "rouge_2_precision": 0.3,
      "rouge_2_precision_cb": 0.3,
      "rouge_2_precision_ce": 0.3,
      "rouge_2_f_score": 0.27907,
      "rouge_2_f_score_cb": 0.27907,
      "rouge_2_f_score_ce": 0.27907,
      "rouge_3_recall": 0.18182,
      "rouge_3_recall_cb": 0.18182,
      "rouge_3_recall_ce": 0.18182,
      "rouge_3_precision": 0.21053,
      "rouge_3_precision_cb": 0.21053,
      "rouge_3_precision_ce": 0.21053,
      "rouge_3_f_score": 0.19512,
      "rouge_3_f_score_cb": 0.19512,
      "rouge_3_f_score_ce": 0.19512,
      "rouge_4_recall": 0.14286,
      "rouge_4_recall_cb": 0.14286,
      "rouge_4_recall_ce": 0.14286,
      "rouge_4_precision": 0.16667,
      "rouge_4_precision_cb": 0.16667,
      "rouge_4_precision_ce": 0.16667,
      "rouge_4_f_score": 0.15385,
      "rouge_4_f_score_cb": 0.15385,
      "rouge_4_f_score_ce": 0.15385,
      "rouge_l_recall": 0.41667,
      "rouge_l_recall_cb": 0.41667,
      "rouge_l_recall_ce": 0.41667,
      "rouge_l_precision": 0.47619,
      "rouge_l_precision_cb": 0.47619,
      "rouge_l_precision_ce": 0.47619,
      "rouge_l_f_score": 0.44445,
      "rouge_l_f_score_cb": 0.44445,
      "rouge_l_f_score_ce": 0.44445,
      "rouge_w_1.2_recall": 0.19104,
      "rouge_w_1.2_recall_cb": 0.19104,
      "rouge_w_1.2_recall_ce": 0.19104,
      "rouge_w_1.2_precision": 0.41224,
      "rouge_w_1.2_precision_cb": 0.41224,
      "rouge_w_1.2_precision_ce": 0.41224,
      "rouge_w_1.2_f_score": 0.26109,
      "rouge_w_1.2_f_score_cb": 0.26109,
      "rouge_w_1.2_f_score_ce": 0.26109,
      "rouge_s*_recall": 0.18478,
      "rouge_s*_recall_cb": 0.18478,
      "rouge_s*_recall_ce": 0.18478,
      "rouge_s*_precision": 0.24286,
      "rouge_s*_precision_cb": 0.24286,
      "rouge_s*_precision_ce": 0.24286,
      "rouge_s*_f_score": 0.20988,
      "rouge_s*_f_score_cb": 0.20988,
      "rouge_s*_f_score_ce": 0.20988,
      "rouge_su*_recall": 0.20736,
      "rouge_su*_recall_cb": 0.20736,
      "rouge_su*_recall_ce": 0.20736,
      "rouge_su*_precision": 0.26957,
      "rouge_su*_precision_cb": 0.26957,
      "rouge_su*_precision_ce": 0.26957,
      "rouge_su*_f_score": 0.23441,
      "rouge_su*_f_score_cb": 0.23441,
      "rouge_su*_f_score_ce": 0.23441
    }
  },
  {
    "id": 33,
    "filename": "NumpyEval_33.txt",
    "dataset_comment": "Sub-flatten a numpy array of dimensions (50,100,25) to obtain resultant dimensions (5000,25).",
    "generated_comment": "Reshape a 3D numpy array into a 2D array with dimensions (5000, 25) by flattening the first two dimensions.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.42105,
      "rouge_1_precision_cb": 0.42105,
      "rouge_1_precision_ce": 0.42105,
      "rouge_1_f_score": 0.45714,
      "rouge_1_f_score_cb": 0.45714,
      "rouge_1_f_score_ce": 0.45714,
      "rouge_2_recall": 0.2,
      "rouge_2_recall_cb": 0.2,
      "rouge_2_recall_ce": 0.2,
      "rouge_2_precision": 0.16667,
      "rouge_2_precision_cb": 0.16667,
      "rouge_2_precision_ce": 0.16667,
      "rouge_2_f_score": 0.18182,
      "rouge_2_f_score_cb": 0.18182,
      "rouge_2_f_score_ce": 0.18182,
      "rouge_3_recall": 0.07143,
      "rouge_3_recall_cb": 0.07143,
      "rouge_3_recall_ce": 0.07143,
      "rouge_3_precision": 0.05882,
      "rouge_3_precision_cb": 0.05882,
      "rouge_3_precision_ce": 0.05882,
      "rouge_3_f_score": 0.06451,
      "rouge_3_f_score_cb": 0.06451,
      "rouge_3_f_score_ce": 0.06451,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.375,
      "rouge_l_recall_cb": 0.375,
      "rouge_l_recall_ce": 0.375,
      "rouge_l_precision": 0.31579,
      "rouge_l_precision_cb": 0.31579,
      "rouge_l_precision_ce": 0.31579,
      "rouge_l_f_score": 0.34286,
      "rouge_l_f_score_cb": 0.34286,
      "rouge_l_f_score_ce": 0.34286,
      "rouge_w_1.2_recall": 0.19188,
      "rouge_w_1.2_recall_cb": 0.19188,
      "rouge_w_1.2_recall_ce": 0.19188,
      "rouge_w_1.2_precision": 0.28134,
      "rouge_w_1.2_precision_cb": 0.28134,
      "rouge_w_1.2_precision_ce": 0.28134,
      "rouge_w_1.2_f_score": 0.22815,
      "rouge_w_1.2_f_score_cb": 0.22815,
      "rouge_w_1.2_f_score_ce": 0.22815,
      "rouge_s*_recall": 0.19167,
      "rouge_s*_recall_cb": 0.19167,
      "rouge_s*_recall_ce": 0.19167,
      "rouge_s*_precision": 0.1345,
      "rouge_s*_precision_cb": 0.1345,
      "rouge_s*_precision_ce": 0.1345,
      "rouge_s*_f_score": 0.15807,
      "rouge_s*_f_score_cb": 0.15807,
      "rouge_s*_f_score_ce": 0.15807,
      "rouge_su*_recall": 0.22222,
      "rouge_su*_recall_cb": 0.22222,
      "rouge_su*_recall_ce": 0.22222,
      "rouge_su*_precision": 0.15873,
      "rouge_su*_precision_cb": 0.15873,
      "rouge_su*_precision_ce": 0.15873,
      "rouge_su*_f_score": 0.18518,
      "rouge_su*_f_score_cb": 0.18518,
      "rouge_su*_f_score_ce": 0.18518
    }
  },
  {
    "id": 34,
    "filename": "NumpyEval_34.txt",
    "dataset_comment": "Remove masked values from the variable m.",
    "generated_comment": "Filter out values larger than 2 using numpy's masked arrays and compress the masked array to get the unmasked values.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.42857,
      "rouge_1_recall_cb": 0.42857,
      "rouge_1_recall_ce": 0.42857,
      "rouge_1_precision": 0.14286,
      "rouge_1_precision_cb": 0.14286,
      "rouge_1_precision_ce": 0.14286,
      "rouge_1_f_score": 0.21429,
      "rouge_1_f_score_cb": 0.21429,
      "rouge_1_f_score_ce": 0.21429,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.28571,
      "rouge_l_recall_cb": 0.28571,
      "rouge_l_recall_ce": 0.28571,
      "rouge_l_precision": 0.09524,
      "rouge_l_precision_cb": 0.09524,
      "rouge_l_precision_ce": 0.09524,
      "rouge_l_f_score": 0.14286,
      "rouge_l_f_score_cb": 0.14286,
      "rouge_l_f_score_ce": 0.14286,
      "rouge_w_1.2_recall": 0.1936,
      "rouge_w_1.2_recall_cb": 0.1936,
      "rouge_w_1.2_recall_ce": 0.1936,
      "rouge_w_1.2_precision": 0.09524,
      "rouge_w_1.2_precision_cb": 0.09524,
      "rouge_w_1.2_precision_ce": 0.09524,
      "rouge_w_1.2_f_score": 0.12767,
      "rouge_w_1.2_f_score_cb": 0.12767,
      "rouge_w_1.2_f_score_ce": 0.12767,
      "rouge_s*_recall": 0.14286,
      "rouge_s*_recall_cb": 0.14286,
      "rouge_s*_recall_ce": 0.14286,
      "rouge_s*_precision": 0.01429,
      "rouge_s*_precision_cb": 0.01429,
      "rouge_s*_precision_ce": 0.01429,
      "rouge_s*_f_score": 0.02598,
      "rouge_s*_f_score_cb": 0.02598,
      "rouge_s*_f_score_ce": 0.02598,
      "rouge_su*_recall": 0.22222,
      "rouge_su*_recall_cb": 0.22222,
      "rouge_su*_recall_ce": 0.22222,
      "rouge_su*_precision": 0.02609,
      "rouge_su*_precision_cb": 0.02609,
      "rouge_su*_precision_ce": 0.02609,
      "rouge_su*_f_score": 0.0467,
      "rouge_su*_f_score_cb": 0.0467,
      "rouge_su*_f_score_ce": 0.0467
    }
  },
  {
    "id": 35,
    "filename": "NumpyEval_35.txt",
    "dataset_comment": "Create a numpy array composed of the list [[8, 7, 2], [5, 6, 1], [8, 2, 6]]",
    "generated_comment": "Find each index where the value changes in an efficient way using numpy by comparing each element with its neighbor and utilizing np.where(condition).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.11765,
      "rouge_1_recall_cb": 0.11765,
      "rouge_1_recall_ce": 0.11765,
      "rouge_1_precision": 0.08,
      "rouge_1_precision_cb": 0.08,
      "rouge_1_precision_ce": 0.08,
      "rouge_1_f_score": 0.09524,
      "rouge_1_f_score_cb": 0.09524,
      "rouge_1_f_score_ce": 0.09524,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.05882,
      "rouge_l_recall_cb": 0.05882,
      "rouge_l_recall_ce": 0.05882,
      "rouge_l_precision": 0.04,
      "rouge_l_precision_cb": 0.04,
      "rouge_l_precision_ce": 0.04,
      "rouge_l_f_score": 0.04762,
      "rouge_l_f_score_cb": 0.04762,
      "rouge_l_f_score_ce": 0.04762,
      "rouge_w_1.2_recall": 0.03338,
      "rouge_w_1.2_recall_cb": 0.03338,
      "rouge_w_1.2_recall_ce": 0.03338,
      "rouge_w_1.2_precision": 0.04,
      "rouge_w_1.2_precision_cb": 0.04,
      "rouge_w_1.2_precision_ce": 0.04,
      "rouge_w_1.2_f_score": 0.03639,
      "rouge_w_1.2_f_score_cb": 0.03639,
      "rouge_w_1.2_f_score_ce": 0.03639,
      "rouge_s*_recall": 0.0,
      "rouge_s*_recall_cb": 0.0,
      "rouge_s*_recall_ce": 0.0,
      "rouge_s*_precision": 0.0,
      "rouge_s*_precision_cb": 0.0,
      "rouge_s*_precision_ce": 0.0,
      "rouge_s*_f_score": 0.0,
      "rouge_s*_f_score_cb": 0.0,
      "rouge_s*_f_score_ce": 0.0,
      "rouge_su*_recall": 0.01316,
      "rouge_su*_recall_cb": 0.01316,
      "rouge_su*_recall_ce": 0.01316,
      "rouge_su*_precision": 0.00617,
      "rouge_su*_precision_cb": 0.00617,
      "rouge_su*_precision_ce": 0.00617,
      "rouge_su*_f_score": 0.0084,
      "rouge_su*_f_score_cb": 0.0084,
      "rouge_su*_f_score_ce": 0.0084
    }
  },
  {
    "id": 36,
    "filename": "NumpyEval_36.txt",
    "dataset_comment": "Given a NumPy array, retrieve the values at the index positions 1 and 4.",
    "generated_comment": "I have a NumPy array that looks like this:Extract specific elements from the array using a list of indices.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.35714,
      "rouge_1_recall_cb": 0.35714,
      "rouge_1_recall_ce": 0.35714,
      "rouge_1_precision": 0.25,
      "rouge_1_precision_cb": 0.25,
      "rouge_1_precision_ce": 0.25,
      "rouge_1_f_score": 0.29412,
      "rouge_1_f_score_cb": 0.29412,
      "rouge_1_f_score_ce": 0.29412,
      "rouge_2_recall": 0.15385,
      "rouge_2_recall_cb": 0.15385,
      "rouge_2_recall_ce": 0.15385,
      "rouge_2_precision": 0.10526,
      "rouge_2_precision_cb": 0.10526,
      "rouge_2_precision_ce": 0.10526,
      "rouge_2_f_score": 0.125,
      "rouge_2_f_score_cb": 0.125,
      "rouge_2_f_score_ce": 0.125,
      "rouge_3_recall": 0.08333,
      "rouge_3_recall_cb": 0.08333,
      "rouge_3_recall_ce": 0.08333,
      "rouge_3_precision": 0.05556,
      "rouge_3_precision_cb": 0.05556,
      "rouge_3_precision_ce": 0.05556,
      "rouge_3_f_score": 0.06667,
      "rouge_3_f_score_cb": 0.06667,
      "rouge_3_f_score_ce": 0.06667,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.35714,
      "rouge_l_recall_cb": 0.35714,
      "rouge_l_recall_ce": 0.35714,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.29412,
      "rouge_l_f_score_cb": 0.29412,
      "rouge_l_f_score_ce": 0.29412,
      "rouge_w_1.2_recall": 0.18067,
      "rouge_w_1.2_recall_cb": 0.18067,
      "rouge_w_1.2_recall_ce": 0.18067,
      "rouge_w_1.2_precision": 0.2144,
      "rouge_w_1.2_precision_cb": 0.2144,
      "rouge_w_1.2_precision_ce": 0.2144,
      "rouge_w_1.2_f_score": 0.1961,
      "rouge_w_1.2_f_score_cb": 0.1961,
      "rouge_w_1.2_f_score_ce": 0.1961,
      "rouge_s*_recall": 0.10989,
      "rouge_s*_recall_cb": 0.10989,
      "rouge_s*_recall_ce": 0.10989,
      "rouge_s*_precision": 0.05263,
      "rouge_s*_precision_cb": 0.05263,
      "rouge_s*_precision_ce": 0.05263,
      "rouge_s*_f_score": 0.07117,
      "rouge_s*_f_score_cb": 0.07117,
      "rouge_s*_f_score_ce": 0.07117,
      "rouge_su*_recall": 0.13462,
      "rouge_su*_recall_cb": 0.13462,
      "rouge_su*_recall_ce": 0.13462,
      "rouge_su*_precision": 0.06699,
      "rouge_su*_precision_cb": 0.06699,
      "rouge_su*_precision_ce": 0.06699,
      "rouge_su*_f_score": 0.08946,
      "rouge_su*_f_score_cb": 0.08946,
      "rouge_su*_f_score_ce": 0.08946
    }
  },
  {
    "id": 37,
    "filename": "NumpyEval_37.txt",
    "dataset_comment": "Find the most frequent number in a NumPy array and return it.",
    "generated_comment": "Find the most frequent number in the array using numpy's bincount and argmax functions.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.75,
      "rouge_1_recall_cb": 0.75,
      "rouge_1_recall_ce": 0.75,
      "rouge_1_precision": 0.6,
      "rouge_1_precision_cb": 0.6,
      "rouge_1_precision_ce": 0.6,
      "rouge_1_f_score": 0.66667,
      "rouge_1_f_score_cb": 0.66667,
      "rouge_1_f_score_ce": 0.66667,
      "rouge_2_recall": 0.45455,
      "rouge_2_recall_cb": 0.45455,
      "rouge_2_recall_ce": 0.45455,
      "rouge_2_precision": 0.35714,
      "rouge_2_precision_cb": 0.35714,
      "rouge_2_precision_ce": 0.35714,
      "rouge_2_f_score": 0.4,
      "rouge_2_f_score_cb": 0.4,
      "rouge_2_f_score_ce": 0.4,
      "rouge_3_recall": 0.4,
      "rouge_3_recall_cb": 0.4,
      "rouge_3_recall_ce": 0.4,
      "rouge_3_precision": 0.30769,
      "rouge_3_precision_cb": 0.30769,
      "rouge_3_precision_ce": 0.30769,
      "rouge_3_f_score": 0.34782,
      "rouge_3_f_score_cb": 0.34782,
      "rouge_3_f_score_ce": 0.34782,
      "rouge_4_recall": 0.33333,
      "rouge_4_recall_cb": 0.33333,
      "rouge_4_recall_ce": 0.33333,
      "rouge_4_precision": 0.25,
      "rouge_4_precision_cb": 0.25,
      "rouge_4_precision_ce": 0.25,
      "rouge_4_f_score": 0.28571,
      "rouge_4_f_score_cb": 0.28571,
      "rouge_4_f_score_ce": 0.28571,
      "rouge_l_recall": 0.66667,
      "rouge_l_recall_cb": 0.66667,
      "rouge_l_recall_ce": 0.66667,
      "rouge_l_precision": 0.53333,
      "rouge_l_precision_cb": 0.53333,
      "rouge_l_precision_ce": 0.53333,
      "rouge_l_f_score": 0.59259,
      "rouge_l_f_score_cb": 0.59259,
      "rouge_l_f_score_ce": 0.59259,
      "rouge_w_1.2_recall": 0.36218,
      "rouge_w_1.2_recall_cb": 0.36218,
      "rouge_w_1.2_recall_ce": 0.36218,
      "rouge_w_1.2_precision": 0.47626,
      "rouge_w_1.2_precision_cb": 0.47626,
      "rouge_w_1.2_precision_ce": 0.47626,
      "rouge_w_1.2_f_score": 0.41146,
      "rouge_w_1.2_f_score_cb": 0.41146,
      "rouge_w_1.2_f_score_ce": 0.41146,
      "rouge_s*_recall": 0.5303,
      "rouge_s*_recall_cb": 0.5303,
      "rouge_s*_recall_ce": 0.5303,
      "rouge_s*_precision": 0.33333,
      "rouge_s*_precision_cb": 0.33333,
      "rouge_s*_precision_ce": 0.33333,
      "rouge_s*_f_score": 0.40935,
      "rouge_s*_f_score_cb": 0.40935,
      "rouge_s*_f_score_ce": 0.40935,
      "rouge_su*_recall": 0.57143,
      "rouge_su*_recall_cb": 0.57143,
      "rouge_su*_recall_ce": 0.57143,
      "rouge_su*_precision": 0.36975,
      "rouge_su*_precision_cb": 0.36975,
      "rouge_su*_precision_ce": 0.36975,
      "rouge_su*_f_score": 0.44898,
      "rouge_su*_f_score_cb": 0.44898,
      "rouge_su*_f_score_ce": 0.44898
    }
  },
  {
    "id": 38,
    "filename": "NumpyEval_38.txt",
    "dataset_comment": "Given a list containing numpy arrays L=[a,b,c] where a, b, and c are numpy arrays with sizes N_a in T, N_b in T, and N_c in T, row-wise concatenate a, b, and c to obtain a numpy array with shape (N_a+N_b+N_c, T) in a pythonic way.",
    "generated_comment": "Concatenate a list of numpy arrays along the 0th axis (vertically) to form a single array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.13793,
      "rouge_1_recall_cb": 0.13793,
      "rouge_1_recall_ce": 0.13793,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.21621,
      "rouge_1_f_score_cb": 0.21621,
      "rouge_1_f_score_ce": 0.21621,
      "rouge_2_recall": 0.05263,
      "rouge_2_recall_cb": 0.05263,
      "rouge_2_recall_ce": 0.05263,
      "rouge_2_precision": 0.2,
      "rouge_2_precision_cb": 0.2,
      "rouge_2_precision_ce": 0.2,
      "rouge_2_f_score": 0.08333,
      "rouge_2_f_score_cb": 0.08333,
      "rouge_2_f_score_ce": 0.08333,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.12069,
      "rouge_l_recall_cb": 0.12069,
      "rouge_l_recall_ce": 0.12069,
      "rouge_l_precision": 0.4375,
      "rouge_l_precision_cb": 0.4375,
      "rouge_l_precision_ce": 0.4375,
      "rouge_l_f_score": 0.18919,
      "rouge_l_f_score_cb": 0.18919,
      "rouge_l_f_score_ce": 0.18919,
      "rouge_w_1.2_recall": 0.04146,
      "rouge_w_1.2_recall_cb": 0.04146,
      "rouge_w_1.2_recall_ce": 0.04146,
      "rouge_w_1.2_precision": 0.33857,
      "rouge_w_1.2_precision_cb": 0.33857,
      "rouge_w_1.2_precision_ce": 0.33857,
      "rouge_w_1.2_f_score": 0.07387,
      "rouge_w_1.2_f_score_cb": 0.07387,
      "rouge_w_1.2_f_score_ce": 0.07387,
      "rouge_s*_recall": 0.01573,
      "rouge_s*_recall_cb": 0.01573,
      "rouge_s*_recall_ce": 0.01573,
      "rouge_s*_precision": 0.21667,
      "rouge_s*_precision_cb": 0.21667,
      "rouge_s*_precision_ce": 0.21667,
      "rouge_s*_f_score": 0.02933,
      "rouge_s*_f_score_cb": 0.02933,
      "rouge_s*_f_score_ce": 0.02933,
      "rouge_su*_recall": 0.0193,
      "rouge_su*_recall_cb": 0.0193,
      "rouge_su*_recall_ce": 0.0193,
      "rouge_su*_precision": 0.24444,
      "rouge_su*_precision_cb": 0.24444,
      "rouge_su*_precision_ce": 0.24444,
      "rouge_su*_f_score": 0.03578,
      "rouge_su*_f_score_cb": 0.03578,
      "rouge_su*_f_score_ce": 0.03578
    }
  },
  {
    "id": 39,
    "filename": "NumpyEval_39.txt",
    "dataset_comment": "Select the row where the first column value is 0 and the second column value is 1, possibly using np.where() for better efficiency.",
    "generated_comment": "Select rows where the first column is 0 and the second column is 1 using numpy's boolean indexing.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.625,
      "rouge_1_recall_cb": 0.625,
      "rouge_1_recall_ce": 0.625,
      "rouge_1_precision": 0.78947,
      "rouge_1_precision_cb": 0.78947,
      "rouge_1_precision_ce": 0.78947,
      "rouge_1_f_score": 0.69767,
      "rouge_1_f_score_cb": 0.69767,
      "rouge_1_f_score_ce": 0.69767,
      "rouge_2_recall": 0.43478,
      "rouge_2_recall_cb": 0.43478,
      "rouge_2_recall_ce": 0.43478,
      "rouge_2_precision": 0.55556,
      "rouge_2_precision_cb": 0.55556,
      "rouge_2_precision_ce": 0.55556,
      "rouge_2_f_score": 0.4878,
      "rouge_2_f_score_cb": 0.4878,
      "rouge_2_f_score_ce": 0.4878,
      "rouge_3_recall": 0.31818,
      "rouge_3_recall_cb": 0.31818,
      "rouge_3_recall_ce": 0.31818,
      "rouge_3_precision": 0.41176,
      "rouge_3_precision_cb": 0.41176,
      "rouge_3_precision_ce": 0.41176,
      "rouge_3_f_score": 0.35897,
      "rouge_3_f_score_cb": 0.35897,
      "rouge_3_f_score_ce": 0.35897,
      "rouge_4_recall": 0.2381,
      "rouge_4_recall_cb": 0.2381,
      "rouge_4_recall_ce": 0.2381,
      "rouge_4_precision": 0.3125,
      "rouge_4_precision_cb": 0.3125,
      "rouge_4_precision_ce": 0.3125,
      "rouge_4_f_score": 0.27027,
      "rouge_4_f_score_cb": 0.27027,
      "rouge_4_f_score_ce": 0.27027,
      "rouge_l_recall": 0.625,
      "rouge_l_recall_cb": 0.625,
      "rouge_l_recall_ce": 0.625,
      "rouge_l_precision": 0.78947,
      "rouge_l_precision_cb": 0.78947,
      "rouge_l_precision_ce": 0.78947,
      "rouge_l_f_score": 0.69767,
      "rouge_l_f_score_cb": 0.69767,
      "rouge_l_f_score_ce": 0.69767,
      "rouge_w_1.2_recall": 0.26544,
      "rouge_w_1.2_recall_cb": 0.26544,
      "rouge_w_1.2_recall_ce": 0.26544,
      "rouge_w_1.2_precision": 0.6331,
      "rouge_w_1.2_precision_cb": 0.6331,
      "rouge_w_1.2_precision_ce": 0.6331,
      "rouge_w_1.2_f_score": 0.37405,
      "rouge_w_1.2_f_score_cb": 0.37405,
      "rouge_w_1.2_f_score_ce": 0.37405,
      "rouge_s*_recall": 0.38043,
      "rouge_s*_recall_cb": 0.38043,
      "rouge_s*_recall_ce": 0.38043,
      "rouge_s*_precision": 0.61404,
      "rouge_s*_precision_cb": 0.61404,
      "rouge_s*_precision_ce": 0.61404,
      "rouge_s*_f_score": 0.4698,
      "rouge_s*_f_score_cb": 0.4698,
      "rouge_s*_f_score_ce": 0.4698,
      "rouge_su*_recall": 0.40134,
      "rouge_su*_recall_cb": 0.40134,
      "rouge_su*_recall_ce": 0.40134,
      "rouge_su*_precision": 0.63492,
      "rouge_su*_precision_cb": 0.63492,
      "rouge_su*_precision_ce": 0.63492,
      "rouge_su*_f_score": 0.4918,
      "rouge_su*_f_score_cb": 0.4918,
      "rouge_su*_f_score_ce": 0.4918
    }
  },
  {
    "id": 40,
    "filename": "NumpyEval_40.txt",
    "dataset_comment": "Interweave two sequences a and b efficiently, assuming that length(a) == length(b).",
    "generated_comment": "Interweave two arrays by alternating elements from each array and store the result in a new array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.30769,
      "rouge_1_recall_cb": 0.30769,
      "rouge_1_recall_ce": 0.30769,
      "rouge_1_precision": 0.23529,
      "rouge_1_precision_cb": 0.23529,
      "rouge_1_precision_ce": 0.23529,
      "rouge_1_f_score": 0.26666,
      "rouge_1_f_score_cb": 0.26666,
      "rouge_1_f_score_ce": 0.26666,
      "rouge_2_recall": 0.08333,
      "rouge_2_recall_cb": 0.08333,
      "rouge_2_recall_ce": 0.08333,
      "rouge_2_precision": 0.0625,
      "rouge_2_precision_cb": 0.0625,
      "rouge_2_precision_ce": 0.0625,
      "rouge_2_f_score": 0.07143,
      "rouge_2_f_score_cb": 0.07143,
      "rouge_2_f_score_ce": 0.07143,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.30769,
      "rouge_l_recall_cb": 0.30769,
      "rouge_l_recall_ce": 0.30769,
      "rouge_l_precision": 0.23529,
      "rouge_l_precision_cb": 0.23529,
      "rouge_l_precision_ce": 0.23529,
      "rouge_l_f_score": 0.26666,
      "rouge_l_f_score_cb": 0.26666,
      "rouge_l_f_score_ce": 0.26666,
      "rouge_w_1.2_recall": 0.15522,
      "rouge_w_1.2_recall_cb": 0.15522,
      "rouge_w_1.2_recall_ce": 0.15522,
      "rouge_w_1.2_precision": 0.19825,
      "rouge_w_1.2_precision_cb": 0.19825,
      "rouge_w_1.2_precision_ce": 0.19825,
      "rouge_w_1.2_f_score": 0.17412,
      "rouge_w_1.2_f_score_cb": 0.17412,
      "rouge_w_1.2_f_score_ce": 0.17412,
      "rouge_s*_recall": 0.07692,
      "rouge_s*_recall_cb": 0.07692,
      "rouge_s*_recall_ce": 0.07692,
      "rouge_s*_precision": 0.04412,
      "rouge_s*_precision_cb": 0.04412,
      "rouge_s*_precision_ce": 0.04412,
      "rouge_s*_f_score": 0.05608,
      "rouge_s*_f_score_cb": 0.05608,
      "rouge_s*_f_score_ce": 0.05608,
      "rouge_su*_recall": 0.11111,
      "rouge_su*_recall_cb": 0.11111,
      "rouge_su*_recall_ce": 0.11111,
      "rouge_su*_precision": 0.06579,
      "rouge_su*_precision_cb": 0.06579,
      "rouge_su*_precision_ce": 0.06579,
      "rouge_su*_f_score": 0.08264,
      "rouge_su*_f_score_cb": 0.08264,
      "rouge_su*_f_score_ce": 0.08264
    }
  },
  {
    "id": 41,
    "filename": "NumpyEval_41.txt",
    "dataset_comment": "Copy numpy array 'a' into the specified part of another array 'b' in the range [1:4, 1:4].",
    "generated_comment": "Requirements for the code: Reshape a 1D array into a 3x3 matrix and embed it into a larger 5x5 matrix, centered at the position (1, 1) to (3, 3).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.36842,
      "rouge_1_recall_cb": 0.36842,
      "rouge_1_recall_ce": 0.36842,
      "rouge_1_precision": 0.24138,
      "rouge_1_precision_cb": 0.24138,
      "rouge_1_precision_ce": 0.24138,
      "rouge_1_f_score": 0.29167,
      "rouge_1_f_score_cb": 0.29167,
      "rouge_1_f_score_ce": 0.29167,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.31579,
      "rouge_l_recall_cb": 0.31579,
      "rouge_l_recall_ce": 0.31579,
      "rouge_l_precision": 0.2069,
      "rouge_l_precision_cb": 0.2069,
      "rouge_l_precision_ce": 0.2069,
      "rouge_l_f_score": 0.25,
      "rouge_l_f_score_cb": 0.25,
      "rouge_l_f_score_ce": 0.25,
      "rouge_w_1.2_recall": 0.1527,
      "rouge_w_1.2_recall_cb": 0.1527,
      "rouge_w_1.2_recall_ce": 0.1527,
      "rouge_w_1.2_precision": 0.18028,
      "rouge_w_1.2_precision_cb": 0.18028,
      "rouge_w_1.2_precision_ce": 0.18028,
      "rouge_w_1.2_f_score": 0.16535,
      "rouge_w_1.2_f_score_cb": 0.16535,
      "rouge_w_1.2_f_score_ce": 0.16535,
      "rouge_s*_recall": 0.12865,
      "rouge_s*_recall_cb": 0.12865,
      "rouge_s*_recall_ce": 0.12865,
      "rouge_s*_precision": 0.05419,
      "rouge_s*_precision_cb": 0.05419,
      "rouge_s*_precision_ce": 0.05419,
      "rouge_s*_f_score": 0.07626,
      "rouge_s*_f_score_cb": 0.07626,
      "rouge_s*_f_score_ce": 0.07626,
      "rouge_su*_recall": 0.15344,
      "rouge_su*_recall_cb": 0.15344,
      "rouge_su*_recall_ce": 0.15344,
      "rouge_su*_precision": 0.06682,
      "rouge_su*_precision_cb": 0.06682,
      "rouge_su*_precision_ce": 0.06682,
      "rouge_su*_f_score": 0.0931,
      "rouge_su*_f_score_cb": 0.0931,
      "rouge_su*_f_score_ce": 0.0931
    }
  },
  {
    "id": 42,
    "filename": "NumpyEval_42.txt",
    "dataset_comment": "Find unique rows in a numpy array.",
    "generated_comment": "Find the unique rows in the 2D array 'a' along the specified axis (axis=0) using np.unique.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.85714,
      "rouge_1_recall_cb": 0.85714,
      "rouge_1_recall_ce": 0.85714,
      "rouge_1_precision": 0.33333,
      "rouge_1_precision_cb": 0.33333,
      "rouge_1_precision_ce": 0.33333,
      "rouge_1_f_score": 0.48,
      "rouge_1_f_score_cb": 0.48,
      "rouge_1_f_score_ce": 0.48,
      "rouge_2_recall": 0.33333,
      "rouge_2_recall_cb": 0.33333,
      "rouge_2_recall_ce": 0.33333,
      "rouge_2_precision": 0.11765,
      "rouge_2_precision_cb": 0.11765,
      "rouge_2_precision_ce": 0.11765,
      "rouge_2_f_score": 0.17392,
      "rouge_2_f_score_cb": 0.17392,
      "rouge_2_f_score_ce": 0.17392,
      "rouge_3_recall": 0.2,
      "rouge_3_recall_cb": 0.2,
      "rouge_3_recall_ce": 0.2,
      "rouge_3_precision": 0.0625,
      "rouge_3_precision_cb": 0.0625,
      "rouge_3_precision_ce": 0.0625,
      "rouge_3_f_score": 0.09524,
      "rouge_3_f_score_cb": 0.09524,
      "rouge_3_f_score_ce": 0.09524,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.71429,
      "rouge_l_recall_cb": 0.71429,
      "rouge_l_recall_ce": 0.71429,
      "rouge_l_precision": 0.27778,
      "rouge_l_precision_cb": 0.27778,
      "rouge_l_precision_ce": 0.27778,
      "rouge_l_f_score": 0.4,
      "rouge_l_f_score_cb": 0.4,
      "rouge_l_f_score_ce": 0.4,
      "rouge_w_1.2_recall": 0.48401,
      "rouge_w_1.2_recall_cb": 0.48401,
      "rouge_w_1.2_recall_ce": 0.48401,
      "rouge_w_1.2_precision": 0.27778,
      "rouge_w_1.2_precision_cb": 0.27778,
      "rouge_w_1.2_precision_ce": 0.27778,
      "rouge_w_1.2_f_score": 0.35298,
      "rouge_w_1.2_f_score_cb": 0.35298,
      "rouge_w_1.2_f_score_ce": 0.35298,
      "rouge_s*_recall": 0.66667,
      "rouge_s*_recall_cb": 0.66667,
      "rouge_s*_recall_ce": 0.66667,
      "rouge_s*_precision": 0.0915,
      "rouge_s*_precision_cb": 0.0915,
      "rouge_s*_precision_ce": 0.0915,
      "rouge_s*_f_score": 0.16091,
      "rouge_s*_f_score_cb": 0.16091,
      "rouge_s*_f_score_ce": 0.16091,
      "rouge_su*_recall": 0.7037,
      "rouge_su*_recall_cb": 0.7037,
      "rouge_su*_recall_ce": 0.7037,
      "rouge_su*_precision": 0.11176,
      "rouge_su*_precision_cb": 0.11176,
      "rouge_su*_precision_ce": 0.11176,
      "rouge_su*_f_score": 0.19289,
      "rouge_su*_f_score_cb": 0.19289,
      "rouge_su*_f_score_ce": 0.19289
    }
  },
  {
    "id": 43,
    "filename": "NumpyEval_43.txt",
    "dataset_comment": "Given two simple one-dimensional arrays in NumPy, concatenate them using numpy.concatenate.",
    "generated_comment": "Concatenate two numpy arrays 'a' and 'b' into a single array 'c'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.30769,
      "rouge_1_recall_cb": 0.30769,
      "rouge_1_recall_ce": 0.30769,
      "rouge_1_precision": 0.33333,
      "rouge_1_precision_cb": 0.33333,
      "rouge_1_precision_ce": 0.33333,
      "rouge_1_f_score": 0.32,
      "rouge_1_f_score_cb": 0.32,
      "rouge_1_f_score_ce": 0.32,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.15385,
      "rouge_l_recall_cb": 0.15385,
      "rouge_l_recall_ce": 0.15385,
      "rouge_l_precision": 0.16667,
      "rouge_l_precision_cb": 0.16667,
      "rouge_l_precision_ce": 0.16667,
      "rouge_l_f_score": 0.16,
      "rouge_l_f_score_cb": 0.16,
      "rouge_l_f_score_ce": 0.16,
      "rouge_w_1.2_recall": 0.08206,
      "rouge_w_1.2_recall_cb": 0.08206,
      "rouge_w_1.2_recall_ce": 0.08206,
      "rouge_w_1.2_precision": 0.14848,
      "rouge_w_1.2_precision_cb": 0.14848,
      "rouge_w_1.2_precision_ce": 0.14848,
      "rouge_w_1.2_f_score": 0.1057,
      "rouge_w_1.2_f_score_cb": 0.1057,
      "rouge_w_1.2_f_score_ce": 0.1057,
      "rouge_s*_recall": 0.03846,
      "rouge_s*_recall_cb": 0.03846,
      "rouge_s*_recall_ce": 0.03846,
      "rouge_s*_precision": 0.04545,
      "rouge_s*_precision_cb": 0.04545,
      "rouge_s*_precision_ce": 0.04545,
      "rouge_s*_f_score": 0.04166,
      "rouge_s*_f_score_cb": 0.04166,
      "rouge_s*_f_score_ce": 0.04166,
      "rouge_su*_recall": 0.07778,
      "rouge_su*_recall_cb": 0.07778,
      "rouge_su*_recall_ce": 0.07778,
      "rouge_su*_precision": 0.09091,
      "rouge_su*_precision_cb": 0.09091,
      "rouge_su*_precision_ce": 0.09091,
      "rouge_su*_f_score": 0.08383,
      "rouge_su*_f_score_cb": 0.08383,
      "rouge_su*_f_score_ce": 0.08383
    }
  },
  {
    "id": 44,
    "filename": "NumpyEval_44.txt",
    "dataset_comment": "Multiply a nD array with a 1D array, where len(1D-array) == len(nD array) by converting the array b to a (2, 1) shape array using None or numpy.newaxis in the index tuple.",
    "generated_comment": "Multiply each row of 'a' by the corresponding element in 'b' using broadcasting.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.2,
      "rouge_1_recall_cb": 0.2,
      "rouge_1_recall_ce": 0.2,
      "rouge_1_precision": 0.53846,
      "rouge_1_precision_cb": 0.53846,
      "rouge_1_precision_ce": 0.53846,
      "rouge_1_f_score": 0.29167,
      "rouge_1_f_score_cb": 0.29167,
      "rouge_1_f_score_ce": 0.29167,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.17143,
      "rouge_l_recall_cb": 0.17143,
      "rouge_l_recall_ce": 0.17143,
      "rouge_l_precision": 0.46154,
      "rouge_l_precision_cb": 0.46154,
      "rouge_l_precision_ce": 0.46154,
      "rouge_l_f_score": 0.25,
      "rouge_l_f_score_cb": 0.25,
      "rouge_l_f_score_ce": 0.25,
      "rouge_w_1.2_recall": 0.06246,
      "rouge_w_1.2_recall_cb": 0.06246,
      "rouge_w_1.2_recall_ce": 0.06246,
      "rouge_w_1.2_precision": 0.34239,
      "rouge_w_1.2_precision_cb": 0.34239,
      "rouge_w_1.2_precision_ce": 0.34239,
      "rouge_w_1.2_f_score": 0.10565,
      "rouge_w_1.2_f_score_cb": 0.10565,
      "rouge_w_1.2_f_score_ce": 0.10565,
      "rouge_s*_recall": 0.03193,
      "rouge_s*_recall_cb": 0.03193,
      "rouge_s*_recall_ce": 0.03193,
      "rouge_s*_precision": 0.24359,
      "rouge_s*_precision_cb": 0.24359,
      "rouge_s*_precision_ce": 0.24359,
      "rouge_s*_f_score": 0.05646,
      "rouge_s*_f_score_cb": 0.05646,
      "rouge_s*_f_score_ce": 0.05646,
      "rouge_su*_recall": 0.04134,
      "rouge_su*_recall_cb": 0.04134,
      "rouge_su*_recall_ce": 0.04134,
      "rouge_su*_precision": 0.28889,
      "rouge_su*_precision_cb": 0.28889,
      "rouge_su*_precision_ce": 0.28889,
      "rouge_su*_f_score": 0.07233,
      "rouge_su*_f_score_cb": 0.07233,
      "rouge_su*_f_score_ce": 0.07233
    }
  },
  {
    "id": 45,
    "filename": "NumpyEval_45.txt",
    "dataset_comment": "Add items into a numpy array by using the column stack operation to add one element to each row.",
    "generated_comment": "Combine the 2D array 'a' with the 1D array 'b' by stacking 'b' as an additional column to 'a'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.36842,
      "rouge_1_recall_cb": 0.36842,
      "rouge_1_recall_ce": 0.36842,
      "rouge_1_precision": 0.36842,
      "rouge_1_precision_cb": 0.36842,
      "rouge_1_precision_ce": 0.36842,
      "rouge_1_f_score": 0.36842,
      "rouge_1_f_score_cb": 0.36842,
      "rouge_1_f_score_ce": 0.36842,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.26316,
      "rouge_l_recall_cb": 0.26316,
      "rouge_l_recall_ce": 0.26316,
      "rouge_l_precision": 0.26316,
      "rouge_l_precision_cb": 0.26316,
      "rouge_l_precision_ce": 0.26316,
      "rouge_l_f_score": 0.26316,
      "rouge_l_f_score_cb": 0.26316,
      "rouge_l_f_score_ce": 0.26316,
      "rouge_w_1.2_recall": 0.11719,
      "rouge_w_1.2_recall_cb": 0.11719,
      "rouge_w_1.2_recall_ce": 0.11719,
      "rouge_w_1.2_precision": 0.21117,
      "rouge_w_1.2_precision_cb": 0.21117,
      "rouge_w_1.2_precision_ce": 0.21117,
      "rouge_w_1.2_f_score": 0.15073,
      "rouge_w_1.2_f_score_cb": 0.15073,
      "rouge_w_1.2_f_score_ce": 0.15073,
      "rouge_s*_recall": 0.12281,
      "rouge_s*_recall_cb": 0.12281,
      "rouge_s*_recall_ce": 0.12281,
      "rouge_s*_precision": 0.12281,
      "rouge_s*_precision_cb": 0.12281,
      "rouge_s*_precision_ce": 0.12281,
      "rouge_s*_f_score": 0.12281,
      "rouge_s*_f_score_cb": 0.12281,
      "rouge_s*_f_score_ce": 0.12281,
      "rouge_su*_recall": 0.14815,
      "rouge_su*_recall_cb": 0.14815,
      "rouge_su*_recall_ce": 0.14815,
      "rouge_su*_precision": 0.14815,
      "rouge_su*_precision_cb": 0.14815,
      "rouge_su*_precision_ce": 0.14815,
      "rouge_su*_f_score": 0.14815,
      "rouge_su*_f_score_cb": 0.14815,
      "rouge_su*_f_score_ce": 0.14815
    }
  },
  {
    "id": 46,
    "filename": "NumpyEval_46.txt",
    "dataset_comment": "Generate a list of one-dimensional numpy arrays in a loop and later convert this list to a 2D numpy array.  Preallocate a 2D numpy array if the number of items is known ahead of time; otherwise, collect them in a list. Evaluate if there is a more performance-efficient method to collect sequential numerical data (numpy arrays)  other than using a list followed by conversion to a numpy array.  Investigate the availability of an \"expandable\" matrix data structure in a well-tested module.",
    "generated_comment": "Create a list of arrays where each array contains the same value repeated twice, ranging from 0 to 4.Stack the list of arrays into a single 2D numpy array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.17857,
      "rouge_1_recall_cb": 0.17857,
      "rouge_1_recall_ce": 0.17857,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.26316,
      "rouge_1_f_score_cb": 0.26316,
      "rouge_1_f_score_ce": 0.26316,
      "rouge_2_recall": 0.04819,
      "rouge_2_recall_cb": 0.04819,
      "rouge_2_recall_ce": 0.04819,
      "rouge_2_precision": 0.13793,
      "rouge_2_precision_cb": 0.13793,
      "rouge_2_precision_ce": 0.13793,
      "rouge_2_f_score": 0.07143,
      "rouge_2_f_score_cb": 0.07143,
      "rouge_2_f_score_ce": 0.07143,
      "rouge_3_recall": 0.02439,
      "rouge_3_recall_cb": 0.02439,
      "rouge_3_recall_ce": 0.02439,
      "rouge_3_precision": 0.07143,
      "rouge_3_precision_cb": 0.07143,
      "rouge_3_precision_ce": 0.07143,
      "rouge_3_f_score": 0.03636,
      "rouge_3_f_score_cb": 0.03636,
      "rouge_3_f_score_ce": 0.03636,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.13095,
      "rouge_l_recall_cb": 0.13095,
      "rouge_l_recall_ce": 0.13095,
      "rouge_l_precision": 0.36667,
      "rouge_l_precision_cb": 0.36667,
      "rouge_l_precision_ce": 0.36667,
      "rouge_l_f_score": 0.19298,
      "rouge_l_f_score_cb": 0.19298,
      "rouge_l_f_score_ce": 0.19298,
      "rouge_w_1.2_recall": 0.03901,
      "rouge_w_1.2_recall_cb": 0.03901,
      "rouge_w_1.2_recall_ce": 0.03901,
      "rouge_w_1.2_precision": 0.265,
      "rouge_w_1.2_precision_cb": 0.265,
      "rouge_w_1.2_precision_ce": 0.265,
      "rouge_w_1.2_f_score": 0.06801,
      "rouge_w_1.2_f_score_cb": 0.06801,
      "rouge_w_1.2_f_score_ce": 0.06801,
      "rouge_s*_recall": 0.02897,
      "rouge_s*_recall_cb": 0.02897,
      "rouge_s*_recall_ce": 0.02897,
      "rouge_s*_precision": 0.23218,
      "rouge_s*_precision_cb": 0.23218,
      "rouge_s*_precision_ce": 0.23218,
      "rouge_s*_f_score": 0.05151,
      "rouge_s*_f_score_cb": 0.05151,
      "rouge_s*_f_score_ce": 0.05151,
      "rouge_su*_recall": 0.03222,
      "rouge_su*_recall_cb": 0.03222,
      "rouge_su*_recall_ce": 0.03222,
      "rouge_su*_precision": 0.24784,
      "rouge_su*_precision_cb": 0.24784,
      "rouge_su*_precision_ce": 0.24784,
      "rouge_su*_f_score": 0.05703,
      "rouge_su*_f_score_cb": 0.05703,
      "rouge_su*_f_score_ce": 0.05703
    }
  },
  {
    "id": 47,
    "filename": "NumpyEval_47.txt",
    "dataset_comment": "Perform a symmetric difference between two numpy arrays using setxor1d directly without converting the arrays to sets.",
    "generated_comment": "Find the symmetric difference between two arrays, i.e., elements that are in either of the arrays but not in both.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.41176,
      "rouge_1_recall_cb": 0.41176,
      "rouge_1_recall_ce": 0.41176,
      "rouge_1_precision": 0.33333,
      "rouge_1_precision_cb": 0.33333,
      "rouge_1_precision_ce": 0.33333,
      "rouge_1_f_score": 0.36842,
      "rouge_1_f_score_cb": 0.36842,
      "rouge_1_f_score_ce": 0.36842,
      "rouge_2_recall": 0.25,
      "rouge_2_recall_cb": 0.25,
      "rouge_2_recall_ce": 0.25,
      "rouge_2_precision": 0.2,
      "rouge_2_precision_cb": 0.2,
      "rouge_2_precision_ce": 0.2,
      "rouge_2_f_score": 0.22222,
      "rouge_2_f_score_cb": 0.22222,
      "rouge_2_f_score_ce": 0.22222,
      "rouge_3_recall": 0.13333,
      "rouge_3_recall_cb": 0.13333,
      "rouge_3_recall_ce": 0.13333,
      "rouge_3_precision": 0.10526,
      "rouge_3_precision_cb": 0.10526,
      "rouge_3_precision_ce": 0.10526,
      "rouge_3_f_score": 0.11764,
      "rouge_3_f_score_cb": 0.11764,
      "rouge_3_f_score_ce": 0.11764,
      "rouge_4_recall": 0.07143,
      "rouge_4_recall_cb": 0.07143,
      "rouge_4_recall_ce": 0.07143,
      "rouge_4_precision": 0.05556,
      "rouge_4_precision_cb": 0.05556,
      "rouge_4_precision_ce": 0.05556,
      "rouge_4_f_score": 0.0625,
      "rouge_4_f_score_cb": 0.0625,
      "rouge_4_f_score_ce": 0.0625,
      "rouge_l_recall": 0.41176,
      "rouge_l_recall_cb": 0.41176,
      "rouge_l_recall_ce": 0.41176,
      "rouge_l_precision": 0.33333,
      "rouge_l_precision_cb": 0.33333,
      "rouge_l_precision_ce": 0.33333,
      "rouge_l_f_score": 0.36842,
      "rouge_l_f_score_cb": 0.36842,
      "rouge_l_f_score_ce": 0.36842,
      "rouge_w_1.2_recall": 0.20007,
      "rouge_w_1.2_recall_cb": 0.20007,
      "rouge_w_1.2_recall_ce": 0.20007,
      "rouge_w_1.2_precision": 0.28543,
      "rouge_w_1.2_precision_cb": 0.28543,
      "rouge_w_1.2_precision_ce": 0.28543,
      "rouge_w_1.2_f_score": 0.23525,
      "rouge_w_1.2_f_score_cb": 0.23525,
      "rouge_w_1.2_f_score_ce": 0.23525,
      "rouge_s*_recall": 0.15441,
      "rouge_s*_recall_cb": 0.15441,
      "rouge_s*_recall_ce": 0.15441,
      "rouge_s*_precision": 0.1,
      "rouge_s*_precision_cb": 0.1,
      "rouge_s*_precision_ce": 0.1,
      "rouge_s*_f_score": 0.12139,
      "rouge_s*_f_score_cb": 0.12139,
      "rouge_s*_f_score_ce": 0.12139,
      "rouge_su*_recall": 0.18421,
      "rouge_su*_recall_cb": 0.18421,
      "rouge_su*_recall_ce": 0.18421,
      "rouge_su*_precision": 0.12174,
      "rouge_su*_precision_cb": 0.12174,
      "rouge_su*_precision_ce": 0.12174,
      "rouge_su*_f_score": 0.1466,
      "rouge_su*_f_score_cb": 0.1466,
      "rouge_su*_f_score_ce": 0.1466
    }
  },
  {
    "id": 48,
    "filename": "NumpyEval_48.txt",
    "dataset_comment": "Count the number of true elements in a NumPy bool array and return the count value.",
    "generated_comment": "Count the number of True values in the array by summing the array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5625,
      "rouge_1_recall_cb": 0.5625,
      "rouge_1_recall_ce": 0.5625,
      "rouge_1_precision": 0.69231,
      "rouge_1_precision_cb": 0.69231,
      "rouge_1_precision_ce": 0.69231,
      "rouge_1_f_score": 0.62069,
      "rouge_1_f_score_cb": 0.62069,
      "rouge_1_f_score_ce": 0.62069,
      "rouge_2_recall": 0.26667,
      "rouge_2_recall_cb": 0.26667,
      "rouge_2_recall_ce": 0.26667,
      "rouge_2_precision": 0.33333,
      "rouge_2_precision_cb": 0.33333,
      "rouge_2_precision_ce": 0.33333,
      "rouge_2_f_score": 0.2963,
      "rouge_2_f_score_cb": 0.2963,
      "rouge_2_f_score_ce": 0.2963,
      "rouge_3_recall": 0.21429,
      "rouge_3_recall_cb": 0.21429,
      "rouge_3_recall_ce": 0.21429,
      "rouge_3_precision": 0.27273,
      "rouge_3_precision_cb": 0.27273,
      "rouge_3_precision_ce": 0.27273,
      "rouge_3_f_score": 0.24,
      "rouge_3_f_score_cb": 0.24,
      "rouge_3_f_score_ce": 0.24,
      "rouge_4_recall": 0.15385,
      "rouge_4_recall_cb": 0.15385,
      "rouge_4_recall_ce": 0.15385,
      "rouge_4_precision": 0.2,
      "rouge_4_precision_cb": 0.2,
      "rouge_4_precision_ce": 0.2,
      "rouge_4_f_score": 0.17392,
      "rouge_4_f_score_cb": 0.17392,
      "rouge_4_f_score_ce": 0.17392,
      "rouge_l_recall": 0.5,
      "rouge_l_recall_cb": 0.5,
      "rouge_l_recall_ce": 0.5,
      "rouge_l_precision": 0.61538,
      "rouge_l_precision_cb": 0.61538,
      "rouge_l_precision_ce": 0.61538,
      "rouge_l_f_score": 0.55172,
      "rouge_l_f_score_cb": 0.55172,
      "rouge_l_f_score_ce": 0.55172,
      "rouge_w_1.2_recall": 0.24249,
      "rouge_w_1.2_recall_cb": 0.24249,
      "rouge_w_1.2_recall_ce": 0.24249,
      "rouge_w_1.2_precision": 0.51964,
      "rouge_w_1.2_precision_cb": 0.51964,
      "rouge_w_1.2_precision_ce": 0.51964,
      "rouge_w_1.2_f_score": 0.33067,
      "rouge_w_1.2_f_score_cb": 0.33067,
      "rouge_w_1.2_f_score_ce": 0.33067,
      "rouge_s*_recall": 0.275,
      "rouge_s*_recall_cb": 0.275,
      "rouge_s*_recall_ce": 0.275,
      "rouge_s*_precision": 0.42308,
      "rouge_s*_precision_cb": 0.42308,
      "rouge_s*_precision_ce": 0.42308,
      "rouge_s*_f_score": 0.33333,
      "rouge_s*_f_score_cb": 0.33333,
      "rouge_s*_f_score_ce": 0.33333,
      "rouge_su*_recall": 0.3037,
      "rouge_su*_recall_cb": 0.3037,
      "rouge_su*_recall_ce": 0.3037,
      "rouge_su*_precision": 0.45556,
      "rouge_su*_precision_cb": 0.45556,
      "rouge_su*_precision_ce": 0.45556,
      "rouge_su*_f_score": 0.36444,
      "rouge_su*_f_score_cb": 0.36444,
      "rouge_su*_f_score_ce": 0.36444
    }
  },
  {
    "id": 49,
    "filename": "NumpyEval_49.txt",
    "dataset_comment": "Add a new row to an empty numpy array given two input arrays and return the new array.   Example: Input: np.array([1,2,3]) and np.array([4,5,6]) -> Output: np.array([[1,2,3],[4,5,6]])",
    "generated_comment": "Create a new empty array and append two input arrays to it using np.vstack and np.hstack.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.3,
      "rouge_1_recall_cb": 0.3,
      "rouge_1_recall_ce": 0.3,
      "rouge_1_precision": 0.66667,
      "rouge_1_precision_cb": 0.66667,
      "rouge_1_precision_ce": 0.66667,
      "rouge_1_f_score": 0.41379,
      "rouge_1_f_score_cb": 0.41379,
      "rouge_1_f_score_ce": 0.41379,
      "rouge_2_recall": 0.12821,
      "rouge_2_recall_cb": 0.12821,
      "rouge_2_recall_ce": 0.12821,
      "rouge_2_precision": 0.29412,
      "rouge_2_precision_cb": 0.29412,
      "rouge_2_precision_ce": 0.29412,
      "rouge_2_f_score": 0.17858,
      "rouge_2_f_score_cb": 0.17858,
      "rouge_2_f_score_ce": 0.17858,
      "rouge_3_recall": 0.02632,
      "rouge_3_recall_cb": 0.02632,
      "rouge_3_recall_ce": 0.02632,
      "rouge_3_precision": 0.0625,
      "rouge_3_precision_cb": 0.0625,
      "rouge_3_precision_ce": 0.0625,
      "rouge_3_f_score": 0.03704,
      "rouge_3_f_score_cb": 0.03704,
      "rouge_3_f_score_ce": 0.03704,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.25,
      "rouge_l_recall_cb": 0.25,
      "rouge_l_recall_ce": 0.25,
      "rouge_l_precision": 0.55556,
      "rouge_l_precision_cb": 0.55556,
      "rouge_l_precision_ce": 0.55556,
      "rouge_l_f_score": 0.34483,
      "rouge_l_f_score_cb": 0.34483,
      "rouge_l_f_score_ce": 0.34483,
      "rouge_w_1.2_recall": 0.09039,
      "rouge_w_1.2_recall_cb": 0.09039,
      "rouge_w_1.2_recall_ce": 0.09039,
      "rouge_w_1.2_precision": 0.42006,
      "rouge_w_1.2_precision_cb": 0.42006,
      "rouge_w_1.2_precision_ce": 0.42006,
      "rouge_w_1.2_f_score": 0.14877,
      "rouge_w_1.2_f_score_cb": 0.14877,
      "rouge_w_1.2_f_score_ce": 0.14877,
      "rouge_s*_recall": 0.07564,
      "rouge_s*_recall_cb": 0.07564,
      "rouge_s*_recall_ce": 0.07564,
      "rouge_s*_precision": 0.38562,
      "rouge_s*_precision_cb": 0.38562,
      "rouge_s*_precision_ce": 0.38562,
      "rouge_s*_f_score": 0.12647,
      "rouge_s*_f_score_cb": 0.12647,
      "rouge_s*_f_score_ce": 0.12647,
      "rouge_su*_recall": 0.08669,
      "rouge_su*_recall_cb": 0.08669,
      "rouge_su*_recall_ce": 0.08669,
      "rouge_su*_precision": 0.41765,
      "rouge_su*_precision_cb": 0.41765,
      "rouge_su*_precision_ce": 0.41765,
      "rouge_su*_f_score": 0.14358,
      "rouge_su*_f_score_cb": 0.14358,
      "rouge_su*_f_score_ce": 0.14358
    }
  },
  {
    "id": 50,
    "filename": "NumpyEval_50.txt",
    "dataset_comment": "Calculate the element-wise average between a, b, and c.",
    "generated_comment": "Calculate the mean of each corresponding element across multiple numpy arrays along the specified axis.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.3,
      "rouge_1_recall_cb": 0.3,
      "rouge_1_recall_ce": 0.3,
      "rouge_1_precision": 0.2,
      "rouge_1_precision_cb": 0.2,
      "rouge_1_precision_ce": 0.2,
      "rouge_1_f_score": 0.24,
      "rouge_1_f_score_cb": 0.24,
      "rouge_1_f_score_ce": 0.24,
      "rouge_2_recall": 0.11111,
      "rouge_2_recall_cb": 0.11111,
      "rouge_2_recall_ce": 0.11111,
      "rouge_2_precision": 0.07143,
      "rouge_2_precision_cb": 0.07143,
      "rouge_2_precision_ce": 0.07143,
      "rouge_2_f_score": 0.08696,
      "rouge_2_f_score_cb": 0.08696,
      "rouge_2_f_score_ce": 0.08696,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.3,
      "rouge_l_recall_cb": 0.3,
      "rouge_l_recall_ce": 0.3,
      "rouge_l_precision": 0.2,
      "rouge_l_precision_cb": 0.2,
      "rouge_l_precision_ce": 0.2,
      "rouge_l_f_score": 0.24,
      "rouge_l_f_score_cb": 0.24,
      "rouge_l_f_score_ce": 0.24,
      "rouge_w_1.2_recall": 0.18929,
      "rouge_w_1.2_recall_cb": 0.18929,
      "rouge_w_1.2_recall_ce": 0.18929,
      "rouge_w_1.2_precision": 0.2,
      "rouge_w_1.2_precision_cb": 0.2,
      "rouge_w_1.2_precision_ce": 0.2,
      "rouge_w_1.2_f_score": 0.1945,
      "rouge_w_1.2_f_score_cb": 0.1945,
      "rouge_w_1.2_f_score_ce": 0.1945,
      "rouge_s*_recall": 0.06667,
      "rouge_s*_recall_cb": 0.06667,
      "rouge_s*_recall_ce": 0.06667,
      "rouge_s*_precision": 0.02857,
      "rouge_s*_precision_cb": 0.02857,
      "rouge_s*_precision_ce": 0.02857,
      "rouge_s*_f_score": 0.04,
      "rouge_s*_f_score_cb": 0.04,
      "rouge_s*_f_score_ce": 0.04,
      "rouge_su*_recall": 0.11111,
      "rouge_su*_recall_cb": 0.11111,
      "rouge_su*_recall_ce": 0.11111,
      "rouge_su*_precision": 0.05042,
      "rouge_su*_precision_cb": 0.05042,
      "rouge_su*_precision_ce": 0.05042,
      "rouge_su*_f_score": 0.06936,
      "rouge_su*_f_score_cb": 0.06936,
      "rouge_su*_f_score_ce": 0.06936
    }
  },
  {
    "id": 51,
    "filename": "NumpyEval_51.txt",
    "dataset_comment": "Find the index of the k smallest values in a numpy array.",
    "generated_comment": "Find the indices of the k smallest elements in the array A using np.argpartition, which efficiently partitions the array around the k-th smallest element and returns the first k indices of the partitioned array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.83333,
      "rouge_1_recall_cb": 0.83333,
      "rouge_1_recall_ce": 0.83333,
      "rouge_1_precision": 0.27778,
      "rouge_1_precision_cb": 0.27778,
      "rouge_1_precision_ce": 0.27778,
      "rouge_1_f_score": 0.41667,
      "rouge_1_f_score_cb": 0.41667,
      "rouge_1_f_score_ce": 0.41667,
      "rouge_2_recall": 0.54545,
      "rouge_2_recall_cb": 0.54545,
      "rouge_2_recall_ce": 0.54545,
      "rouge_2_precision": 0.17143,
      "rouge_2_precision_cb": 0.17143,
      "rouge_2_precision_ce": 0.17143,
      "rouge_2_f_score": 0.26087,
      "rouge_2_f_score_cb": 0.26087,
      "rouge_2_f_score_ce": 0.26087,
      "rouge_3_recall": 0.5,
      "rouge_3_recall_cb": 0.5,
      "rouge_3_recall_ce": 0.5,
      "rouge_3_precision": 0.14706,
      "rouge_3_precision_cb": 0.14706,
      "rouge_3_precision_ce": 0.14706,
      "rouge_3_f_score": 0.22727,
      "rouge_3_f_score_cb": 0.22727,
      "rouge_3_f_score_ce": 0.22727,
      "rouge_4_recall": 0.44444,
      "rouge_4_recall_cb": 0.44444,
      "rouge_4_recall_ce": 0.44444,
      "rouge_4_precision": 0.12121,
      "rouge_4_precision_cb": 0.12121,
      "rouge_4_precision_ce": 0.12121,
      "rouge_4_f_score": 0.19047,
      "rouge_4_f_score_cb": 0.19047,
      "rouge_4_f_score_ce": 0.19047,
      "rouge_l_recall": 0.83333,
      "rouge_l_recall_cb": 0.83333,
      "rouge_l_recall_ce": 0.83333,
      "rouge_l_precision": 0.27778,
      "rouge_l_precision_cb": 0.27778,
      "rouge_l_precision_ce": 0.27778,
      "rouge_l_f_score": 0.41667,
      "rouge_l_f_score_cb": 0.41667,
      "rouge_l_f_score_ce": 0.41667,
      "rouge_w_1.2_recall": 0.44703,
      "rouge_w_1.2_recall_cb": 0.44703,
      "rouge_w_1.2_recall_ce": 0.44703,
      "rouge_w_1.2_precision": 0.24494,
      "rouge_w_1.2_precision_cb": 0.24494,
      "rouge_w_1.2_precision_ce": 0.24494,
      "rouge_w_1.2_f_score": 0.31647,
      "rouge_w_1.2_f_score_cb": 0.31647,
      "rouge_w_1.2_f_score_ce": 0.31647,
      "rouge_s*_recall": 0.68182,
      "rouge_s*_recall_cb": 0.68182,
      "rouge_s*_recall_ce": 0.68182,
      "rouge_s*_precision": 0.07143,
      "rouge_s*_precision_cb": 0.07143,
      "rouge_s*_precision_ce": 0.07143,
      "rouge_s*_f_score": 0.12931,
      "rouge_s*_f_score_cb": 0.12931,
      "rouge_s*_f_score_ce": 0.12931,
      "rouge_su*_recall": 0.7013,
      "rouge_su*_recall_cb": 0.7013,
      "rouge_su*_recall_ce": 0.7013,
      "rouge_su*_precision": 0.0812,
      "rouge_su*_precision_cb": 0.0812,
      "rouge_su*_precision_ce": 0.0812,
      "rouge_su*_f_score": 0.14555,
      "rouge_su*_f_score_cb": 0.14555,
      "rouge_su*_f_score_ce": 0.14555
    }
  },
  {
    "id": 52,
    "filename": "NumpyEval_52.txt",
    "dataset_comment": "Sort the points by x-coordinate, and then by y-coordinate in cases where the x-coordinate is the same, updating the values inplace.",
    "generated_comment": "I have a 2D numpy array of shape (N,2) which is holding N points.Sort the array based on the second column (y-coordinate) and then by the first column (x-coordinate) in case of ties.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.625,
      "rouge_1_recall_cb": 0.625,
      "rouge_1_recall_ce": 0.625,
      "rouge_1_precision": 0.40541,
      "rouge_1_precision_cb": 0.40541,
      "rouge_1_precision_ce": 0.40541,
      "rouge_1_f_score": 0.49181,
      "rouge_1_f_score_cb": 0.49181,
      "rouge_1_f_score_ce": 0.49181,
      "rouge_2_recall": 0.34783,
      "rouge_2_recall_cb": 0.34783,
      "rouge_2_recall_ce": 0.34783,
      "rouge_2_precision": 0.22222,
      "rouge_2_precision_cb": 0.22222,
      "rouge_2_precision_ce": 0.22222,
      "rouge_2_f_score": 0.27119,
      "rouge_2_f_score_cb": 0.27119,
      "rouge_2_f_score_ce": 0.27119,
      "rouge_3_recall": 0.13636,
      "rouge_3_recall_cb": 0.13636,
      "rouge_3_recall_ce": 0.13636,
      "rouge_3_precision": 0.08571,
      "rouge_3_precision_cb": 0.08571,
      "rouge_3_precision_ce": 0.08571,
      "rouge_3_f_score": 0.10526,
      "rouge_3_f_score_cb": 0.10526,
      "rouge_3_f_score_ce": 0.10526,
      "rouge_4_recall": 0.04762,
      "rouge_4_recall_cb": 0.04762,
      "rouge_4_recall_ce": 0.04762,
      "rouge_4_precision": 0.02941,
      "rouge_4_precision_cb": 0.02941,
      "rouge_4_precision_ce": 0.02941,
      "rouge_4_f_score": 0.03636,
      "rouge_4_f_score_cb": 0.03636,
      "rouge_4_f_score_ce": 0.03636,
      "rouge_l_recall": 0.375,
      "rouge_l_recall_cb": 0.375,
      "rouge_l_recall_ce": 0.375,
      "rouge_l_precision": 0.24324,
      "rouge_l_precision_cb": 0.24324,
      "rouge_l_precision_ce": 0.24324,
      "rouge_l_f_score": 0.29508,
      "rouge_l_f_score_cb": 0.29508,
      "rouge_l_f_score_ce": 0.29508,
      "rouge_w_1.2_recall": 0.16662,
      "rouge_w_1.2_recall_cb": 0.16662,
      "rouge_w_1.2_recall_ce": 0.16662,
      "rouge_w_1.2_precision": 0.20406,
      "rouge_w_1.2_precision_cb": 0.20406,
      "rouge_w_1.2_precision_ce": 0.20406,
      "rouge_w_1.2_f_score": 0.18345,
      "rouge_w_1.2_f_score_cb": 0.18345,
      "rouge_w_1.2_f_score_ce": 0.18345,
      "rouge_s*_recall": 0.29348,
      "rouge_s*_recall_cb": 0.29348,
      "rouge_s*_recall_ce": 0.29348,
      "rouge_s*_precision": 0.12162,
      "rouge_s*_precision_cb": 0.12162,
      "rouge_s*_precision_ce": 0.12162,
      "rouge_s*_f_score": 0.17197,
      "rouge_s*_f_score_cb": 0.17197,
      "rouge_s*_f_score_ce": 0.17197,
      "rouge_su*_recall": 0.32107,
      "rouge_su*_recall_cb": 0.32107,
      "rouge_su*_recall_ce": 0.32107,
      "rouge_su*_precision": 0.13675,
      "rouge_su*_precision_cb": 0.13675,
      "rouge_su*_precision_ce": 0.13675,
      "rouge_su*_f_score": 0.19181,
      "rouge_su*_f_score_cb": 0.19181,
      "rouge_su*_f_score_ce": 0.19181
    }
  },
  {
    "id": 53,
    "filename": "NumpyEval_53.txt",
    "dataset_comment": "Find the minimum value of each column with axis 0, then subtract the minimum value from each element of the column.",
    "generated_comment": "Calculate the difference between each element and the minimum value along each axis (column-wise) to normalize the array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.47619,
      "rouge_1_recall_cb": 0.47619,
      "rouge_1_recall_ce": 0.47619,
      "rouge_1_precision": 0.52632,
      "rouge_1_precision_cb": 0.52632,
      "rouge_1_precision_ce": 0.52632,
      "rouge_1_f_score": 0.5,
      "rouge_1_f_score_cb": 0.5,
      "rouge_1_f_score_ce": 0.5,
      "rouge_2_recall": 0.15,
      "rouge_2_recall_cb": 0.15,
      "rouge_2_recall_ce": 0.15,
      "rouge_2_precision": 0.16667,
      "rouge_2_precision_cb": 0.16667,
      "rouge_2_precision_ce": 0.16667,
      "rouge_2_f_score": 0.1579,
      "rouge_2_f_score_cb": 0.1579,
      "rouge_2_f_score_ce": 0.1579,
      "rouge_3_recall": 0.05263,
      "rouge_3_recall_cb": 0.05263,
      "rouge_3_recall_ce": 0.05263,
      "rouge_3_precision": 0.05882,
      "rouge_3_precision_cb": 0.05882,
      "rouge_3_precision_ce": 0.05882,
      "rouge_3_f_score": 0.05555,
      "rouge_3_f_score_cb": 0.05555,
      "rouge_3_f_score_ce": 0.05555,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.33333,
      "rouge_l_recall_cb": 0.33333,
      "rouge_l_recall_ce": 0.33333,
      "rouge_l_precision": 0.36842,
      "rouge_l_precision_cb": 0.36842,
      "rouge_l_precision_ce": 0.36842,
      "rouge_l_f_score": 0.35,
      "rouge_l_f_score_cb": 0.35,
      "rouge_l_f_score_ce": 0.35,
      "rouge_w_1.2_recall": 0.1425,
      "rouge_w_1.2_recall_cb": 0.1425,
      "rouge_w_1.2_recall_ce": 0.1425,
      "rouge_w_1.2_precision": 0.28956,
      "rouge_w_1.2_precision_cb": 0.28956,
      "rouge_w_1.2_precision_ce": 0.28956,
      "rouge_w_1.2_f_score": 0.191,
      "rouge_w_1.2_f_score_cb": 0.191,
      "rouge_w_1.2_f_score_ce": 0.191,
      "rouge_s*_recall": 0.18095,
      "rouge_s*_recall_cb": 0.18095,
      "rouge_s*_recall_ce": 0.18095,
      "rouge_s*_precision": 0.22222,
      "rouge_s*_precision_cb": 0.22222,
      "rouge_s*_precision_ce": 0.22222,
      "rouge_s*_f_score": 0.19947,
      "rouge_s*_f_score_cb": 0.19947,
      "rouge_s*_f_score_ce": 0.19947,
      "rouge_su*_recall": 0.2087,
      "rouge_su*_recall_cb": 0.2087,
      "rouge_su*_recall_ce": 0.2087,
      "rouge_su*_precision": 0.25397,
      "rouge_su*_precision_cb": 0.25397,
      "rouge_su*_precision_ce": 0.25397,
      "rouge_su*_f_score": 0.22912,
      "rouge_su*_f_score_cb": 0.22912,
      "rouge_su*_f_score_ce": 0.22912
    }
  },
  {
    "id": 54,
    "filename": "NumpyEval_54.txt",
    "dataset_comment": "Access the elements from index 4 to the end.",
    "generated_comment": "Reshape the array 'a' to have dimensions (length of 'a', 1)Slice the array 'a' starting from index 4 to the end",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.77778,
      "rouge_1_recall_cb": 0.77778,
      "rouge_1_recall_ce": 0.77778,
      "rouge_1_precision": 0.31818,
      "rouge_1_precision_cb": 0.31818,
      "rouge_1_precision_ce": 0.31818,
      "rouge_1_f_score": 0.45161,
      "rouge_1_f_score_cb": 0.45161,
      "rouge_1_f_score_ce": 0.45161,
      "rouge_2_recall": 0.625,
      "rouge_2_recall_cb": 0.625,
      "rouge_2_recall_ce": 0.625,
      "rouge_2_precision": 0.2381,
      "rouge_2_precision_cb": 0.2381,
      "rouge_2_precision_ce": 0.2381,
      "rouge_2_f_score": 0.34483,
      "rouge_2_f_score_cb": 0.34483,
      "rouge_2_f_score_ce": 0.34483,
      "rouge_3_recall": 0.57143,
      "rouge_3_recall_cb": 0.57143,
      "rouge_3_recall_ce": 0.57143,
      "rouge_3_precision": 0.2,
      "rouge_3_precision_cb": 0.2,
      "rouge_3_precision_ce": 0.2,
      "rouge_3_f_score": 0.2963,
      "rouge_3_f_score_cb": 0.2963,
      "rouge_3_f_score_ce": 0.2963,
      "rouge_4_recall": 0.5,
      "rouge_4_recall_cb": 0.5,
      "rouge_4_recall_ce": 0.5,
      "rouge_4_precision": 0.15789,
      "rouge_4_precision_cb": 0.15789,
      "rouge_4_precision_ce": 0.15789,
      "rouge_4_f_score": 0.23999,
      "rouge_4_f_score_cb": 0.23999,
      "rouge_4_f_score_ce": 0.23999,
      "rouge_l_recall": 0.77778,
      "rouge_l_recall_cb": 0.77778,
      "rouge_l_recall_ce": 0.77778,
      "rouge_l_precision": 0.31818,
      "rouge_l_precision_cb": 0.31818,
      "rouge_l_precision_ce": 0.31818,
      "rouge_l_f_score": 0.45161,
      "rouge_l_f_score_cb": 0.45161,
      "rouge_l_f_score_ce": 0.45161,
      "rouge_w_1.2_recall": 0.4709,
      "rouge_w_1.2_recall_cb": 0.4709,
      "rouge_w_1.2_recall_ce": 0.4709,
      "rouge_w_1.2_precision": 0.29895,
      "rouge_w_1.2_precision_cb": 0.29895,
      "rouge_w_1.2_precision_ce": 0.29895,
      "rouge_w_1.2_f_score": 0.36572,
      "rouge_w_1.2_f_score_cb": 0.36572,
      "rouge_w_1.2_f_score_ce": 0.36572,
      "rouge_s*_recall": 0.58333,
      "rouge_s*_recall_cb": 0.58333,
      "rouge_s*_recall_ce": 0.58333,
      "rouge_s*_precision": 0.09091,
      "rouge_s*_precision_cb": 0.09091,
      "rouge_s*_precision_ce": 0.09091,
      "rouge_s*_f_score": 0.1573,
      "rouge_s*_f_score_cb": 0.1573,
      "rouge_s*_f_score_ce": 0.1573,
      "rouge_su*_recall": 0.61364,
      "rouge_su*_recall_cb": 0.61364,
      "rouge_su*_recall_ce": 0.61364,
      "rouge_su*_precision": 0.10714,
      "rouge_su*_precision_cb": 0.10714,
      "rouge_su*_precision_ce": 0.10714,
      "rouge_su*_f_score": 0.18243,
      "rouge_su*_f_score_cb": 0.18243,
      "rouge_su*_f_score_ce": 0.18243
    }
  },
  {
    "id": 55,
    "filename": "NumpyEval_55.txt",
    "dataset_comment": "Replace all negative values in an array with `0` using a NumPy function `where`.",
    "generated_comment": "Replace all negative values in the array with 0, leaving positive values unchanged.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.57143,
      "rouge_1_recall_cb": 0.57143,
      "rouge_1_recall_ce": 0.57143,
      "rouge_1_precision": 0.61538,
      "rouge_1_precision_cb": 0.61538,
      "rouge_1_precision_ce": 0.61538,
      "rouge_1_f_score": 0.59259,
      "rouge_1_f_score_cb": 0.59259,
      "rouge_1_f_score_ce": 0.59259,
      "rouge_2_recall": 0.46154,
      "rouge_2_recall_cb": 0.46154,
      "rouge_2_recall_ce": 0.46154,
      "rouge_2_precision": 0.5,
      "rouge_2_precision_cb": 0.5,
      "rouge_2_precision_ce": 0.5,
      "rouge_2_f_score": 0.48,
      "rouge_2_f_score_cb": 0.48,
      "rouge_2_f_score_ce": 0.48,
      "rouge_3_recall": 0.33333,
      "rouge_3_recall_cb": 0.33333,
      "rouge_3_recall_ce": 0.33333,
      "rouge_3_precision": 0.36364,
      "rouge_3_precision_cb": 0.36364,
      "rouge_3_precision_ce": 0.36364,
      "rouge_3_f_score": 0.34783,
      "rouge_3_f_score_cb": 0.34783,
      "rouge_3_f_score_ce": 0.34783,
      "rouge_4_recall": 0.18182,
      "rouge_4_recall_cb": 0.18182,
      "rouge_4_recall_ce": 0.18182,
      "rouge_4_precision": 0.2,
      "rouge_4_precision_cb": 0.2,
      "rouge_4_precision_ce": 0.2,
      "rouge_4_f_score": 0.19048,
      "rouge_4_f_score_cb": 0.19048,
      "rouge_4_f_score_ce": 0.19048,
      "rouge_l_recall": 0.57143,
      "rouge_l_recall_cb": 0.57143,
      "rouge_l_recall_ce": 0.57143,
      "rouge_l_precision": 0.61538,
      "rouge_l_precision_cb": 0.61538,
      "rouge_l_precision_ce": 0.61538,
      "rouge_l_f_score": 0.59259,
      "rouge_l_f_score_cb": 0.59259,
      "rouge_l_f_score_ce": 0.59259,
      "rouge_w_1.2_recall": 0.3022,
      "rouge_w_1.2_recall_cb": 0.3022,
      "rouge_w_1.2_recall_ce": 0.3022,
      "rouge_w_1.2_precision": 0.5517,
      "rouge_w_1.2_precision_cb": 0.5517,
      "rouge_w_1.2_precision_ce": 0.5517,
      "rouge_w_1.2_f_score": 0.3905,
      "rouge_w_1.2_f_score_cb": 0.3905,
      "rouge_w_1.2_f_score_ce": 0.3905,
      "rouge_s*_recall": 0.30769,
      "rouge_s*_recall_cb": 0.30769,
      "rouge_s*_recall_ce": 0.30769,
      "rouge_s*_precision": 0.35897,
      "rouge_s*_precision_cb": 0.35897,
      "rouge_s*_precision_ce": 0.35897,
      "rouge_s*_f_score": 0.33136,
      "rouge_s*_f_score_cb": 0.33136,
      "rouge_s*_f_score_ce": 0.33136,
      "rouge_su*_recall": 0.34615,
      "rouge_su*_recall_cb": 0.34615,
      "rouge_su*_recall_ce": 0.34615,
      "rouge_su*_precision": 0.4,
      "rouge_su*_precision_cb": 0.4,
      "rouge_su*_precision_ce": 0.4,
      "rouge_su*_f_score": 0.37113,
      "rouge_su*_f_score_cb": 0.37113,
      "rouge_su*_f_score_ce": 0.37113
    }
  },
  {
    "id": 56,
    "filename": "NumpyEval_56.txt",
    "dataset_comment": "Select elements from the array of distances called dists that are within the range [r, r+dr].",
    "generated_comment": "Filter the elements in the dists array that are within the range [r, r+dr] using numpy's logical_and and where functions.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.70588,
      "rouge_1_recall_cb": 0.70588,
      "rouge_1_recall_ce": 0.70588,
      "rouge_1_precision": 0.52174,
      "rouge_1_precision_cb": 0.52174,
      "rouge_1_precision_ce": 0.52174,
      "rouge_1_f_score": 0.6,
      "rouge_1_f_score_cb": 0.6,
      "rouge_1_f_score_ce": 0.6,
      "rouge_2_recall": 0.4375,
      "rouge_2_recall_cb": 0.4375,
      "rouge_2_recall_ce": 0.4375,
      "rouge_2_precision": 0.31818,
      "rouge_2_precision_cb": 0.31818,
      "rouge_2_precision_ce": 0.31818,
      "rouge_2_f_score": 0.36842,
      "rouge_2_f_score_cb": 0.36842,
      "rouge_2_f_score_ce": 0.36842,
      "rouge_3_recall": 0.4,
      "rouge_3_recall_cb": 0.4,
      "rouge_3_recall_ce": 0.4,
      "rouge_3_precision": 0.28571,
      "rouge_3_precision_cb": 0.28571,
      "rouge_3_precision_ce": 0.28571,
      "rouge_3_f_score": 0.33333,
      "rouge_3_f_score_cb": 0.33333,
      "rouge_3_f_score_ce": 0.33333,
      "rouge_4_recall": 0.35714,
      "rouge_4_recall_cb": 0.35714,
      "rouge_4_recall_ce": 0.35714,
      "rouge_4_precision": 0.25,
      "rouge_4_precision_cb": 0.25,
      "rouge_4_precision_ce": 0.25,
      "rouge_4_f_score": 0.29412,
      "rouge_4_f_score_cb": 0.29412,
      "rouge_4_f_score_ce": 0.29412,
      "rouge_l_recall": 0.64706,
      "rouge_l_recall_cb": 0.64706,
      "rouge_l_recall_ce": 0.64706,
      "rouge_l_precision": 0.47826,
      "rouge_l_precision_cb": 0.47826,
      "rouge_l_precision_ce": 0.47826,
      "rouge_l_f_score": 0.55,
      "rouge_l_f_score_cb": 0.55,
      "rouge_l_f_score_ce": 0.55,
      "rouge_w_1.2_recall": 0.32629,
      "rouge_w_1.2_recall_cb": 0.32629,
      "rouge_w_1.2_recall_ce": 0.32629,
      "rouge_w_1.2_precision": 0.42503,
      "rouge_w_1.2_precision_cb": 0.42503,
      "rouge_w_1.2_precision_ce": 0.42503,
      "rouge_w_1.2_f_score": 0.36917,
      "rouge_w_1.2_f_score_cb": 0.36917,
      "rouge_w_1.2_f_score_ce": 0.36917,
      "rouge_s*_recall": 0.47794,
      "rouge_s*_recall_cb": 0.47794,
      "rouge_s*_recall_ce": 0.47794,
      "rouge_s*_precision": 0.25692,
      "rouge_s*_precision_cb": 0.25692,
      "rouge_s*_precision_ce": 0.25692,
      "rouge_s*_f_score": 0.33419,
      "rouge_s*_f_score_cb": 0.33419,
      "rouge_s*_f_score_ce": 0.33419,
      "rouge_su*_recall": 0.5,
      "rouge_su*_recall_cb": 0.5,
      "rouge_su*_recall_ce": 0.5,
      "rouge_su*_precision": 0.27636,
      "rouge_su*_precision_cb": 0.27636,
      "rouge_su*_precision_ce": 0.27636,
      "rouge_su*_f_score": 0.35597,
      "rouge_su*_f_score_cb": 0.35597,
      "rouge_su*_f_score_ce": 0.35597
    }
  },
  {
    "id": 57,
    "filename": "NumpyEval_57.txt",
    "dataset_comment": "Given an array a, repeat the elements of a n times if they are even or positive. Only elements that meet the specified condition will be repeated; other elements will not be displayed.",
    "generated_comment": "Repeat each element in the array 'a' that satisfies the condition 'cond' 'n' times.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.30303,
      "rouge_1_recall_cb": 0.30303,
      "rouge_1_recall_ce": 0.30303,
      "rouge_1_precision": 0.71429,
      "rouge_1_precision_cb": 0.71429,
      "rouge_1_precision_ce": 0.71429,
      "rouge_1_f_score": 0.42553,
      "rouge_1_f_score_cb": 0.42553,
      "rouge_1_f_score_ce": 0.42553,
      "rouge_2_recall": 0.0625,
      "rouge_2_recall_cb": 0.0625,
      "rouge_2_recall_ce": 0.0625,
      "rouge_2_precision": 0.15385,
      "rouge_2_precision_cb": 0.15385,
      "rouge_2_precision_ce": 0.15385,
      "rouge_2_f_score": 0.08889,
      "rouge_2_f_score_cb": 0.08889,
      "rouge_2_f_score_ce": 0.08889,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.18182,
      "rouge_l_recall_cb": 0.18182,
      "rouge_l_recall_ce": 0.18182,
      "rouge_l_precision": 0.42857,
      "rouge_l_precision_cb": 0.42857,
      "rouge_l_precision_ce": 0.42857,
      "rouge_l_f_score": 0.25532,
      "rouge_l_f_score_cb": 0.25532,
      "rouge_l_f_score_ce": 0.25532,
      "rouge_w_1.2_recall": 0.06978,
      "rouge_w_1.2_recall_cb": 0.06978,
      "rouge_w_1.2_recall_ce": 0.06978,
      "rouge_w_1.2_precision": 0.33101,
      "rouge_w_1.2_precision_cb": 0.33101,
      "rouge_w_1.2_precision_ce": 0.33101,
      "rouge_w_1.2_f_score": 0.11526,
      "rouge_w_1.2_f_score_cb": 0.11526,
      "rouge_w_1.2_f_score_ce": 0.11526,
      "rouge_s*_recall": 0.06818,
      "rouge_s*_recall_cb": 0.06818,
      "rouge_s*_recall_ce": 0.06818,
      "rouge_s*_precision": 0.3956,
      "rouge_s*_precision_cb": 0.3956,
      "rouge_s*_precision_ce": 0.3956,
      "rouge_s*_f_score": 0.11631,
      "rouge_s*_f_score_cb": 0.11631,
      "rouge_s*_f_score_ce": 0.11631,
      "rouge_su*_recall": 0.08036,
      "rouge_su*_recall_cb": 0.08036,
      "rouge_su*_recall_ce": 0.08036,
      "rouge_su*_precision": 0.43269,
      "rouge_su*_precision_cb": 0.43269,
      "rouge_su*_precision_ce": 0.43269,
      "rouge_su*_f_score": 0.13555,
      "rouge_su*_f_score_cb": 0.13555,
      "rouge_su*_f_score_ce": 0.13555
    }
  },
  {
    "id": 58,
    "filename": "NumpyEval_58.txt",
    "dataset_comment": "Check if a given NumPy array is sorted using numpy.all.",
    "generated_comment": "Check if the array is sorted in non-decreasing order by comparing each element with its neighbor and utilizing np.all(condition).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.54545,
      "rouge_1_recall_cb": 0.54545,
      "rouge_1_recall_ce": 0.54545,
      "rouge_1_precision": 0.27273,
      "rouge_1_precision_cb": 0.27273,
      "rouge_1_precision_ce": 0.27273,
      "rouge_1_f_score": 0.36364,
      "rouge_1_f_score_cb": 0.36364,
      "rouge_1_f_score_ce": 0.36364,
      "rouge_2_recall": 0.3,
      "rouge_2_recall_cb": 0.3,
      "rouge_2_recall_ce": 0.3,
      "rouge_2_precision": 0.14286,
      "rouge_2_precision_cb": 0.14286,
      "rouge_2_precision_ce": 0.14286,
      "rouge_2_f_score": 0.19355,
      "rouge_2_f_score_cb": 0.19355,
      "rouge_2_f_score_ce": 0.19355,
      "rouge_3_recall": 0.11111,
      "rouge_3_recall_cb": 0.11111,
      "rouge_3_recall_ce": 0.11111,
      "rouge_3_precision": 0.05,
      "rouge_3_precision_cb": 0.05,
      "rouge_3_precision_ce": 0.05,
      "rouge_3_f_score": 0.06897,
      "rouge_3_f_score_cb": 0.06897,
      "rouge_3_f_score_ce": 0.06897,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.54545,
      "rouge_l_recall_cb": 0.54545,
      "rouge_l_recall_ce": 0.54545,
      "rouge_l_precision": 0.27273,
      "rouge_l_precision_cb": 0.27273,
      "rouge_l_precision_ce": 0.27273,
      "rouge_l_f_score": 0.36364,
      "rouge_l_f_score_cb": 0.36364,
      "rouge_l_f_score_ce": 0.36364,
      "rouge_w_1.2_recall": 0.286,
      "rouge_w_1.2_recall_cb": 0.286,
      "rouge_w_1.2_recall_ce": 0.286,
      "rouge_w_1.2_precision": 0.231,
      "rouge_w_1.2_precision_cb": 0.231,
      "rouge_w_1.2_precision_ce": 0.231,
      "rouge_w_1.2_f_score": 0.25557,
      "rouge_w_1.2_f_score_cb": 0.25557,
      "rouge_w_1.2_f_score_ce": 0.25557,
      "rouge_s*_recall": 0.27273,
      "rouge_s*_recall_cb": 0.27273,
      "rouge_s*_recall_ce": 0.27273,
      "rouge_s*_precision": 0.06494,
      "rouge_s*_precision_cb": 0.06494,
      "rouge_s*_precision_ce": 0.06494,
      "rouge_s*_f_score": 0.1049,
      "rouge_s*_f_score_cb": 0.1049,
      "rouge_s*_f_score_ce": 0.1049,
      "rouge_su*_recall": 0.30769,
      "rouge_su*_recall_cb": 0.30769,
      "rouge_su*_recall_ce": 0.30769,
      "rouge_su*_precision": 0.07937,
      "rouge_su*_precision_cb": 0.07937,
      "rouge_su*_precision_ce": 0.07937,
      "rouge_su*_f_score": 0.12619,
      "rouge_su*_f_score_cb": 0.12619,
      "rouge_su*_f_score_ce": 0.12619
    }
  },
  {
    "id": 59,
    "filename": "NumpyEval_59.txt",
    "dataset_comment": "Reshape array 'a' into (2, 4, 2, 4) and then transpose it by (0, 2, 1, 3) to obtain array 'c'.",
    "generated_comment": "Create a 2D array where each row is a repetition of the numbers 0 through 7, repeated 8 times.Reshape the 2D array into a 4D array with shape (2, 4, 2, 4).Transpose the 4D array to swap the second and third dimensions, resulting in a shape of (2, 2, 4, 4).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.66667,
      "rouge_1_recall_cb": 0.66667,
      "rouge_1_recall_ce": 0.66667,
      "rouge_1_precision": 0.26415,
      "rouge_1_precision_cb": 0.26415,
      "rouge_1_precision_ce": 0.26415,
      "rouge_1_f_score": 0.37838,
      "rouge_1_f_score_cb": 0.37838,
      "rouge_1_f_score_ce": 0.37838,
      "rouge_2_recall": 0.15,
      "rouge_2_recall_cb": 0.15,
      "rouge_2_recall_ce": 0.15,
      "rouge_2_precision": 0.05769,
      "rouge_2_precision_cb": 0.05769,
      "rouge_2_precision_ce": 0.05769,
      "rouge_2_f_score": 0.08333,
      "rouge_2_f_score_cb": 0.08333,
      "rouge_2_f_score_ce": 0.08333,
      "rouge_3_recall": 0.10526,
      "rouge_3_recall_cb": 0.10526,
      "rouge_3_recall_ce": 0.10526,
      "rouge_3_precision": 0.03922,
      "rouge_3_precision_cb": 0.03922,
      "rouge_3_precision_ce": 0.03922,
      "rouge_3_f_score": 0.05715,
      "rouge_3_f_score_cb": 0.05715,
      "rouge_3_f_score_ce": 0.05715,
      "rouge_4_recall": 0.05556,
      "rouge_4_recall_cb": 0.05556,
      "rouge_4_recall_ce": 0.05556,
      "rouge_4_precision": 0.02,
      "rouge_4_precision_cb": 0.02,
      "rouge_4_precision_ce": 0.02,
      "rouge_4_f_score": 0.02941,
      "rouge_4_f_score_cb": 0.02941,
      "rouge_4_f_score_ce": 0.02941,
      "rouge_l_recall": 0.42857,
      "rouge_l_recall_cb": 0.42857,
      "rouge_l_recall_ce": 0.42857,
      "rouge_l_precision": 0.16981,
      "rouge_l_precision_cb": 0.16981,
      "rouge_l_precision_ce": 0.16981,
      "rouge_l_f_score": 0.24324,
      "rouge_l_f_score_cb": 0.24324,
      "rouge_l_f_score_ce": 0.24324,
      "rouge_w_1.2_recall": 0.20022,
      "rouge_w_1.2_recall_cb": 0.20022,
      "rouge_w_1.2_recall_ce": 0.20022,
      "rouge_w_1.2_precision": 0.14584,
      "rouge_w_1.2_precision_cb": 0.14584,
      "rouge_w_1.2_precision_ce": 0.14584,
      "rouge_w_1.2_f_score": 0.16876,
      "rouge_w_1.2_f_score_cb": 0.16876,
      "rouge_w_1.2_f_score_ce": 0.16876,
      "rouge_s*_recall": 0.36667,
      "rouge_s*_recall_cb": 0.36667,
      "rouge_s*_recall_ce": 0.36667,
      "rouge_s*_precision": 0.05588,
      "rouge_s*_precision_cb": 0.05588,
      "rouge_s*_precision_ce": 0.05588,
      "rouge_s*_f_score": 0.09698,
      "rouge_s*_f_score_cb": 0.09698,
      "rouge_s*_f_score_ce": 0.09698,
      "rouge_su*_recall": 0.39565,
      "rouge_su*_recall_cb": 0.39565,
      "rouge_su*_recall_ce": 0.39565,
      "rouge_su*_precision": 0.06364,
      "rouge_su*_precision_cb": 0.06364,
      "rouge_su*_precision_ce": 0.06364,
      "rouge_su*_f_score": 0.10964,
      "rouge_su*_f_score_cb": 0.10964,
      "rouge_su*_f_score_ce": 0.10964
    }
  },
  {
    "id": 60,
    "filename": "NumpyEval_60.txt",
    "dataset_comment": "Return the indices of the minimum values along axis zero.",
    "generated_comment": "Find the indices of the minimum values along the specified axis (axis=0) using np.argmin.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.8,
      "rouge_1_recall_cb": 0.8,
      "rouge_1_recall_ce": 0.8,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.61538,
      "rouge_1_f_score_cb": 0.61538,
      "rouge_1_f_score_ce": 0.61538,
      "rouge_2_recall": 0.66667,
      "rouge_2_recall_cb": 0.66667,
      "rouge_2_recall_ce": 0.66667,
      "rouge_2_precision": 0.4,
      "rouge_2_precision_cb": 0.4,
      "rouge_2_precision_ce": 0.4,
      "rouge_2_f_score": 0.5,
      "rouge_2_f_score_cb": 0.5,
      "rouge_2_f_score_ce": 0.5,
      "rouge_3_recall": 0.625,
      "rouge_3_recall_cb": 0.625,
      "rouge_3_recall_ce": 0.625,
      "rouge_3_precision": 0.35714,
      "rouge_3_precision_cb": 0.35714,
      "rouge_3_precision_ce": 0.35714,
      "rouge_3_f_score": 0.45454,
      "rouge_3_f_score_cb": 0.45454,
      "rouge_3_f_score_ce": 0.45454,
      "rouge_4_recall": 0.57143,
      "rouge_4_recall_cb": 0.57143,
      "rouge_4_recall_ce": 0.57143,
      "rouge_4_precision": 0.30769,
      "rouge_4_precision_cb": 0.30769,
      "rouge_4_precision_ce": 0.30769,
      "rouge_4_f_score": 0.4,
      "rouge_4_f_score_cb": 0.4,
      "rouge_4_f_score_ce": 0.4,
      "rouge_l_recall": 0.8,
      "rouge_l_recall_cb": 0.8,
      "rouge_l_recall_ce": 0.8,
      "rouge_l_precision": 0.5,
      "rouge_l_precision_cb": 0.5,
      "rouge_l_precision_ce": 0.5,
      "rouge_l_f_score": 0.61538,
      "rouge_l_f_score_cb": 0.61538,
      "rouge_l_f_score_ce": 0.61538,
      "rouge_w_1.2_recall": 0.50477,
      "rouge_w_1.2_recall_cb": 0.50477,
      "rouge_w_1.2_recall_ce": 0.50477,
      "rouge_w_1.2_precision": 0.5,
      "rouge_w_1.2_precision_cb": 0.5,
      "rouge_w_1.2_precision_ce": 0.5,
      "rouge_w_1.2_f_score": 0.50237,
      "rouge_w_1.2_f_score_cb": 0.50237,
      "rouge_w_1.2_f_score_ce": 0.50237,
      "rouge_s*_recall": 0.62222,
      "rouge_s*_recall_cb": 0.62222,
      "rouge_s*_recall_ce": 0.62222,
      "rouge_s*_precision": 0.23333,
      "rouge_s*_precision_cb": 0.23333,
      "rouge_s*_precision_ce": 0.23333,
      "rouge_s*_f_score": 0.33939,
      "rouge_s*_f_score_cb": 0.33939,
      "rouge_s*_f_score_ce": 0.33939,
      "rouge_su*_recall": 0.66667,
      "rouge_su*_recall_cb": 0.66667,
      "rouge_su*_recall_ce": 0.66667,
      "rouge_su*_precision": 0.26667,
      "rouge_su*_precision_cb": 0.26667,
      "rouge_su*_precision_ce": 0.26667,
      "rouge_su*_f_score": 0.38096,
      "rouge_su*_f_score_cb": 0.38096,
      "rouge_su*_f_score_ce": 0.38096
    }
  },
  {
    "id": 61,
    "filename": "NumpyEval_61.txt",
    "dataset_comment": "Dynamically slice a NumPy array along a specific axis using the slice(start, end) method.",
    "generated_comment": "Create a slice object that selects the specified axis range from the original array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.35714,
      "rouge_1_precision_cb": 0.35714,
      "rouge_1_precision_ce": 0.35714,
      "rouge_1_f_score": 0.34482,
      "rouge_1_f_score_cb": 0.34482,
      "rouge_1_f_score_ce": 0.34482,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.2,
      "rouge_l_recall_cb": 0.2,
      "rouge_l_recall_ce": 0.2,
      "rouge_l_precision": 0.21429,
      "rouge_l_precision_cb": 0.21429,
      "rouge_l_precision_ce": 0.21429,
      "rouge_l_f_score": 0.2069,
      "rouge_l_f_score_cb": 0.2069,
      "rouge_l_f_score_ce": 0.2069,
      "rouge_w_1.2_recall": 0.09689,
      "rouge_w_1.2_recall_cb": 0.09689,
      "rouge_w_1.2_recall_ce": 0.09689,
      "rouge_w_1.2_precision": 0.17843,
      "rouge_w_1.2_precision_cb": 0.17843,
      "rouge_w_1.2_precision_ce": 0.17843,
      "rouge_w_1.2_f_score": 0.12559,
      "rouge_w_1.2_f_score_cb": 0.12559,
      "rouge_w_1.2_f_score_ce": 0.12559,
      "rouge_s*_recall": 0.08571,
      "rouge_s*_recall_cb": 0.08571,
      "rouge_s*_recall_ce": 0.08571,
      "rouge_s*_precision": 0.0989,
      "rouge_s*_precision_cb": 0.0989,
      "rouge_s*_precision_ce": 0.0989,
      "rouge_s*_f_score": 0.09183,
      "rouge_s*_f_score_cb": 0.09183,
      "rouge_s*_f_score_ce": 0.09183,
      "rouge_su*_recall": 0.10924,
      "rouge_su*_recall_cb": 0.10924,
      "rouge_su*_recall_ce": 0.10924,
      "rouge_su*_precision": 0.125,
      "rouge_su*_precision_cb": 0.125,
      "rouge_su*_precision_ce": 0.125,
      "rouge_su*_f_score": 0.11659,
      "rouge_su*_f_score_cb": 0.11659,
      "rouge_su*_f_score_ce": 0.11659
    }
  },
  {
    "id": 62,
    "filename": "NumpyEval_62.txt",
    "dataset_comment": "Convert a 2D numpy array to a structured array using numpy.core.records.fromarrays. Transpose the array and reset the names to 'col1', 'col2', 'col3'.",
    "generated_comment": "Create a structured array from a 2D array by transposing it and specifying column names.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.36,
      "rouge_1_recall_cb": 0.36,
      "rouge_1_recall_ce": 0.36,
      "rouge_1_precision": 0.6,
      "rouge_1_precision_cb": 0.6,
      "rouge_1_precision_ce": 0.6,
      "rouge_1_f_score": 0.45,
      "rouge_1_f_score_cb": 0.45,
      "rouge_1_f_score_ce": 0.45,
      "rouge_2_recall": 0.125,
      "rouge_2_recall_cb": 0.125,
      "rouge_2_recall_ce": 0.125,
      "rouge_2_precision": 0.21429,
      "rouge_2_precision_cb": 0.21429,
      "rouge_2_precision_ce": 0.21429,
      "rouge_2_f_score": 0.1579,
      "rouge_2_f_score_cb": 0.1579,
      "rouge_2_f_score_ce": 0.1579,
      "rouge_3_recall": 0.04348,
      "rouge_3_recall_cb": 0.04348,
      "rouge_3_recall_ce": 0.04348,
      "rouge_3_precision": 0.07692,
      "rouge_3_precision_cb": 0.07692,
      "rouge_3_precision_ce": 0.07692,
      "rouge_3_f_score": 0.05556,
      "rouge_3_f_score_cb": 0.05556,
      "rouge_3_f_score_ce": 0.05556,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.28,
      "rouge_l_recall_cb": 0.28,
      "rouge_l_recall_ce": 0.28,
      "rouge_l_precision": 0.46667,
      "rouge_l_precision_cb": 0.46667,
      "rouge_l_precision_ce": 0.46667,
      "rouge_l_f_score": 0.35,
      "rouge_l_f_score_cb": 0.35,
      "rouge_l_f_score_ce": 0.35,
      "rouge_w_1.2_recall": 0.10635,
      "rouge_w_1.2_recall_cb": 0.10635,
      "rouge_w_1.2_recall_ce": 0.10635,
      "rouge_w_1.2_precision": 0.33741,
      "rouge_w_1.2_precision_cb": 0.33741,
      "rouge_w_1.2_precision_ce": 0.33741,
      "rouge_w_1.2_f_score": 0.16173,
      "rouge_w_1.2_f_score_cb": 0.16173,
      "rouge_w_1.2_f_score_ce": 0.16173,
      "rouge_s*_recall": 0.10667,
      "rouge_s*_recall_cb": 0.10667,
      "rouge_s*_recall_ce": 0.10667,
      "rouge_s*_precision": 0.30476,
      "rouge_s*_precision_cb": 0.30476,
      "rouge_s*_precision_ce": 0.30476,
      "rouge_s*_f_score": 0.15803,
      "rouge_s*_f_score_cb": 0.15803,
      "rouge_s*_f_score_ce": 0.15803,
      "rouge_su*_recall": 0.12346,
      "rouge_su*_recall_cb": 0.12346,
      "rouge_su*_recall_ce": 0.12346,
      "rouge_su*_precision": 0.33613,
      "rouge_su*_precision_cb": 0.33613,
      "rouge_su*_precision_ce": 0.33613,
      "rouge_su*_f_score": 0.18059,
      "rouge_su*_f_score_cb": 0.18059,
      "rouge_su*_f_score_ce": 0.18059
    }
  },
  {
    "id": 63,
    "filename": "NumpyEval_63.txt",
    "dataset_comment": "Check if each element in a numpy array is in another array.  Given two numpy arrays (A and B), obtain the indices of A where the elements of A are in B,  as well as the indices of A where the elements are not in B.",
    "generated_comment": "Find the indices of elements in array A that are not present in array B using np.searchsorted to find the insertion points and np.delete to remove the corresponding indices from a range array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.3913,
      "rouge_1_recall_cb": 0.3913,
      "rouge_1_recall_ce": 0.3913,
      "rouge_1_precision": 0.51429,
      "rouge_1_precision_cb": 0.51429,
      "rouge_1_precision_ce": 0.51429,
      "rouge_1_f_score": 0.44444,
      "rouge_1_f_score_cb": 0.44444,
      "rouge_1_f_score_ce": 0.44444,
      "rouge_2_recall": 0.11111,
      "rouge_2_recall_cb": 0.11111,
      "rouge_2_recall_ce": 0.11111,
      "rouge_2_precision": 0.14706,
      "rouge_2_precision_cb": 0.14706,
      "rouge_2_precision_ce": 0.14706,
      "rouge_2_f_score": 0.12658,
      "rouge_2_f_score_cb": 0.12658,
      "rouge_2_f_score_ce": 0.12658,
      "rouge_3_recall": 0.02273,
      "rouge_3_recall_cb": 0.02273,
      "rouge_3_recall_ce": 0.02273,
      "rouge_3_precision": 0.0303,
      "rouge_3_precision_cb": 0.0303,
      "rouge_3_precision_ce": 0.0303,
      "rouge_3_f_score": 0.02597,
      "rouge_3_f_score_cb": 0.02597,
      "rouge_3_f_score_ce": 0.02597,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.23913,
      "rouge_l_recall_cb": 0.23913,
      "rouge_l_recall_ce": 0.23913,
      "rouge_l_precision": 0.31429,
      "rouge_l_precision_cb": 0.31429,
      "rouge_l_precision_ce": 0.31429,
      "rouge_l_f_score": 0.27161,
      "rouge_l_f_score_cb": 0.27161,
      "rouge_l_f_score_ce": 0.27161,
      "rouge_w_1.2_recall": 0.08741,
      "rouge_w_1.2_recall_cb": 0.08741,
      "rouge_w_1.2_recall_ce": 0.08741,
      "rouge_w_1.2_precision": 0.24707,
      "rouge_w_1.2_precision_cb": 0.24707,
      "rouge_w_1.2_precision_ce": 0.24707,
      "rouge_w_1.2_f_score": 0.12913,
      "rouge_w_1.2_f_score_cb": 0.12913,
      "rouge_w_1.2_f_score_ce": 0.12913,
      "rouge_s*_recall": 0.11981,
      "rouge_s*_recall_cb": 0.11981,
      "rouge_s*_recall_ce": 0.11981,
      "rouge_s*_precision": 0.2084,
      "rouge_s*_precision_cb": 0.2084,
      "rouge_s*_precision_ce": 0.2084,
      "rouge_s*_f_score": 0.15215,
      "rouge_s*_f_score_cb": 0.15215,
      "rouge_s*_f_score_ce": 0.15215,
      "rouge_su*_recall": 0.13056,
      "rouge_su*_recall_cb": 0.13056,
      "rouge_su*_recall_ce": 0.13056,
      "rouge_su*_precision": 0.22417,
      "rouge_su*_precision_cb": 0.22417,
      "rouge_su*_precision_ce": 0.22417,
      "rouge_su*_f_score": 0.16501,
      "rouge_su*_f_score_cb": 0.16501,
      "rouge_su*_f_score_ce": 0.16501
    }
  },
  {
    "id": 64,
    "filename": "NumpyEval_64.txt",
    "dataset_comment": "Convert integer arrays to string arrays in NumPy without truncation.",
    "generated_comment": "Convert each element in the array to a string.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.55556,
      "rouge_1_precision_cb": 0.55556,
      "rouge_1_precision_ce": 0.55556,
      "rouge_1_f_score": 0.52632,
      "rouge_1_f_score_cb": 0.52632,
      "rouge_1_f_score_ce": 0.52632,
      "rouge_2_recall": 0.11111,
      "rouge_2_recall_cb": 0.11111,
      "rouge_2_recall_ce": 0.11111,
      "rouge_2_precision": 0.125,
      "rouge_2_precision_cb": 0.125,
      "rouge_2_precision_ce": 0.125,
      "rouge_2_f_score": 0.11765,
      "rouge_2_f_score_cb": 0.11765,
      "rouge_2_f_score_ce": 0.11765,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.4,
      "rouge_l_recall_cb": 0.4,
      "rouge_l_recall_ce": 0.4,
      "rouge_l_precision": 0.44444,
      "rouge_l_precision_cb": 0.44444,
      "rouge_l_precision_ce": 0.44444,
      "rouge_l_f_score": 0.42105,
      "rouge_l_f_score_cb": 0.42105,
      "rouge_l_f_score_ce": 0.42105,
      "rouge_w_1.2_recall": 0.23064,
      "rouge_w_1.2_recall_cb": 0.23064,
      "rouge_w_1.2_recall_ce": 0.23064,
      "rouge_w_1.2_precision": 0.40615,
      "rouge_w_1.2_precision_cb": 0.40615,
      "rouge_w_1.2_precision_ce": 0.40615,
      "rouge_w_1.2_f_score": 0.29421,
      "rouge_w_1.2_f_score_cb": 0.29421,
      "rouge_w_1.2_f_score_ce": 0.29421,
      "rouge_s*_recall": 0.15556,
      "rouge_s*_recall_cb": 0.15556,
      "rouge_s*_recall_ce": 0.15556,
      "rouge_s*_precision": 0.19444,
      "rouge_s*_precision_cb": 0.19444,
      "rouge_s*_precision_ce": 0.19444,
      "rouge_s*_f_score": 0.17284,
      "rouge_s*_f_score_cb": 0.17284,
      "rouge_s*_f_score_ce": 0.17284,
      "rouge_su*_recall": 0.2037,
      "rouge_su*_recall_cb": 0.2037,
      "rouge_su*_recall_ce": 0.2037,
      "rouge_su*_precision": 0.25,
      "rouge_su*_precision_cb": 0.25,
      "rouge_su*_precision_ce": 0.25,
      "rouge_su*_f_score": 0.22449,
      "rouge_su*_f_score_cb": 0.22449,
      "rouge_su*_f_score_ce": 0.22449
    }
  },
  {
    "id": 65,
    "filename": "NumpyEval_65.txt",
    "dataset_comment": "Add rows to a numpy array in a numpythonic way.",
    "generated_comment": "Append a new row to the given 2D array in an efficient way using numpy's vstack function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.7,
      "rouge_1_recall_cb": 0.7,
      "rouge_1_recall_ce": 0.7,
      "rouge_1_precision": 0.38889,
      "rouge_1_precision_cb": 0.38889,
      "rouge_1_precision_ce": 0.38889,
      "rouge_1_f_score": 0.5,
      "rouge_1_f_score_cb": 0.5,
      "rouge_1_f_score_ce": 0.5,
      "rouge_2_recall": 0.22222,
      "rouge_2_recall_cb": 0.22222,
      "rouge_2_recall_ce": 0.22222,
      "rouge_2_precision": 0.11765,
      "rouge_2_precision_cb": 0.11765,
      "rouge_2_precision_ce": 0.11765,
      "rouge_2_f_score": 0.15385,
      "rouge_2_f_score_cb": 0.15385,
      "rouge_2_f_score_ce": 0.15385,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.5,
      "rouge_l_recall_cb": 0.5,
      "rouge_l_recall_ce": 0.5,
      "rouge_l_precision": 0.27778,
      "rouge_l_precision_cb": 0.27778,
      "rouge_l_precision_ce": 0.27778,
      "rouge_l_f_score": 0.35714,
      "rouge_l_f_score_cb": 0.35714,
      "rouge_l_f_score_ce": 0.35714,
      "rouge_w_1.2_recall": 0.26494,
      "rouge_w_1.2_recall_cb": 0.26494,
      "rouge_w_1.2_recall_ce": 0.26494,
      "rouge_w_1.2_precision": 0.23328,
      "rouge_w_1.2_precision_cb": 0.23328,
      "rouge_w_1.2_precision_ce": 0.23328,
      "rouge_w_1.2_f_score": 0.2481,
      "rouge_w_1.2_f_score_cb": 0.2481,
      "rouge_w_1.2_f_score_ce": 0.2481,
      "rouge_s*_recall": 0.35556,
      "rouge_s*_recall_cb": 0.35556,
      "rouge_s*_recall_ce": 0.35556,
      "rouge_s*_precision": 0.10458,
      "rouge_s*_precision_cb": 0.10458,
      "rouge_s*_precision_ce": 0.10458,
      "rouge_s*_f_score": 0.16162,
      "rouge_s*_f_score_cb": 0.16162,
      "rouge_s*_f_score_ce": 0.16162,
      "rouge_su*_recall": 0.40741,
      "rouge_su*_recall_cb": 0.40741,
      "rouge_su*_recall_ce": 0.40741,
      "rouge_su*_precision": 0.12941,
      "rouge_su*_precision_cb": 0.12941,
      "rouge_su*_precision_ce": 0.12941,
      "rouge_su*_f_score": 0.19643,
      "rouge_su*_f_score_cb": 0.19643,
      "rouge_su*_f_score_ce": 0.19643
    }
  },
  {
    "id": 66,
    "filename": "NumpyEval_66.txt",
    "dataset_comment": "Join the arrays using numpy methods by transposing and flattening them.",
    "generated_comment": "Combine three arrays into a single array by transposing and flattening them.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.54545,
      "rouge_1_recall_cb": 0.54545,
      "rouge_1_recall_ce": 0.54545,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.52174,
      "rouge_1_f_score_cb": 0.52174,
      "rouge_1_f_score_ce": 0.52174,
      "rouge_2_recall": 0.4,
      "rouge_2_recall_cb": 0.4,
      "rouge_2_recall_ce": 0.4,
      "rouge_2_precision": 0.36364,
      "rouge_2_precision_cb": 0.36364,
      "rouge_2_precision_ce": 0.36364,
      "rouge_2_f_score": 0.38095,
      "rouge_2_f_score_cb": 0.38095,
      "rouge_2_f_score_ce": 0.38095,
      "rouge_3_recall": 0.33333,
      "rouge_3_recall_cb": 0.33333,
      "rouge_3_recall_ce": 0.33333,
      "rouge_3_precision": 0.3,
      "rouge_3_precision_cb": 0.3,
      "rouge_3_precision_ce": 0.3,
      "rouge_3_f_score": 0.31579,
      "rouge_3_f_score_cb": 0.31579,
      "rouge_3_f_score_ce": 0.31579,
      "rouge_4_recall": 0.25,
      "rouge_4_recall_cb": 0.25,
      "rouge_4_recall_ce": 0.25,
      "rouge_4_precision": 0.22222,
      "rouge_4_precision_cb": 0.22222,
      "rouge_4_precision_ce": 0.22222,
      "rouge_4_f_score": 0.23529,
      "rouge_4_f_score_cb": 0.23529,
      "rouge_4_f_score_ce": 0.23529,
      "rouge_l_recall": 0.54545,
      "rouge_l_recall_cb": 0.54545,
      "rouge_l_recall_ce": 0.54545,
      "rouge_l_precision": 0.5,
      "rouge_l_precision_cb": 0.5,
      "rouge_l_precision_ce": 0.5,
      "rouge_l_f_score": 0.52174,
      "rouge_l_f_score_cb": 0.52174,
      "rouge_l_f_score_ce": 0.52174,
      "rouge_w_1.2_recall": 0.31498,
      "rouge_w_1.2_recall_cb": 0.31498,
      "rouge_w_1.2_recall_ce": 0.31498,
      "rouge_w_1.2_precision": 0.46642,
      "rouge_w_1.2_precision_cb": 0.46642,
      "rouge_w_1.2_precision_ce": 0.46642,
      "rouge_w_1.2_f_score": 0.37603,
      "rouge_w_1.2_f_score_cb": 0.37603,
      "rouge_w_1.2_f_score_ce": 0.37603,
      "rouge_s*_recall": 0.27273,
      "rouge_s*_recall_cb": 0.27273,
      "rouge_s*_recall_ce": 0.27273,
      "rouge_s*_precision": 0.22727,
      "rouge_s*_precision_cb": 0.22727,
      "rouge_s*_precision_ce": 0.22727,
      "rouge_s*_f_score": 0.24793,
      "rouge_s*_f_score_cb": 0.24793,
      "rouge_s*_f_score_ce": 0.24793,
      "rouge_su*_recall": 0.30769,
      "rouge_su*_recall_cb": 0.30769,
      "rouge_su*_recall_ce": 0.30769,
      "rouge_su*_precision": 0.25974,
      "rouge_su*_precision_cb": 0.25974,
      "rouge_su*_precision_ce": 0.25974,
      "rouge_su*_f_score": 0.28169,
      "rouge_su*_f_score_cb": 0.28169,
      "rouge_su*_f_score_ce": 0.28169
    }
  },
  {
    "id": 67,
    "filename": "NumpyEval_67.txt",
    "dataset_comment": "Find the indices of elements equal to zero in a NumPy array and return them.",
    "generated_comment": "Find all indices where the value is zero in an efficient way using numpy by utilizing np.where(condition).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.31579,
      "rouge_1_precision_cb": 0.31579,
      "rouge_1_precision_ce": 0.31579,
      "rouge_1_f_score": 0.35294,
      "rouge_1_f_score_cb": 0.35294,
      "rouge_1_f_score_ce": 0.35294,
      "rouge_2_recall": 0.07143,
      "rouge_2_recall_cb": 0.07143,
      "rouge_2_recall_ce": 0.07143,
      "rouge_2_precision": 0.05556,
      "rouge_2_precision_cb": 0.05556,
      "rouge_2_precision_ce": 0.05556,
      "rouge_2_f_score": 0.0625,
      "rouge_2_f_score_cb": 0.0625,
      "rouge_2_f_score_ce": 0.0625,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.33333,
      "rouge_l_recall_cb": 0.33333,
      "rouge_l_recall_ce": 0.33333,
      "rouge_l_precision": 0.26316,
      "rouge_l_precision_cb": 0.26316,
      "rouge_l_precision_ce": 0.26316,
      "rouge_l_f_score": 0.29412,
      "rouge_l_f_score_cb": 0.29412,
      "rouge_l_f_score_ce": 0.29412,
      "rouge_w_1.2_recall": 0.16287,
      "rouge_w_1.2_recall_cb": 0.16287,
      "rouge_w_1.2_recall_ce": 0.16287,
      "rouge_w_1.2_precision": 0.221,
      "rouge_w_1.2_precision_cb": 0.221,
      "rouge_w_1.2_precision_ce": 0.221,
      "rouge_w_1.2_f_score": 0.18753,
      "rouge_w_1.2_f_score_cb": 0.18753,
      "rouge_w_1.2_f_score_ce": 0.18753,
      "rouge_s*_recall": 0.13333,
      "rouge_s*_recall_cb": 0.13333,
      "rouge_s*_recall_ce": 0.13333,
      "rouge_s*_precision": 0.08187,
      "rouge_s*_precision_cb": 0.08187,
      "rouge_s*_precision_ce": 0.08187,
      "rouge_s*_f_score": 0.10145,
      "rouge_s*_f_score_cb": 0.10145,
      "rouge_s*_f_score_ce": 0.10145,
      "rouge_su*_recall": 0.16807,
      "rouge_su*_recall_cb": 0.16807,
      "rouge_su*_recall_ce": 0.16807,
      "rouge_su*_precision": 0.10582,
      "rouge_su*_precision_cb": 0.10582,
      "rouge_su*_precision_ce": 0.10582,
      "rouge_su*_f_score": 0.12987,
      "rouge_su*_f_score_cb": 0.12987,
      "rouge_su*_f_score_ce": 0.12987
    }
  },
  {
    "id": 68,
    "filename": "NumpyEval_68.txt",
    "dataset_comment": "Convert an array of indices to a 1-hot encoded numpy array.",
    "generated_comment": "We array `data` defines the columns of the nonzero elements in the output array.We need to also define the rows and then use fancy indexing in the following way:Set the specified elements in `result` to 1 based on the indices defined by `data`.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.13333,
      "rouge_1_precision_cb": 0.13333,
      "rouge_1_precision_ce": 0.13333,
      "rouge_1_f_score": 0.21052,
      "rouge_1_f_score_cb": 0.21052,
      "rouge_1_f_score_ce": 0.21052,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.41667,
      "rouge_l_recall_cb": 0.41667,
      "rouge_l_recall_ce": 0.41667,
      "rouge_l_precision": 0.11111,
      "rouge_l_precision_cb": 0.11111,
      "rouge_l_precision_ce": 0.11111,
      "rouge_l_f_score": 0.17544,
      "rouge_l_f_score_cb": 0.17544,
      "rouge_l_f_score_ce": 0.17544,
      "rouge_w_1.2_recall": 0.23433,
      "rouge_w_1.2_recall_cb": 0.23433,
      "rouge_w_1.2_recall_ce": 0.23433,
      "rouge_w_1.2_precision": 0.10272,
      "rouge_w_1.2_precision_cb": 0.10272,
      "rouge_w_1.2_precision_ce": 0.10272,
      "rouge_w_1.2_f_score": 0.14283,
      "rouge_w_1.2_f_score_cb": 0.14283,
      "rouge_w_1.2_f_score_ce": 0.14283,
      "rouge_s*_recall": 0.18182,
      "rouge_s*_recall_cb": 0.18182,
      "rouge_s*_recall_ce": 0.18182,
      "rouge_s*_precision": 0.01212,
      "rouge_s*_precision_cb": 0.01212,
      "rouge_s*_precision_ce": 0.01212,
      "rouge_s*_f_score": 0.02273,
      "rouge_s*_f_score_cb": 0.02273,
      "rouge_s*_f_score_ce": 0.02273,
      "rouge_su*_recall": 0.22078,
      "rouge_su*_recall_cb": 0.22078,
      "rouge_su*_recall_ce": 0.22078,
      "rouge_su*_precision": 0.01644,
      "rouge_su*_precision_cb": 0.01644,
      "rouge_su*_precision_ce": 0.01644,
      "rouge_su*_f_score": 0.0306,
      "rouge_su*_f_score_cb": 0.0306,
      "rouge_su*_f_score_ce": 0.0306
    }
  },
  {
    "id": 69,
    "filename": "NumpyEval_69.txt",
    "dataset_comment": "Obtain the (row, column) index of the minimum value in a NumPy array/matrix using unravel_index().",
    "generated_comment": "Find the index of the minimum value in the 2D array and convert it to a tuple of row and column indices using np.unravel_index.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.82353,
      "rouge_1_recall_cb": 0.82353,
      "rouge_1_recall_ce": 0.82353,
      "rouge_1_precision": 0.53846,
      "rouge_1_precision_cb": 0.53846,
      "rouge_1_precision_ce": 0.53846,
      "rouge_1_f_score": 0.65116,
      "rouge_1_f_score_cb": 0.65116,
      "rouge_1_f_score_ce": 0.65116,
      "rouge_2_recall": 0.4375,
      "rouge_2_recall_cb": 0.4375,
      "rouge_2_recall_ce": 0.4375,
      "rouge_2_precision": 0.28,
      "rouge_2_precision_cb": 0.28,
      "rouge_2_precision_ce": 0.28,
      "rouge_2_f_score": 0.34146,
      "rouge_2_f_score_cb": 0.34146,
      "rouge_2_f_score_ce": 0.34146,
      "rouge_3_recall": 0.26667,
      "rouge_3_recall_cb": 0.26667,
      "rouge_3_recall_ce": 0.26667,
      "rouge_3_precision": 0.16667,
      "rouge_3_precision_cb": 0.16667,
      "rouge_3_precision_ce": 0.16667,
      "rouge_3_f_score": 0.20513,
      "rouge_3_f_score_cb": 0.20513,
      "rouge_3_f_score_ce": 0.20513,
      "rouge_4_recall": 0.21429,
      "rouge_4_recall_cb": 0.21429,
      "rouge_4_recall_ce": 0.21429,
      "rouge_4_precision": 0.13043,
      "rouge_4_precision_cb": 0.13043,
      "rouge_4_precision_ce": 0.13043,
      "rouge_4_f_score": 0.16216,
      "rouge_4_f_score_cb": 0.16216,
      "rouge_4_f_score_ce": 0.16216,
      "rouge_l_recall": 0.64706,
      "rouge_l_recall_cb": 0.64706,
      "rouge_l_recall_ce": 0.64706,
      "rouge_l_precision": 0.42308,
      "rouge_l_precision_cb": 0.42308,
      "rouge_l_precision_ce": 0.42308,
      "rouge_l_f_score": 0.51163,
      "rouge_l_f_score_cb": 0.51163,
      "rouge_l_f_score_ce": 0.51163,
      "rouge_w_1.2_recall": 0.32001,
      "rouge_w_1.2_recall_cb": 0.32001,
      "rouge_w_1.2_recall_ce": 0.32001,
      "rouge_w_1.2_precision": 0.36875,
      "rouge_w_1.2_precision_cb": 0.36875,
      "rouge_w_1.2_precision_ce": 0.36875,
      "rouge_w_1.2_f_score": 0.34266,
      "rouge_w_1.2_f_score_cb": 0.34266,
      "rouge_w_1.2_f_score_ce": 0.34266,
      "rouge_s*_recall": 0.55882,
      "rouge_s*_recall_cb": 0.55882,
      "rouge_s*_recall_ce": 0.55882,
      "rouge_s*_precision": 0.23385,
      "rouge_s*_precision_cb": 0.23385,
      "rouge_s*_precision_ce": 0.23385,
      "rouge_s*_f_score": 0.32972,
      "rouge_s*_f_score_cb": 0.32972,
      "rouge_s*_f_score_ce": 0.32972,
      "rouge_su*_recall": 0.58553,
      "rouge_su*_recall_cb": 0.58553,
      "rouge_su*_recall_ce": 0.58553,
      "rouge_su*_precision": 0.25429,
      "rouge_su*_precision_cb": 0.25429,
      "rouge_su*_precision_ce": 0.25429,
      "rouge_su*_f_score": 0.35459,
      "rouge_su*_f_score_cb": 0.35459,
      "rouge_su*_f_score_ce": 0.35459
    }
  },
  {
    "id": 70,
    "filename": "NumpyEval_70.txt",
    "dataset_comment": "Calculate the mean values along the rows of a matrix while excluding NaN values from the calculation. If all row values are NaN, the mean value is set to NaN.",
    "generated_comment": "Create a masked array from the original array, masking NaN values.Compute the mean of each row in the masked array, filling masked values with NaN.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.46154,
      "rouge_1_precision_cb": 0.46154,
      "rouge_1_precision_ce": 0.46154,
      "rouge_1_f_score": 0.42857,
      "rouge_1_f_score_cb": 0.42857,
      "rouge_1_f_score_ce": 0.42857,
      "rouge_2_recall": 0.10345,
      "rouge_2_recall_cb": 0.10345,
      "rouge_2_recall_ce": 0.10345,
      "rouge_2_precision": 0.12,
      "rouge_2_precision_cb": 0.12,
      "rouge_2_precision_ce": 0.12,
      "rouge_2_f_score": 0.11111,
      "rouge_2_f_score_cb": 0.11111,
      "rouge_2_f_score_ce": 0.11111,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.26667,
      "rouge_l_recall_cb": 0.26667,
      "rouge_l_recall_ce": 0.26667,
      "rouge_l_precision": 0.30769,
      "rouge_l_precision_cb": 0.30769,
      "rouge_l_precision_ce": 0.30769,
      "rouge_l_f_score": 0.28572,
      "rouge_l_f_score_cb": 0.28572,
      "rouge_l_f_score_ce": 0.28572,
      "rouge_w_1.2_recall": 0.10569,
      "rouge_w_1.2_recall_cb": 0.10569,
      "rouge_w_1.2_recall_ce": 0.10569,
      "rouge_w_1.2_precision": 0.24078,
      "rouge_w_1.2_precision_cb": 0.24078,
      "rouge_w_1.2_precision_ce": 0.24078,
      "rouge_w_1.2_f_score": 0.1469,
      "rouge_w_1.2_f_score_cb": 0.1469,
      "rouge_w_1.2_f_score_ce": 0.1469,
      "rouge_s*_recall": 0.14023,
      "rouge_s*_recall_cb": 0.14023,
      "rouge_s*_recall_ce": 0.14023,
      "rouge_s*_precision": 0.18769,
      "rouge_s*_precision_cb": 0.18769,
      "rouge_s*_precision_ce": 0.18769,
      "rouge_s*_f_score": 0.16053,
      "rouge_s*_f_score_cb": 0.16053,
      "rouge_s*_f_score_ce": 0.16053,
      "rouge_su*_recall": 0.15517,
      "rouge_su*_recall_cb": 0.15517,
      "rouge_su*_recall_ce": 0.15517,
      "rouge_su*_precision": 0.20571,
      "rouge_su*_precision_cb": 0.20571,
      "rouge_su*_precision_ce": 0.20571,
      "rouge_su*_f_score": 0.1769,
      "rouge_su*_f_score_cb": 0.1769,
      "rouge_su*_f_score_ce": 0.1769
    }
  },
  {
    "id": 71,
    "filename": "NumpyEval_71.txt",
    "dataset_comment": "Replace all elements of the Python NumPy array that are greater than `value` with `new_value` and return the array.",
    "generated_comment": "Replace elements in the array that are greater than the specified value with the new value.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.65,
      "rouge_1_recall_cb": 0.65,
      "rouge_1_recall_ce": 0.65,
      "rouge_1_precision": 0.8125,
      "rouge_1_precision_cb": 0.8125,
      "rouge_1_precision_ce": 0.8125,
      "rouge_1_f_score": 0.72222,
      "rouge_1_f_score_cb": 0.72222,
      "rouge_1_f_score_ce": 0.72222,
      "rouge_2_recall": 0.36842,
      "rouge_2_recall_cb": 0.36842,
      "rouge_2_recall_ce": 0.36842,
      "rouge_2_precision": 0.46667,
      "rouge_2_precision_cb": 0.46667,
      "rouge_2_precision_ce": 0.46667,
      "rouge_2_f_score": 0.41177,
      "rouge_2_f_score_cb": 0.41177,
      "rouge_2_f_score_ce": 0.41177,
      "rouge_3_recall": 0.16667,
      "rouge_3_recall_cb": 0.16667,
      "rouge_3_recall_ce": 0.16667,
      "rouge_3_precision": 0.21429,
      "rouge_3_precision_cb": 0.21429,
      "rouge_3_precision_ce": 0.21429,
      "rouge_3_f_score": 0.1875,
      "rouge_3_f_score_cb": 0.1875,
      "rouge_3_f_score_ce": 0.1875,
      "rouge_4_recall": 0.11765,
      "rouge_4_recall_cb": 0.11765,
      "rouge_4_recall_ce": 0.11765,
      "rouge_4_precision": 0.15385,
      "rouge_4_precision_cb": 0.15385,
      "rouge_4_precision_ce": 0.15385,
      "rouge_4_f_score": 0.13334,
      "rouge_4_f_score_cb": 0.13334,
      "rouge_4_f_score_ce": 0.13334,
      "rouge_l_recall": 0.6,
      "rouge_l_recall_cb": 0.6,
      "rouge_l_recall_ce": 0.6,
      "rouge_l_precision": 0.75,
      "rouge_l_precision_cb": 0.75,
      "rouge_l_precision_ce": 0.75,
      "rouge_l_f_score": 0.66667,
      "rouge_l_f_score_cb": 0.66667,
      "rouge_l_f_score_ce": 0.66667,
      "rouge_w_1.2_recall": 0.29069,
      "rouge_w_1.2_recall_cb": 0.29069,
      "rouge_w_1.2_recall_ce": 0.29069,
      "rouge_w_1.2_precision": 0.66152,
      "rouge_w_1.2_precision_cb": 0.66152,
      "rouge_w_1.2_precision_ce": 0.66152,
      "rouge_w_1.2_f_score": 0.4039,
      "rouge_w_1.2_f_score_cb": 0.4039,
      "rouge_w_1.2_f_score_ce": 0.4039,
      "rouge_s*_recall": 0.4,
      "rouge_s*_recall_cb": 0.4,
      "rouge_s*_recall_ce": 0.4,
      "rouge_s*_precision": 0.63333,
      "rouge_s*_precision_cb": 0.63333,
      "rouge_s*_precision_ce": 0.63333,
      "rouge_s*_f_score": 0.49032,
      "rouge_s*_f_score_cb": 0.49032,
      "rouge_s*_f_score_ce": 0.49032,
      "rouge_su*_recall": 0.42105,
      "rouge_su*_recall_cb": 0.42105,
      "rouge_su*_recall_ce": 0.42105,
      "rouge_su*_precision": 0.65185,
      "rouge_su*_precision_cb": 0.65185,
      "rouge_su*_precision_ce": 0.65185,
      "rouge_su*_f_score": 0.51163,
      "rouge_su*_f_score_cb": 0.51163,
      "rouge_su*_f_score_ce": 0.51163
    }
  },
  {
    "id": 72,
    "filename": "NumpyEval_72.txt",
    "dataset_comment": "Slice a numpy array to obtain the i-th index in the last dimension without explicitly writing the array dimensions using Ellipsis. Returns a numpy array.",
    "generated_comment": "Retrieve the i-th index along the last dimension of the array efficiently using numpy slicing.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.46154,
      "rouge_1_recall_cb": 0.46154,
      "rouge_1_recall_ce": 0.46154,
      "rouge_1_precision": 0.75,
      "rouge_1_precision_cb": 0.75,
      "rouge_1_precision_ce": 0.75,
      "rouge_1_f_score": 0.57143,
      "rouge_1_f_score_cb": 0.57143,
      "rouge_1_f_score_ce": 0.57143,
      "rouge_2_recall": 0.24,
      "rouge_2_recall_cb": 0.24,
      "rouge_2_recall_ce": 0.24,
      "rouge_2_precision": 0.4,
      "rouge_2_precision_cb": 0.4,
      "rouge_2_precision_ce": 0.4,
      "rouge_2_f_score": 0.3,
      "rouge_2_f_score_cb": 0.3,
      "rouge_2_f_score_ce": 0.3,
      "rouge_3_recall": 0.125,
      "rouge_3_recall_cb": 0.125,
      "rouge_3_recall_ce": 0.125,
      "rouge_3_precision": 0.21429,
      "rouge_3_precision_cb": 0.21429,
      "rouge_3_precision_ce": 0.21429,
      "rouge_3_f_score": 0.1579,
      "rouge_3_f_score_cb": 0.1579,
      "rouge_3_f_score_ce": 0.1579,
      "rouge_4_recall": 0.04348,
      "rouge_4_recall_cb": 0.04348,
      "rouge_4_recall_ce": 0.04348,
      "rouge_4_precision": 0.07692,
      "rouge_4_precision_cb": 0.07692,
      "rouge_4_precision_ce": 0.07692,
      "rouge_4_f_score": 0.05556,
      "rouge_4_f_score_cb": 0.05556,
      "rouge_4_f_score_ce": 0.05556,
      "rouge_l_recall": 0.42308,
      "rouge_l_recall_cb": 0.42308,
      "rouge_l_recall_ce": 0.42308,
      "rouge_l_precision": 0.6875,
      "rouge_l_precision_cb": 0.6875,
      "rouge_l_precision_ce": 0.6875,
      "rouge_l_f_score": 0.52381,
      "rouge_l_f_score_cb": 0.52381,
      "rouge_l_f_score_ce": 0.52381,
      "rouge_w_1.2_recall": 0.17335,
      "rouge_w_1.2_recall_cb": 0.17335,
      "rouge_w_1.2_recall_ce": 0.17335,
      "rouge_w_1.2_precision": 0.54046,
      "rouge_w_1.2_precision_cb": 0.54046,
      "rouge_w_1.2_precision_ce": 0.54046,
      "rouge_w_1.2_f_score": 0.2625,
      "rouge_w_1.2_f_score_cb": 0.2625,
      "rouge_w_1.2_f_score_ce": 0.2625,
      "rouge_s*_recall": 0.16923,
      "rouge_s*_recall_cb": 0.16923,
      "rouge_s*_recall_ce": 0.16923,
      "rouge_s*_precision": 0.45833,
      "rouge_s*_precision_cb": 0.45833,
      "rouge_s*_precision_ce": 0.45833,
      "rouge_s*_f_score": 0.24719,
      "rouge_s*_f_score_cb": 0.24719,
      "rouge_s*_f_score_ce": 0.24719,
      "rouge_su*_recall": 0.18857,
      "rouge_su*_recall_cb": 0.18857,
      "rouge_su*_recall_ce": 0.18857,
      "rouge_su*_precision": 0.48889,
      "rouge_su*_precision_cb": 0.48889,
      "rouge_su*_precision_ce": 0.48889,
      "rouge_su*_f_score": 0.27216,
      "rouge_su*_f_score_cb": 0.27216,
      "rouge_su*_f_score_ce": 0.27216
    }
  },
  {
    "id": 73,
    "filename": "NumpyEval_73.txt",
    "dataset_comment": "Find the nearest value in a numpy array and return the result.",
    "generated_comment": "Find the index of the element in the array that is closest to the given value using numpy's argmin function on the absolute difference.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.58333,
      "rouge_1_recall_cb": 0.58333,
      "rouge_1_recall_ce": 0.58333,
      "rouge_1_precision": 0.28,
      "rouge_1_precision_cb": 0.28,
      "rouge_1_precision_ce": 0.28,
      "rouge_1_f_score": 0.37838,
      "rouge_1_f_score_cb": 0.37838,
      "rouge_1_f_score_ce": 0.37838,
      "rouge_2_recall": 0.09091,
      "rouge_2_recall_cb": 0.09091,
      "rouge_2_recall_ce": 0.09091,
      "rouge_2_precision": 0.04167,
      "rouge_2_precision_cb": 0.04167,
      "rouge_2_precision_ce": 0.04167,
      "rouge_2_f_score": 0.05715,
      "rouge_2_f_score_cb": 0.05715,
      "rouge_2_f_score_ce": 0.05715,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.41667,
      "rouge_l_recall_cb": 0.41667,
      "rouge_l_recall_ce": 0.41667,
      "rouge_l_precision": 0.2,
      "rouge_l_precision_cb": 0.2,
      "rouge_l_precision_ce": 0.2,
      "rouge_l_f_score": 0.27027,
      "rouge_l_f_score_cb": 0.27027,
      "rouge_l_f_score_ce": 0.27027,
      "rouge_w_1.2_recall": 0.20341,
      "rouge_w_1.2_recall_cb": 0.20341,
      "rouge_w_1.2_recall_ce": 0.20341,
      "rouge_w_1.2_precision": 0.16049,
      "rouge_w_1.2_precision_cb": 0.16049,
      "rouge_w_1.2_precision_ce": 0.16049,
      "rouge_w_1.2_f_score": 0.17942,
      "rouge_w_1.2_f_score_cb": 0.17942,
      "rouge_w_1.2_f_score_ce": 0.17942,
      "rouge_s*_recall": 0.27273,
      "rouge_s*_recall_cb": 0.27273,
      "rouge_s*_recall_ce": 0.27273,
      "rouge_s*_precision": 0.06,
      "rouge_s*_precision_cb": 0.06,
      "rouge_s*_precision_ce": 0.06,
      "rouge_s*_f_score": 0.09836,
      "rouge_s*_f_score_cb": 0.09836,
      "rouge_s*_f_score_ce": 0.09836,
      "rouge_su*_recall": 0.32468,
      "rouge_su*_recall_cb": 0.32468,
      "rouge_su*_recall_ce": 0.32468,
      "rouge_su*_precision": 0.07716,
      "rouge_su*_precision_cb": 0.07716,
      "rouge_su*_precision_ce": 0.07716,
      "rouge_su*_f_score": 0.12469,
      "rouge_su*_f_score_cb": 0.12469,
      "rouge_su*_f_score_ce": 0.12469
    }
  },
  {
    "id": 74,
    "filename": "NumpyEval_74.txt",
    "dataset_comment": "Find the index of the elements within the range [low, high] and return the final array of indices.",
    "generated_comment": "Find indices of elements within the specified range [low, high] using numpy's logical_and and np.where.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.55556,
      "rouge_1_recall_cb": 0.55556,
      "rouge_1_recall_ce": 0.55556,
      "rouge_1_precision": 0.55556,
      "rouge_1_precision_cb": 0.55556,
      "rouge_1_precision_ce": 0.55556,
      "rouge_1_f_score": 0.55556,
      "rouge_1_f_score_cb": 0.55556,
      "rouge_1_f_score_ce": 0.55556,
      "rouge_2_recall": 0.29412,
      "rouge_2_recall_cb": 0.29412,
      "rouge_2_recall_ce": 0.29412,
      "rouge_2_precision": 0.29412,
      "rouge_2_precision_cb": 0.29412,
      "rouge_2_precision_ce": 0.29412,
      "rouge_2_f_score": 0.29412,
      "rouge_2_f_score_cb": 0.29412,
      "rouge_2_f_score_ce": 0.29412,
      "rouge_3_recall": 0.125,
      "rouge_3_recall_cb": 0.125,
      "rouge_3_recall_ce": 0.125,
      "rouge_3_precision": 0.125,
      "rouge_3_precision_cb": 0.125,
      "rouge_3_precision_ce": 0.125,
      "rouge_3_f_score": 0.125,
      "rouge_3_f_score_cb": 0.125,
      "rouge_3_f_score_ce": 0.125,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.55556,
      "rouge_l_recall_cb": 0.55556,
      "rouge_l_recall_ce": 0.55556,
      "rouge_l_precision": 0.55556,
      "rouge_l_precision_cb": 0.55556,
      "rouge_l_precision_ce": 0.55556,
      "rouge_l_f_score": 0.55556,
      "rouge_l_f_score_cb": 0.55556,
      "rouge_l_f_score_ce": 0.55556,
      "rouge_w_1.2_recall": 0.27481,
      "rouge_w_1.2_recall_cb": 0.27481,
      "rouge_w_1.2_recall_ce": 0.27481,
      "rouge_w_1.2_precision": 0.48987,
      "rouge_w_1.2_precision_cb": 0.48987,
      "rouge_w_1.2_precision_ce": 0.48987,
      "rouge_w_1.2_f_score": 0.3521,
      "rouge_w_1.2_f_score_cb": 0.3521,
      "rouge_w_1.2_f_score_ce": 0.3521,
      "rouge_s*_recall": 0.30065,
      "rouge_s*_recall_cb": 0.30065,
      "rouge_s*_recall_ce": 0.30065,
      "rouge_s*_precision": 0.30065,
      "rouge_s*_precision_cb": 0.30065,
      "rouge_s*_precision_ce": 0.30065,
      "rouge_s*_f_score": 0.30065,
      "rouge_s*_f_score_cb": 0.30065,
      "rouge_s*_f_score_ce": 0.30065,
      "rouge_su*_recall": 0.32941,
      "rouge_su*_recall_cb": 0.32941,
      "rouge_su*_recall_ce": 0.32941,
      "rouge_su*_precision": 0.32941,
      "rouge_su*_precision_cb": 0.32941,
      "rouge_su*_precision_ce": 0.32941,
      "rouge_su*_f_score": 0.32941,
      "rouge_su*_f_score_cb": 0.32941,
      "rouge_su*_f_score_ce": 0.32941
    }
  },
  {
    "id": 75,
    "filename": "NumpyEval_75.txt",
    "dataset_comment": "Sure! Here is the unified style of annotation for the comments you provided:```python This provides the values of interest. Generate a mask to identify all values that are even numbers. Determine if there is an efficient Numpy mechanism to retrieve the integer indexes of locations in an array based on a true condition, instead of using the Boolean mask array.```",
    "generated_comment": "Find the indices of all even numbers in the array using numpy by checking the condition where the remainder of division by 2 is 0 and utilizing np.where(condition).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.2623,
      "rouge_1_recall_cb": 0.2623,
      "rouge_1_recall_ce": 0.2623,
      "rouge_1_precision": 0.53333,
      "rouge_1_precision_cb": 0.53333,
      "rouge_1_precision_ce": 0.53333,
      "rouge_1_f_score": 0.35165,
      "rouge_1_f_score_cb": 0.35165,
      "rouge_1_f_score_ce": 0.35165,
      "rouge_2_recall": 0.03333,
      "rouge_2_recall_cb": 0.03333,
      "rouge_2_recall_ce": 0.03333,
      "rouge_2_precision": 0.06897,
      "rouge_2_precision_cb": 0.06897,
      "rouge_2_precision_ce": 0.06897,
      "rouge_2_f_score": 0.04494,
      "rouge_2_f_score_cb": 0.04494,
      "rouge_2_f_score_ce": 0.04494,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.14754,
      "rouge_l_recall_cb": 0.14754,
      "rouge_l_recall_ce": 0.14754,
      "rouge_l_precision": 0.3,
      "rouge_l_precision_cb": 0.3,
      "rouge_l_precision_ce": 0.3,
      "rouge_l_f_score": 0.1978,
      "rouge_l_f_score_cb": 0.1978,
      "rouge_l_f_score_ce": 0.1978,
      "rouge_w_1.2_recall": 0.04619,
      "rouge_w_1.2_recall_cb": 0.04619,
      "rouge_w_1.2_recall_ce": 0.04619,
      "rouge_w_1.2_precision": 0.21372,
      "rouge_w_1.2_precision_cb": 0.21372,
      "rouge_w_1.2_precision_ce": 0.21372,
      "rouge_w_1.2_f_score": 0.07596,
      "rouge_w_1.2_f_score_cb": 0.07596,
      "rouge_w_1.2_f_score_ce": 0.07596,
      "rouge_s*_recall": 0.0541,
      "rouge_s*_recall_cb": 0.0541,
      "rouge_s*_recall_ce": 0.0541,
      "rouge_s*_precision": 0.22759,
      "rouge_s*_precision_cb": 0.22759,
      "rouge_s*_precision_ce": 0.22759,
      "rouge_s*_f_score": 0.08742,
      "rouge_s*_f_score_cb": 0.08742,
      "rouge_s*_f_score_ce": 0.08742,
      "rouge_su*_recall": 0.06085,
      "rouge_su*_recall_cb": 0.06085,
      "rouge_su*_recall_ce": 0.06085,
      "rouge_su*_precision": 0.24784,
      "rouge_su*_precision_cb": 0.24784,
      "rouge_su*_precision_ce": 0.24784,
      "rouge_su*_f_score": 0.09771,
      "rouge_su*_f_score_cb": 0.09771,
      "rouge_su*_f_score_ce": 0.09771
    }
  },
  {
    "id": 76,
    "filename": "NumpyEval_76.txt",
    "dataset_comment": "Convert a dictionary to a NumPy structured array.",
    "generated_comment": "Convert the dictionary into a structured numpy array with specified dtype, where the keys are treated as 'id' and values as 'data'.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.75,
      "rouge_1_recall_cb": 0.75,
      "rouge_1_recall_ce": 0.75,
      "rouge_1_precision": 0.27273,
      "rouge_1_precision_cb": 0.27273,
      "rouge_1_precision_ce": 0.27273,
      "rouge_1_f_score": 0.4,
      "rouge_1_f_score_cb": 0.4,
      "rouge_1_f_score_ce": 0.4,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.625,
      "rouge_l_recall_cb": 0.625,
      "rouge_l_recall_ce": 0.625,
      "rouge_l_precision": 0.22727,
      "rouge_l_precision_cb": 0.22727,
      "rouge_l_precision_ce": 0.22727,
      "rouge_l_f_score": 0.33333,
      "rouge_l_f_score_cb": 0.33333,
      "rouge_l_f_score_ce": 0.33333,
      "rouge_w_1.2_recall": 0.33089,
      "rouge_w_1.2_recall_cb": 0.33089,
      "rouge_w_1.2_recall_ce": 0.33089,
      "rouge_w_1.2_precision": 0.18237,
      "rouge_w_1.2_precision_cb": 0.18237,
      "rouge_w_1.2_precision_ce": 0.18237,
      "rouge_w_1.2_f_score": 0.23514,
      "rouge_w_1.2_f_score_cb": 0.23514,
      "rouge_w_1.2_f_score_ce": 0.23514,
      "rouge_s*_recall": 0.5,
      "rouge_s*_recall_cb": 0.5,
      "rouge_s*_recall_ce": 0.5,
      "rouge_s*_precision": 0.06061,
      "rouge_s*_precision_cb": 0.06061,
      "rouge_s*_precision_ce": 0.06061,
      "rouge_s*_f_score": 0.10811,
      "rouge_s*_f_score_cb": 0.10811,
      "rouge_s*_f_score_ce": 0.10811,
      "rouge_su*_recall": 0.54286,
      "rouge_su*_recall_cb": 0.54286,
      "rouge_su*_recall_ce": 0.54286,
      "rouge_su*_precision": 0.0754,
      "rouge_su*_precision_cb": 0.0754,
      "rouge_su*_precision_ce": 0.0754,
      "rouge_su*_f_score": 0.13241,
      "rouge_su*_f_score_cb": 0.13241,
      "rouge_su*_f_score_ce": 0.13241
    }
  },
  {
    "id": 77,
    "filename": "NumpyEval_77.txt",
    "dataset_comment": "Determine the inverse of the NumPy cumsum function.",
    "generated_comment": "Replace each element in the array with its previous element",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.125,
      "rouge_1_recall_cb": 0.125,
      "rouge_1_recall_ce": 0.125,
      "rouge_1_precision": 0.1,
      "rouge_1_precision_cb": 0.1,
      "rouge_1_precision_ce": 0.1,
      "rouge_1_f_score": 0.11111,
      "rouge_1_f_score_cb": 0.11111,
      "rouge_1_f_score_ce": 0.11111,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.125,
      "rouge_l_recall_cb": 0.125,
      "rouge_l_recall_ce": 0.125,
      "rouge_l_precision": 0.1,
      "rouge_l_precision_cb": 0.1,
      "rouge_l_precision_ce": 0.1,
      "rouge_l_f_score": 0.11111,
      "rouge_l_f_score_cb": 0.11111,
      "rouge_l_f_score_ce": 0.11111,
      "rouge_w_1.2_recall": 0.08247,
      "rouge_w_1.2_recall_cb": 0.08247,
      "rouge_w_1.2_recall_ce": 0.08247,
      "rouge_w_1.2_precision": 0.1,
      "rouge_w_1.2_precision_cb": 0.1,
      "rouge_w_1.2_precision_ce": 0.1,
      "rouge_w_1.2_f_score": 0.09039,
      "rouge_w_1.2_f_score_cb": 0.09039,
      "rouge_w_1.2_f_score_ce": 0.09039,
      "rouge_s*_recall": 0.0,
      "rouge_s*_recall_cb": 0.0,
      "rouge_s*_recall_ce": 0.0,
      "rouge_s*_precision": 0.0,
      "rouge_s*_precision_cb": 0.0,
      "rouge_s*_precision_ce": 0.0,
      "rouge_s*_f_score": 0.0,
      "rouge_s*_f_score_cb": 0.0,
      "rouge_s*_f_score_ce": 0.0,
      "rouge_su*_recall": 0.02857,
      "rouge_su*_recall_cb": 0.02857,
      "rouge_su*_recall_ce": 0.02857,
      "rouge_su*_precision": 0.01852,
      "rouge_su*_precision_cb": 0.01852,
      "rouge_su*_precision_ce": 0.01852,
      "rouge_su*_f_score": 0.02247,
      "rouge_su*_f_score_cb": 0.02247,
      "rouge_su*_f_score_ce": 0.02247
    }
  },
  {
    "id": 78,
    "filename": "NumpyEval_78.txt",
    "dataset_comment": "Translate every element of a numpy array according to a given key using np.vectorize on the .get method of dictionaries.",
    "generated_comment": "Apply the dictionary values to the corresponding elements in the numpy array using np.vectorize.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.42857,
      "rouge_1_recall_cb": 0.42857,
      "rouge_1_recall_ce": 0.42857,
      "rouge_1_precision": 0.6,
      "rouge_1_precision_cb": 0.6,
      "rouge_1_precision_ce": 0.6,
      "rouge_1_f_score": 0.5,
      "rouge_1_f_score_cb": 0.5,
      "rouge_1_f_score_ce": 0.5,
      "rouge_2_recall": 0.15,
      "rouge_2_recall_cb": 0.15,
      "rouge_2_recall_ce": 0.15,
      "rouge_2_precision": 0.21429,
      "rouge_2_precision_cb": 0.21429,
      "rouge_2_precision_ce": 0.21429,
      "rouge_2_f_score": 0.17647,
      "rouge_2_f_score_cb": 0.17647,
      "rouge_2_f_score_ce": 0.17647,
      "rouge_3_recall": 0.05263,
      "rouge_3_recall_cb": 0.05263,
      "rouge_3_recall_ce": 0.05263,
      "rouge_3_precision": 0.07692,
      "rouge_3_precision_cb": 0.07692,
      "rouge_3_precision_ce": 0.07692,
      "rouge_3_f_score": 0.0625,
      "rouge_3_f_score_cb": 0.0625,
      "rouge_3_f_score_ce": 0.0625,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.28571,
      "rouge_l_recall_cb": 0.28571,
      "rouge_l_recall_ce": 0.28571,
      "rouge_l_precision": 0.4,
      "rouge_l_precision_cb": 0.4,
      "rouge_l_precision_ce": 0.4,
      "rouge_l_f_score": 0.33333,
      "rouge_l_f_score_cb": 0.33333,
      "rouge_l_f_score_ce": 0.33333,
      "rouge_w_1.2_recall": 0.13163,
      "rouge_w_1.2_recall_cb": 0.13163,
      "rouge_w_1.2_recall_ce": 0.13163,
      "rouge_w_1.2_precision": 0.3388,
      "rouge_w_1.2_precision_cb": 0.3388,
      "rouge_w_1.2_precision_ce": 0.3388,
      "rouge_w_1.2_f_score": 0.1896,
      "rouge_w_1.2_f_score_cb": 0.1896,
      "rouge_w_1.2_f_score_ce": 0.1896,
      "rouge_s*_recall": 0.1,
      "rouge_s*_recall_cb": 0.1,
      "rouge_s*_recall_ce": 0.1,
      "rouge_s*_precision": 0.2,
      "rouge_s*_precision_cb": 0.2,
      "rouge_s*_precision_ce": 0.2,
      "rouge_s*_f_score": 0.13333,
      "rouge_s*_f_score_cb": 0.13333,
      "rouge_s*_f_score_ce": 0.13333,
      "rouge_su*_recall": 0.12174,
      "rouge_su*_recall_cb": 0.12174,
      "rouge_su*_recall_ce": 0.12174,
      "rouge_su*_precision": 0.23529,
      "rouge_su*_precision_cb": 0.23529,
      "rouge_su*_precision_ce": 0.23529,
      "rouge_su*_f_score": 0.16046,
      "rouge_su*_f_score_cb": 0.16046,
      "rouge_su*_f_score_ce": 0.16046
    }
  },
  {
    "id": 79,
    "filename": "NumpyEval_79.txt",
    "dataset_comment": "Perform element-wise string concatenation using the appropriate method in numpy.",
    "generated_comment": "Concatenate corresponding elements of two string arrays element-wise using numpy's character array addition function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.54545,
      "rouge_1_recall_cb": 0.54545,
      "rouge_1_recall_ce": 0.54545,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.44444,
      "rouge_1_f_score_cb": 0.44444,
      "rouge_1_f_score_ce": 0.44444,
      "rouge_2_recall": 0.1,
      "rouge_2_recall_cb": 0.1,
      "rouge_2_recall_ce": 0.1,
      "rouge_2_precision": 0.06667,
      "rouge_2_precision_cb": 0.06667,
      "rouge_2_precision_ce": 0.06667,
      "rouge_2_f_score": 0.08,
      "rouge_2_f_score_cb": 0.08,
      "rouge_2_f_score_ce": 0.08,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.36364,
      "rouge_l_recall_cb": 0.36364,
      "rouge_l_recall_ce": 0.36364,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.2963,
      "rouge_l_f_score_cb": 0.2963,
      "rouge_l_f_score_ce": 0.2963,
      "rouge_w_1.2_recall": 0.18967,
      "rouge_w_1.2_recall_cb": 0.18967,
      "rouge_w_1.2_recall_ce": 0.18967,
      "rouge_w_1.2_precision": 0.21065,
      "rouge_w_1.2_precision_cb": 0.21065,
      "rouge_w_1.2_precision_ce": 0.21065,
      "rouge_w_1.2_f_score": 0.19961,
      "rouge_w_1.2_f_score_cb": 0.19961,
      "rouge_w_1.2_f_score_ce": 0.19961,
      "rouge_s*_recall": 0.2,
      "rouge_s*_recall_cb": 0.2,
      "rouge_s*_recall_ce": 0.2,
      "rouge_s*_precision": 0.09167,
      "rouge_s*_precision_cb": 0.09167,
      "rouge_s*_precision_ce": 0.09167,
      "rouge_s*_f_score": 0.12572,
      "rouge_s*_f_score_cb": 0.12572,
      "rouge_s*_f_score_ce": 0.12572,
      "rouge_su*_recall": 0.24615,
      "rouge_su*_recall_cb": 0.24615,
      "rouge_su*_recall_ce": 0.24615,
      "rouge_su*_precision": 0.11852,
      "rouge_su*_precision_cb": 0.11852,
      "rouge_su*_precision_ce": 0.11852,
      "rouge_su*_f_score": 0.16,
      "rouge_su*_f_score_cb": 0.16,
      "rouge_su*_f_score_ce": 0.16
    }
  },
  {
    "id": 80,
    "filename": "NumpyEval_80.txt",
    "dataset_comment": "Partition the array into 3 chunks using NumPy.",
    "generated_comment": "Split the array into 3 approximately equal parts using numpy's array_split function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.75,
      "rouge_1_recall_cb": 0.75,
      "rouge_1_recall_ce": 0.75,
      "rouge_1_precision": 0.42857,
      "rouge_1_precision_cb": 0.42857,
      "rouge_1_precision_ce": 0.42857,
      "rouge_1_f_score": 0.54545,
      "rouge_1_f_score_cb": 0.54545,
      "rouge_1_f_score_ce": 0.54545,
      "rouge_2_recall": 0.57143,
      "rouge_2_recall_cb": 0.57143,
      "rouge_2_recall_ce": 0.57143,
      "rouge_2_precision": 0.30769,
      "rouge_2_precision_cb": 0.30769,
      "rouge_2_precision_ce": 0.30769,
      "rouge_2_f_score": 0.4,
      "rouge_2_f_score_cb": 0.4,
      "rouge_2_f_score_ce": 0.4,
      "rouge_3_recall": 0.33333,
      "rouge_3_recall_cb": 0.33333,
      "rouge_3_recall_ce": 0.33333,
      "rouge_3_precision": 0.16667,
      "rouge_3_precision_cb": 0.16667,
      "rouge_3_precision_ce": 0.16667,
      "rouge_3_f_score": 0.22222,
      "rouge_3_f_score_cb": 0.22222,
      "rouge_3_f_score_ce": 0.22222,
      "rouge_4_recall": 0.2,
      "rouge_4_recall_cb": 0.2,
      "rouge_4_recall_ce": 0.2,
      "rouge_4_precision": 0.09091,
      "rouge_4_precision_cb": 0.09091,
      "rouge_4_precision_ce": 0.09091,
      "rouge_4_f_score": 0.125,
      "rouge_4_f_score_cb": 0.125,
      "rouge_4_f_score_ce": 0.125,
      "rouge_l_recall": 0.75,
      "rouge_l_recall_cb": 0.75,
      "rouge_l_recall_ce": 0.75,
      "rouge_l_precision": 0.42857,
      "rouge_l_precision_cb": 0.42857,
      "rouge_l_precision_ce": 0.42857,
      "rouge_l_f_score": 0.54545,
      "rouge_l_f_score_cb": 0.54545,
      "rouge_l_f_score_ce": 0.54545,
      "rouge_w_1.2_recall": 0.44579,
      "rouge_w_1.2_recall_cb": 0.44579,
      "rouge_w_1.2_recall_ce": 0.44579,
      "rouge_w_1.2_precision": 0.38611,
      "rouge_w_1.2_precision_cb": 0.38611,
      "rouge_w_1.2_precision_ce": 0.38611,
      "rouge_w_1.2_f_score": 0.41381,
      "rouge_w_1.2_f_score_cb": 0.41381,
      "rouge_w_1.2_f_score_ce": 0.41381,
      "rouge_s*_recall": 0.53571,
      "rouge_s*_recall_cb": 0.53571,
      "rouge_s*_recall_ce": 0.53571,
      "rouge_s*_precision": 0.16484,
      "rouge_s*_precision_cb": 0.16484,
      "rouge_s*_precision_ce": 0.16484,
      "rouge_s*_f_score": 0.25211,
      "rouge_s*_f_score_cb": 0.25211,
      "rouge_s*_f_score_ce": 0.25211,
      "rouge_su*_recall": 0.57143,
      "rouge_su*_recall_cb": 0.57143,
      "rouge_su*_recall_ce": 0.57143,
      "rouge_su*_precision": 0.19231,
      "rouge_su*_precision_cb": 0.19231,
      "rouge_su*_precision_ce": 0.19231,
      "rouge_su*_f_score": 0.28777,
      "rouge_su*_f_score_cb": 0.28777,
      "rouge_su*_f_score_ce": 0.28777
    }
  },
  {
    "id": 81,
    "filename": "NumpyEval_81.txt",
    "dataset_comment": "Extract a sub-array from a numpy 2D array with a specified size and return it.",
    "generated_comment": "Crop a 2D numpy array by specifying the top, bottom, left, and right boundaries.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.3125,
      "rouge_1_recall_cb": 0.3125,
      "rouge_1_recall_ce": 0.3125,
      "rouge_1_precision": 0.35714,
      "rouge_1_precision_cb": 0.35714,
      "rouge_1_precision_ce": 0.35714,
      "rouge_1_f_score": 0.33333,
      "rouge_1_f_score_cb": 0.33333,
      "rouge_1_f_score_ce": 0.33333,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.25,
      "rouge_l_recall_cb": 0.25,
      "rouge_l_recall_ce": 0.25,
      "rouge_l_precision": 0.28571,
      "rouge_l_precision_cb": 0.28571,
      "rouge_l_precision_ce": 0.28571,
      "rouge_l_f_score": 0.26666,
      "rouge_l_f_score_cb": 0.26666,
      "rouge_l_f_score_ce": 0.26666,
      "rouge_w_1.2_recall": 0.11397,
      "rouge_w_1.2_recall_cb": 0.11397,
      "rouge_w_1.2_recall_ce": 0.11397,
      "rouge_w_1.2_precision": 0.22677,
      "rouge_w_1.2_precision_cb": 0.22677,
      "rouge_w_1.2_precision_ce": 0.22677,
      "rouge_w_1.2_f_score": 0.1517,
      "rouge_w_1.2_f_score_cb": 0.1517,
      "rouge_w_1.2_f_score_ce": 0.1517,
      "rouge_s*_recall": 0.075,
      "rouge_s*_recall_cb": 0.075,
      "rouge_s*_recall_ce": 0.075,
      "rouge_s*_precision": 0.0989,
      "rouge_s*_precision_cb": 0.0989,
      "rouge_s*_precision_ce": 0.0989,
      "rouge_s*_f_score": 0.08531,
      "rouge_s*_f_score_cb": 0.08531,
      "rouge_s*_f_score_ce": 0.08531,
      "rouge_su*_recall": 0.1037,
      "rouge_su*_recall_cb": 0.1037,
      "rouge_su*_recall_ce": 0.1037,
      "rouge_su*_precision": 0.13462,
      "rouge_su*_precision_cb": 0.13462,
      "rouge_su*_precision_ce": 0.13462,
      "rouge_su*_f_score": 0.11715,
      "rouge_su*_f_score_cb": 0.11715,
      "rouge_su*_f_score_ce": 0.11715
    }
  },
  {
    "id": 82,
    "filename": "NumpyEval_82.txt",
    "dataset_comment": "Append the first element to the end of the array and return the appended array.",
    "generated_comment": "Append the first element of the array to the end of the array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.8,
      "rouge_1_recall_cb": 0.8,
      "rouge_1_recall_ce": 0.8,
      "rouge_1_precision": 0.92308,
      "rouge_1_precision_cb": 0.92308,
      "rouge_1_precision_ce": 0.92308,
      "rouge_1_f_score": 0.85714,
      "rouge_1_f_score_cb": 0.85714,
      "rouge_1_f_score_ce": 0.85714,
      "rouge_2_recall": 0.57143,
      "rouge_2_recall_cb": 0.57143,
      "rouge_2_recall_ce": 0.57143,
      "rouge_2_precision": 0.66667,
      "rouge_2_precision_cb": 0.66667,
      "rouge_2_precision_ce": 0.66667,
      "rouge_2_f_score": 0.61539,
      "rouge_2_f_score_cb": 0.61539,
      "rouge_2_f_score_ce": 0.61539,
      "rouge_3_recall": 0.46154,
      "rouge_3_recall_cb": 0.46154,
      "rouge_3_recall_ce": 0.46154,
      "rouge_3_precision": 0.54545,
      "rouge_3_precision_cb": 0.54545,
      "rouge_3_precision_ce": 0.54545,
      "rouge_3_f_score": 0.5,
      "rouge_3_f_score_cb": 0.5,
      "rouge_3_f_score_ce": 0.5,
      "rouge_4_recall": 0.33333,
      "rouge_4_recall_cb": 0.33333,
      "rouge_4_recall_ce": 0.33333,
      "rouge_4_precision": 0.4,
      "rouge_4_precision_cb": 0.4,
      "rouge_4_precision_ce": 0.4,
      "rouge_4_f_score": 0.36363,
      "rouge_4_f_score_cb": 0.36363,
      "rouge_4_f_score_ce": 0.36363,
      "rouge_l_recall": 0.66667,
      "rouge_l_recall_cb": 0.66667,
      "rouge_l_recall_ce": 0.66667,
      "rouge_l_precision": 0.76923,
      "rouge_l_precision_cb": 0.76923,
      "rouge_l_precision_ce": 0.76923,
      "rouge_l_f_score": 0.71429,
      "rouge_l_f_score_cb": 0.71429,
      "rouge_l_f_score_ce": 0.71429,
      "rouge_w_1.2_recall": 0.3524,
      "rouge_w_1.2_recall_cb": 0.3524,
      "rouge_w_1.2_recall_ce": 0.3524,
      "rouge_w_1.2_precision": 0.69887,
      "rouge_w_1.2_precision_cb": 0.69887,
      "rouge_w_1.2_precision_ce": 0.69887,
      "rouge_w_1.2_f_score": 0.46854,
      "rouge_w_1.2_f_score_cb": 0.46854,
      "rouge_w_1.2_f_score_ce": 0.46854,
      "rouge_s*_recall": 0.58095,
      "rouge_s*_recall_cb": 0.58095,
      "rouge_s*_recall_ce": 0.58095,
      "rouge_s*_precision": 0.78205,
      "rouge_s*_precision_cb": 0.78205,
      "rouge_s*_precision_ce": 0.78205,
      "rouge_s*_f_score": 0.66666,
      "rouge_s*_f_score_cb": 0.66666,
      "rouge_s*_f_score_ce": 0.66666,
      "rouge_su*_recall": 0.60504,
      "rouge_su*_recall_cb": 0.60504,
      "rouge_su*_recall_ce": 0.60504,
      "rouge_su*_precision": 0.8,
      "rouge_su*_precision_cb": 0.8,
      "rouge_su*_precision_ce": 0.8,
      "rouge_su*_f_score": 0.68899,
      "rouge_su*_f_score_cb": 0.68899,
      "rouge_su*_f_score_ce": 0.68899
    }
  },
  {
    "id": 83,
    "filename": "NumpyEval_83.txt",
    "dataset_comment": "Separate the keys and values into two numpy arrays.",
    "generated_comment": "Convert the keys and values of the dictionary into numpy arrays of float type.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.77778,
      "rouge_1_recall_cb": 0.77778,
      "rouge_1_recall_ce": 0.77778,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.6087,
      "rouge_1_f_score_cb": 0.6087,
      "rouge_1_f_score_ce": 0.6087,
      "rouge_2_recall": 0.5,
      "rouge_2_recall_cb": 0.5,
      "rouge_2_recall_ce": 0.5,
      "rouge_2_precision": 0.30769,
      "rouge_2_precision_cb": 0.30769,
      "rouge_2_precision_ce": 0.30769,
      "rouge_2_f_score": 0.38095,
      "rouge_2_f_score_cb": 0.38095,
      "rouge_2_f_score_ce": 0.38095,
      "rouge_3_recall": 0.28571,
      "rouge_3_recall_cb": 0.28571,
      "rouge_3_recall_ce": 0.28571,
      "rouge_3_precision": 0.16667,
      "rouge_3_precision_cb": 0.16667,
      "rouge_3_precision_ce": 0.16667,
      "rouge_3_f_score": 0.21053,
      "rouge_3_f_score_cb": 0.21053,
      "rouge_3_f_score_ce": 0.21053,
      "rouge_4_recall": 0.16667,
      "rouge_4_recall_cb": 0.16667,
      "rouge_4_recall_ce": 0.16667,
      "rouge_4_precision": 0.09091,
      "rouge_4_precision_cb": 0.09091,
      "rouge_4_precision_ce": 0.09091,
      "rouge_4_f_score": 0.11765,
      "rouge_4_f_score_cb": 0.11765,
      "rouge_4_f_score_ce": 0.11765,
      "rouge_l_recall": 0.77778,
      "rouge_l_recall_cb": 0.77778,
      "rouge_l_recall_ce": 0.77778,
      "rouge_l_precision": 0.5,
      "rouge_l_precision_cb": 0.5,
      "rouge_l_precision_ce": 0.5,
      "rouge_l_f_score": 0.6087,
      "rouge_l_f_score_cb": 0.6087,
      "rouge_l_f_score_ce": 0.6087,
      "rouge_w_1.2_recall": 0.45489,
      "rouge_w_1.2_recall_cb": 0.45489,
      "rouge_w_1.2_recall_ce": 0.45489,
      "rouge_w_1.2_precision": 0.45381,
      "rouge_w_1.2_precision_cb": 0.45381,
      "rouge_w_1.2_precision_ce": 0.45381,
      "rouge_w_1.2_f_score": 0.45435,
      "rouge_w_1.2_f_score_cb": 0.45435,
      "rouge_w_1.2_f_score_ce": 0.45435,
      "rouge_s*_recall": 0.58333,
      "rouge_s*_recall_cb": 0.58333,
      "rouge_s*_recall_ce": 0.58333,
      "rouge_s*_precision": 0.23077,
      "rouge_s*_precision_cb": 0.23077,
      "rouge_s*_precision_ce": 0.23077,
      "rouge_s*_f_score": 0.33071,
      "rouge_s*_f_score_cb": 0.33071,
      "rouge_s*_f_score_ce": 0.33071,
      "rouge_su*_recall": 0.61364,
      "rouge_su*_recall_cb": 0.61364,
      "rouge_su*_recall_ce": 0.61364,
      "rouge_su*_precision": 0.25962,
      "rouge_su*_precision_cb": 0.25962,
      "rouge_su*_precision_ce": 0.25962,
      "rouge_su*_f_score": 0.36487,
      "rouge_su*_f_score_cb": 0.36487,
      "rouge_su*_f_score_ce": 0.36487
    }
  },
  {
    "id": 84,
    "filename": "NumpyEval_84.txt",
    "dataset_comment": "Set the super low value named tol to zero in the fastest and easiest way, handling real and imaginary numbers separately.",
    "generated_comment": "Set the real part of the array to 0 where the absolute value of the real part is less than the tolerance.Set the imaginary part of the array to 0 where the absolute value of the imaginary part is less than the tolerance.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.33333,
      "rouge_1_recall_cb": 0.33333,
      "rouge_1_recall_ce": 0.33333,
      "rouge_1_precision": 0.15909,
      "rouge_1_precision_cb": 0.15909,
      "rouge_1_precision_ce": 0.15909,
      "rouge_1_f_score": 0.21538,
      "rouge_1_f_score_cb": 0.21538,
      "rouge_1_f_score_ce": 0.21538,
      "rouge_2_recall": 0.05,
      "rouge_2_recall_cb": 0.05,
      "rouge_2_recall_ce": 0.05,
      "rouge_2_precision": 0.02326,
      "rouge_2_precision_cb": 0.02326,
      "rouge_2_precision_ce": 0.02326,
      "rouge_2_f_score": 0.03175,
      "rouge_2_f_score_cb": 0.03175,
      "rouge_2_f_score_ce": 0.03175,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.28571,
      "rouge_l_recall_cb": 0.28571,
      "rouge_l_recall_ce": 0.28571,
      "rouge_l_precision": 0.13636,
      "rouge_l_precision_cb": 0.13636,
      "rouge_l_precision_ce": 0.13636,
      "rouge_l_f_score": 0.18461,
      "rouge_l_f_score_cb": 0.18461,
      "rouge_l_f_score_ce": 0.18461,
      "rouge_w_1.2_recall": 0.12003,
      "rouge_w_1.2_recall_cb": 0.12003,
      "rouge_w_1.2_recall_ce": 0.12003,
      "rouge_w_1.2_precision": 0.10532,
      "rouge_w_1.2_precision_cb": 0.10532,
      "rouge_w_1.2_precision_ce": 0.10532,
      "rouge_w_1.2_f_score": 0.11219,
      "rouge_w_1.2_f_score_cb": 0.11219,
      "rouge_w_1.2_f_score_ce": 0.11219,
      "rouge_s*_recall": 0.1,
      "rouge_s*_recall_cb": 0.1,
      "rouge_s*_recall_ce": 0.1,
      "rouge_s*_precision": 0.0222,
      "rouge_s*_precision_cb": 0.0222,
      "rouge_s*_precision_ce": 0.0222,
      "rouge_s*_f_score": 0.03633,
      "rouge_s*_f_score_cb": 0.03633,
      "rouge_s*_f_score_ce": 0.03633,
      "rouge_su*_recall": 0.12174,
      "rouge_su*_recall_cb": 0.12174,
      "rouge_su*_recall_ce": 0.12174,
      "rouge_su*_precision": 0.02831,
      "rouge_su*_precision_cb": 0.02831,
      "rouge_su*_precision_ce": 0.02831,
      "rouge_su*_f_score": 0.04594,
      "rouge_su*_f_score_cb": 0.04594,
      "rouge_su*_f_score_ce": 0.04594
    }
  },
  {
    "id": 85,
    "filename": "NumpyEval_85.txt",
    "dataset_comment": "Test if the NumPy array contains only zeros and return the result.",
    "generated_comment": "Check if the array contains only zeros by verifying that there are no non-zero elements.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5,
      "rouge_1_recall_cb": 0.5,
      "rouge_1_recall_ce": 0.5,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.42857,
      "rouge_1_f_score_cb": 0.42857,
      "rouge_1_f_score_ce": 0.42857,
      "rouge_2_recall": 0.36364,
      "rouge_2_recall_cb": 0.36364,
      "rouge_2_recall_ce": 0.36364,
      "rouge_2_precision": 0.26667,
      "rouge_2_precision_cb": 0.26667,
      "rouge_2_precision_ce": 0.26667,
      "rouge_2_f_score": 0.3077,
      "rouge_2_f_score_cb": 0.3077,
      "rouge_2_f_score_ce": 0.3077,
      "rouge_3_recall": 0.2,
      "rouge_3_recall_cb": 0.2,
      "rouge_3_recall_ce": 0.2,
      "rouge_3_precision": 0.14286,
      "rouge_3_precision_cb": 0.14286,
      "rouge_3_precision_ce": 0.14286,
      "rouge_3_f_score": 0.16667,
      "rouge_3_f_score_cb": 0.16667,
      "rouge_3_f_score_ce": 0.16667,
      "rouge_4_recall": 0.11111,
      "rouge_4_recall_cb": 0.11111,
      "rouge_4_recall_ce": 0.11111,
      "rouge_4_precision": 0.07692,
      "rouge_4_precision_cb": 0.07692,
      "rouge_4_precision_ce": 0.07692,
      "rouge_4_f_score": 0.09091,
      "rouge_4_f_score_cb": 0.09091,
      "rouge_4_f_score_ce": 0.09091,
      "rouge_l_recall": 0.5,
      "rouge_l_recall_cb": 0.5,
      "rouge_l_recall_ce": 0.5,
      "rouge_l_precision": 0.375,
      "rouge_l_precision_cb": 0.375,
      "rouge_l_precision_ce": 0.375,
      "rouge_l_f_score": 0.42857,
      "rouge_l_f_score_cb": 0.42857,
      "rouge_l_f_score_ce": 0.42857,
      "rouge_w_1.2_recall": 0.27404,
      "rouge_w_1.2_recall_cb": 0.27404,
      "rouge_w_1.2_recall_ce": 0.27404,
      "rouge_w_1.2_precision": 0.33785,
      "rouge_w_1.2_precision_cb": 0.33785,
      "rouge_w_1.2_precision_ce": 0.33785,
      "rouge_w_1.2_f_score": 0.30262,
      "rouge_w_1.2_f_score_cb": 0.30262,
      "rouge_w_1.2_f_score_ce": 0.30262,
      "rouge_s*_recall": 0.22727,
      "rouge_s*_recall_cb": 0.22727,
      "rouge_s*_recall_ce": 0.22727,
      "rouge_s*_precision": 0.125,
      "rouge_s*_precision_cb": 0.125,
      "rouge_s*_precision_ce": 0.125,
      "rouge_s*_f_score": 0.16129,
      "rouge_s*_f_score_cb": 0.16129,
      "rouge_s*_f_score_ce": 0.16129,
      "rouge_su*_recall": 0.27273,
      "rouge_su*_recall_cb": 0.27273,
      "rouge_su*_recall_ce": 0.27273,
      "rouge_su*_precision": 0.15556,
      "rouge_su*_precision_cb": 0.15556,
      "rouge_su*_precision_ce": 0.15556,
      "rouge_su*_f_score": 0.19812,
      "rouge_su*_f_score_cb": 0.19812,
      "rouge_su*_f_score_ce": 0.19812
    }
  },
  {
    "id": 86,
    "filename": "NumpyEval_86.txt",
    "dataset_comment": "Convert Numpy Vector from (N, 1) dimension to (N,) dimension.",
    "generated_comment": "Convert a 2D numpy array with shape (3, 1) to a 1D numpy array with shape (3,) by reshaping it.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.2,
      "rouge_1_precision_cb": 0.2,
      "rouge_1_precision_ce": 0.2,
      "rouge_1_f_score": 0.26667,
      "rouge_1_f_score_cb": 0.26667,
      "rouge_1_f_score_ce": 0.26667,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.4,
      "rouge_l_recall_cb": 0.4,
      "rouge_l_recall_ce": 0.4,
      "rouge_l_precision": 0.2,
      "rouge_l_precision_cb": 0.2,
      "rouge_l_precision_ce": 0.2,
      "rouge_l_f_score": 0.26667,
      "rouge_l_f_score_cb": 0.26667,
      "rouge_l_f_score_ce": 0.26667,
      "rouge_w_1.2_recall": 0.21265,
      "rouge_w_1.2_recall_cb": 0.21265,
      "rouge_w_1.2_recall_ce": 0.21265,
      "rouge_w_1.2_precision": 0.16852,
      "rouge_w_1.2_precision_cb": 0.16852,
      "rouge_w_1.2_precision_ce": 0.16852,
      "rouge_w_1.2_f_score": 0.18803,
      "rouge_w_1.2_f_score_cb": 0.18803,
      "rouge_w_1.2_f_score_ce": 0.18803,
      "rouge_s*_recall": 0.13333,
      "rouge_s*_recall_cb": 0.13333,
      "rouge_s*_recall_ce": 0.13333,
      "rouge_s*_precision": 0.03158,
      "rouge_s*_precision_cb": 0.03158,
      "rouge_s*_precision_ce": 0.03158,
      "rouge_s*_f_score": 0.05106,
      "rouge_s*_f_score_cb": 0.05106,
      "rouge_s*_f_score_ce": 0.05106,
      "rouge_su*_recall": 0.18519,
      "rouge_su*_recall_cb": 0.18519,
      "rouge_su*_recall_ce": 0.18519,
      "rouge_su*_precision": 0.04785,
      "rouge_su*_precision_cb": 0.04785,
      "rouge_su*_precision_ce": 0.04785,
      "rouge_su*_f_score": 0.07605,
      "rouge_su*_f_score_cb": 0.07605,
      "rouge_su*_f_score_ce": 0.07605
    }
  },
  {
    "id": 87,
    "filename": "NumpyEval_87.txt",
    "dataset_comment": "Check if all values in the columns of a numpy array/matrix are the same. A column shares a common value if all the values in that column are True. The code checks if all values in the columns are the same using a == a[0,:] with axis=0.",
    "generated_comment": "Identify columns where all elements are identical by comparing each column with the first column and using np.all(condition, axis=0).",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.22449,
      "rouge_1_recall_cb": 0.22449,
      "rouge_1_recall_ce": 0.22449,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.30986,
      "rouge_1_f_score_cb": 0.30986,
      "rouge_1_f_score_ce": 0.30986,
      "rouge_2_recall": 0.02083,
      "rouge_2_recall_cb": 0.02083,
      "rouge_2_recall_ce": 0.02083,
      "rouge_2_precision": 0.04762,
      "rouge_2_precision_cb": 0.04762,
      "rouge_2_precision_ce": 0.04762,
      "rouge_2_f_score": 0.02898,
      "rouge_2_f_score_cb": 0.02898,
      "rouge_2_f_score_ce": 0.02898,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.16327,
      "rouge_l_recall_cb": 0.16327,
      "rouge_l_recall_ce": 0.16327,
      "rouge_l_precision": 0.36364,
      "rouge_l_precision_cb": 0.36364,
      "rouge_l_precision_ce": 0.36364,
      "rouge_l_f_score": 0.22536,
      "rouge_l_f_score_cb": 0.22536,
      "rouge_l_f_score_ce": 0.22536,
      "rouge_w_1.2_recall": 0.05464,
      "rouge_w_1.2_recall_cb": 0.05464,
      "rouge_w_1.2_recall_ce": 0.05464,
      "rouge_w_1.2_precision": 0.26507,
      "rouge_w_1.2_precision_cb": 0.26507,
      "rouge_w_1.2_precision_ce": 0.26507,
      "rouge_w_1.2_f_score": 0.0906,
      "rouge_w_1.2_f_score_cb": 0.0906,
      "rouge_w_1.2_f_score_ce": 0.0906,
      "rouge_s*_recall": 0.04252,
      "rouge_s*_recall_cb": 0.04252,
      "rouge_s*_recall_ce": 0.04252,
      "rouge_s*_precision": 0.21645,
      "rouge_s*_precision_cb": 0.21645,
      "rouge_s*_precision_ce": 0.21645,
      "rouge_s*_f_score": 0.07108,
      "rouge_s*_f_score_cb": 0.07108,
      "rouge_s*_f_score_ce": 0.07108,
      "rouge_su*_recall": 0.04902,
      "rouge_su*_recall_cb": 0.04902,
      "rouge_su*_recall_ce": 0.04902,
      "rouge_su*_precision": 0.2381,
      "rouge_su*_precision_cb": 0.2381,
      "rouge_su*_precision_ce": 0.2381,
      "rouge_su*_f_score": 0.0813,
      "rouge_su*_f_score_cb": 0.0813,
      "rouge_su*_f_score_ce": 0.0813
    }
  },
  {
    "id": 88,
    "filename": "NumpyEval_88.txt",
    "dataset_comment": "Convert NaN values to zero and return the changed array.",
    "generated_comment": "Replace all NaN values in the array with 0.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4,
      "rouge_1_recall_cb": 0.4,
      "rouge_1_recall_ce": 0.4,
      "rouge_1_precision": 0.44444,
      "rouge_1_precision_cb": 0.44444,
      "rouge_1_precision_ce": 0.44444,
      "rouge_1_f_score": 0.42105,
      "rouge_1_f_score_cb": 0.42105,
      "rouge_1_f_score_ce": 0.42105,
      "rouge_2_recall": 0.11111,
      "rouge_2_recall_cb": 0.11111,
      "rouge_2_recall_ce": 0.11111,
      "rouge_2_precision": 0.125,
      "rouge_2_precision_cb": 0.125,
      "rouge_2_precision_ce": 0.125,
      "rouge_2_f_score": 0.11765,
      "rouge_2_f_score_cb": 0.11765,
      "rouge_2_f_score_ce": 0.11765,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.4,
      "rouge_l_recall_cb": 0.4,
      "rouge_l_recall_ce": 0.4,
      "rouge_l_precision": 0.44444,
      "rouge_l_precision_cb": 0.44444,
      "rouge_l_precision_ce": 0.44444,
      "rouge_l_f_score": 0.42105,
      "rouge_l_f_score_cb": 0.42105,
      "rouge_l_f_score_ce": 0.42105,
      "rouge_w_1.2_recall": 0.21265,
      "rouge_w_1.2_recall_cb": 0.21265,
      "rouge_w_1.2_recall_ce": 0.21265,
      "rouge_w_1.2_precision": 0.37448,
      "rouge_w_1.2_precision_cb": 0.37448,
      "rouge_w_1.2_precision_ce": 0.37448,
      "rouge_w_1.2_f_score": 0.27126,
      "rouge_w_1.2_f_score_cb": 0.27126,
      "rouge_w_1.2_f_score_ce": 0.27126,
      "rouge_s*_recall": 0.13333,
      "rouge_s*_recall_cb": 0.13333,
      "rouge_s*_recall_ce": 0.13333,
      "rouge_s*_precision": 0.16667,
      "rouge_s*_precision_cb": 0.16667,
      "rouge_s*_precision_ce": 0.16667,
      "rouge_s*_f_score": 0.14815,
      "rouge_s*_f_score_cb": 0.14815,
      "rouge_s*_f_score_ce": 0.14815,
      "rouge_su*_recall": 0.16667,
      "rouge_su*_recall_cb": 0.16667,
      "rouge_su*_recall_ce": 0.16667,
      "rouge_su*_precision": 0.20455,
      "rouge_su*_precision_cb": 0.20455,
      "rouge_su*_precision_ce": 0.20455,
      "rouge_su*_f_score": 0.18368,
      "rouge_su*_f_score_cb": 0.18368,
      "rouge_su*_f_score_ce": 0.18368
    }
  },
  {
    "id": 89,
    "filename": "NumpyEval_89.txt",
    "dataset_comment": "Find the groups of consecutive elements in a NumPy array and return the number of consecutive elements.  Given a NumPy array, cluster the consecutive elements considering a specified difference limit.  For example, for the array a = [0, 47, 48, 49, 50, 97, 98, 99], the output should be a list of tuples as follows:  [(0), (47, 48, 49, 50), (97, 98, 99)].",
    "generated_comment": "Split the data into consecutive segments where the difference between elements is not equal to the specified stepsize.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.1129,
      "rouge_1_recall_cb": 0.1129,
      "rouge_1_recall_ce": 0.1129,
      "rouge_1_precision": 0.38889,
      "rouge_1_precision_cb": 0.38889,
      "rouge_1_precision_ce": 0.38889,
      "rouge_1_f_score": 0.175,
      "rouge_1_f_score_cb": 0.175,
      "rouge_1_f_score_ce": 0.175,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.09677,
      "rouge_l_recall_cb": 0.09677,
      "rouge_l_recall_ce": 0.09677,
      "rouge_l_precision": 0.33333,
      "rouge_l_precision_cb": 0.33333,
      "rouge_l_precision_ce": 0.33333,
      "rouge_l_f_score": 0.14999,
      "rouge_l_f_score_cb": 0.14999,
      "rouge_l_f_score_ce": 0.14999,
      "rouge_w_1.2_recall": 0.03145,
      "rouge_w_1.2_recall_cb": 0.03145,
      "rouge_w_1.2_recall_ce": 0.03145,
      "rouge_w_1.2_precision": 0.24728,
      "rouge_w_1.2_precision_cb": 0.24728,
      "rouge_w_1.2_precision_ce": 0.24728,
      "rouge_w_1.2_f_score": 0.0558,
      "rouge_w_1.2_f_score_cb": 0.0558,
      "rouge_w_1.2_f_score_ce": 0.0558,
      "rouge_s*_recall": 0.01005,
      "rouge_s*_recall_cb": 0.01005,
      "rouge_s*_recall_ce": 0.01005,
      "rouge_s*_precision": 0.12418,
      "rouge_s*_precision_cb": 0.12418,
      "rouge_s*_precision_ce": 0.12418,
      "rouge_s*_f_score": 0.0186,
      "rouge_s*_f_score_cb": 0.0186,
      "rouge_s*_f_score_ce": 0.0186,
      "rouge_su*_recall": 0.01332,
      "rouge_su*_recall_cb": 0.01332,
      "rouge_su*_recall_ce": 0.01332,
      "rouge_su*_precision": 0.15294,
      "rouge_su*_precision_cb": 0.15294,
      "rouge_su*_precision_ce": 0.15294,
      "rouge_su*_f_score": 0.02451,
      "rouge_su*_f_score_cb": 0.02451,
      "rouge_su*_f_score_ce": 0.02451
    }
  },
  {
    "id": 90,
    "filename": "NumpyEval_90.txt",
    "dataset_comment": "Concatenate one NumPy array to another NumPy array.",
    "generated_comment": "Concatenate two numpy arrays efficiently using np.concatenate.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.375,
      "rouge_1_recall_cb": 0.375,
      "rouge_1_recall_ce": 0.375,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.375,
      "rouge_1_f_score_cb": 0.375,
      "rouge_1_f_score_ce": 0.375,
      "rouge_2_recall": 0.14286,
      "rouge_2_recall_cb": 0.14286,
      "rouge_2_recall_ce": 0.14286,
      "rouge_2_precision": 0.14286,
      "rouge_2_precision_cb": 0.14286,
      "rouge_2_precision_ce": 0.14286,
      "rouge_2_f_score": 0.14286,
      "rouge_2_f_score_cb": 0.14286,
      "rouge_2_f_score_ce": 0.14286,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.375,
      "rouge_l_recall_cb": 0.375,
      "rouge_l_recall_ce": 0.375,
      "rouge_l_precision": 0.375,
      "rouge_l_precision_cb": 0.375,
      "rouge_l_precision_ce": 0.375,
      "rouge_l_f_score": 0.375,
      "rouge_l_f_score_cb": 0.375,
      "rouge_l_f_score_ce": 0.375,
      "rouge_w_1.2_recall": 0.2229,
      "rouge_w_1.2_recall_cb": 0.2229,
      "rouge_w_1.2_recall_ce": 0.2229,
      "rouge_w_1.2_precision": 0.33785,
      "rouge_w_1.2_precision_cb": 0.33785,
      "rouge_w_1.2_precision_ce": 0.33785,
      "rouge_w_1.2_f_score": 0.26859,
      "rouge_w_1.2_f_score_cb": 0.26859,
      "rouge_w_1.2_f_score_ce": 0.26859,
      "rouge_s*_recall": 0.10714,
      "rouge_s*_recall_cb": 0.10714,
      "rouge_s*_recall_ce": 0.10714,
      "rouge_s*_precision": 0.10714,
      "rouge_s*_precision_cb": 0.10714,
      "rouge_s*_precision_ce": 0.10714,
      "rouge_s*_f_score": 0.10714,
      "rouge_s*_f_score_cb": 0.10714,
      "rouge_s*_f_score_ce": 0.10714,
      "rouge_su*_recall": 0.17143,
      "rouge_su*_recall_cb": 0.17143,
      "rouge_su*_recall_ce": 0.17143,
      "rouge_su*_precision": 0.17143,
      "rouge_su*_precision_cb": 0.17143,
      "rouge_su*_precision_ce": 0.17143,
      "rouge_su*_f_score": 0.17143,
      "rouge_su*_f_score_cb": 0.17143,
      "rouge_su*_f_score_ce": 0.17143
    }
  },
  {
    "id": 91,
    "filename": "NumpyEval_91.txt",
    "dataset_comment": "Remove columns with index 1 and 3 in NumPy. To delete multiple columns, pass the indices of the columns to be deleted as a list to np.delete.",
    "generated_comment": "Delete columns at indices 1 and 3 along the specified axis (axis=1) using np.delete.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.32143,
      "rouge_1_recall_cb": 0.32143,
      "rouge_1_recall_ce": 0.32143,
      "rouge_1_precision": 0.5625,
      "rouge_1_precision_cb": 0.5625,
      "rouge_1_precision_ce": 0.5625,
      "rouge_1_f_score": 0.40909,
      "rouge_1_f_score_cb": 0.40909,
      "rouge_1_f_score_ce": 0.40909,
      "rouge_2_recall": 0.14815,
      "rouge_2_recall_cb": 0.14815,
      "rouge_2_recall_ce": 0.14815,
      "rouge_2_precision": 0.26667,
      "rouge_2_precision_cb": 0.26667,
      "rouge_2_precision_ce": 0.26667,
      "rouge_2_f_score": 0.19048,
      "rouge_2_f_score_cb": 0.19048,
      "rouge_2_f_score_ce": 0.19048,
      "rouge_3_recall": 0.07692,
      "rouge_3_recall_cb": 0.07692,
      "rouge_3_recall_ce": 0.07692,
      "rouge_3_precision": 0.14286,
      "rouge_3_precision_cb": 0.14286,
      "rouge_3_precision_ce": 0.14286,
      "rouge_3_f_score": 0.1,
      "rouge_3_f_score_cb": 0.1,
      "rouge_3_f_score_ce": 0.1,
      "rouge_4_recall": 0.04,
      "rouge_4_recall_cb": 0.04,
      "rouge_4_recall_ce": 0.04,
      "rouge_4_precision": 0.07692,
      "rouge_4_precision_cb": 0.07692,
      "rouge_4_precision_ce": 0.07692,
      "rouge_4_f_score": 0.05263,
      "rouge_4_f_score_cb": 0.05263,
      "rouge_4_f_score_ce": 0.05263,
      "rouge_l_recall": 0.28571,
      "rouge_l_recall_cb": 0.28571,
      "rouge_l_recall_ce": 0.28571,
      "rouge_l_precision": 0.5,
      "rouge_l_precision_cb": 0.5,
      "rouge_l_precision_ce": 0.5,
      "rouge_l_f_score": 0.36363,
      "rouge_l_f_score_cb": 0.36363,
      "rouge_l_f_score_ce": 0.36363,
      "rouge_w_1.2_recall": 0.12052,
      "rouge_w_1.2_recall_cb": 0.12052,
      "rouge_w_1.2_recall_ce": 0.12052,
      "rouge_w_1.2_precision": 0.41069,
      "rouge_w_1.2_precision_cb": 0.41069,
      "rouge_w_1.2_precision_ce": 0.41069,
      "rouge_w_1.2_f_score": 0.18635,
      "rouge_w_1.2_f_score_cb": 0.18635,
      "rouge_w_1.2_f_score_ce": 0.18635,
      "rouge_s*_recall": 0.08995,
      "rouge_s*_recall_cb": 0.08995,
      "rouge_s*_recall_ce": 0.08995,
      "rouge_s*_precision": 0.28333,
      "rouge_s*_precision_cb": 0.28333,
      "rouge_s*_precision_ce": 0.28333,
      "rouge_s*_f_score": 0.13655,
      "rouge_s*_f_score_cb": 0.13655,
      "rouge_s*_f_score_ce": 0.13655,
      "rouge_su*_recall": 0.1037,
      "rouge_su*_recall_cb": 0.1037,
      "rouge_su*_recall_ce": 0.1037,
      "rouge_su*_precision": 0.31111,
      "rouge_su*_precision_cb": 0.31111,
      "rouge_su*_precision_ce": 0.31111,
      "rouge_su*_f_score": 0.15555,
      "rouge_su*_f_score_cb": 0.15555,
      "rouge_su*_f_score_ce": 0.15555
    }
  },
  {
    "id": 92,
    "filename": "NumpyEval_92.txt",
    "dataset_comment": "Convert the matrix to a one-dimensional Python list containing all values of the matrix.",
    "generated_comment": "Convert the numpy matrix to a 1D numpy array and then to a Python list.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.46667,
      "rouge_1_recall_cb": 0.46667,
      "rouge_1_recall_ce": 0.46667,
      "rouge_1_precision": 0.46667,
      "rouge_1_precision_cb": 0.46667,
      "rouge_1_precision_ce": 0.46667,
      "rouge_1_f_score": 0.46667,
      "rouge_1_f_score_cb": 0.46667,
      "rouge_1_f_score_ce": 0.46667,
      "rouge_2_recall": 0.28571,
      "rouge_2_recall_cb": 0.28571,
      "rouge_2_recall_ce": 0.28571,
      "rouge_2_precision": 0.28571,
      "rouge_2_precision_cb": 0.28571,
      "rouge_2_precision_ce": 0.28571,
      "rouge_2_f_score": 0.28571,
      "rouge_2_f_score_cb": 0.28571,
      "rouge_2_f_score_ce": 0.28571,
      "rouge_3_recall": 0.07692,
      "rouge_3_recall_cb": 0.07692,
      "rouge_3_recall_ce": 0.07692,
      "rouge_3_precision": 0.07692,
      "rouge_3_precision_cb": 0.07692,
      "rouge_3_precision_ce": 0.07692,
      "rouge_3_f_score": 0.07692,
      "rouge_3_f_score_cb": 0.07692,
      "rouge_3_f_score_ce": 0.07692,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.46667,
      "rouge_l_recall_cb": 0.46667,
      "rouge_l_recall_ce": 0.46667,
      "rouge_l_precision": 0.46667,
      "rouge_l_precision_cb": 0.46667,
      "rouge_l_precision_ce": 0.46667,
      "rouge_l_f_score": 0.46667,
      "rouge_l_f_score_cb": 0.46667,
      "rouge_l_f_score_ce": 0.46667,
      "rouge_w_1.2_recall": 0.24643,
      "rouge_w_1.2_recall_cb": 0.24643,
      "rouge_w_1.2_recall_ce": 0.24643,
      "rouge_w_1.2_precision": 0.42355,
      "rouge_w_1.2_precision_cb": 0.42355,
      "rouge_w_1.2_precision_ce": 0.42355,
      "rouge_w_1.2_f_score": 0.31158,
      "rouge_w_1.2_f_score_cb": 0.31158,
      "rouge_w_1.2_f_score_ce": 0.31158,
      "rouge_s*_recall": 0.2,
      "rouge_s*_recall_cb": 0.2,
      "rouge_s*_recall_ce": 0.2,
      "rouge_s*_precision": 0.2,
      "rouge_s*_precision_cb": 0.2,
      "rouge_s*_precision_ce": 0.2,
      "rouge_s*_f_score": 0.2,
      "rouge_s*_f_score_cb": 0.2,
      "rouge_s*_f_score_ce": 0.2,
      "rouge_su*_recall": 0.22689,
      "rouge_su*_recall_cb": 0.22689,
      "rouge_su*_recall_ce": 0.22689,
      "rouge_su*_precision": 0.22689,
      "rouge_su*_precision_cb": 0.22689,
      "rouge_su*_precision_ce": 0.22689,
      "rouge_su*_f_score": 0.22689,
      "rouge_su*_f_score_cb": 0.22689,
      "rouge_su*_f_score_ce": 0.22689
    }
  },
  {
    "id": 93,
    "filename": "NumpyEval_93.txt",
    "dataset_comment": "Remove specific elements from a NumPy array by utilizing the indices provided (index=[2, 3, 6]).",
    "generated_comment": "Remove elements at specified indices from the array efficiently using numpy's np.delete function.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.4375,
      "rouge_1_recall_cb": 0.4375,
      "rouge_1_recall_ce": 0.4375,
      "rouge_1_precision": 0.46667,
      "rouge_1_precision_cb": 0.46667,
      "rouge_1_precision_ce": 0.46667,
      "rouge_1_f_score": 0.45161,
      "rouge_1_f_score_cb": 0.45161,
      "rouge_1_f_score_ce": 0.45161,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.25,
      "rouge_l_recall_cb": 0.25,
      "rouge_l_recall_ce": 0.25,
      "rouge_l_precision": 0.26667,
      "rouge_l_precision_cb": 0.26667,
      "rouge_l_precision_ce": 0.26667,
      "rouge_l_f_score": 0.25807,
      "rouge_l_f_score_cb": 0.25807,
      "rouge_l_f_score_ce": 0.25807,
      "rouge_w_1.2_recall": 0.12098,
      "rouge_w_1.2_recall_cb": 0.12098,
      "rouge_w_1.2_recall_ce": 0.12098,
      "rouge_w_1.2_precision": 0.22469,
      "rouge_w_1.2_precision_cb": 0.22469,
      "rouge_w_1.2_precision_ce": 0.22469,
      "rouge_w_1.2_f_score": 0.15728,
      "rouge_w_1.2_f_score_cb": 0.15728,
      "rouge_w_1.2_f_score_ce": 0.15728,
      "rouge_s*_recall": 0.11667,
      "rouge_s*_recall_cb": 0.11667,
      "rouge_s*_recall_ce": 0.11667,
      "rouge_s*_precision": 0.13333,
      "rouge_s*_precision_cb": 0.13333,
      "rouge_s*_precision_ce": 0.13333,
      "rouge_s*_f_score": 0.12444,
      "rouge_s*_f_score_cb": 0.12444,
      "rouge_s*_f_score_ce": 0.12444,
      "rouge_su*_recall": 0.15556,
      "rouge_su*_recall_cb": 0.15556,
      "rouge_su*_recall_ce": 0.15556,
      "rouge_su*_precision": 0.17647,
      "rouge_su*_precision_cb": 0.17647,
      "rouge_su*_precision_ce": 0.17647,
      "rouge_su*_f_score": 0.16536,
      "rouge_su*_f_score_cb": 0.16536,
      "rouge_su*_f_score_ce": 0.16536
    }
  },
  {
    "id": 94,
    "filename": "NumpyEval_94.txt",
    "dataset_comment": "Remove zero rows from a 2-D numpy array using np.all with an axis argument.",
    "generated_comment": "Remove rows where all elements are zero using numpy by checking each row with np.all(arr == 0, axis=1) and utilizing boolean indexing.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.5625,
      "rouge_1_recall_cb": 0.5625,
      "rouge_1_recall_ce": 0.5625,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.45,
      "rouge_1_f_score_cb": 0.45,
      "rouge_1_f_score_ce": 0.45,
      "rouge_2_recall": 0.06667,
      "rouge_2_recall_cb": 0.06667,
      "rouge_2_recall_ce": 0.06667,
      "rouge_2_precision": 0.04348,
      "rouge_2_precision_cb": 0.04348,
      "rouge_2_precision_ce": 0.04348,
      "rouge_2_f_score": 0.05263,
      "rouge_2_f_score_cb": 0.05263,
      "rouge_2_f_score_ce": 0.05263,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.375,
      "rouge_l_recall_cb": 0.375,
      "rouge_l_recall_ce": 0.375,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.3,
      "rouge_l_f_score_cb": 0.3,
      "rouge_l_f_score_ce": 0.3,
      "rouge_w_1.2_recall": 0.18243,
      "rouge_w_1.2_recall_cb": 0.18243,
      "rouge_w_1.2_recall_ce": 0.18243,
      "rouge_w_1.2_precision": 0.21175,
      "rouge_w_1.2_precision_cb": 0.21175,
      "rouge_w_1.2_precision_ce": 0.21175,
      "rouge_w_1.2_f_score": 0.196,
      "rouge_w_1.2_f_score_cb": 0.196,
      "rouge_w_1.2_f_score_ce": 0.196,
      "rouge_s*_recall": 0.28333,
      "rouge_s*_recall_cb": 0.28333,
      "rouge_s*_recall_ce": 0.28333,
      "rouge_s*_precision": 0.12319,
      "rouge_s*_precision_cb": 0.12319,
      "rouge_s*_precision_ce": 0.12319,
      "rouge_s*_f_score": 0.17172,
      "rouge_s*_f_score_cb": 0.17172,
      "rouge_s*_f_score_ce": 0.17172,
      "rouge_su*_recall": 0.31852,
      "rouge_su*_recall_cb": 0.31852,
      "rouge_su*_recall_ce": 0.31852,
      "rouge_su*_precision": 0.14381,
      "rouge_su*_precision_cb": 0.14381,
      "rouge_su*_precision_ce": 0.14381,
      "rouge_su*_f_score": 0.19815,
      "rouge_su*_f_score_cb": 0.19815,
      "rouge_su*_f_score_ce": 0.19815
    }
  },
  {
    "id": 95,
    "filename": "NumpyEval_95.txt",
    "dataset_comment": "Compare the elements in array 'a' with those in array 'b' and return an array of booleans, where True indicates that an element in 'a' exists in 'b', and False indicates it does not.",
    "generated_comment": "Determine if each element in array 'a' is present in array 'b' and return a boolean array.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.35294,
      "rouge_1_recall_cb": 0.35294,
      "rouge_1_recall_ce": 0.35294,
      "rouge_1_precision": 0.70588,
      "rouge_1_precision_cb": 0.70588,
      "rouge_1_precision_ce": 0.70588,
      "rouge_1_f_score": 0.47059,
      "rouge_1_f_score_cb": 0.47059,
      "rouge_1_f_score_ce": 0.47059,
      "rouge_2_recall": 0.21212,
      "rouge_2_recall_cb": 0.21212,
      "rouge_2_recall_ce": 0.21212,
      "rouge_2_precision": 0.4375,
      "rouge_2_precision_cb": 0.4375,
      "rouge_2_precision_ce": 0.4375,
      "rouge_2_f_score": 0.28571,
      "rouge_2_f_score_cb": 0.28571,
      "rouge_2_f_score_ce": 0.28571,
      "rouge_3_recall": 0.15625,
      "rouge_3_recall_cb": 0.15625,
      "rouge_3_recall_ce": 0.15625,
      "rouge_3_precision": 0.33333,
      "rouge_3_precision_cb": 0.33333,
      "rouge_3_precision_ce": 0.33333,
      "rouge_3_f_score": 0.21277,
      "rouge_3_f_score_cb": 0.21277,
      "rouge_3_f_score_ce": 0.21277,
      "rouge_4_recall": 0.09677,
      "rouge_4_recall_cb": 0.09677,
      "rouge_4_recall_ce": 0.09677,
      "rouge_4_precision": 0.21429,
      "rouge_4_precision_cb": 0.21429,
      "rouge_4_precision_ce": 0.21429,
      "rouge_4_f_score": 0.13333,
      "rouge_4_f_score_cb": 0.13333,
      "rouge_4_f_score_ce": 0.13333,
      "rouge_l_recall": 0.29412,
      "rouge_l_recall_cb": 0.29412,
      "rouge_l_recall_ce": 0.29412,
      "rouge_l_precision": 0.58824,
      "rouge_l_precision_cb": 0.58824,
      "rouge_l_precision_ce": 0.58824,
      "rouge_l_f_score": 0.39216,
      "rouge_l_f_score_cb": 0.39216,
      "rouge_l_f_score_ce": 0.39216,
      "rouge_w_1.2_recall": 0.12457,
      "rouge_w_1.2_recall_cb": 0.12457,
      "rouge_w_1.2_recall_ce": 0.12457,
      "rouge_w_1.2_precision": 0.50434,
      "rouge_w_1.2_precision_cb": 0.50434,
      "rouge_w_1.2_precision_ce": 0.50434,
      "rouge_w_1.2_f_score": 0.19979,
      "rouge_w_1.2_f_score_cb": 0.19979,
      "rouge_w_1.2_f_score_ce": 0.19979,
      "rouge_s*_recall": 0.1123,
      "rouge_s*_recall_cb": 0.1123,
      "rouge_s*_recall_ce": 0.1123,
      "rouge_s*_precision": 0.46324,
      "rouge_s*_precision_cb": 0.46324,
      "rouge_s*_precision_ce": 0.46324,
      "rouge_s*_f_score": 0.18078,
      "rouge_s*_f_score_cb": 0.18078,
      "rouge_s*_f_score_ce": 0.18078,
      "rouge_su*_recall": 0.12458,
      "rouge_su*_recall_cb": 0.12458,
      "rouge_su*_recall_ce": 0.12458,
      "rouge_su*_precision": 0.48684,
      "rouge_su*_precision_cb": 0.48684,
      "rouge_su*_precision_ce": 0.48684,
      "rouge_su*_f_score": 0.19839,
      "rouge_su*_f_score_cb": 0.19839,
      "rouge_su*_f_score_ce": 0.19839
    }
  },
  {
    "id": 96,
    "filename": "NumpyEval_96.txt",
    "dataset_comment": "Create a NumPy array of arbitrary shape 3x4 filled with all True values.",
    "generated_comment": "Create a 3x4 boolean array filled with True values.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.61538,
      "rouge_1_recall_cb": 0.61538,
      "rouge_1_recall_ce": 0.61538,
      "rouge_1_precision": 0.88889,
      "rouge_1_precision_cb": 0.88889,
      "rouge_1_precision_ce": 0.88889,
      "rouge_1_f_score": 0.72727,
      "rouge_1_f_score_cb": 0.72727,
      "rouge_1_f_score_ce": 0.72727,
      "rouge_2_recall": 0.25,
      "rouge_2_recall_cb": 0.25,
      "rouge_2_recall_ce": 0.25,
      "rouge_2_precision": 0.375,
      "rouge_2_precision_cb": 0.375,
      "rouge_2_precision_ce": 0.375,
      "rouge_2_f_score": 0.3,
      "rouge_2_f_score_cb": 0.3,
      "rouge_2_f_score_ce": 0.3,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.53846,
      "rouge_l_recall_cb": 0.53846,
      "rouge_l_recall_ce": 0.53846,
      "rouge_l_precision": 0.77778,
      "rouge_l_precision_cb": 0.77778,
      "rouge_l_precision_ce": 0.77778,
      "rouge_l_f_score": 0.63636,
      "rouge_l_f_score_cb": 0.63636,
      "rouge_l_f_score_ce": 0.63636,
      "rouge_w_1.2_recall": 0.25759,
      "rouge_w_1.2_recall_cb": 0.25759,
      "rouge_w_1.2_recall_ce": 0.25759,
      "rouge_w_1.2_precision": 0.62147,
      "rouge_w_1.2_precision_cb": 0.62147,
      "rouge_w_1.2_precision_ce": 0.62147,
      "rouge_w_1.2_f_score": 0.36422,
      "rouge_w_1.2_f_score_cb": 0.36422,
      "rouge_w_1.2_f_score_ce": 0.36422,
      "rouge_s*_recall": 0.34615,
      "rouge_s*_recall_cb": 0.34615,
      "rouge_s*_recall_ce": 0.34615,
      "rouge_s*_precision": 0.75,
      "rouge_s*_precision_cb": 0.75,
      "rouge_s*_precision_ce": 0.75,
      "rouge_s*_f_score": 0.47368,
      "rouge_s*_f_score_cb": 0.47368,
      "rouge_s*_f_score_ce": 0.47368,
      "rouge_su*_recall": 0.37778,
      "rouge_su*_recall_cb": 0.37778,
      "rouge_su*_recall_ce": 0.37778,
      "rouge_su*_precision": 0.77273,
      "rouge_su*_precision_cb": 0.77273,
      "rouge_su*_precision_ce": 0.77273,
      "rouge_su*_f_score": 0.50747,
      "rouge_su*_f_score_cb": 0.50747,
      "rouge_su*_f_score_ce": 0.50747
    }
  },
  {
    "id": 97,
    "filename": "NumpyEval_97.txt",
    "dataset_comment": "Multiply arrays row-wise, such that out[i] = a[i] * b[i], where a[i].shape is (2,) and b[i] is a scalar.",
    "generated_comment": "Broadcast the 1D array `b` to match the shape of `a` and perform element-wise multiplication.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.25,
      "rouge_1_recall_cb": 0.25,
      "rouge_1_recall_ce": 0.25,
      "rouge_1_precision": 0.375,
      "rouge_1_precision_cb": 0.375,
      "rouge_1_precision_ce": 0.375,
      "rouge_1_f_score": 0.3,
      "rouge_1_f_score_cb": 0.3,
      "rouge_1_f_score_ce": 0.3,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.16667,
      "rouge_l_recall_cb": 0.16667,
      "rouge_l_recall_ce": 0.16667,
      "rouge_l_precision": 0.25,
      "rouge_l_precision_cb": 0.25,
      "rouge_l_precision_ce": 0.25,
      "rouge_l_f_score": 0.2,
      "rouge_l_f_score_cb": 0.2,
      "rouge_l_f_score_ce": 0.2,
      "rouge_w_1.2_recall": 0.07006,
      "rouge_w_1.2_recall_cb": 0.07006,
      "rouge_w_1.2_recall_ce": 0.07006,
      "rouge_w_1.2_precision": 0.19843,
      "rouge_w_1.2_precision_cb": 0.19843,
      "rouge_w_1.2_precision_ce": 0.19843,
      "rouge_w_1.2_f_score": 0.10356,
      "rouge_w_1.2_f_score_cb": 0.10356,
      "rouge_w_1.2_f_score_ce": 0.10356,
      "rouge_s*_recall": 0.03986,
      "rouge_s*_recall_cb": 0.03986,
      "rouge_s*_recall_ce": 0.03986,
      "rouge_s*_precision": 0.09167,
      "rouge_s*_precision_cb": 0.09167,
      "rouge_s*_precision_ce": 0.09167,
      "rouge_s*_f_score": 0.05556,
      "rouge_s*_f_score_cb": 0.05556,
      "rouge_s*_f_score_ce": 0.05556,
      "rouge_su*_recall": 0.05686,
      "rouge_su*_recall_cb": 0.05686,
      "rouge_su*_recall_ce": 0.05686,
      "rouge_su*_precision": 0.12593,
      "rouge_su*_precision_cb": 0.12593,
      "rouge_su*_precision_ce": 0.12593,
      "rouge_su*_f_score": 0.07835,
      "rouge_su*_f_score_cb": 0.07835,
      "rouge_su*_f_score_ce": 0.07835
    }
  },
  {
    "id": 98,
    "filename": "NumpyEval_98.txt",
    "dataset_comment": "Calculate the Euclidean distance using NumPy.",
    "generated_comment": "Calculate the Euclidean distance between two numpy arrays using np.linalg.norm.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 1.0,
      "rouge_1_recall_cb": 1.0,
      "rouge_1_recall_ce": 1.0,
      "rouge_1_precision": 0.5,
      "rouge_1_precision_cb": 0.5,
      "rouge_1_precision_ce": 0.5,
      "rouge_1_f_score": 0.66667,
      "rouge_1_f_score_cb": 0.66667,
      "rouge_1_f_score_ce": 0.66667,
      "rouge_2_recall": 0.6,
      "rouge_2_recall_cb": 0.6,
      "rouge_2_recall_ce": 0.6,
      "rouge_2_precision": 0.27273,
      "rouge_2_precision_cb": 0.27273,
      "rouge_2_precision_ce": 0.27273,
      "rouge_2_f_score": 0.375,
      "rouge_2_f_score_cb": 0.375,
      "rouge_2_f_score_ce": 0.375,
      "rouge_3_recall": 0.5,
      "rouge_3_recall_cb": 0.5,
      "rouge_3_recall_ce": 0.5,
      "rouge_3_precision": 0.2,
      "rouge_3_precision_cb": 0.2,
      "rouge_3_precision_ce": 0.2,
      "rouge_3_f_score": 0.28571,
      "rouge_3_f_score_cb": 0.28571,
      "rouge_3_f_score_ce": 0.28571,
      "rouge_4_recall": 0.33333,
      "rouge_4_recall_cb": 0.33333,
      "rouge_4_recall_ce": 0.33333,
      "rouge_4_precision": 0.11111,
      "rouge_4_precision_cb": 0.11111,
      "rouge_4_precision_ce": 0.11111,
      "rouge_4_f_score": 0.16667,
      "rouge_4_f_score_cb": 0.16667,
      "rouge_4_f_score_ce": 0.16667,
      "rouge_l_recall": 0.83333,
      "rouge_l_recall_cb": 0.83333,
      "rouge_l_recall_ce": 0.83333,
      "rouge_l_precision": 0.41667,
      "rouge_l_precision_cb": 0.41667,
      "rouge_l_precision_ce": 0.41667,
      "rouge_l_f_score": 0.55556,
      "rouge_l_f_score_cb": 0.55556,
      "rouge_l_f_score_ce": 0.55556,
      "rouge_w_1.2_recall": 0.58236,
      "rouge_w_1.2_recall_cb": 0.58236,
      "rouge_w_1.2_recall_ce": 0.58236,
      "rouge_w_1.2_precision": 0.41667,
      "rouge_w_1.2_precision_cb": 0.41667,
      "rouge_w_1.2_precision_ce": 0.41667,
      "rouge_w_1.2_f_score": 0.48578,
      "rouge_w_1.2_f_score_cb": 0.48578,
      "rouge_w_1.2_f_score_ce": 0.48578,
      "rouge_s*_recall": 0.93333,
      "rouge_s*_recall_cb": 0.93333,
      "rouge_s*_recall_ce": 0.93333,
      "rouge_s*_precision": 0.21212,
      "rouge_s*_precision_cb": 0.21212,
      "rouge_s*_precision_ce": 0.21212,
      "rouge_s*_f_score": 0.34568,
      "rouge_s*_f_score_cb": 0.34568,
      "rouge_s*_f_score_ce": 0.34568,
      "rouge_su*_recall": 0.95,
      "rouge_su*_recall_cb": 0.95,
      "rouge_su*_recall_ce": 0.95,
      "rouge_su*_precision": 0.24675,
      "rouge_su*_precision_cb": 0.24675,
      "rouge_su*_precision_ce": 0.24675,
      "rouge_su*_f_score": 0.39175,
      "rouge_su*_f_score_cb": 0.39175,
      "rouge_su*_f_score_ce": 0.39175
    }
  },
  {
    "id": 99,
    "filename": "NumpyEval_99.txt",
    "dataset_comment": "Sum all values in a Pandas DataFrame and return the result as a numeric value.",
    "generated_comment": "Calculate the sum of all elements in the DataFrame by converting it to a numpy array and then summing the elements.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.46667,
      "rouge_1_recall_cb": 0.46667,
      "rouge_1_recall_ce": 0.46667,
      "rouge_1_precision": 0.33333,
      "rouge_1_precision_cb": 0.33333,
      "rouge_1_precision_ce": 0.33333,
      "rouge_1_f_score": 0.38889,
      "rouge_1_f_score_cb": 0.38889,
      "rouge_1_f_score_ce": 0.38889,
      "rouge_2_recall": 0.0,
      "rouge_2_recall_cb": 0.0,
      "rouge_2_recall_ce": 0.0,
      "rouge_2_precision": 0.0,
      "rouge_2_precision_cb": 0.0,
      "rouge_2_precision_ce": 0.0,
      "rouge_2_f_score": 0.0,
      "rouge_2_f_score_cb": 0.0,
      "rouge_2_f_score_ce": 0.0,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.4,
      "rouge_l_recall_cb": 0.4,
      "rouge_l_recall_ce": 0.4,
      "rouge_l_precision": 0.28571,
      "rouge_l_precision_cb": 0.28571,
      "rouge_l_precision_ce": 0.28571,
      "rouge_l_f_score": 0.33333,
      "rouge_l_f_score_cb": 0.33333,
      "rouge_l_f_score_ce": 0.33333,
      "rouge_w_1.2_recall": 0.18679,
      "rouge_w_1.2_recall_cb": 0.18679,
      "rouge_w_1.2_recall_ce": 0.18679,
      "rouge_w_1.2_precision": 0.22932,
      "rouge_w_1.2_precision_cb": 0.22932,
      "rouge_w_1.2_precision_ce": 0.22932,
      "rouge_w_1.2_f_score": 0.20588,
      "rouge_w_1.2_f_score_cb": 0.20588,
      "rouge_w_1.2_f_score_ce": 0.20588,
      "rouge_s*_recall": 0.20952,
      "rouge_s*_recall_cb": 0.20952,
      "rouge_s*_recall_ce": 0.20952,
      "rouge_s*_precision": 0.10476,
      "rouge_s*_precision_cb": 0.10476,
      "rouge_s*_precision_ce": 0.10476,
      "rouge_s*_f_score": 0.13968,
      "rouge_s*_f_score_cb": 0.13968,
      "rouge_s*_f_score_ce": 0.13968,
      "rouge_su*_recall": 0.2437,
      "rouge_su*_recall_cb": 0.2437,
      "rouge_su*_recall_ce": 0.2437,
      "rouge_su*_precision": 0.12609,
      "rouge_su*_precision_cb": 0.12609,
      "rouge_su*_precision_ce": 0.12609,
      "rouge_su*_f_score": 0.16619,
      "rouge_su*_f_score_cb": 0.16619,
      "rouge_su*_f_score_ce": 0.16619
    }
  },
  {
    "id": 100,
    "filename": "NumpyEval_100.txt",
    "dataset_comment": "Prepend an element to a numpy array and return the array.",
    "generated_comment": "Insert the specified element at the beginning of the array using np.insert.",
    "indicator_name": "rouge",
    "score": {
      "rouge_1_recall": 0.27273,
      "rouge_1_recall_cb": 0.27273,
      "rouge_1_recall_ce": 0.27273,
      "rouge_1_precision": 0.23077,
      "rouge_1_precision_cb": 0.23077,
      "rouge_1_precision_ce": 0.23077,
      "rouge_1_f_score": 0.25,
      "rouge_1_f_score_cb": 0.25,
      "rouge_1_f_score_ce": 0.25,
      "rouge_2_recall": 0.1,
      "rouge_2_recall_cb": 0.1,
      "rouge_2_recall_ce": 0.1,
      "rouge_2_precision": 0.08333,
      "rouge_2_precision_cb": 0.08333,
      "rouge_2_precision_ce": 0.08333,
      "rouge_2_f_score": 0.09091,
      "rouge_2_f_score_cb": 0.09091,
      "rouge_2_f_score_ce": 0.09091,
      "rouge_3_recall": 0.0,
      "rouge_3_recall_cb": 0.0,
      "rouge_3_recall_ce": 0.0,
      "rouge_3_precision": 0.0,
      "rouge_3_precision_cb": 0.0,
      "rouge_3_precision_ce": 0.0,
      "rouge_3_f_score": 0.0,
      "rouge_3_f_score_cb": 0.0,
      "rouge_3_f_score_ce": 0.0,
      "rouge_4_recall": 0.0,
      "rouge_4_recall_cb": 0.0,
      "rouge_4_recall_ce": 0.0,
      "rouge_4_precision": 0.0,
      "rouge_4_precision_cb": 0.0,
      "rouge_4_precision_ce": 0.0,
      "rouge_4_f_score": 0.0,
      "rouge_4_f_score_cb": 0.0,
      "rouge_4_f_score_ce": 0.0,
      "rouge_l_recall": 0.27273,
      "rouge_l_recall_cb": 0.27273,
      "rouge_l_recall_ce": 0.27273,
      "rouge_l_precision": 0.23077,
      "rouge_l_precision_cb": 0.23077,
      "rouge_l_precision_ce": 0.23077,
      "rouge_l_f_score": 0.25,
      "rouge_l_f_score_cb": 0.25,
      "rouge_l_f_score_ce": 0.25,
      "rouge_w_1.2_recall": 0.1521,
      "rouge_w_1.2_recall_cb": 0.1521,
      "rouge_w_1.2_recall_ce": 0.1521,
      "rouge_w_1.2_precision": 0.20791,
      "rouge_w_1.2_precision_cb": 0.20791,
      "rouge_w_1.2_precision_ce": 0.20791,
      "rouge_w_1.2_f_score": 0.17568,
      "rouge_w_1.2_f_score_cb": 0.17568,
      "rouge_w_1.2_f_score_ce": 0.17568,
      "rouge_s*_recall": 0.05455,
      "rouge_s*_recall_cb": 0.05455,
      "rouge_s*_recall_ce": 0.05455,
      "rouge_s*_precision": 0.03846,
      "rouge_s*_precision_cb": 0.03846,
      "rouge_s*_precision_ce": 0.03846,
      "rouge_s*_f_score": 0.04511,
      "rouge_s*_f_score_cb": 0.04511,
      "rouge_s*_f_score_ce": 0.04511,
      "rouge_su*_recall": 0.09231,
      "rouge_su*_recall_cb": 0.09231,
      "rouge_su*_recall_ce": 0.09231,
      "rouge_su*_precision": 0.06667,
      "rouge_su*_precision_cb": 0.06667,
      "rouge_su*_precision_ce": 0.06667,
      "rouge_su*_f_score": 0.07742,
      "rouge_su*_f_score_cb": 0.07742,
      "rouge_su*_f_score_ce": 0.07742
    }
  }
]