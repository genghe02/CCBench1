[{"id": 0, "filename": "PandasEval_0.txt", "dataset_comment": "Drop rows of Pandas DataFrame where the value in a specified column is NaN", "generated_comment": "The function drop_rows_col_nan takes a DataFrame and a column name as input. It drops all rows in the DataFrame where the specified column's value is NaN (Not a Number). The pd.dropna() function is used with the subset parameter to specify the column for NaN check.", "indicator_name": "bleu", "score": 1.0202528156488329}, {"id": 1, "filename": "PandasEval_1.txt", "dataset_comment": "Replace fields that are entirely space or empty with NaN using regex and return the result.", "generated_comment": "This function replaces all blank values in a dataframe with NaN values. The regex r'^\\s*$' is used to find all blank values, and these are replaced by numpy's NaN representation.", "indicator_name": "bleu", "score": 2.972131067447748}, {"id": 2, "filename": "PandasEval_2.txt", "dataset_comment": "Change the column labels of a pandas DataFrame from ['A', 'B', 'C'] to ['a', 'b', 'c'].", "generated_comment": "Replace the column names of the DataFrame 'data' with lowercase letters 'a', 'b', and 'c'.", "indicator_name": "bleu", "score": 27.24476765686063}, {"id": 3, "filename": "PandasEval_3.txt", "dataset_comment": "Add leading zeros to strings in the col_name column of a Pandas DataFrame, ensuring a maximum string length of 15 characters, and return the DataFrame.", "generated_comment": "This function is designed to add leading zeros to the values in a specified column of a dataframe. It uses the apply method to apply a lambda function to each element in the specified column. The lambda function uses the format method to add leading zeros to each value, making sure that the total length of the value is 15 characters.", "indicator_name": "bleu", "score": 6.812531270844881}, {"id": 4, "filename": "PandasEval_4.txt", "dataset_comment": "Convert a list_of_lists, with the format [header, [row1], [row2], ...], to a DataFrame. The header should be in the format [column1, column2, ...], and each row in the format [value1, value2, ...]. Return the resulting DataFrame.", "generated_comment": "Convert a list of lists into a pandas DataFrame, where the first sublist is used as the column names and the rest of the sublists as the data.", "indicator_name": "bleu", "score": 4.513257922094952}, {"id": 5, "filename": "PandasEval_5.txt", "dataset_comment": "Convert all column headers in the pandas DataFrame to lowercase. Return the modified DataFrame.", "generated_comment": "The function make_df_all_cols_lower takes a pandas DataFrame as input and changes all the column names to lowercase.It uses the map function to apply the built-in str.lower function to each column name.The modified DataFrame with all lowercase column names is then returned as the output.", "indicator_name": "bleu", "score": 1.8200616925120323}, {"id": 6, "filename": "PandasEval_6.txt", "dataset_comment": "Change the dtype of multiple columns in the dataframe. The dataframe contains columns with different dtypes: some columns are float64, while others are int64. Convert all columns with dtype float64 to float32.", "generated_comment": "Select the columns in the dataframe that are of type 'float64' using the select_dtypes method of pandas DataFrame.Then, convert these 'float64' columns to 'float32' using the astype method of pandas DataFrame to save memory usage.", "indicator_name": "bleu", "score": 10.363040467053322}, {"id": 7, "filename": "PandasEval_7.txt", "dataset_comment": "Convert the 'date' column to datetime type.Skip rows with strings that cannot be converted to datetime by using errors='coerce'.", "generated_comment": "Convert the 'date' column of the dataframe to datetime format. If any errors are encountered during the conversion process, they are ignored and the problematic data is replaced with NaT (Not a Time).", "indicator_name": "bleu", "score": 15.540177150880522}, {"id": 8, "filename": "PandasEval_8.txt", "dataset_comment": "Filter the DataFrame to include only rows where the second column has the specific value 'Jimmy'.", "generated_comment": "Filter rows in the dataframe where the second column (index 1) is equal to 'Jimmy'. The result is assigned to new_df.", "indicator_name": "bleu", "score": 21.299672329725794}, {"id": 9, "filename": "PandasEval_9.txt", "dataset_comment": "Extract the first and last rows of a DataFrame in Pandas and return the resulting DataFrame", "generated_comment": "This function takes a pandas DataFrame as input and returns a new DataFrame containing only the first and last row of the input DataFrame. It uses the pandas function 'iloc' to access the rows by integer location.", "indicator_name": "bleu", "score": 6.216772161330199}, {"id": 10, "filename": "PandasEval_10.txt", "dataset_comment": "Extract the first and last rows of a DataFrame in Pandas and return the resulting DataFrame", "generated_comment": "Apply a lambda function to group the dataframe by 'Mt' and then select the rows within each group where 'num' is at its maximum value.", "indicator_name": "bleu", "score": 4.510957323006202}, {"id": 11, "filename": "PandasEval_11.txt", "dataset_comment": "Select rows from a DataFrame df where the column value named col_name is in the iterable values and return these rows.", "generated_comment": "This function takes a DataFrame, a column name, and a list of values as arguments. It will return a new DataFrame that only includes the rows from the original DataFrame where the specified column's value is in the provided list of values.", "indicator_name": "bleu", "score": 6.1342200968195835}, {"id": 12, "filename": "PandasEval_12.txt", "dataset_comment": "Return the number of rows in the DataFrame df", "generated_comment": "This function is designed to return the total number of rows in the given DataFrame by accessing the length of its index.", "indicator_name": "bleu", "score": 14.720585521863844}, {"id": 13, "filename": "PandasEval_13.txt", "dataset_comment": "Create an empty DataFrame in Pandas with only column names and return it.", "generated_comment": "Create a new empty DataFrame with column names specified by the input list 'col_names'.", "indicator_name": "bleu", "score": 11.59964849462386}, {"id": 14, "filename": "PandasEval_14.txt", "dataset_comment": "Calculate the difference between rows within each group using pandas, where row ordering is important. Use pandas.groupby() to group the data and apply a custom function to compute the difference between rows. Use the .iat method for selecting values by position. Return the resulting DataFrame.", "generated_comment": "This function applies the function f to each group of rows in the dataframe df that have the same value in the 'Group' columnIt then resets the index of the resulting dataframeThe function f calculates differences and concatenations in the 'Value' and 'ID' columns respectively for each group", "indicator_name": "bleu", "score": 4.774791107165741}, {"id": 15, "filename": "PandasEval_15.txt", "dataset_comment": "Check if any value is NaN in a Pandas DataFrame and return the result.", "generated_comment": "This function checks if there are any missing values (NaN) in the entire DataFrame by utilizing the pandas DataFrame's isnull() method combined with any() method from numpy.", "indicator_name": "bleu", "score": 3.7840338406074925}, {"id": 16, "filename": "PandasEval_16.txt", "dataset_comment": "Add a new column named 'column_name' with specified data to the existing DataFrame.", "generated_comment": "This function is used to add a new column to an existing pandas dataframe.The new column's name and its data are provided as arguments.The function will add this new column to the dataframe and then return the updated dataframe.", "indicator_name": "bleu", "score": 6.184008302854137}, {"id": 17, "filename": "PandasEval_17.txt", "dataset_comment": "Drop duplicate rows in the DataFrame based on column `col1`, keeping the row with the last value in column `col2`, and return the final DataFrame.", "generated_comment": "This function removes duplicates from a DataFrame based on the values in a specified column. It keeps the last occurrence of the duplicate rows.", "indicator_name": "bleu", "score": 10.594966435375543}, {"id": 18, "filename": "PandasEval_18.txt", "dataset_comment": "Retrieve the value at the nth row of a given column name in a Pandas DataFrame and return it.", "generated_comment": "This function is designed to return the values at the nth rows of a specified column in a given dataframe. The function takes three parameters: 'df' which is a pandas dataframe, 'n' which is the row number, and 'column_name' which is the name of the column. It uses the iloc function to locate the nth row and returns the value in the specified column.", "indicator_name": "bleu", "score": 1.7246535873013842}, {"id": 19, "filename": "PandasEval_19.txt", "dataset_comment": "Create a new DataFrame that is identical to df_original, but with no rows, and return the new DataFrame.", "generated_comment": "The function \"creating_df_with_same_as_other\" is used to create a new dataframe with the same columns as the original dataframe, but without any rows. We achieve this by using iloc to slice the original dataframe at zero row and then copying it with the copy() method.", "indicator_name": "bleu", "score": 4.592302776753813}, {"id": 20, "filename": "PandasEval_20.txt", "dataset_comment": "Count the number of missing/NaN values in each column of the DataFrame and return a series.", "generated_comment": "Count the number of NaN values in each column of a DataFrame using pandas isnull() function combined with the sum() function.", "indicator_name": "bleu", "score": 31.499192577003765}, {"id": 21, "filename": "PandasEval_21.txt", "dataset_comment": "Create a new dataframe by filtering values that exceed the mean value of the column from the original dataframe. Use indexing or the `where` function to compare values and add NaNs where necessary. Implement a custom function to remove NaNs, also ensure that NaNs are removed from the first rows by utilizing the `dropna` method.", "generated_comment": "Filter the DataFrame such that only the values greater than the mean of each column are kept. Then, apply a lambda function to drop NaN values and align remaining values at the start of each column.", "indicator_name": "bleu", "score": 4.743541912368492}, {"id": 22, "filename": "PandasEval_22.txt", "dataset_comment": "Normalize the dataframe using pandas by subtracting the mean and dividing by the standard deviation on df.iloc[:, 0, -1] along axis zero, and return the normalized dataframe.", "generated_comment": "This function normalizes all columns in a dataframe, except the last one, by subtracting the mean and dividing by the standard deviation. This is done using pandas apply function on each column.", "indicator_name": "bleu", "score": 30.561607746635588}, {"id": 23, "filename": "PandasEval_23.txt", "dataset_comment": "Determine which columns contain NaN values and return a list of the column names that contain NaNs.", "generated_comment": "The function is designed to return a list of names of the columns from the input dataframe (df) which contain any NaN values. This is achieved by using the isna() function to find NaN values and the any() function to check if any exist in each column. The tolist() function is then used to convert the output to a list.", "indicator_name": "bleu", "score": 1.8873285457814926}, {"id": 24, "filename": "PandasEval_24.txt", "dataset_comment": "Round a single column `A` and return the dataframe.", "generated_comment": "This function is designed to round all the values in the 'A' column of the given dataframe to the nearest whole number. The pandas Dataframe round() function is used in this case.", "indicator_name": "bleu", "score": 1.8880350590311674}, {"id": 25, "filename": "PandasEval_25.txt", "dataset_comment": "Group values of Pandas DataFrame by `id` and select the latest entry by `date` after sorting values in ascending order by `date`.", "generated_comment": "Sort the dataframe by 'date' in ascending order. This is necessary to identify the last purchase of each 'id' correctly.After sorting, group the dataframe by 'id' and take the last entry of each group.This will give us the most recent purchase for each customer 'id'.", "indicator_name": "bleu", "score": 4.481563797339483}, {"id": 26, "filename": "PandasEval_26.txt", "dataset_comment": "Shift the 'gdp' column in the Pandas DataFrame up by one and return the DataFrame with the changed 'gdp' column.", "generated_comment": "Shifts the values in the 'gdp' column of the dataframe up by one place. This operation leaves the first row of the 'gdp' column with a NaN value and the last value of the column is dropped.", "indicator_name": "bleu", "score": 20.851540720022292}, {"id": 27, "filename": "PandasEval_27.txt", "dataset_comment": "Remain the rows where line_num is not equal to 0 using the most efficient method.", "generated_comment": "Filter the DataFrame to include only those rows where the value of 'line_num' is not equal to 0.", "indicator_name": "bleu", "score": 28.035909504199108}, {"id": 28, "filename": "PandasEval_28.txt", "dataset_comment": "In the code, several variables may either contain a pandas DataFrame or be empty.  Check if a certain DataFrame has been created.", "generated_comment": "The function is_df_exist checks if the passed DataFrame is None or it exists. If the DataFrame is None, the function returns False indicating that DataFrame does not exist. If the DataFrame is not None (i.e., it exists), the function returns True.", "indicator_name": "bleu", "score": 2.10622649433577}, {"id": 29, "filename": "PandasEval_29.txt", "dataset_comment": "Move each value from a column to the first empty row in a Pandas DataFrame. Use sorted to align non-NULL data at the top, and use dropna to remove all rows that contain only NaN.", "generated_comment": "The code sorts each column in the DataFrame in such a way that NaN values are placed at the end of each column.Then it drops the rows where all the values are NaN. The lambda function inside apply method makes the sorting possible by using the pd.isnull function as a key parameter to the sorted function.", "indicator_name": "bleu", "score": 4.279067311222543}, {"id": 30, "filename": "PandasEval_30.txt", "dataset_comment": "After assigning a list or array-like value to the columns, the column is considered as type object. Assign the emails to the first row and the 'Email' column.", "generated_comment": "Convert the 'Email' column into object type in order to store a list or array. Assign the 'emails' set to the first row of 'Email' column.", "indicator_name": "bleu", "score": 34.05204944353418}, {"id": 31, "filename": "PandasEval_31.txt", "dataset_comment": "Drop consecutive duplicates and return the result.", "generated_comment": "This function takes a pandas series as input and returns another series where all consecutive duplicate values are dropped. This is done by shifting the series by one element and comparing it with the original series. The loc method is used to select only those elements of the series where the value is not equal to the shifted series.", "indicator_name": "bleu", "score": 0.04868450854730409}, {"id": 32, "filename": "PandasEval_32.txt", "dataset_comment": "Create a Series from the list [56, 24, 421, 90].", "generated_comment": "Create a pandas Series object with the provided list of integers.", "indicator_name": "bleu", "score": 12.223075560872527}, {"id": 33, "filename": "PandasEval_33.txt", "dataset_comment": "Retrieve the last N rows of a pandas DataFrame.", "generated_comment": "This function is designed to return the last 'n' rows of a given dataframe 'df' using the pandas tail() function.", "indicator_name": "bleu", "score": 6.742448204346142}, {"id": 34, "filename": "PandasEval_34.txt", "dataset_comment": "Append the dictionary to the DataFrame and return the DataFrame.", "generated_comment": "The function takes a pandas dataframe and a dictionary as inputs. It appends the dictionary to the dataframe as a new row and returns the updated dataframe. To prevent the original indices from being altered, the 'ignore_index' parameter is set to True.", "indicator_name": "bleu", "score": 1.9902902374197038}, {"id": 35, "filename": "PandasEval_35.txt", "dataset_comment": "Remove columns based on duplicate column names and return the duplicated dataframe.", "generated_comment": "This function helps in removing the duplicate column names in a DataFrame. It uses Panda's DataFrame.duplicated() method to identify duplicate column names and then filters out the unique ones using negation operator.", "indicator_name": "bleu", "score": 4.681335015040484}, {"id": 36, "filename": "PandasEval_36.txt", "dataset_comment": "Obtain a pandas DataFrame without the index and print the entire DataFrame without displaying the index.", "generated_comment": "Convert the pandas DataFrame 'df' to a string representation without including the index in the output.", "indicator_name": "bleu", "score": 12.569231568006547}, {"id": 37, "filename": "PandasEval_37.txt", "dataset_comment": "Clip the values of `col_1` between -2 and 2 where `col_0` is equal to 'a' using the `clip` function in Pandas.", "generated_comment": "The requirement for this code is to replace the values in 'col_1' where 'col_0' is 'a' with their clipped version between -2 and 2. The pandas clip() function is used to limit the values in the column 'col_1' between -2 and 2 where 'col_0' is 'a'.", "indicator_name": "bleu", "score": 10.552804217688431}, {"id": 38, "filename": "PandasEval_38.txt", "dataset_comment": "Change the column labels of df and return the renamed dataframe.", "generated_comment": "The function takes a dataframe and two lists as inputs. The first list contains the original column names that need to be changed, and the second list contains the new column names. It uses the pandas dataframe method 'rename' to change the column names and returns the updated dataframe.", "indicator_name": "bleu", "score": 0.892474251715907}, {"id": 39, "filename": "PandasEval_39.txt", "dataset_comment": "Change all columns' types of the DataFrame to numeric and return the new DataFrame.", "generated_comment": "The function change_all_cols_type takes a DataFrame as input and converts all column data types to numeric if possible. If the column cannot be converted to numeric, it will remain unchanged. This is done using the pandas 'to_numeric' function.", "indicator_name": "bleu", "score": 1.7112301480482646}, {"id": 40, "filename": "PandasEval_40.txt", "dataset_comment": "Return the average/mean of the column.", "generated_comment": "This function takes a pandas DataFrame and a column name as input, and returns the mean value of the specified column.", "indicator_name": "bleu", "score": 6.18924379788552}, {"id": 41, "filename": "PandasEval_41.txt", "dataset_comment": "Determine whether a Pandas Column contains a particular value and return the result.", "generated_comment": "This function checks if a series contains a particular value by first converting the series to a unique set and then checking if the value exists within that set.", "indicator_name": "bleu", "score": 9.687967927517981}, {"id": 42, "filename": "PandasEval_42.txt", "dataset_comment": "Delete the first n rows of a DataFrame. Input:   df: DataFrame   n: int Return:   DataFrame after deleting the first n rows.", "generated_comment": "The function is designed to delete the first n rows from a pandas DataFrame. It does this by returning a new DataFrame that starts from the (n+1)th row.", "indicator_name": "bleu", "score": 15.528663415106777}, {"id": 43, "filename": "PandasEval_43.txt", "dataset_comment": "Specify a new column named `mean_along_rows` that contains the mean of each row by computing the mean along the rows using axis=1. Finally, return the dataframe with the new column.", "generated_comment": "Compute the mean value along each row (axis=1) of the DataFrame.Assign these mean values to a new column in the DataFrame named 'mean'.", "indicator_name": "bleu", "score": 11.631540344539117}, {"id": 44, "filename": "PandasEval_44.txt", "dataset_comment": "Delete a column from a Pandas DataFrame and return the changed DataFrame.", "generated_comment": "This function is designed to delete a specific column from a pandas DataFrame. The DataFrame and the column name to be deleted are passed as parameters. The function uses the 'drop' method of pandas DataFrame to delete the specified column and returns the updated DataFrame.", "indicator_name": "bleu", "score": 3.3191168875543657}, {"id": 45, "filename": "PandasEval_45.txt", "dataset_comment": "Find the intersection between two series by first creating two sets, one for each series, and then obtaining the intersection of the two sets.", "generated_comment": "Convert the pandas series to sets, and then find the intersection of s1 and s2. The intersection operation in sets will return a set that contains all items that are present in both sets.", "indicator_name": "bleu", "score": 12.635494433628294}, {"id": 46, "filename": "PandasEval_46.txt", "dataset_comment": "Get the values of column `A` when column `B` equals 3.", "generated_comment": "The function get_value_when_condition takes a pandas DataFrame as input and returns the values in column 'A' where the corresponding value in column 'B' is equal to 3.", "indicator_name": "bleu", "score": 4.213445158769324}, {"id": 47, "filename": "PandasEval_47.txt", "dataset_comment": "Make all column headers in the Pandas DataFrame lowercase.", "generated_comment": "Convert all the column headers of the DataFrame to lowercase.", "indicator_name": "bleu", "score": 21.21975586685306}, {"id": 48, "filename": "PandasEval_48.txt", "dataset_comment": "Check if any word from `targets` is present in the sentence.", "generated_comment": "Filter the DataFrame 'df' to only include rows where the 'col' value is in the list 'targets'.", "indicator_name": "bleu", "score": 6.9043878235457115}, {"id": 49, "filename": "PandasEval_49.txt", "dataset_comment": "Find all unique values in a Pandas DataFrame, irrespective of rows or columns.  Use xx.values.ravel to get the flattened array of the DataFrame. Retrieve unique values using numpy.unique.", "generated_comment": "The goal of this code is to get the unique values in the DataFrame. This is achieved by first flattening the DataFrame into a 1-D array using 'ravel()' and then using 'np.unique()' to get the unique values.", "indicator_name": "bleu", "score": 10.232689943045985}, {"id": 50, "filename": "PandasEval_50.txt", "dataset_comment": "Add a new column C that is the sum of the values in columns A and B.", "generated_comment": "For each row in the dataframe, add the values of column 'A' and 'B' and store the result in a new column 'C'.", "indicator_name": "bleu", "score": 9.52526728440582}, {"id": 51, "filename": "PandasEval_51.txt", "dataset_comment": "Add a new column named 'Fruit Total' that sums the values of the other columns, ignoring the NaN values.", "generated_comment": "Add a new column 'Fruit Total' to the DataFrame df by using the apply function to sum each row's values (across all fruits), effectively calculating the total number of fruits in each row. The lambda function is used to sum the values.", "indicator_name": "bleu", "score": 9.547993844209547}, {"id": 52, "filename": "PandasEval_52.txt", "dataset_comment": "Combine two dataframes while ignoring the index and return the concatenated dataframe.", "generated_comment": "This function takes in two pandas dataframes (df1 and df2) and combines them by appending df2 to df1.The ignore_index parameter is set to True to reindex the combined dataframe.", "indicator_name": "bleu", "score": 3.165417835168885}, {"id": 53, "filename": "PandasEval_53.txt", "dataset_comment": "Retrieve the number of columns in a Pandas DataFrame and return it.", "generated_comment": "This function is used to get the number of columns in a dataframe by utilizing the 'len' function on the 'columns' attribute of the dataframe.", "indicator_name": "bleu", "score": 13.5236855516524}, {"id": 54, "filename": "PandasEval_54.txt", "dataset_comment": "Extract the last year (YY) from a fiscal date string in the format of YYYY-YY.  For example, the last year of '1999-00' would be 2000.  Implement logic to handle cases where it is the end of the century by adding to the first two digits.  The column_name refers to the column in the DataFrame that contains the date strings.  Return the numerical Series object of the last year.", "generated_comment": "This function takes a dataframe and a column name as inputs. It then extracts the year from the given column (assuming the date format is 'YYYY-MM-DD') and increments it by one. The result is then returned as a series of numeric values.", "indicator_name": "bleu", "score": 3.9078859132502544}, {"id": 55, "filename": "PandasEval_55.txt", "dataset_comment": "Count consecutive positive values in a Python/Pandas array representing equity return data;  for example, if a positive day is represented as 1 and a negative day as 0,  a list y=[0,0,1,1,1,0,0,1,0,1,1] should return z=[0,0,1,2,3,0,0,1,0,1,2].  Return the result.", "generated_comment": "This function will count the consecutive positive values in a series. The function takes a pandas Series 'y' as an input and returns a new Series where each value is replaced by the count of consecutive positive values up to that point. If the value is not positive, it remains the same. This is achieved by grouping the series based on the change in value, and then applying a cumulative count on each group. This cumulative count is then added by 1 and finally multiplied with the original series 'y'.", "indicator_name": "bleu", "score": 6.2761802362929}, {"id": 56, "filename": "PandasEval_56.txt", "dataset_comment": "Get the first largest value in column a using nlargest and iloc to implement this.", "generated_comment": "Find the largest value in column 'a' of the DataFrame df and store it in the variable first_value. The nlargest() function returns the largest n elements. In this case, we're only interested in the largest one (n=1), which is why we're using iloc[-1] to get the last (and only) element.", "indicator_name": "bleu", "score": 0.9406563549689656}, {"id": 57, "filename": "PandasEval_57.txt", "dataset_comment": "Sort columns in a Pandas DataFrame based on column name, with axis set to one.", "generated_comment": "Sort the columns of a dataframe based on their names in ascending order using pandas reindex function.", "indicator_name": "bleu", "score": 15.80133198313957}, {"id": 58, "filename": "PandasEval_58.txt", "dataset_comment": "Remove all the numbers from the Name column at the series/dataframe level.", "generated_comment": "Remove any numerical values present in the 'Name' column of the DataFrame by replacing them with an empty string.", "indicator_name": "bleu", "score": 7.382563610076866}, {"id": 59, "filename": "PandasEval_59.txt", "dataset_comment": "Delete all columns from the DataFrame that contain only NaN values and return the result.", "generated_comment": "The function deletes all columns in the provided dataframe that only contain NaN values. It uses the dropna method with the 'all' option for the 'how' parameter, which causes any column (axis=1) composed entirely of NaN values to be dropped.", "indicator_name": "bleu", "score": 2.158304201078592}, {"id": 60, "filename": "PandasEval_60.txt", "dataset_comment": "Convert Column `Date` to Date Format using pandas function and return the converted dataframe.", "generated_comment": "Convert the \"Date\" column of the dataframe to datetime format using pandas' to_datetime function.", "indicator_name": "bleu", "score": 14.867101249568627}, {"id": 61, "filename": "PandasEval_61.txt", "dataset_comment": "Insert a row into a dataframe at a specified position without ignoring the index, and sort and reset the index with drop=True. Return the new dataframe.", "generated_comment": "This function takes in two parameters: df (a DataFrame) and row_to_insert (the row to be inserted in the DataFrame). The function appends the row_to_insert to the DataFrame df and then sorts the DataFrame by index. It then resets the index, dropping the original index. The updated DataFrame is returned at the end.", "indicator_name": "bleu", "score": 3.2881031449261626}, {"id": 62, "filename": "PandasEval_62.txt", "dataset_comment": "For each row in the DataFrame, insert row['MSRA'] as the key and row['THU'] as the value into a rows_dict. The method iterrows() yields both the index and row (as a Series).", "generated_comment": "Iterate through each row of the dataframe, and for each row, map the 'MSRA' value to the 'THU' value in the rows_dict dictionary. This results in a dictionary where each 'MSRA' value is a key, and the corresponding 'THU' value is the value.", "indicator_name": "bleu", "score": 11.971655032986284}, {"id": 63, "filename": "PandasEval_63.txt", "dataset_comment": "Merge two DataFrames by index and set left and right indices to True.", "generated_comment": "Merge two dataframes based on their indices using pandas merge() function. The 'left_index' and 'right_index' parameters are set to True to indicate that the indices should be used for merging.", "indicator_name": "bleu", "score": 3.660493229779037}, {"id": 64, "filename": "PandasEval_64.txt", "dataset_comment": "Select only float64 columns from a Pandas DataFrame using an elegant and shorthand method.", "generated_comment": "Select and create a new dataframe that only includes columns of type 'float64' from the original dataframe.", "indicator_name": "bleu", "score": 8.907998295068834}, {"id": 65, "filename": "PandasEval_65.txt", "dataset_comment": "Merge two DataFrames with different column names but the same number of rows.  Given two DataFrames in Pandas, df1 and df2, where df1 has columns 'a' and 'b', and df2 has a column 'c', merge them to create a new DataFrame with columns 'a', 'b', and 'c'.  Two methods can be used to achieve this, both resulting in the same output. Use the merge function with additional arguments to utilize the indexes,  specifically setting left_index and right_index to True.", "generated_comment": "Merge two dataframes based on their indexes. If the indexes are same, the rows will be merged. Otherwise, the function will return NaN values for the dataframe that doesn't have a row with the corresponding index.", "indicator_name": "bleu", "score": 3.4281710810556456}, {"id": 66, "filename": "PandasEval_66.txt", "dataset_comment": "Given a pandas series representing frequencies of a value, convert those frequencies into percentages and return the percentage of each gender.", "generated_comment": "This function takes in a Pandas Series object and returns the percentage of each unique value in the series.It is typically used to get the percentage distribution of a categorical variable.In this case, it is used to get the percentage of each gender in the provided series.The 'normalize=True' parameter in the value_counts() function ensures the result is the relative frequencies of the unique values.", "indicator_name": "bleu", "score": 2.8062893653122667}, {"id": 67, "filename": "PandasEval_67.txt", "dataset_comment": "Resort the index of the DataFrame in place.", "generated_comment": "Reindex the DataFrame to accommodate the newly added row at the top and then sort the DataFrame based on the index to reflect the addition at the top.", "indicator_name": "bleu", "score": 3.2453802543598953}, {"id": 68, "filename": "PandasEval_68.txt", "dataset_comment": "Drop all rows containing NaN values and return the modified dataframe.", "generated_comment": "This function takes a pandas dataframe as input and removes all rows that contain any NaN values.", "indicator_name": "bleu", "score": 12.027418489270158}, {"id": 69, "filename": "PandasEval_69.txt", "dataset_comment": "Fill specific columns of a Pandas DataFrame with 0 in place using the fillna() function and return the changed DataFrame.", "generated_comment": "This function replaces any None or NaN values in the specified columns of a dataframe with 0. The function takes as input a dataframe and a list of column names, and returns the dataframe after the operation.", "indicator_name": "bleu", "score": 8.27673371380407}, {"id": 70, "filename": "PandasEval_70.txt", "dataset_comment": "Drop all data in a Pandas DataFrame using df.index to remove all rows.", "generated_comment": "Delete all the rows of the pandas dataframe df in place by using the drop() function with the index of the dataframe as argument. The inplace=True argument ensures that the operation is done on the dataframe itself.", "indicator_name": "bleu", "score": 2.9055545334860446}, {"id": 71, "filename": "PandasEval_71.txt", "dataset_comment": "Split a dataframe with 100,000 entries into 100 sections of 1,000 entries each.  Take a random sample of size 50 from one of the sections.  Add a \"section\" column to the dataframe, then perform a groupby and sample(n=50).", "generated_comment": "Group the dataframe by the 'section' column and then take a random sample of 50 rows from each group.", "indicator_name": "bleu", "score": 11.151461903125101}, {"id": 72, "filename": "PandasEval_72.txt", "dataset_comment": "Normalize the columns of the Pandas DataFrame so that each value is between 0 and 1, given that each column has a different value range.", "generated_comment": "Normalize the values in the given DataFrame by applying a lambda function that performs min-max normalization on each column. Min-Max normalization is a method to transform features to be within a certain range. In this case, the range is [0,1]. This can improve the performance of machine learning algorithms.", "indicator_name": "bleu", "score": 3.088635578704585}, {"id": 73, "filename": "PandasEval_73.txt", "dataset_comment": "Get the counts of unique values of the DataFrame using count_values,  convert the output to a Pandas DataFrame,  rename the axis to 'unique_values',  and reset the index to return the final DataFrame.", "generated_comment": "Takes a pandas dataframe as input and returns a new dataframe with the unique values and their counts in the original dataframe. The unique values are renamed as 'unique_values' and the counts as 'counts'.", "indicator_name": "bleu", "score": 17.945051393743146}, {"id": 74, "filename": "PandasEval_74.txt", "dataset_comment": "Count the number of occurrences of a value in a series and return the count.", "generated_comment": "This function takes a pandas Series and a value as input. It counts the occurrences of the value in the given pandas Series by using the value_counts() function of pandas which returns the count of unique values in descending order so that the first element is the most frequently-occurring element. It then returns the count of the specified value.", "indicator_name": "bleu", "score": 0.9333076520631836}, {"id": 75, "filename": "PandasEval_75.txt", "dataset_comment": "Select rows where the value in column x2 is NaN.", "generated_comment": "Filter the dataframe to only include rows where 'x2' column contains NaN values.", "indicator_name": "bleu", "score": 12.48300098708794}, {"id": 76, "filename": "PandasEval_76.txt", "dataset_comment": "Append the source series to the target series while ignoring the index or resetting the index.", "generated_comment": "Merge two pandas series into one by appending the source series to the target series, and ignoring the original indices of the two series, resulting in a new series with a default integer index.", "indicator_name": "bleu", "score": 15.304162101928634}, {"id": 77, "filename": "PandasEval_77.txt", "dataset_comment": "Find and return the rows in the DataFrame where col_a is greater than col_b.", "generated_comment": "This function takes a pandas DataFrame and two column names as input. It returns all rows where the value in column 'col_a' is greater than the value in column 'col_b'.", "indicator_name": "bleu", "score": 8.965724198797261}, {"id": 78, "filename": "PandasEval_78.txt", "dataset_comment": "Check whether a column or row exists in a DataFrame before referencing it.  Output the second row of data in the `mycol` column if it exists; otherwise, output NaN.", "generated_comment": "Retrieve the value of the column 'mycol' at index 1 from the DataFrame 'df'. If the index 1 does not exist, return 'np.nan'.", "indicator_name": "bleu", "score": 5.318827859531982}, {"id": 79, "filename": "PandasEval_79.txt", "dataset_comment": "Return the dataframe excluding rows that contain one or more NaN values.", "generated_comment": "This function takes a pandas DataFrame as input and returns all rows which contain more than one NaN (Not a Number) value. It uses the 'isna()' function to identify NaN values and 'any(axis=1)' to check each row.", "indicator_name": "bleu", "score": 1.03963914852316}, {"id": 80, "filename": "PandasEval_80.txt", "dataset_comment": "Calculate the ceiling of a Pandas Series and return the result.", "generated_comment": "This function takes a pandas series as input and returns a new series where each element is the smallest integer greater than or equal to the corresponding element in the input series. This is done using the numpy ceil function.", "indicator_name": "bleu", "score": 2.2576441690398164}, {"id": 81, "filename": "PandasEval_81.txt", "dataset_comment": "Perform a groupby on a Pandas DataFrame, excluding certain columns, by grouping on `Country` and `Item_Code`, and compute the sum of the rows in the columns ['Y1961', 'Y1962', 'Y1963'].", "generated_comment": "Group the dataframe by 'Country' and 'Item_Code' columns, then sum up the values in 'Y1961', 'Y1962', and 'Y1963' columns for each group.", "indicator_name": "bleu", "score": 24.776421236544362}, {"id": 82, "filename": "PandasEval_82.txt", "dataset_comment": "Parameters:  df: The dataframe to append to.  list_to_append: The list to append.  column_name_list: The column names of the list to append. Returns: The dataframe with the list appended.", "generated_comment": "This function appends the provided list to a dataframe. It first converts the list into a DataFrame with specified column names and then appends it to the original dataframe. The resulting dataframe is then returned.", "indicator_name": "bleu", "score": 6.7598328429064685}, {"id": 83, "filename": "PandasEval_83.txt", "dataset_comment": "Map True/False values to 1/0 in a Pandas DataFrame and return the DataFrame with the column converted to int.", "generated_comment": "This function is designed to convert boolean values in a specified column of a pandas DataFrame to integer type.It does this by using the astype() function which changes the data type of a Series.The function receives a DataFrame (df) and a column name (col_name) as arguments,then it applies the astype() function to the specified column,converting its boolean values to integer (True to 1 and False to 0), and returns the modified DataFrame.", "indicator_name": "bleu", "score": 0.9890989537203341}, {"id": 84, "filename": "PandasEval_84.txt", "dataset_comment": "Convert Pandas DataFrame to a list of dictionaries using df.to_dict() and return the result.", "generated_comment": "Convert a pandas DataFrame to a list of dictionaries, where each dictionary represents a row of the DataFrame, with the DataFrame's column names as the keys of the dictionaries and the row values as the values of the dictionaries.", "indicator_name": "bleu", "score": 12.04515265091219}, {"id": 85, "filename": "PandasEval_85.txt", "dataset_comment": "Set the value of the entire column `B` in a Pandas DataFrame and return the modified DataFrame.", "generated_comment": "This function takes a pandas DataFrame and a value as input. It assigns the given value to all elements of column 'B' in the DataFrame and returns the updated DataFrame.", "indicator_name": "bleu", "score": 12.085403185802843}, {"id": 86, "filename": "PandasEval_86.txt", "dataset_comment": "Delete multiple columns (A and C) in a single operation.", "generated_comment": "Remove columns 'A' and 'C' from the DataFrame df and create a new DataFrame new_df with the remaining columns.", "indicator_name": "bleu", "score": 5.059984729180566}, {"id": 87, "filename": "PandasEval_87.txt", "dataset_comment": "Given that all the dataframes have the same columns, concatenate them and return the concatenated dataframe.", "generated_comment": "Concatenates two pandas DataFrames along the axis=0 (default behavior of pd.concat). This essentially appends df2 at the end of df1.", "indicator_name": "bleu", "score": 4.849092583563755}, {"id": 88, "filename": "PandasEval_88.txt", "dataset_comment": "Get the last N rows of a Pandas DataFrame.", "generated_comment": "Select the last N number of rows from the DataFrame using the tail() method.", "indicator_name": "bleu", "score": 14.625475098301926}, {"id": 89, "filename": "PandasEval_89.txt", "dataset_comment": "Return the row index values of the dataframe as a list.", "generated_comment": "This function is designed to convert the index values of a pandas DataFrame to a list and return this list.", "indicator_name": "bleu", "score": 13.73904109312262}, {"id": 90, "filename": "PandasEval_90.txt", "dataset_comment": "Create a new DataFrame with the specified rows removed.", "generated_comment": "The requirement of this code is to drop two consecutive rows from the provided dataframe if the 'column2' of the odd-indexed row is 0. It first finds the odd-indexed rows where 'column2' is 0 and then appends the indices of the rows just above them to 'idx'. It then uses the 'drop' function of panda's DataFrame to drop these rows from the dataframe.", "indicator_name": "bleu", "score": 0.026453900526770168}, {"id": 91, "filename": "PandasEval_91.txt", "dataset_comment": "Convert a table represented as a list of lists into a pandas DataFrame with columns ['one', 'two'] and convert the 'two' column to float type in the best way.", "generated_comment": "Create a pandas DataFrame from a given list 'a'. The DataFrame should have two columns named 'one' and 'two'.Convert the 'two' column values to float data type.", "indicator_name": "bleu", "score": 26.407646704574937}, {"id": 92, "filename": "PandasEval_92.txt", "dataset_comment": "Slice the DataFrame to take the first n rows and return the result.", "generated_comment": "The function get_first_n_rows is designed to return the first 'n' rows from the input dataframe 'df'.", "indicator_name": "bleu", "score": 7.439548772267089}, {"id": 93, "filename": "PandasEval_93.txt", "dataset_comment": "Transform timestamp to a pydatetime object and return the pydatetime object.", "generated_comment": "This function converts the input timestamp into python datetime object using the 'to_pydatetime()' function of pandas timestamp object.", "indicator_name": "bleu", "score": 6.3430587326336925}, {"id": 94, "filename": "PandasEval_94.txt", "dataset_comment": "Select the given columns and return the new DataFrame.", "generated_comment": "This function selects and returns multiple columns from the given dataframe. The parameter 'df' is the input dataframe and 'columns' is a list of column names to be selected.", "indicator_name": "bleu", "score": 2.3943563478144485}, {"id": 95, "filename": "PandasEval_95.txt", "dataset_comment": "Divide all columns ['B', 'C'] in a DataFrame by the first column 'A' and return the result.", "generated_comment": "This function divides multiple columns (in this case 'B' and 'C') by the first column ('A') of a given dataframe. The division operation is performed along the rows (axis=0). The dataframe is then updated with the calculated values and returned.", "indicator_name": "bleu", "score": 9.357832001320524}, {"id": 96, "filename": "PandasEval_96.txt", "dataset_comment": "Merge the two dataframes on the column 'company'.", "generated_comment": "Merge two dataframes based on the 'company' column. This operation aligns the dataframes based on 'company' values and combine them.", "indicator_name": "bleu", "score": 9.082870013520981}, {"id": 97, "filename": "PandasEval_97.txt", "dataset_comment": "Rename the only column header and return the changed dataframe.", "generated_comment": "The purpose of this function is to rename a specific column in a pandas dataframe. The old name of the column is replaced with a new name provided by the user. The function returns the modified dataframe.", "indicator_name": "bleu", "score": 1.6255238414237352}, {"id": 98, "filename": "PandasEval_98.txt", "dataset_comment": "Get a list of the column headers from a Pandas DataFrame provided by user input, regardless of the number of columns or their names, and return the list of column headers.", "generated_comment": "This function is designed to get the list of column names from a given pandas dataframe. It utilizes the 'columns' property of the dataframe to get all the column names and then converts them to a list using 'tolist()' method.", "indicator_name": "bleu", "score": 11.413362453813741}, {"id": 99, "filename": "PandasEval_99.txt", "dataset_comment": "Find non-numeric rows in a Pandas DataFrame and return the rows that contain non-numeric values. To obtain the subDataFrame of rows with non-numeric values, use the negation (~) of the condition to identify rows with at least one non-numeric entry.", "generated_comment": "This function is used to find and return all rows in a dataframe that contain non-numeric data. It applies the np.isreal function to each element of the dataframe and checks if all elements in a row are numeric. The \"~\" operator is used to reverse the boolean values returned by the all() function.", "indicator_name": "bleu", "score": 12.338644244550226}, {"id": 100, "filename": "PandasEval_100.txt", "dataset_comment": "Use the concat function, as np.repeat does not work practically on a DataFrame.", "generated_comment": "Repeat the DataFrame 'x' for 5 times using pandas concat function.", "indicator_name": "bleu", "score": 11.468801613122626}]