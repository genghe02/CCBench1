import re


class RegexUtils:
    # This class provides various regex utility functions to work with regular expressions.

    def match(self, pattern, text):
        # Matches the given pattern with the text and returns True if there is a match, False otherwise.
        # param pattern: str, the regular expression pattern to match
        # param text: str, the text to match against
        # return: bool, True if there is a match, False otherwise
        # Some test cases for the function
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        # Finds all occurrences of the given pattern in the text and returns a list of results.
        # param pattern: str, the regular expression pattern to find
        # param text: str, the text to search in
        # return: list, a list of all occurrences found
        # Some test cases for the function
        return re.findall(pattern, text)

    def split(self, pattern, text):
        # Splits the text based on the given pattern and returns a list of substrings.
        # param pattern: str, the regular expression pattern to split on
        # param text: str, the text to split
        # return: list, a list of substrings after splitting
        # Some test cases for the function
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        # Substitutes occurrences of the pattern in the text with the replacement string.
        # param pattern: str, the regular expression pattern to substitute
        # param replacement: str, the string to replace the pattern with
        # param text: str, the text to perform substitution
        # return: str, the text after substitution
        # Some test cases for the function
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        # Generates and returns a regular expression pattern to match email addresses.
        # return: str, the email address pattern
        # Some test cases for the function
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        # Generates and returns a regular expression pattern to match phone numbers in the format xxx-xxx-xxxx.
        # return: str, the phone number pattern
        # Some test cases for the function
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        # Generates and returns a regular expression pattern to split sentences.
        # return: str, the split sentences pattern
        # Some test cases for the function
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        # Splits the text into sentences based on the sentence splitting pattern.
        # param text: str, the text to split into sentences
        # return: list, a list of sentences
        # Some test cases for the function
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        # Validates if the given phone number matches the phone number pattern.
        # param phone_number: str, the phone number to validate
        # return: bool, True if the phone number is valid, False otherwise
        # Some test cases for the function
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        # Extracts email addresses from the given text using the email address pattern.
        # param text: str, the text to extract email addresses from
        # return: list, a list of email addresses found in the text
        # Some test cases for the function
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)