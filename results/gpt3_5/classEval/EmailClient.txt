from datetime import datetime

class EmailClient:
    # This class represents an Email Client with the ability to send and receive emails.

    def __init__(self, addr, capacity) -> None:
        # Initializes an instance of EmailClient with a given address and capacity for the inbox.
        # :param addr: str, the address associated with the EmailClient
        # :param capacity: int, the maximum capacity of the inbox
        self.addr = addr
        self.capacity = capacity
        self.inbox = []

    def send_to(self, recv, content, size):
        # Sends an email to the specified recipient if space is available in the recipient's inbox.
        # :param recv: EmailClient, the recipient EmailClient to send the email to
        # :param content: str, the content of the email
        # :param size: int, the size of the email in bytes
        # :return: bool, True if the email was successfully sent, False if inbox was full
        # Test cases:
        # - Sending email to a recipient with available space
        # - Clearing inbox if recipient's inbox is full
        if not recv.is_full_with_one_more_email(size):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            email = {
                "sender": self.addr,
                "receiver": recv.addr,
                "content": content,
                "size": size,
                "time": timestamp,
                "state": "unread"
            }
            recv.inbox.append(email)
            return True
        else:
            self.clear_inbox(size)
            return False

    def fetch(self):
        # Fetches the first unread email from the inbox, marks it as read, and returns it.
        # :return: dict, the email object if found, None otherwise
        # Test cases:
        # - Fetching the first unread email
        # - No unread emails in the inbox
        if len(self.inbox) == 0:
            return None
        for i in range(len(self.inbox)):
            if self.inbox[i]['state'] == "unread":
                self.inbox[i]['state'] = "read"
                return self.inbox[i]
        return None

    def is_full_with_one_more_email(self, size):
        # Checks if adding an email of a certain size would exceed the inbox capacity.
        # :param size: int, the size of the email to be added
        # :return: bool, True if adding the email would exceed capacity, False otherwise
        # Test cases:
        # - Inbox is full with one more email
        # - Inbox has space for one more email
        occupied_size = self.get_occupied_size()
        return True if occupied_size + size > self.capacity else False

    def get_occupied_size(self):
        # Computes the total size occupied by emails in the inbox.
        # :return: int, the total occupied size in bytes
        # Test cases:
        # - Calculating total occupied size in an empty inbox
        # - Calculating total occupied size in a non-empty inbox
        occupied_size = 0
        for email in self.inbox:
            occupied_size += email["size"]
        return occupied_size

    def clear_inbox(self, size):
        # Clears emails from the inbox to free up space based on the specified size.
        # :param size: int, the size of emails to clear from the inbox
        # Test cases:
        # - Clearing emails based on the given size
        # - No emails to clear
        if len(self.addr) == 0:
            return
        freed_space = 0
        while freed_space < size and self.inbox:
            email = self.inbox[0]
            freed_space += email['size']
            del self.inbox[0]