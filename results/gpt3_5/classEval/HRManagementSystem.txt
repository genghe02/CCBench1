class HRManagementSystem:
    # This class represents a Human Resources Management System.

    def __init__(self):
        # Initializes the HRManagementSystem class with an empty dictionary to store employees.
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        # Adds an employee to the system.
        # param employee_id: int, the unique identifier for the employee
        # param name: str, the name of the employee
        # param position: str, the position of the employee
        # param department: str, the department of the employee
        # param salary: int, the salary of the employee
        # return: bool, True if the employee was successfully added, False if the employee ID already exists
        # Test Cases:
        # 1. add_employee(1, "Alice", "Engineer", "Engineering", 50000) - Expected: True
        # 2. add_employee(1, "Bob", "Manager", "HR", 60000) - Expected: False
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        # Removes an employee from the system.
        # param employee_id: int, the unique identifier of the employee to be removed
        # return: bool, True if the employee was successfully removed, False if the employee ID does not exist
        # Test Cases:
        # 1. remove_employee(1) - Expected: True
        # 2. remove_employee(2) - Expected: False
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        # Updates the information of an existing employee.
        # param employee_id: int, the unique identifier of the employee to update
        # param employee_info: dict, a dictionary containing the updated information for the employee
        # return: bool, True if the employee information was successfully updated, False if the employee ID does not exist or keys in employee_info do not match existing keys
        # Test Cases:
        # 1. update_employee(1, {'name': 'Alice Smith', 'salary': 55000}) - Expected: True
        # 2. update_employee(2, {'department': 'IT'}) - Expected: False
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        # Retrieves the information of an employee based on the employee ID.
        # param employee_id: int, the unique identifier of the employee to retrieve
        # return: dict, the information of the employee if found, False if the employee ID does not exist
        # Test Cases:
        # 1. get_employee(1) - Expected: {'name': 'Alice', 'position': 'Engineer', 'department': 'Engineering', 'salary': 50000}
        # 2. get_employee(3) - Expected: False
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        # Lists all employees in the system with their details.
        # return: dict, a dictionary containing employee details with employee IDs as keys
        # Test Cases:
        # 1. list_employees() - Expected: {1: {'employee_ID': 1, 'name': 'Alice', 'position': 'Engineer', 'department': 'Engineering', 'salary': 50000}}
        # 2. list_employees() - Expected: {} (if no employees are present)
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data