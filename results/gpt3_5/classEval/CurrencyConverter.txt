class CurrencyConverter:
    # This class represents a currency converter that can convert between different currencies based on exchange rates.

    def __init__(self):
        # Initialize the currency converter with default exchange rates.
        self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }

    def convert(self, amount, from_currency, to_currency):
        # Convert the given amount from one currency to another based on exchange rates.
        # param amount: float, the amount to be converted
        # param from_currency: str, the currency to convert from
        # param to_currency: str, the currency to convert to
        # return: float, the converted amount in the target currency
        # Some test cases for the function:
        # >>> converter = CurrencyConverter()
        # >>> converter.convert(100, 'USD', 'EUR')
        if from_currency == to_currency:
            return amount

        if from_currency not in self.rates or to_currency not in self.rates:
            return False

        from_rate = self.rates[from_currency]
        to_rate = self.rates[to_currency]

        converted_amount = (amount / from_rate) * to_rate
        return converted_amount

    def get_supported_currencies(self):
        # Get a list of supported currencies by the currency converter.
        # return: list, a list of supported currencies
        # Some test cases for the function:
        # >>> converter = CurrencyConverter()
        # >>> converter.get_supported_currencies()
        return list(self.rates.keys())

    def add_currency_rate(self, currency, rate):
        # Add a new currency with its exchange rate to the currency converter.
        # param currency: str, the currency code to add
        # param rate: float, the exchange rate for the new currency
        # return: bool, True if currency is added successfully, False if currency already exists
        # Some test cases for the function:
        # >>> converter = CurrencyConverter()
        # >>> converter.add_currency_rate('INR', 0.014)
        if currency in self.rates:
            return False
        self.rates[currency] = rate

    def update_currency_rate(self, currency, new_rate):
        # Update the exchange rate of an existing currency in the currency converter.
        # param currency: str, the currency code to update
        # param new_rate: float, the new exchange rate for the currency
        # return: bool, True if currency rate is updated successfully, False if currency does not exist
        # Some test cases for the function:
        # >>> converter = CurrencyConverter()
        # >>> converter.update_currency_rate('USD', 1.1)
        if currency not in self.rates:
            return False
        self.rates[currency] = new_rate