import logging
import datetime


class AccessGatewayFilter:

    def __init__(self):
        # Initialize the class attributes.
        self.arguments = {}
        self.required = set()
        self.types = {}

    def filter(self, request):
        # Filter the incoming request based on certain rules and conditions.
        # param request: dict, the incoming request details
        # return: bool, True if the request is allowed, False otherwise
        # Test Cases:
        # >>> filter = AccessGatewayFilter()
        # >>> filter.filter({'path': '/login', 'method': 'POST'})
        request_uri = request['path']
        method = request['method']

        if self.is_start_with(request_uri):
            return True

        try:
            token = self.get_jwt_user(request)
            user = token['user']
            if user['level'] > 2:
                self.set_current_user_info_and_log(user)
                return True
        except:
            return False

    def is_start_with(self, request_uri):
        # Check if the request URI starts with specific paths.
        # param request_uri: str, the request URI
        # return: bool, True if the request URI starts with specific paths, False otherwise
        # Test Cases:
        # To cover both branches, we can test for a request_uri that starts with "/api" and one that does not.
        start_with = ["/api", '/login']
        for s in start_with:
            if request_uri.startswith(s):
                return True
        return False

    def get_jwt_user(self, request):
        # Get the JWT user information from the request.
        # param request: dict, the request containing headers and user information
        # return: dict or None, the JWT user information if valid and within 3 days, otherwise None
        # Test Cases:
        # We can create test cases to cover the scenarios of a valid token, an expired token, and an invalid token.
        token = request['headers']['Authorization']
        user = token['user']
        if token['jwt'].startswith(user['name']):
            jwt_str_date = token['jwt'].split(user['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    def set_current_user_info_and_log(self, user):
        # Set the current user information and log the activity.
        # param user: dict, the user information to log
        # return: None
        # Test Cases:
        # We can test with different user information to ensure proper logging functionality.
        host = user['address']
        logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)