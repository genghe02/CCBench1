import sqlite3
import pandas as pd


class DatabaseProcessor:
    # This class provides functionalities to interact with a SQLite database.

    def __init__(self, database_name):
        # Constructor method to initialize the DatabaseProcessor object.
        self.database_name = database_name

    def create_table(self, table_name, key1, key2):
        # Method to create a table in the database.
        # param table_name: str, name of the table to be created
        # param key1: str, name of the first key in the table
        # param key2: str, name of the second key in the table
        # Create a table in the database with the specified table_name, key1, and key2.
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)"
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_into_database(self, table_name, data):
        # Method to insert data into a specified table in the database.
        # param table_name: str, name of the table to insert data into
        # param data: list of dicts, data to be inserted into the table
        # Insert data into the specified table in the database using the provided data.
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        for item in data:
            insert_query = f"INSERT INTO {table_name} (name, age) VALUES (?, ?)"
            cursor.execute(insert_query, (item['name'], item['age']))

        conn.commit()
        conn.close()

    def search_database(self, table_name, name):
        # Method to search for a specific name in a table in the database.
        # param table_name: str, name of the table to search
        # param name: str, name to search for in the table
        # return: list of tuples, search results if found, None otherwise
        # Search for the specified name in the table and return the results if found.
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = f"SELECT * FROM {table_name} WHERE name = ?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        if result:
            return result
        else:
            return None

    def delete_from_database(self, table_name, name):
        # Method to delete entries with a specific name from a table in the database.
        # param table_name: str, name of the table to delete from
        # param name: str, name to delete from the table
        # Delete entries with the specified name from the table in the database.
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = f"DELETE FROM {table_name} WHERE name = ?"
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()