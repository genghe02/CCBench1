import random

class MinesweeperGame:
    # A class to simulate a Minesweeper game board.
    def __init__(self, n, k) -> None:
        # Initializes the MinesweeperGame class with board size n x n and k mines.
        # Parameters:
        # n: int, the size of the board.
        # k: int, the number of mines.
        self.n = n
        self.k = k
        self.minesweeper_map = self.generate_mine_sweeper_map()
        self.player_map = self.generate_playerMap()
        self.score = 0

    def generate_mine_sweeper_map(self):
        # Generates the Minesweeper map with mines placed and numbers indicating adjacent mines.
        # Returns the generated Minesweeper map.
        # Test cases:
        # n=3, k=1, result=[[0, 1, 0], [1, 'X', 1], [0, 1, 0]]
        arr = [[0 for row in range(self.n)] for column in range(self.n)]
        for num in range(self.k):
            x = random.randint(0, self.n-1)
            y = random.randint(0, self.n-1)
            arr[y][x] = 'X'
            if (x >= 0 and x <= self.n-2) and (y >= 0 and y <= self.n-1):
                if arr[y][x+1] != 'X':
                    arr[y][x+1] += 1
            if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-1):
                if arr[y][x-1] != 'X':
                    arr[y][x-1] += 1
            if (x >= 1 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x-1] != 'X':
                    arr[y-1][x-1] += 1

            if (x >= 0 and x <= self.n-2) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x+1] != 'X':
                    arr[y-1][x+1] += 1 
            if (x >= 0 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
                if arr[y-1][x] != 'X':
                    arr[y-1][x] += 1

            if (x >= 0 and x <= self.n-2) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x+1] != 'X':
                    arr[y+1][x+1] += 1
            if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x-1] != 'X':
                    arr[y+1][x-1] += 1
            if (x >= 0 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
                if arr[y+1][x] != 'X':
                    arr[y+1][x] += 1
        return arr

    def generate_playerMap(self):
        # Generates the player map for the Minesweeper game.
        # Returns the generated player map.
        # Test cases:
        # n=3, result=[['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        arr = [['-' for row in range(self.n)] for column in range(self.n)]
        return arr

    def check_won(self, map):
        # Checks if the game is won by revealing all non-mine positions.
        # Returns True if the game is won, False otherwise.
        # Test cases:
        # map=[['1', 'X', '1'], ['X', '2', 'X'], ['1', 'X', '1']], result=False
        for i in range(self.n):
            for j in range(self.n):
                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':
                    return False
        return True

    def sweep(self, x, y):
        # Reveals the position (x, y) in the game board.
        # Parameters:
        # x: int, row index.
        # y: int, column index.
        # Returns True if game is won, False if mine is revealed, or the updated player map.
        # Test cases:
        # x=0, y=0, minesweeper_map=[['X', '1', '0'], ['1', '1', '0'], ['0', '0', '0']], result=False
        if self.minesweeper_map[x][y] == 'X':
            return False
        else:
            self.player_map[x][y] = self.minesweeper_map[x][y]
            self.score += 1
            if self.check_won(self.player_map) == True:
                return True
            return self.player_map