```python
import numpy as np
from gensim import matutils
from numpy import dot, array

class VectorUtil:
    # This is a class that provides utility functions for vector operations.

    @staticmethod
    def similarity(vector_1, vector_2):
        # Calculate the cosine similarity between two vectors.
        # param vector_1: Vector 1 for comparison
        # param vector_2: Vector 2 for comparison
        # return: float, cosine similarity between the two vectors
        # Some test cases for the function:
        # vector_1 = [1, 0, 1]
        # vector_2 = [0, 1, 0]
        # similarity = VectorUtil.similarity(vector_1, vector_2)
        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        # Calculate cosine similarities between a vector and a list of vectors.
        # param vector_1: Vector for comparison
        # param vectors_all: List of vectors to compare with
        # return: numpy array, cosine similarities between the vector and all vectors in vectors_all
        # Some test cases for the function:
        # vector_1 = [1, 0, 1]
        # vectors_all = [[0, 1, 0], [1, 1, 0], [1, 0, 0]]
        # similarities = VectorUtil.cosine_similarities(vector_1, vectors_all)
        norm = np.linalg.norm(vector_1)
        all_norms = np.linalg.norm(vectors_all, axis=1)
        dot_products = dot(vectors_all, vector_1)
        similarities = dot_products / (norm * all_norms)
        return similarities

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        # Calculate the cosine similarity between the means of two lists of vectors.
        # param vector_list_1: List of vectors 1 for comparison
        # param vector_list_2: List of vectors 2 for comparison
        # return: float, cosine similarity between the means of the two lists of vectors
        # Some test cases for the function:
        # vector_list_1 = [[1, 0, 1], [0, 1, 0]]
        # vector_list_2 = [[1, 1, 0], [0, 0, 1]]
        # similarity = VectorUtil.n_similarity(vector_list_1, vector_list_2)
        if not (len(vector_list_1) and len(vector_list_2)):
            raise ZeroDivisionError('At least one of the passed lists is empty.')

        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),
                   matutils.unitvec(array(vector_list_2).mean(axis=0))

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        # Compute IDF weights for elements in a dictionary.
        # param total_num: Total number of elements in the dictionary
        # param number_dict: Dictionary containing element counts
        # return: dict, IDF weights for elements in the dictionary
        # Some test cases for the function:
        # total_num = 10
        # number_dict = {'apple': 5, 'banana': 3, 'orange': 2}
        # weight_dict = VectorUtil.compute_idf_weight_dict(total_num, number_dict)
        index_2_key_map = {}

        index = 0

        count_list = []
        for key, count in number_dict.items():
            index_2_key_map[index] = key
            count_list.append(count)
            index = index + 1

        a = np.array(count_list)
        ## smooth, in case the divide by zero error
        a = np.log((total_num + 1) / (a + 1))
        result = {}

        for index, w in enumerate(a):
            key = index_2_key_map[index]
            result[key] = w

        return result
```