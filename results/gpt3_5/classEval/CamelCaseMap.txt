# Class for mapping keys from snake_case to camelCase.
class CamelCaseMap:
    def __init__(self):
        # Initialize the internal data dictionary.
        self._data = {}

    def __getitem__(self, key):
        # Get item by key from the internal data dictionary after converting the key to camelCase.
        # param key: str, the key to retrieve an item.
        # return: the value corresponding to the key.
        # Test cases: Ensure retrieval works with camelCase key and key with numbers.
        return self._data[self._convert_key(key)]

    def __setitem__(self, key, value):
        # Set item in the internal data dictionary with the given key and value after converting the key to camelCase.
        # param key: str, the key to set an item.
        # param value: any, the value to associate with the key.
        # return: None.
        # Test cases: Ensure setting works with camelCase key and key with numbers.
        self._data[self._convert_key(key)] = value

    def __delitem__(self, key):
        # Delete item by key from the internal data dictionary after converting the key to camelCase.
        # param key: str, the key to delete an item.
        # return: None.
        # Test cases: Ensure deletion works with camelCase key and key with numbers.
        del self._data[self._convert_key(key)]

    def __iter__(self):
        # Get an iterator for the internal data dictionary.
        # return: an iterator for the keys in the data dictionary.
        # Test cases: Ensure iteration works with the keys in the dictionary.
        return iter(self._data)

    def __len__(self):
        # Get the length of the internal data dictionary.
        # return: int, the number of items in the data dictionary.
        # Test cases: Ensure length calculation is correct for various items in the dictionary.
        return len(self._data)

    def _convert_key(self, key):
        # Convert the key from snake_case to camelCase if it is a string.
        # param key: str, the key to convert.
        # return: str, the key converted to camelCase.
        # Test cases: Ensure conversion works for different types of strings.
        if isinstance(key, str):
            return self._to_camel_case(key)
        return key

    @staticmethod
    def _to_camel_case(key):
        # Convert a snake_case string to camelCase.
        # param key: str, the key in snake_case format.
        # return: str, the key converted to camelCase.
        # Test cases: Ensure conversion works for different snake_case strings with varying lengths.
        parts = key.split('_')
        return parts[0] + ''.join(part.title() for part in parts[1:])