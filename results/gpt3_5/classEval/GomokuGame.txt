```python
# Class for representing a Gomoku game board and game logic.
class GomokuGame:
    def __init__(self, board_size):
        # Initialize the Gomoku game board with the specified size.
        # Initialize the current player to 'X'.
        self.board_size = board_size
        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'

    def make_move(self, row, col):
        # Make a move on the Gomoku board at the specified row and column.
        # Parameters:
        # row: int, the row index of the move
        # col: int, the column index of the move
        # Return:
        # bool, True if the move was successfully made, False otherwise
        # Test Cases:
        # >>> game = GomokuGame(15)
        # >>> game.make_move(0, 0)
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False

    def check_winner(self):
        # Check if there is a winner on the Gomoku board.
        # Return:
        # str or None, the symbol of the winner ('X' or 'O') or None if there is no winner yet
        # Test Cases:
        # >>> game = GomokuGame(15)
        # >>> game.board = [['X', 'X', 'X', 'X', 'X'], ['O', 'O', 'O', 'O', ' '], [' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ']]
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col] != ' ':
                    for direction in directions:
                        if self._check_five_in_a_row(row, col, direction):
                            return self.board[row][col]
        return None

    def _check_five_in_a_row(self, row, col, direction):
        # Check if there are 5 consecutive symbols in a row based on the specified direction.
        # Parameters:
        # row: int, the row index to start checking from
        # col: int, the column index to start checking from
        # direction: tuple, a tuple representing the direction to check (dx, dy)
        # Return:
        # bool, True if there are 5 consecutive symbols in a row, False otherwise
        # Test Cases:
        # >>> game = GomokuGame(15)
        # >>> game.board = [['X', 'X', 'X', 'X', 'X'], ['O', 'O', 'O', 'O', ' '], [' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' '], [' ', ' ', ' ', ' ', ' ']]
        dx, dy = direction
        count = 1
        symbol = self.board[row][col]
        for i in range(1, 5):
            new_row = row + dx * i
            new_col = col + dy * i
            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
                return False
            if self.board[new_row][new_col] != symbol:
                return False
            count += 1
        return count == 5
```