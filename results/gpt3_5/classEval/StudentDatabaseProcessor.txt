```python
<description for whole class>
import sqlite3


class StudentDatabaseProcessor:
    # Class for interacting with a SQLite database to perform CRUD operations on student records.

    def __init__(self, database_name):
        # Initializes the StudentDatabaseProcessor with the specified database name.
        # :param database_name: str, the name of the SQLite database to connect to.

        self.database_name = database_name

    def create_student_table(self):
        # Creates a 'students' table in the connected database if it does not exist already.
        # :return: None
        # Some test cases for the function:
        # - Creating the table successfully
        # - Attempting to create the table when it already exists
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            gender TEXT,
            grade INTEGER
        )
        """
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_student(self, student_data):
        # Inserts a new student record into the 'students' table.
        # :param student_data: dict, contains the information of the student to be inserted (name, age, gender, grade).
        # :return: None
        # Some test cases for the function:
        # - Inserting a student with valid data
        # - Inserting a student with missing information
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        insert_query = """
        INSERT INTO students (name, age, gender, grade)
        VALUES (?, ?, ?, ?)
        """
        cursor.execute(insert_query,
                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))

        conn.commit()
        conn.close()

    def search_student_by_name(self, name):
        # Searches for a student record in the 'students' table by the student's name.
        # :param name: str, the name of the student to search for.
        # :return: list of tuples, contains the records of students with the specified name.
        # Some test cases for the function:
        # - Searching for an existing student by name
        # - Searching for a non-existent student by name
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = "SELECT * FROM students WHERE name = ?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        conn.close()

        return result

    def delete_student_by_name(self, name):
        # Deletes a student record from the 'students' table by the student's name.
        # :param name: str, the name of the student to delete.
        # :return: None
        # Some test cases for the function:
        # - Deleting an existing student by name
        # - Deleting a non-existent student by name
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = "DELETE FROM students WHERE name = ?"
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()
```