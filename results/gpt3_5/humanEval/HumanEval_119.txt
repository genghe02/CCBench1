def match_parens(lst):
    # Given a list of two strings, check if the parentheses can be matched to form a valid expression.

    # Define a helper function to check if parentheses in a string are balanced.
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    # Combine the strings in two different ways and check if the parentheses are balanced.
    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No' 

# Test Cases:
# Test case 1: Valid case where parentheses are balanced
assert match_parens(['(())', '()']) == 'Yes'

# Test case 2: Invalid case where parentheses are unbalanced
assert match_parens(['(()', '())']) == 'No'

# Test case 3: Valid case where parentheses are balanced after combining strings
assert match_parens(['((', '))']) == 'Yes'

# Test case 4: Invalid case where parentheses are unbalanced after combining strings
assert match_parens(['((', '))(']) == 'No'