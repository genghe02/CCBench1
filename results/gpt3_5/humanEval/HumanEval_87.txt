def get_row(lst, x):
    # Get the coordinates of a specific value x in a 2D list lst and sort them by column in descending order and then by row in ascending order.

    # Test case 1: lst is an empty list
    # Expected output: []
    assert get_row([], 2) == []
    
    # Test case 2: lst contains multiple occurrences of x
    # Expected output: [(2, 1), (2, 3), (3, 0), (3, 1)]
    assert get_row([[1, 2, 3], [4, 2, 6], [6, 2, 9], [2, 2, 2]], 2) == [(2, 1), (2, 3), (3, 0), (3, 1)]
    
    # Test case 3: lst contains x at the end of each row
    # Expected output: [(0, 3), (1, 3), (2, 3), (3, 3), (4, 3)]
    assert get_row([[1, 2, 3, 4], [5, 6, 7, 8], [2, 2, 2, 2], [9, 2, 2, 2], [2, 2, 2, 2]], 2) == [(0, 3), (1, 3), (2, 3), (3, 3), (4, 3)]

    # Get the coordinates of the value x in the 2D list lst and sort them by column in descending order and then by row in ascending order.
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])