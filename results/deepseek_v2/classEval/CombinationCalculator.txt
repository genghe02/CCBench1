```python
import math
from typing import List

class CombinationCalculator:
    # This class provides methods to calculate combinations and generate combinations from a list of strings.
    
    def __init__(self, datas: List[str]):
        # Initialize the CombinationCalculator with a list of strings.
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        # Calculate the number of combinations of n items taken m at a time.
        # param n: int, the total number of items.
        # param m: int, the number of items to choose.
        # return: int, the number of combinations.
        # >>> CombinationCalculator.count(5, 2)
        # 10
        # >>> CombinationCalculator.count(10, 0)
        # 1
        if m == 0 or n == m:
            return 1
        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))

    @staticmethod
    def count_all(n: int) -> int:
        # Calculate the total number of combinations for all possible values of m from 0 to n.
        # param n: int, the total number of items.
        # return: int, the total number of combinations.
        # >>> CombinationCalculator.count_all(3)
        # 7
        # >>> CombinationCalculator.count_all(63)
        # inf
        if n < 0 or n > 63:
            return False
        return (1 << n) - 1 if n != 63 else float("inf")

    def select(self, m: int) -> List[List[str]]:
        # Generate all combinations of m items from the initialized list of strings.
        # param m: int, the number of items to choose.
        # return: List[List[str]], a list of all combinations.
        # >>> cc = CombinationCalculator(['A', 'B', 'C'])
        # >>> cc.select(2)
        # [['A', 'B'], ['A', 'C'], ['B', 'C']]
        result = []
        self._select(0, [None] * m, 0, result)
        return result

    def select_all(self) -> List[List[str]]:
        # Generate all combinations for all possible values of m from 1 to the length of the initialized list.
        # return: List[List[str]], a list of all combinations.
        # >>> cc = CombinationCalculator(['A', 'B', 'C'])
        # >>> cc.select_all()
        # [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        # Recursive helper function to generate combinations.
        # param dataIndex: int, the current index in the datas list.
        # param resultList: List[str], the current combination being built.
        # param resultIndex: int, the current index in the resultList.
        # param result: List[List[str]], the list to store all combinations.
        # return: None, modifies result in place.
        # >>> cc = CombinationCalculator(['A', 'B', 'C'])
        # >>> result = []
        # >>> cc._select(0, [None, None], 0, result)
        # >>> result
        # [['A', 'B'], ['A', 'C'], ['B', 'C']]
        resultLen = len(resultList)
        resultCount = resultIndex + 1
        if resultCount > resultLen:
            result.append(resultList.copy())
            return

        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
            resultList[resultIndex] = self.datas[i]
            self._select(i + 1, resultList, resultIndex + 1, result)
```