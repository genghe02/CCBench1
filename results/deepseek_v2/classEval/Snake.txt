```python
import random


class Snake:
    # This class represents the Snake game logic, including the snake's movement, food consumption, and game reset.
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        # Initialize the Snake object with screen dimensions, block size, and initial food position.
        # param SCREEN_WIDTH: int, the width of the game screen
        # param SCREEN_HEIGHT: int, the height of the game screen
        # param BLOCK_SIZE: int, the size of each block in the game
        # param food_position: tuple, the initial position of the food
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        # Move the snake in the specified direction and handle food consumption and collision detection.
        # param direction: tuple, the direction in which the snake should move (e.g., (1, 0) for right)
        # return: None, updates the snake's position and handles game logic
        # >>> snake = Snake(400, 400, 20, (200, 200))
        # >>> snake.move((1, 0))
        # >>> snake.positions[0]
        # (220.0, 200.0)
        cur = self.positions[0]
        x, y = direction

        new = (
            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
        )

        if new == self.food_position:
            self.eat_food()

        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        # Generate a new random position for the food that does not overlap with the snake's body.
        # return: None, updates the food_position attribute
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,
                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        # Reset the game state, including the snake's length, position, score, and food position.
        # return: None, resets the game state
        # >>> snake = Snake(400, 400, 20, (200, 200))
        # >>> snake.length = 5
        # >>> snake.positions = [(100, 100), (120, 100), (140, 100), (160, 100), (180, 100)]
        # >>> snake.score = 400
        # >>> snake.reset()
        # >>> snake.length
        # 1
        # >>> snake.positions
        # [(200.0, 200.0)]
        # >>> snake.score
        # 0
        self.length = 1
        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        # Handle the snake eating the food, increasing its length and score, and generating a new food position.
        # return: None, updates the snake's length, score, and food position
        # >>> snake = Snake(400, 400, 20, (200, 200))
        # >>> snake.eat_food()
        # >>> snake.length
        # 2
        # >>> snake.score
        # 100
        self.length += 1
        self.score += 100
        self.random_food_position()
```