```python
# This class represents a server that manages a white list of addresses, handles incoming and outgoing messages, and stores the structure of sent and received messages.
class Server:

    def __init__(self):
        # Initialize the server with empty white list, send structure, and receive structure.
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        # Add an address to the white list if it is not already present.
        # param addr: str, the address to be added to the white list
        # return: list or bool, the updated white list if the address is added, False otherwise
        # >>> server = Server()
        # >>> server.add_white_list("192.168.1.1")
        # ['192.168.1.1']
        # >>> server.add_white_list("192.168.1.1")
        # False
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        # Remove an address from the white list if it is present.
        # param addr: str, the address to be removed from the white list
        # return: list or bool, the updated white list if the address is removed, False otherwise
        # >>> server = Server()
        # >>> server.white_list = ["192.168.1.1"]
        # >>> server.del_white_list("192.168.1.1")
        # []
        # >>> server.del_white_list("192.168.1.2")
        # False
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        # Process an incoming message, validate its structure, and check if the sender is in the white list.
        # param info: dict, the incoming message containing 'addr' and 'content'
        # return: str or bool or int, the content of the message if valid and sender is in the white list, False if sender is not in the white list, -1 if the message structure is invalid
        # >>> server = Server()
        # >>> server.white_list = ["192.168.1.1"]
        # >>> server.recv({"addr": "192.168.1.1", "content": "Hello"})
        # 'Hello'
        # >>> server.recv({"addr": "192.168.1.2", "content": "Hello"})
        # False
        # >>> server.recv({"addr": "192.168.1.1"})
        # -1
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return -1
        addr = info["addr"]
        content = info["content"]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {"addr": addr, "content": content}
            return self.receive_struct["content"]

    def send(self, info):
        # Process an outgoing message and store its structure.
        # param info: dict, the outgoing message containing 'addr' and 'content'
        # return: str, "info structure is not correct" if the message structure is invalid
        # >>> server = Server()
        # >>> server.send({"addr": "192.168.1.1", "content": "Hello"})
        # >>> server.send_struct
        # {'addr': '192.168.1.1', 'content': 'Hello'}
        # >>> server.send({"addr": "192.168.1.1"})
        # 'info structure is not correct'
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return "info structure is not correct"
        self.send_struct = {"addr": info["addr"], "content": info["content"]}

    def show(self, type):
        # Display the stored structure of sent or received messages.
        # param type: str, the type of structure to display, either "send" or "receive"
        # return: dict or bool, the requested structure if valid, False otherwise
        # >>> server = Server()
        # >>> server.send({"addr": "192.168.1.1", "content": "Hello"})
        # >>> server.show("send")
        # {'addr': '192.168.1.1', 'content': 'Hello'}
        # >>> server.show("receive")
        # False
        if type == "send":
            return self.send_struct
        elif type == "receive":
            return self.receive_struct
        else:
            return False
```