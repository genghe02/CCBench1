```python
# This class is designed to handle and parse various components of a URL.
class URLHandler:
    def __init__(self, url):
        # Initialize the URLHandler object with a given URL.
        self.url = url

    def get_scheme(self):
        # Extract and return the scheme (protocol) part of the URL.
        # return: str or None, the scheme part of the URL if found, otherwise None.
        # >>> handler = URLHandler("https://example.com")
        # >>> handler.get_scheme()
        # 'https'
        # >>> handler = URLHandler("example.com")
        # >>> handler.get_scheme()
        # None
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            return self.url[:scheme_end]
        return None

    def get_host(self):
        # Extract and return the host part of the URL.
        # return: str or None, the host part of the URL if found, otherwise None.
        # >>> handler = URLHandler("https://example.com/path")
        # >>> handler.get_host()
        # 'example.com'
        # >>> handler = URLHandler("example.com/path")
        # >>> handler.get_host()
        # None
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[:host_end]
            return url_without_scheme
        return None

    def get_path(self):
        # Extract and return the path part of the URL.
        # return: str or None, the path part of the URL if found, otherwise None.
        # >>> handler = URLHandler("https://example.com/path")
        # >>> handler.get_path()
        # '/path'
        # >>> handler = URLHandler("https://example.com")
        # >>> handler.get_path()
        # None
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[host_end:]
        return None

    def get_query_params(self):
        # Extract and return the query parameters as a dictionary.
        # return: dict or None, the query parameters as key-value pairs if found, otherwise None.
        # >>> handler = URLHandler("https://example.com/path?key1=value1&key2=value2")
        # >>> handler.get_query_params()
        # {'key1': 'value1', 'key2': 'value2'}
        # >>> handler = URLHandler("https://example.com/path")
        # >>> handler.get_query_params()
        # None
        query_start = self.url.find("?")
        fragment_start = self.url.find("#")
        if query_start != -1:
            query_string = self.url[query_start + 1:fragment_start]
            params = {}
            if len(query_string) > 0:
                param_pairs = query_string.split("&")
                for pair in param_pairs:
                    key_value = pair.split("=")
                    if len(key_value) == 2:
                        key, value = key_value
                        params[key] = value
            return params
        return None

    def get_fragment(self):
        # Extract and return the fragment part of the URL.
        # return: str or None, the fragment part of the URL if found, otherwise None.
        # >>> handler = URLHandler("https://example.com/path#fragment")
        # >>> handler.get_fragment()
        # 'fragment'
        # >>> handler = URLHandler("https://example.com/path")
        # >>> handler.get_fragment()
        # None
        fragment_start = self.url.find("#")
        if fragment_start != -1:
            return self.url[fragment_start + 1:]
        return None
```