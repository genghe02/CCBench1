```python
import math

class Statistics3:
    # A class containing various statistical methods for calculating median, mode, correlation, mean, correlation matrix, standard deviation, and z-scores.

    @staticmethod
    def median(data):
        # Calculate the median of the given data.
        # param data: list, the data for which the median is to be calculated.
        # return: float or int, the median value of the data.
        # >>> Statistics3.median([1, 2, 3, 4, 5])
        # 3
        # >>> Statistics3.median([1, 2, 3, 4])
        # 2.5
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        # Calculate the mode(s) of the given data.
        # param data: list, the data for which the mode(s) is/are to be calculated.
        # return: list, a list of mode values.
        # >>> Statistics3.mode([1, 2, 2, 3, 3, 3, 4])
        # [3]
        # >>> Statistics3.mode([1, 2, 2, 3, 3, 4, 4])
        # [2, 3, 4]
        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        # Calculate the Pearson correlation coefficient between two datasets.
        # param x: list, the first dataset.
        # param y: list, the second dataset.
        # return: float or None, the correlation coefficient or None if the denominator is zero.
        # >>> Statistics3.correlation([1, 2, 3], [1, 2, 3])
        # 1.0
        # >>> Statistics3.correlation([1, 2, 3], [3, 2, 1])
        # -1.0
        n = len(x)
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        # Calculate the mean of the given data.
        # param data: list, the data for which the mean is to be calculated.
        # return: float or None, the mean value of the data or None if the data is empty.
        # >>> Statistics3.mean([1, 2, 3, 4, 5])
        # 3.0
        # >>> Statistics3.mean([])
        # None
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        # Calculate the correlation matrix for the given data.
        # param data: list of lists, the data for which the correlation matrix is to be calculated.
        # return: list of lists, the correlation matrix.
        # >>> Statistics3.correlation_matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
        # [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]
        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        # Calculate the standard deviation of the given data.
        # param data: list, the data for which the standard deviation is to be calculated.
        # return: float or None, the standard deviation value or None if the data has fewer than 2 elements.
        # >>> Statistics3.standard_deviation([1, 2, 3, 4, 5])
        # 1.5811388300841898
        # >>> Statistics3.standard_deviation([1])
        # None
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        # Calculate the z-scores for the given data.
        # param data: list, the data for which the z-scores are to be calculated.
        # return: list or None, a list of z-scores or None if the standard deviation is zero or None.
        # >>> Statistics3.z_score([1, 2, 3, 4, 5])
        # [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]
        # >>> Statistics3.z_score([1, 1, 1])
        # None
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]
```