```python
# This class provides a dictionary-like interface where keys are converted to camelCase before being stored or retrieved.
class CamelCaseMap:
    def __init__(self):
        # Initialize the internal dictionary to store key-value pairs.
        self._data = {}

    def __getitem__(self, key):
        # Retrieve the value associated with the given key after converting it to camelCase.
        # param key: str, the key to retrieve the value for
        # return: any, the value associated with the converted key
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map['some_key'] = 'value'
        # >>> camel_map['someKey']
        # 'value'
        return self._data[self._convert_key(key)]

    def __setitem__(self, key, value):
        # Set the value for the given key after converting it to camelCase.
        # param key: str, the key to set the value for
        # param value: any, the value to be set
        # return: None
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map['some_key'] = 'value'
        # >>> camel_map['someKey']
        # 'value'
        self._data[self._convert_key(key)] = value

    def __delitem__(self, key):
        # Delete the key-value pair associated with the given key after converting it to camelCase.
        # param key: str, the key to delete
        # return: None
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map['some_key'] = 'value'
        # >>> del camel_map['someKey']
        # >>> 'someKey' in camel_map
        # False
        del self._data[self._convert_key(key)]

    def __iter__(self):
        # Return an iterator over the keys in the internal dictionary.
        # return: iterator, an iterator over the keys in the internal dictionary
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map['some_key'] = 'value'
        # >>> list(camel_map)
        # ['someKey']
        return iter(self._data)

    def __len__(self):
        # Return the number of key-value pairs in the internal dictionary.
        # return: int, the number of key-value pairs in the internal dictionary
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map['some_key'] = 'value'
        # >>> len(camel_map)
        # 1
        return len(self._data)

    def _convert_key(self, key):
        # Convert the given key to camelCase if it is a string.
        # param key: any, the key to be converted
        # return: any, the converted key
        # >>> camel_map = CamelCaseMap()
        # >>> camel_map._convert_key('some_key')
        # 'someKey'
        if isinstance(key, str):
            return self._to_camel_case(key)
        return key

    @staticmethod
    def _to_camel_case(key):
        # Convert a given string key to camelCase.
        # param key: str, the key to be converted
        # return: str, the key converted to camelCase
        # >>> CamelCaseMap._to_camel_case('some_key')
        # 'someKey'
        parts = key.split('_')
        return parts[0] + ''.join(part.title() for part in parts[1:])
```