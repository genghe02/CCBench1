```python
import itertools


class ArrangementCalculator:
    # This class provides methods to calculate arrangements and permutations of a given dataset.
    def __init__(self, datas):
        # Initialize the ArrangementCalculator with a dataset.
        # self.datas is a list that stores the input dataset.
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        # Calculate the number of arrangements of 'n' items taken 'm' at a time.
        # param n: int, the total number of items.
        # param m: int, the number of items to take at a time. If None, it defaults to 'n'.
        # return: int, the number of arrangements.
        # >>> ArrangementCalculator.count(5, 3)
        # 60
        # >>> ArrangementCalculator.count(5)
        # 120
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        # Calculate the total number of arrangements of 'n' items taken from 1 to 'n' at a time.
        # param n: int, the total number of items.
        # return: int, the total number of arrangements.
        # >>> ArrangementCalculator.count_all(3)
        # 15
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        # Generate all possible arrangements of 'm' items from the dataset.
        # param m: int, the number of items to take at a time. If None, it defaults to the length of the dataset.
        # return: list of lists, each sublist represents an arrangement.
        # >>> calc = ArrangementCalculator([1, 2, 3])
        # >>> calc.select(2)
        # [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        # Generate all possible arrangements of the dataset taken from 1 to the length of the dataset at a time.
        # return: list of lists, each sublist represents an arrangement.
        # >>> calc = ArrangementCalculator([1, 2, 3])
        # >>> calc.select_all()
        # [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        # Calculate the factorial of a given number 'n'.
        # param n: int, the number to calculate the factorial for.
        # return: int, the factorial of 'n'.
        # >>> ArrangementCalculator.factorial(5)
        # 120
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result
```