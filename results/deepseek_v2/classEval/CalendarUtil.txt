```python
from datetime import datetime, timedelta

class CalendarUtil:
    # A utility class for managing and querying calendar events.
    def __init__(self):
        # Initialize the CalendarUtil object with an empty list of events.
        self.events = []

    def add_event(self, event):
        # Add a new event to the calendar.
        # param event: dict, the event details to be added
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)})
        self.events.append(event)

    def remove_event(self, event):
        # Remove an event from the calendar.
        # param event: dict, the event details to be removed
        # >>> calendar = CalendarUtil()
        # >>> event = {'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)}
        # >>> calendar.add_event(event)
        # >>> calendar.remove_event(event)
        if event in self.events:
            self.events.remove(event)

    def get_events(self, date):
        # Retrieve all events scheduled on a specific date.
        # param date: datetime, the date to query for events
        # return: list, a list of events scheduled on the given date
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)})
        # >>> calendar.get_events(datetime(2023, 10, 1))
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

    def is_available(self, start_time, end_time):
        # Check if the time slot between start_time and end_time is available.
        # param start_time: datetime, the start time of the slot to check
        # param end_time: datetime, the end time of the slot to check
        # return: bool, True if the slot is available, False otherwise
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)})
        # >>> calendar.is_available(datetime(2023, 10, 1, 9, 0), datetime(2023, 10, 1, 10, 0))
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

    def get_available_slots(self, date):
        # Retrieve all available 1-hour slots on a specific date.
        # param date: datetime, the date to query for available slots
        # return: list, a list of tuples representing available slots (start_time, end_time)
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)})
        # >>> calendar.get_available_slots(datetime(2023, 10, 1))
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)

        return available_slots

    def get_upcoming_events(self, num_events):
        # Retrieve the next 'num_events' upcoming events.
        # param num_events: int, the number of upcoming events to retrieve
        # return: list, a list of upcoming events
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 1), 'start_time': datetime(2023, 10, 1, 10, 0), 'end_time': datetime(2023, 10, 1, 11, 0)})
        # >>> calendar.add_event({'date': datetime(2023, 10, 2), 'start_time': datetime(2023, 10, 2, 10, 0), 'end_time': datetime(2023, 10, 2, 11, 0)})
        # >>> calendar.get_upcoming_events(1)
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
            if len(upcoming_events) == num_events:
                break
        return upcoming_events
```