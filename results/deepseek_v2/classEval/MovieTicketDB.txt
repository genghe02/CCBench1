```python
import sqlite3


class MovieTicketDB:
    # This class manages a SQLite database for storing and retrieving movie ticket information.
    def __init__(self, db_name):
        # Initialize the database connection and cursor, and create the necessary table if it doesn't exist.
        # param db_name: str, the name of the SQLite database file to connect to.
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        # Create the 'tickets' table in the database if it doesn't already exist.
        # return: None, the function commits the table creation to the database.
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        # Insert a new movie ticket entry into the 'tickets' table.
        # param movie_name: str, the name of the movie.
        # param theater_name: str, the name of the theater.
        # param seat_number: str, the seat number for the ticket.
        # param customer_name: str, the name of the customer.
        # return: None, the function commits the insertion to the database.
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        # Search for all tickets associated with a specific customer.
        # param customer_name: str, the name of the customer to search for.
        # return: list of tuples, each tuple represents a ticket entry for the customer.
        # >>> db = MovieTicketDB('test.db')
        # >>> db.insert_ticket('Avengers', 'CinemaX', 'A12', 'John Doe')
        # >>> db.insert_ticket('Avengers', 'CinemaX', 'B15', 'John Doe')
        # >>> db.search_tickets_by_customer('John Doe')
        # [(1, 'Avengers', 'CinemaX', 'A12', 'John Doe'), (2, 'Avengers', 'CinemaX', 'B15', 'John Doe')]
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        # Delete a ticket entry from the 'tickets' table based on its ID.
        # param ticket_id: int, the ID of the ticket to delete.
        # return: None, the function commits the deletion to the database.
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()
```