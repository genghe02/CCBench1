```python
# This class represents a hotel with methods to manage room bookings, check-ins, check-outs, and availability.
class Hotel:
    def __init__(self, name, rooms):
        # Initialize the hotel with a name and a dictionary of available rooms.
        # Test cases for the function:
        # >>> hotel = Hotel("Grand Hotel", {'single': 5, 'double': 3})
        # >>> hotel.available_rooms
        # {'single': 5, 'double': 3}
        # >>> hotel.booked_rooms
        # {}
        self.name = name
        self.available_rooms = rooms
        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}
        # available_rooms = {'single': 5, 'double': 3}
        self.booked_rooms = {}
        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}
        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}

    def book_room(self, room_type, room_number, name):
        # Book a room of a specified type and number for a given name.
        # param room_type: str, the type of room to book (e.g., 'single', 'double')
        # param room_number: int, the number of rooms to book
        # param name: str, the name of the person booking the room
        # return: str, "Success!" if the booking is successful, int if partial booking, False otherwise
        # Test cases for the function:
        # >>> hotel = Hotel("Grand Hotel", {'single': 5, 'double': 3})
        # >>> hotel.book_room('single', 2, 'John')
        # 'Success!'
        # >>> hotel.book_room('double', 4, 'Jane')
        # 3
        # >>> hotel.book_room('suite', 1, 'Alice')
        # False
        # Check if there are any rooms of the specified type available
        if room_type not in self.available_rooms.keys():
            return False

        if room_number <= self.available_rooms[room_type]:
            # Book the room by adding it to the booked_rooms dictionary
            if room_type not in self.booked_rooms.keys():
                self.booked_rooms[room_type] = {}
            self.booked_rooms[room_type][name] = room_number
            self.available_rooms[room_type] -= room_number
            return "Success!"
        elif self.available_rooms[room_type] != 0:
            return self.available_rooms[room_type]
        else:
            return False

    def check_in(self, room_type, room_number, name):
        # Check in a guest to a booked room of a specified type and number.
        # param room_type: str, the type of room to check in (e.g., 'single', 'double')
        # param room_number: int, the number of rooms to check in
        # param name: str, the name of the person checking in
        # return: bool, True if check-in is successful, False otherwise
        # Test cases for the function:
        # >>> hotel = Hotel("Grand Hotel", {'single': 5, 'double': 3})
        # >>> hotel.book_room('single', 2, 'John')
        # 'Success!'
        # >>> hotel.check_in('single', 2, 'John')
        # True
        # >>> hotel.check_in('single', 1, 'John')
        # True
        # >>> hotel.check_in('single', 1, 'John')
        # False
        # Check if the room of the specified type and number is booked
        if room_type not in self.booked_rooms.keys():
            return False
        if name in self.booked_rooms[room_type]:
            if room_number > self.booked_rooms[room_type][name]:
                return False
            elif room_number == self.booked_rooms[room_type][name]:
                # Check in the room by removing it from the booked_rooms dictionary
                self.booked_rooms[room_type].pop(name)
            else:
                self.booked_rooms[room_type][name] -= room_number

    def check_out(self, room_type, room_number):
        # Check out a room of a specified type and number, making it available again.
        # param room_type: str, the type of room to check out (e.g., 'single', 'double')
        # param room_number: int, the number of rooms to check out
        # Test cases for the function:
        # >>> hotel = Hotel("Grand Hotel", {'single': 5, 'double': 3})
        # >>> hotel.check_out('single', 2)
        # >>> hotel.available_rooms
        # {'single': 7, 'double': 3}
        # >>> hotel.check_out('suite', 1)
        # >>> hotel.available_rooms
        # {'single': 7, 'double': 3, 'suite': 1}
        if room_type in self.available_rooms:
            self.available_rooms[room_type] += room_number
        else:
            self.available_rooms[room_type] = room_number

    def get_available_rooms(self, room_type):
        # Get the number of available rooms of a specified type.
        # param room_type: str, the type of room to check availability (e.g., 'single', 'double')
        # return: int, the number of available rooms of the specified type
        # Test cases for the function:
        # >>> hotel = Hotel("Grand Hotel", {'single': 5, 'double': 3})
        # >>> hotel.get_available_rooms('single')
        # 5
        # >>> hotel.get_available_rooms('double')
        # 3
        return self.available_rooms[room_type]
```