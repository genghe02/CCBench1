```python
# This class represents a shopping cart that allows users to add, remove, view items, and calculate the total price.
class ShoppingCart:
    def __init__(self):
        # Initialize the shopping cart with an empty dictionary to store items.
        self.items = {}

    def add_item(self, item, price, quantity=1):
        # Add an item to the shopping cart or update its quantity and price if it already exists.
        # param item: str, the name of the item to be added.
        # param price: float, the price of the item.
        # param quantity: int, the quantity of the item to be added (default is 1).
        # return: None, the function modifies the internal state of the shopping cart.
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.5, 3)
        # >>> cart.add_item('banana', 0.3, 2)
        # >>> cart.view_items()
        # {'apple': {'price': 0.5, 'quantity': 3}, 'banana': {'price': 0.3, 'quantity': 2}}
        if item in self.items:
            self.items[item] = {'price': price, 'quantity': quantity}
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        # Remove a specified quantity of an item from the shopping cart.
        # param item: str, the name of the item to be removed.
        # param quantity: int, the quantity of the item to be removed (default is 1).
        # return: None, the function modifies the internal state of the shopping cart.
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.5, 3)
        # >>> cart.remove_item('apple', 2)
        # >>> cart.view_items()
        # {'apple': {'price': 0.5, 'quantity': 1}}
        if item in self.items:
            self.items[item]['quantity'] -= quantity
        else:
            pass

    def view_items(self) -> dict:
        # View all items currently in the shopping cart along with their quantities and prices.
        # return: dict, a dictionary containing all items in the shopping cart with their details.
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.5, 3)
        # >>> cart.add_item('banana', 0.3, 2)
        # >>> cart.view_items()
        # {'apple': {'price': 0.5, 'quantity': 3}, 'banana': {'price': 0.3, 'quantity': 2}}
        return self.items

    def total_price(self) -> float:
        # Calculate the total price of all items in the shopping cart.
        # return: float, the total price of all items in the shopping cart.
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.5, 3)
        # >>> cart.add_item('banana', 0.3, 2)
        # >>> cart.total_price()
        # 2.1
        return sum([item['quantity'] * item['price'] for item in self.items.values()])
```