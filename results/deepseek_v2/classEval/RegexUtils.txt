```python
import re


class RegexUtils:
    # A utility class for performing various regex operations such as matching, finding, splitting, and substituting.

    def match(self, pattern, text):
        # Check if the given pattern matches the beginning of the text.
        # param pattern: str, the regex pattern to match against the text.
        # param text: str, the text to be checked for the pattern.
        # return: bool, True if the pattern matches the beginning of the text, False otherwise.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.match(r'\d+', '123abc')
        # True
        # >>> regex_utils.match(r'\d+', 'abc123')
        # False
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        # Find all non-overlapping matches of the pattern in the text.
        # param pattern: str, the regex pattern to search for in the text.
        # param text: str, the text to be searched for the pattern.
        # return: list, a list of all non-overlapping matches in the text.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.findall(r'\d+', '123abc456def')
        # ['123', '456']
        return re.findall(pattern, text)

    def split(self, pattern, text):
        # Split the text by the occurrences of the pattern.
        # param pattern: str, the regex pattern to split the text by.
        # param text: str, the text to be split by the pattern.
        # return: list, a list of strings obtained by splitting the text by the pattern.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.split(r'\s+', 'Hello   world this is a test')
        # ['Hello', 'world', 'this', 'is', 'a', 'test']
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        # Replace all occurrences of the pattern in the text with the replacement string.
        # param pattern: str, the regex pattern to search for in the text.
        # param replacement: str, the string to replace the pattern with.
        # param text: str, the text to perform the substitution on.
        # return: str, the text with all occurrences of the pattern replaced by the replacement string.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.sub(r'\d+', 'X', '123abc456def')
        # 'XabcXdef'
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        # Generate a regex pattern for matching email addresses.
        # return: str, the regex pattern for matching email addresses.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_email_pattern()
        # r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        # Generate a regex pattern for matching phone numbers in the format XXX-XXX-XXXX.
        # return: str, the regex pattern for matching phone numbers.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_phone_number_pattern()
        # r'\b\d{3}-\d{3}-\d{4}\b'
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        # Generate a regex pattern for splitting text into sentences based on punctuation marks.
        # return: str, the regex pattern for splitting sentences.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_split_sentences_pattern()
        # r'[.!?][\s]{1,2}(?=[A-Z])'
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        # Split the text into sentences based on punctuation marks.
        # param text: str, the text to be split into sentences.
        # return: list, a list of sentences obtained by splitting the text.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.split_sentences('Hello. This is a test. Another sentence!')
        # ['Hello', 'This is a test', 'Another sentence']
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        # Validate if the given phone number matches the format XXX-XXX-XXXX.
        # param phone_number: str, the phone number to be validated.
        # return: bool, True if the phone number is valid, False otherwise.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.validate_phone_number('123-456-7890')
        # True
        # >>> regex_utils.validate_phone_number('1234567890')
        # False
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        # Extract all email addresses from the given text.
        # param text: str, the text to extract email addresses from.
        # return: list, a list of email addresses found in the text.
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.extract_email('Contact us at test@example.com or info@example.com')
        # ['test@example.com', 'info@example.com']
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)
```