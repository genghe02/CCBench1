```python
class HRManagementSystem:
    # This class manages employee records, including adding, removing, updating, and retrieving employee information.
    def __init__(self):
        # Initialize the HR management system with an empty dictionary to store employee records.
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        # Add a new employee to the system. If the employee ID already exists, return False.
        # param employee_id: int, unique identifier for the employee
        # param name: str, name of the employee
        # param position: str, job position of the employee
        # param department: str, department the employee belongs to
        # param salary: float, salary of the employee
        # return: bool, True if the employee is added successfully, False otherwise
        # >>> hr_system = HRManagementSystem()
        # >>> hr_system.add_employee(1, 'John Doe', 'Manager', 'Sales', 75000)
        # True
        # >>> hr_system.add_employee(1, 'Jane Doe', 'Developer', 'IT', 80000)
        # False
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        # Remove an employee from the system. If the employee ID does not exist, return False.
        # param employee_id: int, unique identifier for the employee
        # return: bool, True if the employee is removed successfully, False otherwise
        # >>> hr_system = HRManagementSystem()
        # >>> hr_system.add_employee(1, 'John Doe', 'Manager', 'Sales', 75000)
        # True
        # >>> hr_system.remove_employee(1)
        # True
        # >>> hr_system.remove_employee(1)
        # False
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        # Update an existing employee's information. If the employee ID does not exist or the provided information is invalid, return False.
        # param employee_id: int, unique identifier for the employee
        # param employee_info: dict, dictionary containing updated employee information
        # return: bool, True if the employee information is updated successfully, False otherwise
        # >>> hr_system = HRManagementSystem()
        # >>> hr_system.add_employee(1, 'John Doe', 'Manager', 'Sales', 75000)
        # True
        # >>> hr_system.update_employee(1, {'position': 'Senior Manager', 'salary': 85000})
        # True
        # >>> hr_system.update_employee(2, {'position': 'Developer'})
        # False
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        # Retrieve an employee's information by their ID. If the employee ID does not exist, return False.
        # param employee_id: int, unique identifier for the employee
        # return: dict or bool, dictionary containing employee information if found, False otherwise
        # >>> hr_system = HRManagementSystem()
        # >>> hr_system.add_employee(1, 'John Doe', 'Manager', 'Sales', 75000)
        # True
        # >>> hr_system.get_employee(1)
        # {'name': 'John Doe', 'position': 'Manager', 'department': 'Sales', 'salary': 75000}
        # >>> hr_system.get_employee(2)
        # False
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        # List all employees in the system with their details. If no employees are present, return an empty dictionary.
        # return: dict, dictionary containing all employee details, keyed by employee ID
        # >>> hr_system = HRManagementSystem()
        # >>> hr_system.add_employee(1, 'John Doe', 'Manager', 'Sales', 75000)
        # True
        # >>> hr_system.add_employee(2, 'Jane Doe', 'Developer', 'IT', 80000)
        # True
        # >>> hr_system.list_employees()
        # {1: {'employee_ID': 1, 'name': 'John Doe', 'position': 'Manager', 'department': 'Sales', 'salary': 75000}, 2: {'employee_ID': 2, 'name': 'Jane Doe', 'position': 'Developer', 'department': 'IT', 'salary': 80000}}
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data
```