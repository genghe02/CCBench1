```python
# This class is designed to generate SQL queries for various operations on a specified table.
class SQLGenerator:
    def __init__(self, table_name):
        # Initialize the SQLGenerator with a table name.
        # param table_name: str, the name of the table to generate SQL queries for.
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        # Generate a SELECT SQL query with optional fields and condition.
        # param fields: list of str, optional, the fields to select. If None, all fields are selected.
        # param condition: str, optional, the condition to filter the results.
        # return: str, the generated SELECT SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.select(fields=["name", "age"], condition="age > 25")
        # 'SELECT name, age FROM users WHERE age > 25;'
        # >>> sql_gen.select()
        # 'SELECT * FROM users;'
        if fields is None:
            fields = "*"
        else:
            fields = ", ".join(fields)
        sql = f"SELECT {fields} FROM {self.table_name}"
        if condition is not None:
            sql += f" WHERE {condition}"
        return sql + ";"

    def insert(self, data):
        # Generate an INSERT SQL query with the provided data.
        # param data: dict, the data to insert into the table. Keys are field names, values are field values.
        # return: str, the generated INSERT SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.insert({"name": "Alice", "age": 30})
        # "INSERT INTO users (name, age) VALUES ('Alice', '30');"
        fields = ", ".join(data.keys())
        values = ", ".join([f"'{value}'" for value in data.values()])
        sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values})"
        return sql + ";"

    def update(self, data, condition):
        # Generate an UPDATE SQL query with the provided data and condition.
        # param data: dict, the data to update in the table. Keys are field names, values are new field values.
        # param condition: str, the condition to filter the rows to update.
        # return: str, the generated UPDATE SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.update({"age": 31}, "name = 'Alice'")
        # "UPDATE users SET age = '31' WHERE name = 'Alice';"
        set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
        sql = f"UPDATE {self.table_name} SET {set_clause} WHERE {condition}"
        return sql + ";"

    def delete(self, condition):
        # Generate a DELETE SQL query with the provided condition.
        # param condition: str, the condition to filter the rows to delete.
        # return: str, the generated DELETE SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.delete("age > 50")
        # "DELETE FROM users WHERE age > 50;"
        sql = f"DELETE FROM {self.table_name} WHERE {condition}"
        return sql + ";"

    def select_female_under_age(self, age):
        # Generate a SELECT SQL query to retrieve female users under a specified age.
        # param age: int, the maximum age for female users to be selected.
        # return: str, the generated SELECT SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.select_female_under_age(30)
        # "SELECT * FROM users WHERE age < 30 AND gender = 'female';"
        condition = f"age < {age} AND gender = 'female'"
        return self.select(condition=condition)

    def select_by_age_range(self, min_age, max_age):
        # Generate a SELECT SQL query to retrieve users within a specified age range.
        # param min_age: int, the minimum age for users to be selected.
        # param max_age: int, the maximum age for users to be selected.
        # return: str, the generated SELECT SQL query.
        # >>> sql_gen = SQLGenerator("users")
        # >>> sql_gen.select_by_age_range(20, 30)
        # "SELECT * FROM users WHERE age BETWEEN 20 AND 30;"
        condition = f"age BETWEEN {min_age} AND {max_age}"
        return self.select(condition=condition)
```