```python
# This class provides utility methods for paginating and searching data.
class PageUtil:
    def __init__(self, data, page_size):
        # Initialize the PageUtil object with data and page size.
        # param data: list, the data to be paginated.
        # param page_size: int, the number of items per page.
        self.data = data
        self.page_size = page_size
        self.total_items = len(data)
        self.total_pages = (self.total_items + page_size - 1) // page_size

    def get_page(self, page_number):
        # Retrieve a specific page of data.
        # param page_number: int, the page number to retrieve.
        # return: list, the data for the specified page, or an empty list if the page number is invalid.
        # >>> page_util = PageUtil([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)
        # >>> page_util.get_page(2)
        # [4, 5, 6]
        # >>> page_util.get_page(4)
        # []
        if page_number < 1 or page_number > self.total_pages:
            return []

        start_index = (page_number - 1) * self.page_size
        end_index = start_index + self.page_size
        return self.data[start_index:end_index]

    def get_page_info(self, page_number):
        # Retrieve detailed information about a specific page.
        # param page_number: int, the page number to retrieve information for.
        # return: dict, detailed information about the specified page, or an empty dictionary if the page number is invalid.
        # >>> page_util = PageUtil([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)
        # >>> page_util.get_page_info(2)
        # {'current_page': 2, 'per_page': 3, 'total_pages': 4, 'total_items': 10, 'has_previous': True, 'has_next': True, 'data': [4, 5, 6]}
        # >>> page_util.get_page_info(5)
        # {}
        if page_number < 1 or page_number > self.total_pages:
            return {}

        start_index = (page_number - 1) * self.page_size
        end_index = min(start_index + self.page_size, self.total_items)
        page_data = self.data[start_index:end_index]

        page_info = {
            "current_page": page_number,
            "per_page": self.page_size,
            "total_pages": self.total_pages,
            "total_items": self.total_items,
            "has_previous": page_number > 1,
            "has_next": page_number < self.total_pages,
            "data": page_data
        }
        return page_info

    def search(self, keyword):
        # Search the data for items containing the specified keyword.
        # param keyword: str, the keyword to search for in the data.
        # return: dict, information about the search results, including the keyword, total results, total pages, and the results themselves.
        # >>> page_util = PageUtil([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)
        # >>> page_util.search("3")
        # {'keyword': '3', 'total_results': 2, 'total_pages': 1, 'results': [3, 3]}
        # >>> page_util.search("11")
        # {'keyword': '11', 'total_results': 0, 'total_pages': 0, 'results': []}
        results = [item for item in self.data if keyword in str(item)]
        num_results = len(results)
        num_pages = (num_results + self.page_size - 1) // self.page_size

        search_info = {
            "keyword": keyword,
            "total_results": num_results,
            "total_pages": num_pages,
            "results": results
        }
        return search_info
```