```python
# This is a class for parsing command line arguments to a dictionary.
class ArgumentParser:
    def __init__(self):
        # Initialize the ArgumentParser object with empty arguments, required arguments, and types.
        # self.arguments is a dict that stores the args in a command line
        # self.required is a set that stores the required arguments
        # self.types is a dict that stores type of every arguments.
        # >>> parser = ArgumentParser()
        # >>> parser.add_argument('name', required=True, arg_type=str)
        # >>> parser.add_argument('age', required=False, arg_type=int)
        self.arguments = {}
        self.required = set()
        self.types = {}

    def parse_arguments(self, command_string):
        # Parse the command string and populate the arguments dictionary.
        # param command_string: str, the command line string to be parsed
        # return: tuple, (bool, set or None), True if all required arguments are present, otherwise False and a set of missing arguments
        # >>> parser = ArgumentParser()
        # >>> parser.add_argument('name', required=True, arg_type=str)
        # >>> parser.add_argument('age', required=False, arg_type=int)
        # >>> parser.parse_arguments('script.py --name=John --age=30')
        # (True, None)
        # >>> parser.parse_arguments('script.py --age=30')
        # (False, {'name'})
        args = command_string.split()[1:]
        for i in range(len(args)):
            arg = args[i]
            if arg.startswith('--'):
                key_value = arg[2:].split('=')
                if len(key_value) == 2:
                    self.arguments[key_value[0]] = self._convert_type(key_value[0], key_value[1])
                else:
                    self.arguments[key_value[0]] = True
            elif arg.startswith('-'):
                key = arg[1:]
                if i + 1 < len(args) and not args[i + 1].startswith('-'):
                    self.arguments[key] = self._convert_type(key, args[i + 1])
                else:
                    self.arguments[key] = True
        missing_args = self.required - set(self.arguments.keys())
        if missing_args:
            return False, missing_args

        return True, None

    def get_argument(self, key):
        # Retrieve the value of a specific argument from the parsed arguments.
        # param key: str, the key of the argument to retrieve
        # return: the value of the argument if it exists, otherwise None
        # >>> parser = ArgumentParser()
        # >>> parser.add_argument('name', required=True, arg_type=str)
        # >>> parser.parse_arguments('script.py --name=John')
        # >>> parser.get_argument('name')
        # 'John'
        return self.arguments.get(key)

    def add_argument(self, arg, required=False, arg_type=str):
        # Add an argument to the parser with its required status and type.
        # param arg: str, the argument key
        # param required: bool, whether the argument is required
        # param arg_type: type, the expected type of the argument value
        # return: None
        # >>> parser = ArgumentParser()
        # >>> parser.add_argument('name', required=True, arg_type=str)
        # >>> parser.add_argument('age', required=False, arg_type=int)
        if required:
            self.required.add(arg)
        self.types[arg] = arg_type

    def _convert_type(self, arg, value):
        # Convert the value of an argument to its specified type.
        # param arg: str, the argument key
        # param value: str, the value of the argument to be converted
        # return: the converted value if successful, otherwise the original value
        # >>> parser = ArgumentParser()
        # >>> parser.add_argument('age', required=False, arg_type=int)
        # >>> parser._convert_type('age', '30')
        # 30
        try:
            return self.types[arg](value)
        except (ValueError, KeyError):
            return value
```