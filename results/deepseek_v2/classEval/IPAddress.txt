```python
# This class represents an IP address and provides methods to validate, extract octets, and convert to binary format.
class IPAddress:
    def __init__(self, ip_address):
        # Initialize the IPAddress object with the given IP address string.
        # param ip_address: str, the IP address to be processed.
        self.ip_address = ip_address

    def is_valid(self):
        # Validate the IP address to ensure it is in the correct format (four octets, each between 0 and 255).
        # return: bool, True if the IP address is valid, False otherwise.
        # >>> ip = IPAddress('192.168.1.1')
        # >>> ip.is_valid()
        # True
        # >>> ip = IPAddress('256.168.1.1')
        # >>> ip.is_valid()
        # False
        # >>> ip = IPAddress('192.168.1')
        # >>> ip.is_valid()
        # False
        octets = self.ip_address.split('.')
        if len(octets) != 4:
            return False
        for octet in octets:
            if not octet.isdigit() or int(octet) < 0 or int(octet) > 255:
                return False
        return True

    def get_octets(self):
        # Extract and return the octets of the IP address as a list of strings.
        # return: list, a list of strings representing the octets of the IP address, or an empty list if the IP address is invalid.
        # >>> ip = IPAddress('192.168.1.1')
        # >>> ip.get_octets()
        # ['192', '168', '1', '1']
        # >>> ip = IPAddress('256.168.1.1')
        # >>> ip.get_octets()
        # []
        if self.is_valid():
            return self.ip_address.split('.')
        else:
            return []

    def get_binary(self):
        # Convert the IP address to its binary representation, with each octet in an 8-bit format.
        # return: str, a string representing the binary format of the IP address, or an empty string if the IP address is invalid.
        # >>> ip = IPAddress('192.168.1.1')
        # >>> ip.get_binary()
        # '11000000.10101000.00000001.00000001'
        # >>> ip = IPAddress('256.168.1.1')
        # >>> ip.get_binary()
        # ''
        if self.is_valid():
            binary_octets = []
            for octet in self.get_octets():
                binary_octets.append(format(int(octet), '08b'))
            return '.'.join(binary_octets)
        else:
            return ''
```