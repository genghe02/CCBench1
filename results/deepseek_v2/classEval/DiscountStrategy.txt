```python
# This class represents a discount strategy for calculating the total and due amounts after applying promotions.
class DiscountStrategy:
    def __init__(self, customer, cart, promotion=None):
        # Initialize the discount strategy with customer details, cart items, and an optional promotion.
        # param customer: dict, details of the customer
        # param cart: list, list of items in the cart with details like quantity and price
        # param promotion: function, optional promotion function to apply discounts
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}], DiscountStrategy.FidelityPromo)
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    def total(self):
        # Calculate the total cost of items in the cart.
        # return: float, the total cost of items in the cart
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}])
        # >>> strategy.total()
        # 500.0
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        # Calculate the final amount due after applying the promotion.
        # return: float, the final amount due after discount
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}], DiscountStrategy.FidelityPromo)
        # >>> strategy.due()
        # 475.0
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        # Apply a 5% discount if the customer's fidelity points are 1000 or more.
        # param order: DiscountStrategy, the order object
        # return: float, the discount amount
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 5, 'price': 100}])
        # >>> DiscountStrategy.FidelityPromo(strategy)
        # 25.0
        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        # Apply a 10% discount for each item in the cart if its quantity is 20 or more.
        # param order: DiscountStrategy, the order object
        # return: float, the total discount amount
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'quantity': 20, 'price': 10}])
        # >>> DiscountStrategy.BulkItemPromo(strategy)
        # 20.0
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        # Apply a 7% discount if the cart contains 10 or more unique products.
        # param order: DiscountStrategy, the order object
        # return: float, the discount amount
        # >>> strategy = DiscountStrategy({'fidelity': 1200}, [{'product': 'A', 'quantity': 1}, {'product': 'B', 'quantity': 1}, {'product': 'C', 'quantity': 1}, {'product': 'D', 'quantity': 1}, {'product': 'E', 'quantity': 1}, {'product': 'F', 'quantity': 1}, {'product': 'G', 'quantity': 1}, {'product': 'H', 'quantity': 1}, {'product': 'I', 'quantity': 1}, {'product': 'J', 'quantity': 1}])
        # >>> DiscountStrategy.LargeOrderPromo(strategy)
        # 0.0
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
```