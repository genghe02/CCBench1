```python
import sqlite3
import pandas as pd


class DatabaseProcessor:
    # This class provides methods to interact with a SQLite database, including creating tables, inserting data, searching, and deleting records.

    def __init__(self, database_name):
        # Initialize the DatabaseProcessor with the name of the SQLite database file.
        self.database_name = database_name

    def create_table(self, table_name, key1, key2):
        # Create a table in the SQLite database with the specified table name and column definitions.
        # param table_name: str, the name of the table to be created
        # param key1: str, the name of the first column, which will store text data
        # param key2: str, the name of the second column, which will store integer data
        # >>> db_processor = DatabaseProcessor('example.db')
        # >>> db_processor.create_table('users', 'name', 'age')
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)"
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_into_database(self, table_name, data):
        # Insert a list of dictionaries into the specified table in the SQLite database.
        # param table_name: str, the name of the table to insert data into
        # param data: list of dict, each dictionary contains 'name' and 'age' keys
        # >>> db_processor = DatabaseProcessor('example.db')
        # >>> data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]
        # >>> db_processor.insert_into_database('users', data)
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        for item in data:
            insert_query = f"INSERT INTO {table_name} (name, age) VALUES (?, ?)"
            cursor.execute(insert_query, (item['name'], item['age']))

        conn.commit()
        conn.close()

    def search_database(self, table_name, name):
        # Search for records in the specified table by name and return the matching records.
        # param table_name: str, the name of the table to search in
        # param name: str, the name to search for in the table
        # return: list of tuples, each tuple represents a matching record, or None if no records are found
        # >>> db_processor = DatabaseProcessor('example.db')
        # >>> db_processor.search_database('users', 'Alice')
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = f"SELECT * FROM {table_name} WHERE name = ?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        if result:
            return result
        else:
            return None

    def delete_from_database(self, table_name, name):
        # Delete records from the specified table that match the given name.
        # param table_name: str, the name of the table to delete from
        # param name: str, the name of the records to delete
        # >>> db_processor = DatabaseProcessor('example.db')
        # >>> db_processor.delete_from_database('users', 'Alice')
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = f"DELETE FROM {table_name} WHERE name = ?"
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()
```