```python
import sqlite3

class BookManagementDB:
    # This class manages a SQLite database for book records, including operations like adding, removing, borrowing, returning, and searching books.
    def __init__(self, db_name):
        # Initialize the database connection and cursor, and create the books table if it doesn't exist.
        # param db_name: str, the name of the SQLite database file.
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        # Create the 'books' table in the database if it doesn't already exist.
        # >>> db = BookManagementDB('test.db')
        # >>> # Table 'books' should be created if it doesn't exist
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY,
                title TEXT,
                author TEXT,
                available INTEGER
            )
        ''')
        self.connection.commit()

    def add_book(self, title, author):
        # Add a new book to the 'books' table with the given title and author, and set it as available.
        # param title: str, the title of the book.
        # param author: str, the author of the book.
        # >>> db = BookManagementDB('test.db')
        # >>> db.add_book('1984', 'George Orwell')
        self.cursor.execute('''
            INSERT INTO books (title, author, available)
            VALUES (?, ?, 1)
        ''', (title, author))
        self.connection.commit()

    def remove_book(self, book_id):
        # Remove a book from the 'books' table based on its ID.
        # param book_id: int, the ID of the book to be removed.
        # >>> db = BookManagementDB('test.db')
        # >>> db.remove_book(1)
        self.cursor.execute('''
            DELETE FROM books WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def borrow_book(self, book_id):
        # Mark a book as unavailable (borrowed) in the 'books' table based on its ID.
        # param book_id: int, the ID of the book to be borrowed.
        # >>> db = BookManagementDB('test.db')
        # >>> db.borrow_book(1)
        self.cursor.execute('''
            UPDATE books SET available = 0 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def return_book(self, book_id):
        # Mark a book as available (returned) in the 'books' table based on its ID.
        # param book_id: int, the ID of the book to be returned.
        # >>> db = BookManagementDB('test.db')
        # >>> db.return_book(1)
        self.cursor.execute('''
            UPDATE books SET available = 1 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def search_books(self):
        # Retrieve all books from the 'books' table.
        # return: list of tuples, each tuple represents a book with fields (id, title, author, available).
        # >>> db = BookManagementDB('test.db')
        # >>> books = db.search_books()
        self.cursor.execute('''
            SELECT * FROM books
        ''')
        books = self.cursor.fetchall()
        return books
```