```python
from datetime import datetime
import numpy as np

class MovieBookingSystem:
    # This class manages a movie booking system, allowing the addition of movies, booking of tickets, and checking available movies within a specified time range.
    def __init__(self):
        # Initialize the movie booking system with an empty list of movies.
        # >>> system = MovieBookingSystem()
        # >>> system.movies
        # []
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        # Add a new movie to the system with its details and initialize its seating arrangement.
        # param name: str, the name of the movie
        # param price: float, the price of the movie ticket
        # param start_time: str, the start time of the movie in 'HH:MM' format
        # param end_time: str, the end time of the movie in 'HH:MM' format
        # param n: int, the dimension of the seating arrangement (n x n)
        # >>> system = MovieBookingSystem()
        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)
        # >>> system.movies[0]['name']
        # 'MovieA'
        movie = {
            'name': name,
            'price': price,
            'start_time': datetime.strptime(start_time, '%H:%M'),
            'end_time': datetime.strptime(end_time, '%H:%M'),
            'seats': np.zeros((n, n))
        }
        self.movies.append(movie)

    def book_ticket(self, name, seats_to_book):
        # Book tickets for a specific movie by marking the specified seats as booked.
        # param name: str, the name of the movie to book tickets for
        # param seats_to_book: list of tuples, each tuple represents a seat (row, column) to be booked
        # return: str, "Booking success." if all seats are booked successfully, "Booking failed." if any seat is already booked, or "Movie not found." if the movie is not in the system
        # >>> system = MovieBookingSystem()
        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)
        # >>> system.book_ticket('MovieA', [(0, 0), (0, 1)])
        # 'Booking success.'
        # >>> system.book_ticket('MovieA', [(0, 0)])
        # 'Booking failed.'
        # >>> system.book_ticket('MovieB', [(0, 0)])
        # 'Movie not found.'
        for movie in self.movies:
            if movie['name'] == name:
                for seat in seats_to_book:
                    if movie['seats'][seat[0]][seat[1]] == 0:
                        movie['seats'][seat[0]][seat[1]] = 1
                    else:
                        return "Booking failed."
                return "Booking success."
        return "Movie not found."

    def available_movies(self, start_time, end_time):
        # Retrieve a list of movies that are available within the specified time range.
        # param start_time: str, the start time of the desired movie range in 'HH:MM' format
        # param end_time: str, the end time of the desired movie range in 'HH:MM' format
        # return: list of str, the names of movies available within the specified time range
        # >>> system = MovieBookingSystem()
        # >>> system.add_movie('MovieA', 10.0, '10:00', '12:00', 5)
        # >>> system.add_movie('MovieB', 12.0, '13:00', '15:00', 5)
        # >>> system.available_movies('11:00', '14:00')
        # ['MovieA']
        start_time = datetime.strptime(start_time, '%H:%M')
        end_time = datetime.strptime(end_time, '%H:%M')

        available_movies = []
        for movie in self.movies:
            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:
                available_movies.append(movie['name'])

        return available_movies
```