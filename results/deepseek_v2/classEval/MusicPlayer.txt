```python
# This class represents a simple music player that manages a playlist, current song, and volume.
class MusicPlayer:
    def __init__(self):
        # Initialize the music player with an empty playlist, no current song, and default volume set to 50.
        self.playlist = []
        self.current_song = None
        self.volume = 50

    def add_song(self, song):
        # Add a song to the playlist.
        # param song: str, the name of the song to be added to the playlist.
        # >>> player = MusicPlayer()
        # >>> player.add_song('Song1')
        # >>> player.playlist
        # ['Song1']
        self.playlist.append(song)

    def remove_song(self, song):
        # Remove a song from the playlist. If the song is currently playing, stop it.
        # param song: str, the name of the song to be removed from the playlist.
        # >>> player = MusicPlayer()
        # >>> player.playlist = ['Song1', 'Song2']
        # >>> player.current_song = 'Song1'
        # >>> player.remove_song('Song1')
        # >>> player.playlist
        # ['Song2']
        # >>> player.current_song
        # None
        if song in self.playlist:
            self.playlist.remove(song)
            if self.current_song == song:
                self.stop()

    def play(self):
        # Play the first song in the playlist if there is a current song or if the playlist is not empty.
        # return: str or bool, the name of the song to be played if conditions are met, False otherwise.
        # >>> player = MusicPlayer()
        # >>> player.playlist = ['Song1', 'Song2']
        # >>> player.current_song = 'Song1'
        # >>> player.play()
        # 'Song1'
        # >>> player.current_song = None
        # >>> player.play()
        # False
        if self.playlist and self.current_song:
            return self.playlist[0]
        elif len(self.playlist): 
            return False

    def stop(self):
        # Stop the currently playing song.
        # return: bool, True if a song was stopped, False if no song was playing.
        # >>> player = MusicPlayer()
        # >>> player.current_song = 'Song1'
        # >>> player.stop()
        # True
        # >>> player.current_song
        # None
        if self.current_song:
            self.current_song = None
            return True
        else:
            return False

    def switch_song(self):
        # Switch to the next song in the playlist if there is a current song and it is not the last one.
        # return: bool, True if the song was switched, False otherwise.
        # >>> player = MusicPlayer()
        # >>> player.playlist = ['Song1', 'Song2']
        # >>> player.current_song = 'Song1'
        # >>> player.switch_song()
        # True
        # >>> player.current_song
        # 'Song2'
        # >>> player.switch_song()
        # False
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index < len(self.playlist) - 1:
                self.current_song = self.playlist[current_index + 1]
                return True
            else:
                return False
        else:
            return False

    def previous_song(self):
        # Switch to the previous song in the playlist if there is a current song and it is not the first one.
        # return: bool, True if the song was switched to the previous one, False otherwise.
        # >>> player = MusicPlayer()
        # >>> player.playlist = ['Song1', 'Song2']
        # >>> player.current_song = 'Song2'
        # >>> player.previous_song()
        # True
        # >>> player.current_song
        # 'Song1'
        # >>> player.previous_song()
        # False
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index > 0:
                self.current_song = self.playlist[current_index - 1]
                return True
            else:
                return False
        else:
            return False

    def set_volume(self, volume):
        # Set the volume of the music player. The volume should be between 0 and 100.
        # param volume: int, the volume level to be set.
        # return: bool, True if the volume was set, False if the volume was out of the valid range.
        # >>> player = MusicPlayer()
        # >>> player.set_volume(75)
        # True
        # >>> player.volume
        # 75
        # >>> player.set_volume(150)
        # False
        if 0 <= volume <= 100:
            self.volume = volume
        else:
            return False

    def shuffle(self):
        # Shuffle the playlist if it is not empty.
        # return: bool, True if the playlist was shuffled, False if the playlist was empty.
        # >>> player = MusicPlayer()
        # >>> player.playlist = ['Song1', 'Song2', 'Song3']
        # >>> player.shuffle()
        # True
        # >>> player.playlist
        # ['Song2', 'Song1', 'Song3']  # The order may vary due to shuffling.
        if self.playlist:
            import random
            random.shuffle(self.playlist)
            return True
        else:
            return False
```