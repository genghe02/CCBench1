```python
import urllib.parse


class UrlPath:
    # This class is designed to handle URL path segments, including parsing and adding segments.
    def __init__(self):
        # Initialize the UrlPath object with empty segments and a flag indicating whether the path ends with a '/'
        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        # Add a new segment to the list of segments after fixing its format.
        # param segment: str, the segment to be added to the path
        # >>> url_path = UrlPath()
        # >>> url_path.add('segment1')
        # >>> url_path.segments
        # ['segment1']
        self.segments.append(self.fix_path(segment))

    def parse(self, path, charset):
        # Parse the given path and split it into segments, decoding each segment using the specified charset.
        # param path: str, the path to be parsed
        # param charset: str, the encoding to be used for decoding the segments
        # >>> url_path = UrlPath()
        # >>> url_path.parse('/path/to/resource/', 'utf-8')
        # >>> url_path.segments
        # ['path', 'to', 'resource']
        # >>> url_path.with_end_tag
        # True
        if path:
            if path.endswith('/'):
                self.with_end_tag = True

            path = self.fix_path(path)
            if path:
                split = path.split('/')
                for seg in split:
                    decoded_seg = urllib.parse.unquote(seg, encoding=charset)
                    self.segments.append(decoded_seg)

    @staticmethod
    def fix_path(path):
        # Fix the format of the given path by stripping leading and trailing '/' characters.
        # param path: str, the path to be fixed
        # return: str, the fixed path without leading or trailing '/'
        # >>> UrlPath.fix_path('/path/to/resource/')
        # 'path/to/resource'
        if not path:
            return ''

        segment_str = path.strip('/')
        return segment_str
```