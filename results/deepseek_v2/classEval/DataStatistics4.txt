```python
import math

class DataStatistics4:
    # This class provides static methods for calculating various statistical measures such as correlation coefficient, skewness, kurtosis, and probability density function (PDF).

    @staticmethod
    def correlation_coefficient(data1, data2):
        # Calculate the Pearson correlation coefficient between two datasets.
        # param data1: list, the first dataset
        # param data2: list, the second dataset
        # return: float, the correlation coefficient between -1 and 1
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [1, 2, 3])
        # 1.0
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [3, 2, 1])
        # -1.0
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [1, 2, 4])
        # 0.9819805060619659
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0
    
    @staticmethod
    def skewness(data):
        # Calculate the skewness of a dataset, which measures the asymmetry of the data distribution.
        # param data: list, the dataset
        # return: float, the skewness value
        # >>> DataStatistics4.skewness([1, 2, 3, 4, 5])
        # 0.0
        # >>> DataStatistics4.skewness([1, 2, 2, 2, 5])
        # 0.5222329678670935
        # >>> DataStatistics4.skewness([1, 1, 1, 1, 5])
        # 1.1547005383792517
        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness
    
    @staticmethod
    def kurtosis(data):
        # Calculate the kurtosis of a dataset, which measures the "tailedness" of the data distribution.
        # param data: list, the dataset
        # return: float, the kurtosis value
        # >>> DataStatistics4.kurtosis([1, 2, 3, 4, 5])
        # -1.3
        # >>> DataStatistics4.kurtosis([1, 2, 2, 2, 5])
        # -1.15
        # >>> DataStatistics4.kurtosis([1, 1, 1, 1, 5])
        # -1.12
        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        # Calculate the probability density function (PDF) values for a given dataset assuming a normal distribution.
        # param data: list, the dataset
        # param mu: float, the mean of the distribution
        # param sigma: float, the standard deviation of the distribution
        # return: list, the PDF values for each data point
        # >>> DataStatistics4.pdf([1, 2, 3], 2, 1)
        # [0.24197072451914337, 0.3989422804014327, 0.24197072451914337]
        # >>> DataStatistics4.pdf([1, 2, 3], 1, 1)
        # [0.3989422804014327, 0.24197072451914337, 0.05399096651318806]
        # >>> DataStatistics4.pdf([1, 2, 3], 3, 1)
        # [0.05399096651318806, 0.24197072451914337, 0.3989422804014327]
        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values
```