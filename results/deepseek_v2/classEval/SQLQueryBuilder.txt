```python
# This class provides static methods to build SQL queries for common operations like SELECT, INSERT, DELETE, and UPDATE.
class SQLQueryBuilder:

    @staticmethod
    def select(table, columns='*', where=None):
        # Generate a SELECT SQL query string based on the provided table, columns, and optional WHERE clause.
        # param table: str, the name of the table to query.
        # param columns: list or str, the columns to select. Defaults to '*'.
        # param where: dict, optional, the conditions for the WHERE clause.
        # return: str, the generated SQL SELECT query string.
        # >>> SQLQueryBuilder.select('users', ['id', 'name'], {'id': '1', 'name': 'John'})
        # "SELECT id, name FROM users WHERE id='1' AND name='John'"
        # >>> SQLQueryBuilder.select('users')
        # "SELECT * FROM users"
        if columns != '*':
            columns = ', '.join(columns)
        query = f"SELECT {columns} FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def insert(table, data):
        # Generate an INSERT SQL query string based on the provided table and data.
        # param table: str, the name of the table to insert into.
        # param data: dict, the data to insert, where keys are column names and values are the corresponding values.
        # return: str, the generated SQL INSERT query string.
        # >>> SQLQueryBuilder.insert('users', {'id': '1', 'name': 'John'})
        # "INSERT INTO users (id, name) VALUES ('1', 'John')"
        keys = ', '.join(data.keys())
        values = ', '.join(f"'{v}'" for v in data.values())
        return f"INSERT INTO {table} ({keys}) VALUES ({values})"

    @staticmethod
    def delete(table, where=None):
        # Generate a DELETE SQL query string based on the provided table and optional WHERE clause.
        # param table: str, the name of the table to delete from.
        # param where: dict, optional, the conditions for the WHERE clause.
        # return: str, the generated SQL DELETE query string.
        # >>> SQLQueryBuilder.delete('users', {'id': '1'})
        # "DELETE FROM users WHERE id='1'"
        # >>> SQLQueryBuilder.delete('users')
        # "DELETE FROM users"
        query = f"DELETE FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def update(table, data, where=None):
        # Generate an UPDATE SQL query string based on the provided table, data, and optional WHERE clause.
        # param table: str, the name of the table to update.
        # param data: dict, the data to update, where keys are column names and values are the new values.
        # param where: dict, optional, the conditions for the WHERE clause.
        # return: str, the generated SQL UPDATE query string.
        # >>> SQLQueryBuilder.update('users', {'name': 'John'}, {'id': '1'})
        # "UPDATE users SET name='John' WHERE id='1'"
        # >>> SQLQueryBuilder.update('users', {'name': 'John'})
        # "UPDATE users SET name='John'"
        update_str = ', '.join(f"{k}='{v}'" for k, v in data.items())
        query = f"UPDATE {table} SET {update_str}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query
```