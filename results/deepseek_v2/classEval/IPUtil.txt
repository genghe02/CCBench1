```python
import socket


class IpUtil:
    # A utility class for validating IP addresses and retrieving hostnames.

    @staticmethod
    def is_valid_ipv4(ip_address):
        # Check if the given IP address is a valid IPv4 address.
        # param ip_address: str, the IP address to validate.
        # return: bool, True if the IP address is valid IPv4, False otherwise.
        # >>> IpUtil.is_valid_ipv4('192.168.1.1')
        # True
        # >>> IpUtil.is_valid_ipv4('256.256.256.256')
        # False
        try:
            socket.inet_pton(socket.AF_INET, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def is_valid_ipv6(ip_address):
        # Check if the given IP address is a valid IPv6 address.
        # param ip_address: str, the IP address to validate.
        # return: bool, True if the IP address is valid IPv6, False otherwise.
        # >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')
        # True
        # >>> IpUtil.is_valid_ipv6('2001:0db8:85a3::8a2e:0370:7334:')
        # False
        try:
            socket.inet_pton(socket.AF_INET6, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def get_hostname(ip_address):
        # Retrieve the hostname for the given IP address.
        # param ip_address: str, the IP address to resolve.
        # return: str or None, the hostname if resolvable, None otherwise.
        # >>> IpUtil.get_hostname('8.8.8.8')
        # 'dns.google'
        # >>> IpUtil.get_hostname('255.255.255.255')
        # None
        try:
            hostname = socket.gethostbyaddr(ip_address)[0]
            return hostname
        except socket.herror:
            return None
```