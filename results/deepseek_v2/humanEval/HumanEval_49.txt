```python
def modp(n: int, p: int):
    # Calculate the result of (2^n) % p using an iterative approach to avoid overflow and improve efficiency.
    # param n: int, the exponent in the expression (2^n) % p
    # param p: int, the modulus in the expression (2^n) % p
    # return: int, the result of (2^n) % p
    
    # >>> modp(3, 5)
    # 3
    # >>> modp(4, 7)
    # 2
    # >>> modp(0, 3)
    # 1
    # >>> modp(5, 1)
    # 0
    # >>> modp(10, 1000)
    # 24
    
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
```