```python
import math


def poly(xs: list, x: float):
    # Calculate the value of a polynomial at a given point x, where xs is a list of coefficients in descending order of powers.
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    # Find a zero (root) of the polynomial defined by coefficients xs using the bisection method.
    # The function assumes that the polynomial has at least one real root within the interval [-inf, inf].
    # It starts with an initial interval [-1, 1] and expands it until the signs of the polynomial values at the interval endpoints differ.
    # Then, it iteratively narrows the interval by bisection until the interval width is smaller than 1e-10.
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

# Test cases for the find_zero function:
# >>> find_zero([1, 0, -1])  # Polynomial: x^2 - 1, expected root: 1 or -1
# -1.0
# >>> find_zero([1, -3, 2])  # Polynomial: x^2 - 3x + 2, expected root: 1 or 2
# 1.0
# >>> find_zero([1, 0, 0, -1])  # Polynomial: x^3 - 1, expected root: 1
# 1.0
# >>> find_zero([1, 0, 0, 0, -1])  # Polynomial: x^4 - 1, expected root: 1 or -1
# 1.0
```