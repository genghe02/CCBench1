```python
def sort_even(l: list):
    # This function sorts the even-indexed elements of the input list while keeping the odd-indexed elements in their original positions.
    # It then constructs a new list by interleaving the sorted even-indexed elements with the original odd-indexed elements.
    # If the list has an odd length, the last even-indexed element is appended at the end.

    # Example test cases:
    # >>> sort_even([3, 1, 2, 4, 5])
    # [2, 1, 3, 4, 5]
    # >>> sort_even([7, 3, 5, 2, 1, 6])
    # [1, 3, 5, 2, 7, 6]
    # >>> sort_even([9, 8, 7, 6, 5, 4, 3])
    # [3, 8, 5, 6, 7, 4, 9]

    evens = l[::2]  # Extract even-indexed elements
    odds = l[1::2]  # Extract odd-indexed elements
    evens.sort()  # Sort the even-indexed elements
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])  # Interleave sorted even-indexed elements with original odd-indexed elements
    if len(evens) > len(odds):
        ans.append(evens[-1])  # If the list has an odd length, append the last even-indexed element
    return ans
```