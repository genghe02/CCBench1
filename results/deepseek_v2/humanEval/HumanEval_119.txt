```python
def match_parens(lst):
    # This function checks if two strings in a list can be concatenated in any order to form a valid balanced parentheses string.

    # Helper function to check if a string has balanced parentheses.
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    # Concatenate the two strings in both possible orders.
    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    
    # Return 'Yes' if either concatenation results in a valid balanced parentheses string, otherwise 'No'.
    return 'Yes' if check(S1) or check(S2) else 'No'

# Test cases for the function
# >>> match_parens(['()', ')('])
# 'No'
# >>> match_parens(['()', '()'])
# 'Yes'
# >>> match_parens([')(', '()'])
# 'No'
# >>> match_parens(['(()', ')'])
# 'Yes'
# >>> match_parens(['(', ')'])
# 'No'
```