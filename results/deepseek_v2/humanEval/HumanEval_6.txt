```python
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    # Parse a string containing multiple groups of nested parentheses and return a list of the maximum depth of each group.

    # Example test cases:
    # >>> parse_nested_parens("( ( ) ) ( ( ( ) ) )")
    # [2, 3]
    # >>> parse_nested_parens("( ) ( ) ( )")
    # [1, 1, 1]
    # >>> parse_nested_parens("( ( ( ) ) ) ( )")
    # [3, 1]
    # >>> parse_nested_parens("")
    # []
    # >>> parse_nested_parens("( ( ) ( ( ) ) )")
    # [3]

    def parse_paren_group(s):
        # Calculate the maximum depth of nested parentheses in a given string.
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
```