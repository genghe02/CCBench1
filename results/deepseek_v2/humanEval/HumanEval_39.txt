```python
def prime_fib(n: int):
    # Generate the nth prime Fibonacci number by iteratively generating Fibonacci numbers and checking if they are prime.
    # The function stops when the nth prime Fibonacci number is found.
    
    # Test cases for the function:
    # >>> prime_fib(1)
    # 2
    # >>> prime_fib(2)
    # 3
    # >>> prime_fib(3)
    # 5
    # >>> prime_fib(4)
    # 13
    # >>> prime_fib(5)
    # 89
    
    import math

    def is_prime(p):
        # Check if a number p is prime by testing divisibility from 2 up to the square root of p.
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
```