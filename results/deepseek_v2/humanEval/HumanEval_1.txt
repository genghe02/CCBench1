```python
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    # This function separates a string containing nested parentheses into individual groups of balanced parentheses.
    # It iterates through the string, tracking the depth of nested parentheses and collects balanced groups.
    # param paren_string: str, the input string containing nested parentheses.
    # return: List[str], a list of strings where each string is a balanced group of parentheses.
    
    # >>> separate_paren_groups("((()))()")
    # ['((()))', '()']
    # >>> separate_paren_groups("(()())((()))")
    # ['(()())', '((()))']
    # >>> separate_paren_groups("()")
    # ['()']
    # >>> separate_paren_groups("((())())")
    # ['((())())']
    # >>> separate_paren_groups("(()(()))")
    # ['(()(()))']
    
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
```