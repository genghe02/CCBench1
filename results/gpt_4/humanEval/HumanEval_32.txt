```python
import math

def poly(xs: list, x: float):
    # This function calculates the polynomial value for the given x. 
    # It takes a list of coefficients and a value x as input. 
    # The coefficients are in the order of increasing powers of x.
    # It uses the formula sum(coeff * x^i) for all i from 0 to len(xs) - 1.
    # param xs: list, the coefficients of the polynomial
    # param x: float, the value at which the polynomial is evaluated
    # return: float, the value of the polynomial at x
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    # This function finds the root (zero) of the polynomial defined by the coefficients in the list xs.
    # It uses the bisection method to find the root.
    # The initial interval is [-1, 1] and it expands the interval until the function values at the endpoints have different signs.
    # Then it bisects the interval until the width of the interval is less than 1e-10.
    # param xs: list, the coefficients of the polynomial
    # return: float, the root of the polynomial

    # test cases:
    # >>> find_zero([1, -3, 2]) # the polynomial is x^2 - 3x + 2, the roots are 1 and 2
    # 1.0
    # >>> find_zero([1, 0, -1]) # the polynomial is x^2 - 1, the roots are -1 and 1
    # -1.0
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
```