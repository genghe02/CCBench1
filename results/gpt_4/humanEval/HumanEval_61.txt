def correct_bracketing(brackets: str):
    # This function checks if a string of brackets is correctly balanced.
    # It operates by tracking the "depth" of the bracketing, which is incremented for each opening bracket and decremented for each closing bracket.
    # If the depth ever goes negative, or is non-zero at the end of the string, the bracketing is incorrect.

    # Test cases:
    # >>> correct_bracketing("()") -> True
    # >>> correct_bracketing(")(") -> False
    # >>> correct_bracketing("(())") -> True
    # >>> correct_bracketing("(()") -> False
    # >>> correct_bracketing("())") -> False
    depth = 0
    for b in brackets:
        if b == "(":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
    # Returns True if the brackets are balanced, False otherwise.