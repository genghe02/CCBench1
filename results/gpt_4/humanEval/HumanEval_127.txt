```python
def intersection(interval1, interval2):
    # This function checks if there is an intersection between two intervals and verifies whether the length of the intersection interval is a prime number.
    # If there is an intersection and its length is a prime number, return "YES". Otherwise, return "NO".
    # The function is composed of two parts: calculating the intersection of two intervals and checking if the length of the intersection is a prime number.
    # interval1 and interval2: tuples that represent the start and end of two intervals.
    # return statement: "YES" if the length of the intersection is a prime number, "NO" otherwise.
    
    # Test cases:
    # >>> intersection((1, 2), (2, 3)) ==> "NO"
    # >>> intersection((-1, 1), (0, 4)) ==> "NO"
    # >>> intersection((-3, -1), (-5, 5)) ==> "YES"

    def is_prime(num):
        # This is a helper function which checks if a number is prime.
        # num: int, the number to check.
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])  # Find the start point of the intersection.
    r = min(interval1[1], interval2[1])  # Find the end point of the intersection.
    length = r - l  # Calculate the length of the intersection.
    if length > 0 and is_prime(length):  # Check if the length of the intersection is a prime number.
        return "YES"
    return "NO"
```