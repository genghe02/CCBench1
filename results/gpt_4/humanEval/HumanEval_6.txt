from typing import List

# This function takes a string of nested parentheses and returns a list of the max depth of parentheses for each group in the string. 
# Groups are separated by spaces.
def parse_nested_parens(paren_string: str) -> List[int]:

    # Test cases for the function:
    # >>> parse_nested_parens('(()) () ((()))')
    # Expected output: [2, 1, 3]
    # >>> parse_nested_parens('((())) (()(()))')
    # Expected output: [3, 3]
    # >>> parse_nested_parens('')
    # Expected output: []

    # Nested function that parses each group of parentheses and returns the max depth of parentheses in that group.
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    # Split the input string into groups by spaces and apply the parse_paren_group function to each group.
    # If the group is not an empty string, then it is added to the output list.
    return [parse_paren_group(x) for x in paren_string.split(' ') if x]