def by_length(arr):
    # Sorts the incoming list in reverse order and maps the integer values to their corresponding string representations if available in the dictionary. If a key is not found in the dictionary, it is ignored.
    #
    # Test cases:
    # >>> by_length([1, 2, 3, 4, 5])
    # ['Five', 'Four', 'Three', 'Two', 'One']
    # >>> by_length([9, 8, 7, 6])
    # ['Nine', 'Eight', 'Seven', 'Six']
    # >>> by_length([1, 3, 5, 7, 9])
    # ['Nine', 'Seven', 'Five', 'Three', 'One']
    # >>> by_length([2, 4, 6, 8])
    # ['Eight', 'Six', 'Four', 'Two']
    # >>> by_length([10, 11, 12]) (Values not in dictionary, so return empty list)
    # []

    dic = {
        1: "One",
        2: "Two",
        3: "Three",
        4: "Four",
        5: "Five",
        6: "Six",
        7: "Seven",
        8: "Eight",
        9: "Nine",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr