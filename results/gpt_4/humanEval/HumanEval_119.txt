def match_parens(lst):
    # This function takes a list of two strings and checks if the parentheses in the combined strings are balanced or not. 
    # It first joins the two strings in two ways: first string followed by second and vice versa. 
    # Then it checks for each combined string if the parentheses are balanced. 
    # It uses a helper function 'check' which uses a counter to keep track of the balance of parentheses.
    # If at any point, the counter goes below zero, it means there are more closing parentheses than opening, so it returns False.
    # If after traversing the entire string, the counter is zero, it means the parentheses are balanced, so it returns True. Otherwise, it returns False.
    # The main function returns 'Yes' if either of the combined strings have balanced parentheses, 'No' otherwise.

    # Test cases:
    # >>> match_parens(['(', ')']) should return 'Yes' because both combined strings '()' and ')(' have balanced parentheses.
    # >>> match_parens(['(', '(']) should return 'No' because both combined strings '((' and '((' do not have balanced parentheses.
    # >>> match_parens(['(', '))']) should return 'Yes' because the combined string '((' has balanced parentheses.
    # >>> match_parens(['))', '(']) should return 'Yes' because the combined string '))(' has balanced parentheses.

    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'