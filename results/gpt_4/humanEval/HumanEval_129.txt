def minPath(grid, k):
    # This function finds the minimum path in a 2D grid by checking each cell of the grid, starting from the top left corner
    # If a cell has the value 1, it checks the cells in the four directions (up, down, left, right) and stores the minimum value among them
    # After checking all cells, it fills a new list 'ans' with 'k' number of minimum values alternating with 1s
    # If number of elements in 'ans' is even, it appends 1; if odd, it appends the minimum value found in the grid

    # Test cases:
    # >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
    # [1, 1, 1]
    # >>> minPath([[1, 2, 1], [1, 3, 1], [1, 1, 1]], 6)
    # [1, 1, 1, 1, 1, 1]

    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
    # Returns a list 'ans' of length 'k' with alternating 1s and minimum values found in the grid.