def order_by_points(nums):
    # This function sorts a list of integers based on the sum of their digits.
    # It treats negative integers as if they were positive, with the exception of the first digit after the minus sign, which is treated as a negative number.
    # The sorting is performed in ascending order, with the smallest sums coming first.

    # Test cases:
    # >>> order_by_points([10, -11, 20, -21, 30, -31])
    # Returns: [10, -11, 20, -21, 30, -31]
    # Explanation: All numbers have the same sum of digits (1), so the original order is preserved.
    #
    # >>> order_by_points([13, -11, 22, -21, 31, -33])
    # Returns: [-11, 13, -21, 22, -33, 31]
    # Explanation: The sums of digits are -2, 4, -3, 4, -6, 4 respectively.
    #
    # >>> order_by_points([10, 20, 30, -11, -21, -31])
    # Returns: [-31, -21, -11, 10, 20, 30]
    # Explanation: The sums of digits are 1, 2, 3, -2, -3, -4 respectively.

    def digits_sum(n):
        # This helper function takes an integer as input and calculates the sum of its digits.
        # If the number is negative, it treats the first digit after the minus sign as a negative number.
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)