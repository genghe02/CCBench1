def prime_fib(n: int):
    # This function generates fibonacci sequence until it finds 'n' prime numbers in the sequence.
    # The function checks each fibonacci number if it is prime or not, and keeps count of prime numbers.
    # It stops when it finds 'n' prime numbers in the fibonacci sequence and returns the 'n'th prime fibonacci number.
    #
    # Test cases:
    # >>> prime_fib(1)
    # 2
    # >>> prime_fib(2)
    # 3
    # >>> prime_fib(3)
    # 5
    # >>> prime_fib(5)
    # 13
    import math

    def is_prime(p):
        # A helper function to check if a number is prime.
        # It checks divisibility from 2 to sqrt(p), and if any number divides 'p', it is not prime.
        # Returns True if 'p' is prime, False otherwise.
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        # Check if the newly generated fibonacci number is prime.
        # If it is, decrement 'n'. When 'n' becomes 0, we have found 'n' prime fibonacci numbers.
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            # Return the 'n'th prime fibonacci number.
            return f[-1]