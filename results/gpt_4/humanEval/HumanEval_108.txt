def count_nums(arr):
    # This function takes in a list of numbers, calculates the sum of the digits of each number in the list, and then returns the count of those sums that are greater than 0.
    # If a number is negative, its sign is preserved when calculating the sum of the digits. For example, for -123, the sum of the digits would be calculated as -1 + 2 + 3 = 4.
    # The function uses a nested function, digits_sum, to calculate the sum of the digits of a number.

    # Test cases:
    # >>> count_nums([123, -456, 789, -101112])
    # Expected output: 3 (since -4 + 5 + 6 = 7 is greater than 0, but -1 + 0 + 1 + 1 + 1 + 2 = 2 is not greater than 0)
    # >>> count_nums([-1, -2, -3, -4])
    # Expected output: 0 (since all sums of digits are not greater than 0)
    # >>> count_nums([0, 1, 2, 3, 4])
    # Expected output: 4 (since the sum of the digits of 0 is not greater than 0)

    def digits_sum(n):
        # This nested function calculates the sum of the digits of a number.
        # If the number is negative, it multiplies the first digit by -1 to preserve the sign.
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)

    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr]))) # Returns the count of sums of digits that are greater than 0.