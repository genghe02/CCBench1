def get_row(lst, x):
    # This function is used to get the coordinates of a specific element in a 2D list. It iterates over the list and stores the index of the element when it is found.
    # The coordinates are then sorted first by the second element in reverse order and then by the first element in ascending order.
    
    # Test cases for the function:
    # >>> get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)
    # Expected output: [(0, 1)]
    # >>> get_row([[1, 2, 3], [2, 5, 6], [7, 2, 9]], 2)
    # Expected output: [(0, 1), (1, 0), (2, 1)]
    # >>> get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)
    # Expected output: []

    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    # The list comprehension goes through each element in the list and if the element matches the input element, it stores the index of the element as a tuple in 'coords'.
    # The index is stored as (row, column)
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
    # The 'coords' list is first sorted by the second element of each tuple in descending order and then sorted by the first element of each tuple in ascending order.