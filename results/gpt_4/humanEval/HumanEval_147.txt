def get_max_triples(n):
    # This function calculates the maximal number of triples (i, j, k) such that 1<= i < j < k <= n and the sum of (i*i - i + 1)+(j*j - j + 1)+(k*k - k + 1) is divisible by 3.
    
    # Test cases:
    # get_max_triples(3) should return 1 as there is only one triple (1,2,3) and (1*1 - 1 + 1)+(2*2 - 2 + 1)+(3*3 - 3 + 1) = 9 which is divisible by 3.
    # get_max_triples(4) should return 3 as there are three triples (1,2,3), (1,2,4), and (1,3,4) where the sum of their values is divisible by 3.
    # get_max_triples(5) should return 6 as there are six triples (1,2,3), (1,2,4), (1,3,4), (1,2,5), (1,3,5), and (2,3,5) where the sum of their values is divisible by 3.
    
    A = [i*i - i + 1 for i in range(1,n+1)] # Create a list of numbers from 1 to n where each element is calculated by the formula (i*i - i + 1).
    ans = [] # Initialize an empty list to store the triples.
    for i in range(n): # Iterate over all elements in the list.
        for j in range(i+1,n): # For each element, iterate over all elements after it in the list.
            for k in range(j+1,n): # For each pair of elements, iterate over all elements after them in the list.
                if (A[i]+A[j]+A[k])%3 == 0: # If the sum of three elements is divisible by 3,
                    ans += [(A[i],A[j],A[k])] # add the triple to the list.
    return len(ans) # Return the number of triples.