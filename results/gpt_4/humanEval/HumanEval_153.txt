```python
def Strongest_Extension(class_name, extensions):
    # This function takes a class name and a list of extensions. It determines 
    # the "strongest" extension based on the number of uppercase letters minus 
    # the number of lowercase letters. It then appends this strongest extension 
    # to the class name, separated by a period.
    #
    # Test cases:
    # >>> Strongest_Extension('TestClass', ['abc', 'DEF', 'Ghi'])
    # 'TestClass.DEF'
    # >>> Strongest_Extension('AnotherClass', ['xyz', 'ABC', 'def'])
    # 'AnotherClass.ABC'
    # >>> Strongest_Extension('ThirdClass', ['jkl', 'MNO', 'PQR'])
    # 'ThirdClass.PQR'
  
    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + "." + strong
    return ans
```