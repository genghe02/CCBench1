```python
# This class simulates a game of Tic Tac Toe.
class TicTacToe:
    def __init__(self, N=3):
        # Initialize the game board. The board is a 2D list of empty strings representing empty spaces.
        # The current player is represented by 'X'. The dimension of the board is given by N (default is 3).
        self.board = [[' ' for _ in range(N)] for _ in range(3)]
        self.current_player = 'X'

    def make_move(self, row, col):
        # This function allows a player to make a move at the specified row and column.
        # If the move is valid (i.e., the specified cell is empty), the function updates the board and the current player.
        # params: row - the row number where the player wants to make a move
        #         col - the column number where the player wants to make a move
        # return: True if the move was valid and made successfully, False otherwise
        # test case: >>> game = TicTacToe()
        #            >>> game.make_move(0, 0)  # returns True
        #            >>> game.make_move(0, 0)  # returns False, because the cell is already occupied
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        else:
            return False

    def check_winner(self):
        # This function checks if there is a winner in the current game by looking for a line (row, column or diagonal) with the same non-empty symbol.
        # return: the symbol of the winner ('X' or 'O') if there is a winner, None otherwise
        # test case: >>> game = TicTacToe()
        #            >>> game.make_move(0, 0)
        #            >>> game.make_move(1, 0)
        #            >>> game.make_move(0, 1)
        #            >>> game.make_move(1, 1)
        #            >>> game.make_move(0, 2)  # X wins
        #            >>> game.check_winner()  # returns 'X'
        for row in self.board:
            if row[0] == row[1] == row[2] != ' ':
                return row[0]
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ':
                return self.board[0][col]
        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':
            return self.board[0][0]
        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':
            return self.board[0][2]
        return None

    def is_board_full(self):
        # This function checks if the game board is full, i.e., if there are no more empty spaces left.
        # return: True if the board is full, False otherwise
        # test case: >>> game = TicTacToe()
        #            >>> game.is_board_full()  # returns False
        #            >>> for i in range(3):
        #            >>>     for j in range(3):
        #            >>>         game.make_move(i, j)
        #            >>> game.is_board_full()  # returns True
        for row in self.board:
            if ' ' in row:
                return False
        return True
```