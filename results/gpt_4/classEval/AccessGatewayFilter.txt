import logging
import datetime

# This class acts as a filter to validate and process HTTP requests coming to an Access Gateway.
class AccessGatewayFilter:

    def __init__(self):
        pass

    # This function is used to filter HTTP requests based on the path and the user's level.
    # :param request: dict, the incoming HTTP request details
    # :return: bool, True if the request is allowed, False otherwise
    # Test case:
    # >>> filter = AccessGatewayFilter()
    # >>> filter.filter({'path': '/api/data', 'method': 'GET'})
    # >>> filter.filter({'path': '/login', 'method': 'POST'})
    def filter(self, request):
        request_uri = request['path']
        method = request['method']

        if self.is_start_with(request_uri):
            return True

        try:
            token = self.get_jwt_user(request)
            user = token['user']
            if user['level'] > 2:
                self.set_current_user_info_and_log(user)
                return True
        except:
            return False

    # This function checks whether the given request uri starts with "/api" or "/login".
    # :param request_uri: str, the uri of the http request
    # :return: bool, True if the request uri starts with "/api" or "/login", False otherwise
    # Test case:
    # >>> AccessGatewayFilter().is_start_with('/api/data')
    # >>> AccessGatewayFilter().is_start_with('/user/login')
    def is_start_with(self, request_uri):
        start_with = ["/api", '/login']
        for s in start_with:
            if request_uri.startswith(s):
                return True
        return False

    # This function gets the user token from the request, validates it and returns it.
    # :param request: dict, the incoming HTTP request details
    # :return: token: dict, validated user token from the request, or None if the token is invalid
    # Test case:
    # >>> AccessGatewayFilter().get_jwt_user({'headers': {'Authorization': valid_token}})
    # >>> AccessGatewayFilter().get_jwt_user({'headers': {'Authorization': invalid_token}})
    def get_jwt_user(self, request):
        token = request['headers']['Authorization']
        user = token['user']
        if token['jwt'].startswith(user['name']):
            jwt_str_date = token['jwt'].split(user['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    # This function logs the user's name, address and current time.
    # :param user: dict, user's information
    # No return statement for this function
    # Test case:
    # >>> AccessGatewayFilter().set_current_user_info_and_log({'name': 'John', 'address': '127.0.0.1'})
    def set_current_user_info_and_log(self, user):
        host = user['address']
        logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)