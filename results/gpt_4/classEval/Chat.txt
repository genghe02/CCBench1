```python
from datetime import datetime

# This class is used to manage the chat system where users can send and receive messages.
class Chat:
    # This constructor initializes the users dictionary where each user's messages will be stored.
    def __init__(self):
        self.users = {}

    # This function is used to add a user to the chat system.
    # param username: str, the username of the user to be added.
    # return: bool, returns True if the user was added successfully, False otherwise.
    # test cases:
    # >>> chat = Chat()
    # >>> chat.add_user("user1") # True
    # >>> chat.add_user("user1") # False
    def add_user(self, username):
        if username in self.users:
            return False
        else:
            self.users[username] = []
            return True

    # This function is used to remove a user from the chat system.
    # param username: str, the username of the user to be removed.
    # return: bool, returns True if the user was removed successfully, False otherwise.
    # test cases:
    # >>> chat = Chat()
    # >>> chat.add_user("user1") # True
    # >>> chat.remove_user("user1") # True
    # >>> chat.remove_user("user1") # False
    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            return True
        else:
            return False

    # This function is used to send a message from one user to another.
    # param sender: str, the username of the sender.
    # param receiver: str, the username of the receiver.
    # param message: str, the message to be sent.
    # return: bool, returns True if the message was sent successfully, False otherwise.
    # test cases:
    # >>> chat = Chat()
    # >>> chat.add_user("user1") # True
    # >>> chat.add_user("user2") # True
    # >>> chat.send_message("user1", "user2", "Hello!") # True
    # >>> chat.send_message("user1", "user3", "Hello!") # False
    def send_message(self, sender, receiver, message):
        if sender not in self.users or receiver not in self.users:
            return False

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_info = {
            'sender': sender,
            'receiver': receiver,
            'message': message,
            'timestamp': timestamp
        }
        self.users[sender].append(message_info)
        self.users[receiver].append(message_info)
        return True

    # This function is used to get all the messages of a user.
    # param username: str, the username of the user.
    # return: list, returns a list of all the messages of the user, returns an empty list if the user does not exist.
    # test cases:
    # >>> chat = Chat()
    # >>> chat.add_user("user1") # True
    # >>> chat.add_user("user2") # True
    # >>> chat.send_message("user1", "user2", "Hello!") # True
    # >>> chat.get_messages("user1") # [{'sender': 'user1', 'receiver': 'user2', 'message': 'Hello!', 'timestamp': '...'}]
    # >>> chat.get_messages("user3") # []
    def get_messages(self, username):
        if username not in self.users:
            return []
        return self.users[username]
```