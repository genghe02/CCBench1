```python
# This class represents a hotel with several types of rooms. It allows to book, check in, check out and get available rooms.
class Hotel:
    # The constructor of the Hotel class initializes the hotel with a name and a dictionary of available rooms.
    # Test Cases for the function:
    # >>> hotel = Hotel("Hotel California", {'single': 5, 'double': 3})
    # >>> print(hotel.name) # Expected Output: 'Hotel California'
    # >>> print(hotel.available_rooms) # Expected Output: {'single': 5, 'double': 3}
    def __init__(self, name, rooms):
        self.name = name
        self.available_rooms = rooms
        # available_rooms = {room_type1: room_number1, room_type2: room_number2, ...}
        # available_rooms = {'single': 5, 'double': 3}
        self.booked_rooms = {}
        # booked_rooms = {room_type1: {name1: room_number1, name2: room_number2, ...}, room_type2: {...}, ...}
        # booked_rooms = {'single': {'name1': 2, 'name2':1}, 'double': {}}

    # This method books a room in the hotel. It checks if there are enough rooms of the specified type available.
    # Parameters:
    # room_type (str): The type of room to book.
    # room_number (int): The number of rooms to book.
    # name (str): The name of the person who books the rooms.
    # Return:
    # It returns a success message if the booking is successful, the number of available rooms if not enough rooms are available, or False if no rooms of the specified type are available.
    # Test Cases for the function:
    # >>> hotel.book_room('single', 2, 'John') # Expected Output: 'Success!'
    # >>> hotel.book_room('single', 4, 'Mary') # Expected Output: 3
    # >>> hotel.book_room('triple', 1, 'Tom') # Expected Output: False
    def book_room(self, room_type, room_number, name):
        # Check if there are any rooms of the specified type available
        if room_type not in self.available_rooms.keys():
            return False

        if room_number <= self.available_rooms[room_type]:
            # Book the room by adding it to the booked_rooms dictionary
            if room_type not in self.booked_rooms.keys():
                self.booked_rooms[room_type] = {}
            self.booked_rooms[room_type][name] = room_number
            self.available_rooms[room_type] -= room_number
            return "Success!"
        elif self.available_rooms[room_type] != 0:
            return self.available_rooms[room_type]
        else:
            return False

    # This method is used for checking in to the hotel. It checks if the room of the specified type and number is booked.
    # Parameters:
    # room_type (str): The type of room to check in.
    # room_number (int): The number of rooms to check in.
    # name (str): The name of the person who checks in.
    # Return:
    # Returns False if the check in is not successful. Otherwise, it does not return any value.
    # Test Cases for the function:
    # >>> hotel.check_in('single', 2, 'John') # Expected Output: None
    # >>> hotel.check_in('single', 1, 'Mary') # Expected Output: False
    # >>> hotel.check_in('triple', 1, 'Tom') # Expected Output: False
    def check_in(self, room_type, room_number, name):
        # Check if the room of the specified type and number is booked
        if room_type not in self.booked_rooms.keys():
            return False
        if name in self.booked_rooms[room_type]:
            if room_number > self.booked_rooms[room_type][name]:
                return False
            elif room_number == self.booked_rooms[room_type][name]:
                # Check in the room by removing it from the booked_rooms dictionary
                self.booked_rooms[room_type].pop(name)
            else:
                self.booked_rooms[room_type][name] -= room_number

    # This method is used for checking out from the hotel. It increases the number of available rooms of the specified type.
    # Parameters:
    # room_type (str): The type of room to check out.
    # room_number (int): The number of rooms to check out.
    # Test Cases for the function:
    # >>> hotel.check_out('single', 2)
    # >>> print(hotel.available_rooms['single']) # Expected Output: 5
    def check_out(self, room_type, room_number):
        if room_type in self.available_rooms:
            self.available_rooms[room_type] += room_number
        else:
            self.available_rooms[room_type] = room_number

    # This method returns the number of available rooms of the specified type.
    # Parameter:
    # room_type (str): The type of room to get the availability.
    # Return:
    # The number of available rooms of the specified type.
    # Test Cases for the function:
    # >>> hotel.get_available_rooms('single') # Expected Output: 5
    # >>> hotel.get_available_rooms('double') # Expected Output: 3
    def get_available_rooms(self, room_type):
        return self.available_rooms[room_type]
```