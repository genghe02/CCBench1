```python
import sqlite3

# This class provides methods to manage a SQLite database for a book library.
class BookManagementDB:
    def __init__(self, db_name):
        # This method initializes the database connection and cursor, and creates the books table.
        # @param db_name: str, the name of the SQLite database file.
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        # This method creates a new table named 'books' in the database with columns: 'id', 'title', 'author', and 'available'.
        # Test case: After running this method, a table named 'books' should be created in the database.
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY,
                title TEXT,
                author TEXT,
                available INTEGER
            )
        ''')
        self.connection.commit()

    def add_book(self, title, author):
        # This method adds a new book into the 'books' table with the given title, author, and sets 'available' as 1.
        # @param title: str, the title of the book.
        # @param author: str, the author of the book.
        # Test case: After running this method with a title and author, a new row should be added in the 'books' table with the given title, author, and 'available' as 1.
        self.cursor.execute('''
            INSERT INTO books (title, author, available)
            VALUES (?, ?, 1)
        ''', (title, author))
        self.connection.commit()

    def remove_book(self, book_id):
        # This method removes a book from the 'books' table with the given book_id.
        # @param book_id: int, the id of the book.
        # Test case: After running this method with a book_id, the row with the given book_id should be removed from the 'books' table.
        self.cursor.execute('''
            DELETE FROM books WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def borrow_book(self, book_id):
        # This method updates the 'available' column of a book in the 'books' table to 0 with the given book_id, indicating it's borrowed.
        # @param book_id: int, the id of the book.
        # Test case: After running this method with a book_id, the 'available' column of the row with the given book_id should be updated to 0 in the 'books' table.
        self.cursor.execute('''
            UPDATE books SET available = 0 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def return_book(self, book_id):
        # This method updates the 'available' column of a book in the 'books' table to 1 with the given book_id, indicating it's returned.
        # @param book_id: int, the id of the book.
        # Test case: After running this method with a book_id, the 'available' column of the row with the given book_id should be updated to 1 in the 'books' table.
        self.cursor.execute('''
            UPDATE books SET available = 1 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def search_books(self):
        # This method retrieves all books from the 'books' table.
        # @return: list, all books in the 'books' table.
        # Test case: After running this method, it should return a list of all books from the 'books' table.
        self.cursor.execute('''
            SELECT * FROM books
        ''')
        books = self.cursor.fetchall()
        return books
```