```python
from datetime import datetime
import numpy as np

# This class represents a movie booking system where movies can be added, tickets booked and available movies can be displayed.
class MovieBookingSystem:
    def __init__(self):
        # This function initializes the movie booking system with an empty list of movies.
        # Test case: movie_system = MovieBookingSystem(); print(movie_system.movies) should print [].
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        # This function adds a new movie to the system.
        # Params: 
        # name: str, the name of the movie
        # price: float, the price of the movie ticket
        # start_time: str, the start time of the movie in '%H:%M' format
        # end_time: str, the end time of the movie in '%H:%M' format
        # n: int, the size of the movie theater (n x n)
        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie("Inception", 10.0, "14:00", "16:00", 5); print(movie_system.movies) should print the added movie details.
        movie = {
            'name': name,
            'price': price,
            'start_time': datetime.strptime(start_time, '%H:%M'),
            'end_time': datetime.strptime(end_time, '%H:%M'),
            'seats': np.zeros((n, n))
        }
        self.movies.append(movie)

    def book_ticket(self, name, seats_to_book):
        # This function books a ticket for a movie if available.
        # Params: 
        # name: str, the name of the movie
        # seats_to_book: list of tuples, each tuple representing the row and column index of the seat to book
        # Returns: str, a success message if booking is successful, else a failure message
        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie("Inception", 10.0, "14:00", "16:00", 5); print(movie_system.book_ticket("Inception", [(0, 0)])) should print "Booking success.".
        for movie in self.movies:
            if movie['name'] == name:
                for seat in seats_to_book:
                    if movie['seats'][seat[0]][seat[1]] == 0:
                        movie['seats'][seat[0]][seat[1]] = 1
                    else:
                        return "Booking failed."
                return "Booking success."
        return "Movie not found."

    def available_movies(self, start_time, end_time):
        # This function displays the available movies within a given time frame.
        # Params: 
        # start_time: str, the start time in '%H:%M' format
        # end_time: str, the end time in '%H:%M' format
        # Returns: list of str, the names of the available movies
        # Test case: movie_system = MovieBookingSystem(); movie_system.add_movie("Inception", 10.0, "14:00", "16:00", 5); print(movie_system.available_movies("13:00", "17:00")) should print ['Inception'].
        start_time = datetime.strptime(start_time, '%H:%M')
        end_time = datetime.strptime(end_time, '%H:%M')

        available_movies = []
        for movie in self.movies:
            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:
                available_movies.append(movie['name'])

        return available_movies
```