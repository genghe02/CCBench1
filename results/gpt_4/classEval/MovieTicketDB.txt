```python
import sqlite3

# This class is for handling database operations related to movie tickets.
class MovieTicketDB:
    # This method initializes the connection to the SQLite database.
    # param db_name: str, the name of the database file
    def __init__(self, db_name):
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    # This method creates a table named 'tickets' in the database if it does not exist.
    # return: None
    def create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    # This method inserts a new movie ticket into the 'tickets' table.
    # param movie_name: str, the name of the movie
    # param theater_name: str, the name of the theater
    # param seat_number: str, the seat number of the ticket
    # param customer_name: str, the name of the customer
    # return: None
    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    # This method retrieves all the tickets for a given customer.
    # param customer_name: str, the name of the customer
    # return: list, a list of tuples where each tuple represents a ticket
    # >>> db = MovieTicketDB('test.db')
    # >>> db.insert_ticket('Avengers', 'AMC', 'A1', 'John Doe')
    # >>> db.search_tickets_by_customer('John Doe')  # Returns [(1, 'Avengers', 'AMC', 'A1', 'John Doe')]
    def search_tickets_by_customer(self, customer_name):
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    # This method deletes a ticket from the 'tickets' table based on the ticket id.
    # param ticket_id: int, the id of the ticket
    # return: None
    def delete_ticket(self, ticket_id):
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()
```
