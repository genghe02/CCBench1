```python
# This class is a strategy pattern for applying different discount strategies on a shopping cart.
class DiscountStrategy:
    # The constructor method for DiscountStrategy class.
    # :param customer: dict, contains customer's details.
    # :param cart: list of dicts, each dict contains the product details and its quantity.
    # :param promotion: function, the promotion strategy to be applied on the cart.
    # >>> ds = DiscountStrategy({"fidelity": 1200}, [{"product": "apple", "quantity": 5, "price": 0.5}], DiscountStrategy.FidelityPromo)
    def __init__(self, customer, cart, promotion=None):
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    # This method calculates the total amount in the cart
    # :return: float, total amount in the cart.
    # >>> ds.total()
    # 2.5
    def total(self):
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    # This method calculates the due amount after applying the discount.
    # :return: float, the due amount after applying the discount.
    # >>> ds.due()
    # 2.375
    def due(self):
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    # This promotion gives a 5% discount for customers with fidelity points >= 1000.
    # :param order: DiscountStrategy object
    # :return: float, discount value
    # >>> DiscountStrategy.FidelityPromo(ds)
    # 0.125
    @staticmethod
    def FidelityPromo(order):
        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    # This promotion gives a 10% discount for each product with quantity >= 20.
    # :param order: DiscountStrategy object
    # :return: float, discount value
    # >>> DiscountStrategy.BulkItemPromo(ds)
    # 0
    @staticmethod
    def BulkItemPromo(order):
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    # This promotion gives a 7% discount if the order contains at least 10 different products.
    # :param order: DiscountStrategy object
    # :return: float, discount value
    # >>> DiscountStrategy.LargeOrderPromo(ds)
    # 0
    @staticmethod
    def LargeOrderPromo(order):
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
```
