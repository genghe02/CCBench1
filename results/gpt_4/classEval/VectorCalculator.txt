```python
import numpy as np
from gensim import matutils
from numpy import dot, array

# This class provides a collection of static methods for various vector operations, such as computing cosine similarities, normalizing vectors, and calculating IDF weights.
class VectorUtil:
    @staticmethod
    def similarity(vector_1, vector_2):
        # This function calculates the cosine similarity between two vectors.
        # :param vector_1: numpy array, the first vector
        # :param vector_2: numpy array, the second vector
        # :return: float, the cosine similarity between the two vectors.
        # Testing the function with the same vectors should return a similarity of 1.0
        # >>> VectorUtil.similarity(np.array([1, 2, 3]), np.array([1, 2, 3]))
        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        # This function calculates the cosine similarities between a vector and a collection of vectors.
        # :param vector_1: numpy array, the vector to compare
        # :param vectors_all: numpy array, the collection of vectors to compare with
        # :return: numpy array, the cosine similarities between the vector and each of the vectors in the collection.
        # Testing the function with the same vectors should return an array of similarities of 1.0
        # >>> VectorUtil.cosine_similarities(np.array([1, 2, 3]), np.array([[1, 2, 3], [1, 2, 3]]))
        norm = np.linalg.norm(vector_1)
        all_norms = np.linalg.norm(vectors_all, axis=1)
        dot_products = dot(vectors_all, vector_1)
        similarities = dot_products / (norm * all_norms)
        return similarities

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        # This function calculates the cosine similarity between the means of two lists of vectors.
        # :param vector_list_1: list of numpy arrays, the first list of vectors
        # :param vector_list_2: list of numpy arrays, the second list of vectors
        # :return: float, the cosine similarity between the mean vectors of the two lists.
        # Testing the function with the same vectors should return a similarity of 1.0
        # >>> VectorUtil.n_similarity([np.array([1, 2, 3])], [np.array([1, 2, 3])])
        if not (len(vector_list_1) and len(vector_list_2)):
            raise ZeroDivisionError('At least one of the passed list is empty.')

        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),
                   matutils.unitvec(array(vector_list_2).mean(axis=0)))

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        # This function calculates the IDF (Inverse Document Frequency) weights for a collection of terms.
        # :param total_num: int, the total number of documents
        # :param number_dict: dict, a dictionary where the keys are terms and the values are the number of documents in which each term appears
        # :return: dict, a dictionary where the keys are terms and the values are the corresponding IDF weights.
        # Testing the function with a total_num of 5 and number_dict {'a':3, 'b':2} should return a dictionary with keys 'a' and 'b' and their corresponding IDF weights.
        # >>> VectorUtil.compute_idf_weight_dict(5, {'a':3, 'b':2})
        index_2_key_map = {}

        index = 0

        count_list = []
        for key, count in number_dict.items():
            index_2_key_map[index] = key
            count_list.append(count)
            index = index + 1

        a = np.array(count_list)
        # smooth, in case the divide by zero error
        a = np.log((total_num + 1) / (a + 1))
        result = {}

        for index, w in enumerate(a):
            key = index_2_key_map[index]
            result[key] = w

        return result
```