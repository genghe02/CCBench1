```python
# This is a class for performing mathematical operations like addition, subtraction, multiplication, division, and exponentiation.
class Calculator:
    def __init__(self):
        # This function initializes the Calculator class with the operators and their corresponding functions.
        self.operators = {
            '+': lambda x, y: x + y,  # adds two numbers
            '-': lambda x, y: x - y,  # subtracts two numbers
            '*': lambda x, y: x * y,  # multiplies two numbers
            '/': lambda x, y: x / y,  # divides two numbers
            '^': lambda x, y: x ** y  # raises a number to the power of another number
        }

    def calculate(self, expression):
        # This function calculates the result of an arithmetic expression.
        # param expression: str, a string representing an arithmetic expression
        # return: float, the result of the arithmetic expression
        # >>> calc = Calculator()
        # >>> calc.calculate('2+2*2')
        # >>> 6.0
        # >>> calc.calculate('2*(2+2)')
        # >>> 8.0
        operand_stack = []
        operator_stack = []
        num_buffer = ''

        for char in expression:
            if char.isdigit() or char == '.':
                num_buffer += char
            else:
                if num_buffer:
                    operand_stack.append(float(num_buffer))
                    num_buffer = ''

                if char in '+-*/^':
                    while (
                            operator_stack and
                            operator_stack[-1] != '(' and
                            self.precedence(operator_stack[-1]) >= self.precedence(char)
                    ):
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.append(char)
                elif char == '(':
                    operator_stack.append(char)
                elif char == ')':
                    while operator_stack and operator_stack[-1] != '(':
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.pop()

        if num_buffer:
            operand_stack.append(float(num_buffer))

        while operator_stack:
            operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

        return operand_stack[-1] if operand_stack else None

    def precedence(self, operator):
        # This function determines the precedence of an operator in an arithmetic expression.
        # param operator: str, an operator in an arithmetic expression
        # return: int, the precedence of the operator
        # >>> calc = Calculator()
        # >>> calc.precedence('^')
        # >>> 3
        # >>> calc.precedence('*')
        # >>> 2
        # >>> calc.precedence('+')
        # >>> 1
        precedences = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2,
            '^': 3
        }
        return precedences.get(operator, 0)

    def apply_operator(self, operand_stack, operator_stack):
        # This function applies an operator to two operands.
        # param operand_stack: list, a list of operands
        # param operator_stack: list, a list of operators
        # return: tuple, the updated operand stack and operator stack
        # >>> calc = Calculator()
        # >>> calc.apply_operator([2, 3], ['+'])
        # >>> ([5], [])
        operator = operator_stack.pop()
        if operator == '^':
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        else:
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        return operand_stack, operator_stack
```