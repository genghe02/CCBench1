```python
# This class is used for generating all prime numbers up to a given number using the Sieve of Eratosthenes algorithm.
class ChandrasekharSieve:
    def __init__(self, n):
        # This is the constructor for the ChandrasekharSieve class.
        # param n: int, the upper limit up to which we need to generate prime numbers.
        self.n = n
        self.primes = self.generate_primes()

    def generate_primes(self):
        # This method is used to generate all prime numbers up to a given number using the Sieve of Eratosthenes algorithm.
        # return: list of int, a list of all prime numbers up to the given number.
        # >>> cs = ChandrasekharSieve(30)
        # >>> cs.generate_primes()
        # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
        if self.n < 2:
            return []

        sieve = [True] * (self.n + 1)
        sieve[0] = sieve[1] = False

        p = 2
        while p * p <= self.n:
            if sieve[p]:
                for i in range(p * p, self.n + 1, p):
                    sieve[i] = False
            p += 1

        primes = []
        for i in range(2, self.n + 1):
            if sieve[i]:
                primes.append(i)

        return primes

    def get_primes(self):
        # This method is used to get the list of all generated prime numbers.
        # return: list of int, a list of all generated prime numbers.
        # >>> cs = ChandrasekharSieve(30)
        # >>> cs.get_primes()
        # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
        return self.primes
```