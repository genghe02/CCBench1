# This is a class for managing a shopping cart, it can add item, remove item, view all items and calculate the total price of items in the cart.
class ShoppingCart:
    # This function initialize an empty shopping cart.
    def __init__(self):
        # self.items is a dict that stores the items in the shopping cart.
        self.items = {}

    # This function adds an item to the shopping cart.
    # `item` is the name of the item, `price` is the price of the item, `quantity` is the quantity of the item, default to 1.
    # This function does not return anything.
    def add_item(self, item, price, quantity=1):
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 1.0, 2)
        # >>> cart.view_items() -> {'apple': {'price': 1.0, 'quantity': 2}}
        if item in self.items:
            self.items[item] = {'price': price, 'quantity': quantity}
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    # This function removes a certain quantity of an item from the shopping cart.
    # `item` is the name of the item, `quantity` is the quantity of the item to remove, default to 1.
    # This function does not return anything.
    def remove_item(self, item, quantity=1):
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 1.0, 2)
        # >>> cart.remove_item('apple', 1)
        # >>> cart.view_items() -> {'apple': {'price': 1.0, 'quantity': 1}}
        if item in self.items:
            self.items[item]['quantity'] -= quantity
        else:
            pass

    # This function returns all items in the shopping cart.
    # Returns a dict of all items in the shopping cart.
    def view_items(self) -> dict:
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 1.0, 2)
        # >>> cart.view_items() -> {'apple': {'price': 1.0, 'quantity': 2}}
        return self.items

    # This function calculates and returns the total price of all items in the shopping cart.
    # Returns a float which is the total price of all items in the shopping cart.
    def total_price(self) -> float:
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 1.0, 2)
        # >>> cart.add_item('banana', 0.5, 3)
        # >>> cart.total_price() -> 3.5
        return sum([item['quantity'] * item['price'] for item in self.items.values()])