```python
# This class is used for keeping track of a stock portfolio. It has functions to add, remove, purchase, and sell stocks, 
# as well as calculating the total portfolio value and providing a summary of the portfolio.
class StockPortfolioTracker:
    # Initializes the StockPortfolioTracker class, takes cash_balance as an argument which represents the current cash balance of the portfolio.
    def __init__(self, cash_balance):
        # Initialize an empty list to store portfolio's stocks.
        self.portfolio = []
        # Initialize the cash balance as provided by the user.
        self.cash_balance = cash_balance

    # This function is for adding a new stock to the portfolio.
    # Param stock: dict, the stock to be added. It should have 'name' and 'quantity' keys.
    # >>> tracker = StockPortfolioTracker(10000)
    # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10})
    def add_stock(self, stock):
        for pf in self.portfolio:
            if pf['name'] == stock['name']:
                pf['quantity'] += stock['quantity']
                return
        self.portfolio.append(stock)

    # This function is for removing a stock from the portfolio.
    # Param stock: dict, the stock to be removed. It should have 'name' and 'quantity' keys.
    # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 5})
    def remove_stock(self, stock):
        for pf in self.portfolio:
            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:
                pf['quantity'] -= stock['quantity']
                if pf['quantity'] == 0:
                    self.portfolio.remove(pf)
                return True
        return False

    # This function is for buying a stock and adding it to the portfolio.
    # Param stock: dict, the stock to be bought. It should have 'name', 'quantity', and 'price' keys.
    # Returns: bool, True if the purchase is successful, False otherwise.
    # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 5, 'price': 120})
    def buy_stock(self, stock):
        if stock['price'] * stock['quantity'] > self.cash_balance:
            return False
        else:
            self.add_stock(stock)
            self.cash_balance -= stock['price'] * stock['quantity']
            return True

    # This function is for selling a stock from the portfolio.
    # Param stock: dict, the stock to be sold. It should have 'name', 'quantity', and 'price' keys.
    # Returns: bool, True if the sale is successful, False otherwise.
    # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 5, 'price': 120})
    def sell_stock(self, stock):
        if self.remove_stock(stock) == False:
            return False
        self.cash_balance += stock['price'] * stock['quantity']
        return True

    # This function is for calculating the total value of the portfolio.
    # Returns: float, total value of the portfolio.
    # >>> tracker.calculate_portfolio_value()
    def calculate_portfolio_value(self):
        total_value = self.cash_balance
        for stock in self.portfolio:
            total_value += stock['price'] * stock['quantity']
        return total_value

    # This function is for getting a summary of the portfolio.
    # Returns: tuple, containing total portfolio value and a list of stocks with their individual values.
    # >>> tracker.get_portfolio_summary()
    def get_portfolio_summary(self):
        summary = []
        for stock in self.portfolio:
            value = self.get_stock_value(stock)
            summary.append({"name": stock["name"], "value": value})
        portfolio_value = self.calculate_portfolio_value()
        return portfolio_value, summary

    # This function is for calculating the value of a particular stock in the portfolio.
    # Param stock: dict, the stock whose value is to be calculated. It should have 'price' and 'quantity' keys.
    # Returns: float, value of the stock.
    # >>> tracker.get_stock_value({'name': 'AAPL', 'quantity': 10, 'price': 120})
    def get_stock_value(self, stock):
        return stock['price'] * stock['quantity']
```