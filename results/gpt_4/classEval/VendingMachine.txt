```python
# This class represents a vending machine with functionalities like adding items, inserting coins, purchasing items and displaying items
class VendingMachine:
    def __init__(self):
        # This constructor initializes the inventory dictionary and the balance of the vending machine to 0
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        # This function is used to add a new item to the vending machine's inventory
        # param item_name: str, the name of the item
        # param price: float, the price of the item
        # param quantity: int, the quantity of the item
        # If the item is already present, it will try to restock the item, if not it will add the item in the inventory
        # >>> vm = VendingMachine()
        # >>> vm.add_item("Coke", 1.5, 5)
        if not self.restock_item(item_name, quantity):
            self.inventory[item_name] = {'price': price, 'quantity': quantity}

    def insert_coin(self, amount):
        # This function is used to insert coins into the vending machine
        # param amount: float, the amount to be inserted
        # return: float, the current balance after inserting the coin
        # >>> vm = VendingMachine()
        # >>> vm.insert_coin(2.0)
        self.balance += amount
        return self.balance

    def purchase_item(self, item_name):
        # This function is used to purchase an item from the vending machine
        # param item_name: str, the name of the item to be purchased
        # return: float, the remaining balance after purchasing the item. False if the item is not available or insufficient balance
        # >>> vm = VendingMachine()
        # >>> vm.insert_coin(2.0)
        # >>> vm.add_item("Coke", 1.5, 5)
        # >>> vm.purchase_item("Coke")
        if item_name in self.inventory:
            item = self.inventory[item_name]
            if item['quantity'] > 0 and self.balance >= item['price']:
                self.balance -= item['price']
                item['quantity'] -= 1
                return self.balance
            else:
                return False
        else:
            return False

    def restock_item(self, item_name, quantity):
        # This function is used to restock an existing item in the vending machine's inventory
        # param item_name: str, the name of the item
        # param quantity: int, the quantity to add to the existing item's quantity
        # return: bool, True if the item is present and is restocked, False otherwise
        # >>> vm = VendingMachine()
        # >>> vm.add_item("Coke", 1.5, 5)
        # >>> vm.restock_item("Coke", 5)
        if item_name in self.inventory:
            self.inventory[item_name]['quantity'] += quantity
            return True
        else:
            return False

    def display_items(self):
        # This function is used to display all items in the vending machine along with their price and quantity
        # return: str, a formatted string of all items with their price and quantity. False if there are no items
        # >>> vm = VendingMachine()
        # >>> vm.add_item("Coke", 1.5, 5)
        # >>> vm.display_items()
        if not self.inventory:
            return False
        else:
            items = []
            for item_name, item_info in self.inventory.items():
                items.append(f"{item_name} - ${item_info['price']} [{item_info['quantity']}]")
            return "\n".join(items)
```