```python
# This class represents a simplified version of the game "PushBox", where the player pushes boxes onto targets.
class PushBoxGame:
    def __init__(self, map):
        # The constructor of the PushBoxGame class. It initializes the game state.
        # param map: list of lists, represents the game map with players, boxes and targets.
        # Test the constructor: game = PushBoxGame([['#', '#', '#', '#'], ['#', 'O', ' ', '#'], ['#', 'X', 'G', '#'], ['#', '#', '#', '#']])
        # This should initialize the game with player at (1,1), one box at (2,1) and one target at (2,2).
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        # This method initializes the game by scanning the map and setting up the initial state of the game.
        # Test the method: After initializing the game as above, game.boxes should contain [(2,1)] and game.targets should contain [(2,2)].
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == "O":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == "G":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == "X":
                    self.boxes.append((row, col))

    def check_win(self):
        # This method checks if the game is won, i.e., all the boxes are on the targets.
        # return: bool, True if the game is won, False otherwise.
        # Test the method: After initializing the game as above, game.check_win() should return False.
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        # This method moves the player in the given direction and updates the game state accordingly.
        # param direction: str, represents the direction to move. It could be one of the following: 'w' (up), 's' (down), 'a' (left), 'd' (right).
        # return: bool, returns the result of check_win() after the move.
        # Test the method: After initializing the game as above, game.move('d') should return True as the player pushes the box onto the target.
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == "w":
            new_player_row -= 1
        elif direction == "s":
            new_player_row += 1
        elif direction == "a":
            new_player_col -= 1
        elif direction == "d":
            new_player_col += 1

        if self.map[new_player_row][new_player_col] != "#":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != "#":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()
```