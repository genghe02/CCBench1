```python
import re

# This is a utility class for handling and manipulating strings using regular expressions.
class RegexUtils:

    # This function checks if the provided text matches the given pattern.
    # param pattern: str, the regex pattern to match.
    # param text: str, the text to match against the pattern.
    # return: bool, True if the text matches the pattern, False otherwise.
    # >>> utils = RegexUtils()
    # >>> utils.match(r'\d+', '123')
    def match(self, pattern, text):
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    # This function finds all occurrences of the given pattern in the text.
    # param pattern: str, the regex pattern to find.
    # param text: str, the text to find the pattern in.
    # return: list, all occurrences of the pattern in the text.
    # >>> utils = RegexUtils()
    # >>> utils.findall(r'\d+', '123 abc 456 def')
    def findall(self, pattern, text):
        return re.findall(pattern, text)

    # This function splits the text by the given pattern.
    # param pattern: str, the regex pattern to split by.
    # param text: str, the text to split.
    # return: list, the text split by the pattern.
    # >>> utils = RegexUtils()
    # >>> utils.split(r'\s+', 'Hello, World!')
    def split(self, pattern, text):
        return re.split(pattern, text)

    # This function replaces all occurrences of the pattern in the text with the replacement.
    # param pattern: str, the regex pattern to replace.
    # param replacement: str, the replacement for the pattern.
    # param text: str, the text to replace in.
    # return: str, the text with all occurrences of the pattern replaced with the replacement.
    # >>> utils = RegexUtils()
    # >>> utils.sub(r'\d+', 'number', '123 abc 456 def')
    def sub(self, pattern, replacement, text):
        return re.sub(pattern, replacement, text)

    # This function generates a regex pattern to match email addresses.
    # return: str, a regex pattern to match email addresses.
    # >>> utils = RegexUtils()
    # >>> utils.generate_email_pattern()
    def generate_email_pattern(self):
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    # This function generates a regex pattern to match phone numbers.
    # return: str, a regex pattern to match phone numbers.
    # >>> utils = RegexUtils()
    # >>> utils.generate_phone_number_pattern()
    def generate_phone_number_pattern(self):
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    # This function generates a regex pattern to split sentences.
    # return: str, a regex pattern to split sentences.
    # >>> utils = RegexUtils()
    # >>> utils.generate_split_sentences_pattern()
    def generate_split_sentences_pattern(self):
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    # This function splits the text into sentences.
    # param text: str, the text to split into sentences.
    # return: list, the text split into sentences.
    # >>> utils = RegexUtils()
    # >>> utils.split_sentences('Hello, World! How are you?')
    def split_sentences(self, text):
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    # This function validates if the provided phone_number matches the phone number pattern.
    # param phone_number: str, the phone number to validate.
    # return: bool, True if the phone_number is valid, False otherwise.
    # >>> utils = RegexUtils()
    # >>> utils.validate_phone_number('123-456-7890')
    def validate_phone_number(self, phone_number):
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    # This function extracts all email addresses from the text.
    # param text: str, the text to extract email addresses from.
    # return: list, all email addresses found in the text.
    # >>> utils = RegexUtils()
    # >>> utils.extract_email('test@test.com test2@test2.com')
    def extract_email(self, text):
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)
```