```python
import math
from typing import List

# This class calculates combinations from a given list of data. 
class CombinationCalculator:
    
    def __init__(self, datas: List[str]):
        # This function initializes the class with a list of data.
        self.datas = datas

    @staticmethod
    def count(n: int, m: int) -> int:
        # This function calculates the number of combinations of n items taken m at a time.
        # param n: the total number of items.
        # param m: the number of items to take at a time.
        # return: the number of combinations.
        # test case: >>> CombinationCalculator.count(5, 2)  # 10
        if m == 0 or n == m:
            return 1
        return math.factorial(n) // (math.factorial(n - m) * math.factorial(m))

    @staticmethod
    def count_all(n: int) -> int:
        # This function calculates the total number of combinations from n items.
        # param n: the total number of items.
        # return: the total number of combinations.
        # test case: >>> CombinationCalculator.count_all(3)  # 7
        if n < 0 or n > 63:
            return False
        return (1 << n) - 1 if n != 63 else float("inf")

    def select(self, m: int) -> List[List[str]]:
        # This function generates a list of all combinations of m items from the data.
        # param m: the number of items to take at a time.
        # return: a list of all combinations.
        # test case: >>> c = CombinationCalculator(['a', 'b', 'c'])
        #             >>> c.select(2)  # [['a', 'b'], ['a', 'c'], ['b', 'c']]
        result = []
        self._select(0, [None] * m, 0, result)
        return result

    def select_all(self) -> List[List[str]]:
        # This function generates a list of all possible combinations from the data.
        # return: a list of all possible combinations.
        # test case: >>> c = CombinationCalculator(['a', 'b', 'c'])
        #             >>> c.select_all()  # [['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    def _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        # This is a helper function for the select function. It performs recursive selection of items from the data.
        # param dataIndex: the index of the current item in the data.
        # param resultList: the current selection of items.
        # param resultIndex: the index of the current item in the selection.
        # param result: the list of all selections.
        # this function does not return a value and does not need a test case.
        resultLen = len(resultList)
        resultCount = resultIndex + 1
        if resultCount > resultLen:
            result.append(resultList.copy())
            return

        for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
            resultList[resultIndex] = self.datas[i]
            self._select(i + 1, resultList, resultIndex + 1, result)
```