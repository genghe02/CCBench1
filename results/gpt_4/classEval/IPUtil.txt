```python
import socket

# This class provides utility functions to validate and get information about IP addresses
class IpUtil:

    @staticmethod
    # This function checks if the input string is a valid IPv4 address
    # :param ip_address: str, the IP address in string format to be checked
    # :return: bool, True if the input is a valid IPv4 address, False otherwise
    # Test cases:
    # >>> IpUtil.is_valid_ipv4('192.168.1.1')
    # True
    # >>> IpUtil.is_valid_ipv4('999.999.999.999')
    # False
    def is_valid_ipv4(ip_address):
        try:
            socket.inet_pton(socket.AF_INET, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    # This function checks if the input string is a valid IPv6 address
    # :param ip_address: str, the IP address in string format to be checked
    # :return: bool, True if the input is a valid IPv6 address, False otherwise
    # Test cases:
    # >>> IpUtil.is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')
    # True
    # >>> IpUtil.is_valid_ipv6('2001::85a3::8a2e:0370:7334')
    # False
    def is_valid_ipv6(ip_address):
        try:
            socket.inet_pton(socket.AF_INET6, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    # This function gets the hostname for the given IP address
    # :param ip_address: str, the IP address in string format
    # :return: str, the hostname for the given IP address, or None if the hostname cannot be resolved
    # Test cases:
    # >>> IpUtil.get_hostname('8.8.8.8')
    # 'dns.google'
    # >>> IpUtil.get_hostname('999.999.999.999')
    # None
    def get_hostname(ip_address):
        try:
            hostname = socket.gethostbyaddr(ip_address)[0]
            return hostname
        except socket.herror:
            return None
```