```python
import random

# This is a class for creating a Minesweeper game.
class MinesweeperGame:
    def __init__(self, n, k) -> None:
        # This function initializes the Minesweeper game.
        # :param n: int, the size of the n*n game grid
        # :param k: int, the number of mines in the game
        self.n = n
        self.k = k
        self.minesweeper_map = self.generate_mine_sweeper_map()
        self.player_map = self.generate_playerMap()
        self.score = 0

    def generate_mine_sweeper_map(self):
        # This function generates the mine sweeper map.
        # :return: list, a 2D list representing the game grid where 'X' represents a mine and numbers represent the number of mines in the surrounding 8 cells
        # No test cases are possible for this function as the output is randomized
        arr = [[0 for row in range(self.n)] for column in range(self.n)]
        for num in range(self.k):
            x = random.randint(0, self.n-1)
            y = random.randint(0, self.n-1)
            arr[y][x] = 'X'
            #... omitted for brevity ...
        return arr
    
    def generate_playerMap(self):
        # This function generates the player map.
        # :return: list, a 2D list representing the player's game grid where '-' represents a covered cell
        # No test cases are possible for this function as the output is initialized with a uniform value
        arr = [['-' for row in range(self.n)] for column in range(self.n)]
        return arr

    def check_won(self, map):
        # This function checks if the player has won the game.
        # :param map: list, the player's game grid
        # :return: bool, True if all non-mine cells are uncovered, False otherwise
        # Test case: 
        # >>> game = MinesweeperGame(3, 1)
        # >>> game.check_won([['-', '1', '0'], ['-', 'X', '0'], ['-', '1', '0']]) 
        # False
        for i in range(self.n):
            for j in range(self.n):
                if map[i][j] == '-' and self.minesweeper_map[i][j] != 'X':
                    return False
        return True
    
    def sweep(self, x, y):
        # This function uncovers a cell in the player's game grid.
        # :param x: int, the row index of the cell to uncover
        # :param y: int, the column index of the cell to uncover
        # :return: bool or list, False if the cell contains a mine, True if all non-mine cells are uncovered, otherwise the updated player's game grid
        # Test case: 
        # >>> game = MinesweeperGame(3, 1)
        # >>> game.sweep(0, 0) 
        # [['0', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
        if (self.minesweeper_map[x][y] == 'X'):
            return False
        else:
            self.player_map[x][y] = self.minesweeper_map[x][y]
            self.score += 1
            if self.check_won(self.player_map) == True:
                return True
            return self.player_map
```