```python
import sqlite3

# This class is designed to manipulate a SQLite database for student data storage.
class StudentDatabaseProcessor:

    # This is the constructor for the StudentDatabaseProcessor class.
    # param database_name: str, the name of the SQLite database file
    def __init__(self, database_name):
        self.database_name = database_name

    # This function creates a table named 'students' in the SQLite database.
    # return: None
    # Test case: After calling this function, check if the 'students' table has been created in the SQLite database.
    def create_student_table(self):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            gender TEXT,
            grade INTEGER
        )
        """
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    # This function inserts a new student's information into the 'students' table.
    # param student_data: dict, the student's information, including 'name', 'age', 'gender' and 'grade'
    # return: None
    # Test case: After calling this function with a student_data, check if the new student's information has been inserted into the 'students' table.
    def insert_student(self, student_data):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        insert_query = """
        INSERT INTO students (name, age, gender, grade)
        VALUES (?, ?, ?, ?)
        """
        cursor.execute(insert_query,
                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))

        conn.commit()
        conn.close()

    # This function searches for a student by name from the 'students' table.
    # param name: str, the name of the student to be searched
    # return: list of tuples, each tuple represents a student's information
    # Test case: After inserting a student's information into the 'students' table, call this function with the student's name, and check if the function returns the correct student's information.
    def search_student_by_name(self, name):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = "SELECT * FROM students WHERE name = ?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        conn.close()

        return result

    # This function deletes a student by name from the 'students' table.
    # param name: str, the name of the student to be deleted
    # return: None
    # Test case: After inserting a student's information into the 'students' table, call this function with the student's name, and then check if the student's information has been deleted from the 'students' table.
    def delete_student_by_name(self, name):
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = "DELETE FROM students WHERE name = ?"
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()
```