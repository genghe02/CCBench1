```python
# This class provides a convenient way to generate SQL queries for a specific table.
class SQLGenerator:
    def __init__(self, table_name):
        # Constructor for the SQLGenerator class.
        # param table_name: str, the name of the table for which SQL queries will be generated.
        self.table_name = table_name

    def select(self, fields=None, condition=None):
        # Method to generate a SELECT SQL query.
        # param fields: list, the fields to select. If None, select all fields.
        # param condition: str, the condition for the WHERE clause.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.select(["name", "age"], "age > 21")
        if fields is None:
            fields = "*"
        else:
            fields = ", ".join(fields)
        sql = f"SELECT {fields} FROM {self.table_name}"
        if condition is not None:
            sql += f" WHERE {condition}"
        return sql + ";"

    def insert(self, data):
        # Method to generate an INSERT SQL query.
        # param data: dict, the data to insert. Keys are field names, values are corresponding values.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.insert({"name": "John", "age": 21})
        fields = ", ".join(data.keys())
        values = ", ".join([f"'{value}'" for value in data.values()])
        sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values})"
        return sql + ";"

    def update(self, data, condition):
        # Method to generate an UPDATE SQL query.
        # param data: dict, the data to update. Keys are field names, values are corresponding values.
        # param condition: str, the condition for the WHERE clause.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.update({"name": "John", "age": 22}, "id = 1")
        set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
        sql = f"UPDATE {self.table_name} SET {set_clause} WHERE {condition}"
        return sql + ";"

    def delete(self, condition):
        # Method to generate a DELETE SQL query.
        # param condition: str, the condition for the WHERE clause.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.delete("id = 1")
        sql = f"DELETE FROM {self.table_name} WHERE {condition}"
        return sql + ";"

    def select_female_under_age(self, age):
        # Method to generate a SELECT SQL query for females under a certain age.
        # param age: int, the maximum age.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.select_female_under_age(21)
        condition = f"age < {age} AND gender = 'female'"
        return self.select(condition=condition)

    def select_by_age_range(self, min_age, max_age):
        # Method to generate a SELECT SQL query for people within a certain age range.
        # param min_age: int, the minimum age.
        # param max_age: int, the maximum age.
        # return: str, the generated SQL query.
        # test cases:
        # >>> gen = SQLGenerator("users")
        # >>> gen.select_by_age_range(20, 30)
        condition = f"age BETWEEN {min_age} AND {max_age}"
        return self.select(condition=condition)
```