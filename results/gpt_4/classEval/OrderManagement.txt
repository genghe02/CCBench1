```python
# This class represents a restaurant order and provides methods for adding dishes to the order, calculating the total cost, and checking out.
class Order:

    def __init__(self):
        # This function initializes an empty order with an empty menu, selected dishes list, and sales dictionary.
        self.menu = []
        # menu = [{"dish": dish name, "price": price, "count": count}, ...]
        self.selected_dishes = []
        # selected_dish = {"dish": dish name, "count": count, price: price}
        self.sales = {}
        # 

    def add_dish(self, dish):
        # This function adds a dish to the selected dishes list if it is available in the menu and there is enough quantity.
        # param dish: dict, the dish to be added to the order. It should contain "dish", "count", and "price".
        # return: bool, returns True if the dish is added successfully, False otherwise.
        # Test case: 
        # >>> order = Order()
        # >>> order.menu = [{"dish": "Pizza", "price": 10, "count": 5}]
        # >>> order.add_dish({"dish": "Pizza", "count": 3, "price": 10})  # returns True
        # >>> order.add_dish({"dish": "Pizza", "count": 3, "price": 10})  # returns False (not enough quantity)
        for menu_dish in self.menu:
            if dish["dish"] == menu_dish["dish"]:
                if menu_dish["count"] < dish["count"]:
                    return False
                else:
                    menu_dish["count"] -= dish["count"]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        # This function calculates the total cost of the selected dishes.
        # return: int, the total cost of the selected dishes.
        # Test case: 
        # >>> order = Order()
        # >>> order.selected_dishes = [{"dish": "Pizza", "count": 2, "price": 10}]
        # >>> order.sales = {"Pizza": 1}
        # >>> order.calculate_total()  # returns 20
        total = 0
        for dish in self.selected_dishes:
            total += dish["price"] * dish["count"] * self.sales[dish["dish"]]
        return total

    def checkout(self):
        # This function checks out the order and clears the selected dishes list. It returns the total cost of the order.
        # return: int or bool, the total cost of the order if there are selected dishes, False otherwise.
        # Test case: 
        # >>> order = Order()
        # >>> order.checkout()  # returns False (no selected dishes)
        # >>> order.selected_dishes = [{"dish": "Pizza", "count": 2, "price": 10}]
        # >>> order.sales = {"Pizza": 1}
        # >>> order.checkout()  # returns 20 and clears the selected dishes list
        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total
```