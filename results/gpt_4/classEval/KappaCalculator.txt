```python
import numpy as np

# This class provides methods for calculating Cohen's Kappa and Fleiss' Kappa, 
# which are statistical measures for inter-rater agreement.
class KappaCalculator:

    # This method calculates Cohen's Kappa coefficient for the agreement between two raters.
    # :param testData: 2D array-like, the confusion matrix where each row corresponds to the true classes and each column corresponds to the predicted classes.
    # :param k: int, the number of categories/classes.
    # :return: float, the Cohen's Kappa coefficient.
    # Test case:
    # >>> kappa_calculator = KappaCalculator()
    # >>> kappa_calculator.kappa([[10, 2, 3], [2, 10, 3], [2, 2, 10]], 3)
    @staticmethod
    def kappa(testData, k):
        dataMat = np.mat(testData)
        P0 = 0.0
        for i in range(k):
            P0 += dataMat[i, i] * 1.0
        xsum = np.sum(dataMat, axis=1)
        ysum = np.sum(dataMat, axis=0)
        sum = np.sum(dataMat)
        Pe = float(ysum * xsum) / sum / sum
        P0 = float(P0 / sum * 1.0)
        cohens_coefficient = float((P0 - Pe) / (1 - Pe))
        return cohens_coefficient

    # This method calculates Fleiss' Kappa for the agreement between multiple raters.
    # :param testData: 2D array-like, the matrix where each row corresponds to an item and each column corresponds to a rater. 
    # :param N: int, the number of items.
    # :param k: int, the number of categories/classes.
    # :param n: int, the number of raters.
    # :return: float, the Fleiss' Kappa coefficient.
    # Test case:
    # >>> kappa_calculator = KappaCalculator()
    # >>> kappa_calculator.fleiss_kappa([[4, 0, 0], [2, 2, 0], [0, 2, 2], [0, 0, 4]], 4, 3, 4)
    @staticmethod
    def fleiss_kappa(testData, N, k, n):
        dataMat = np.mat(testData, float)
        oneMat = np.ones((k, 1))
        sum = 0.0
        P0 = 0.0
        for i in range(N):
            temp = 0.0
            for j in range(k):
                sum += dataMat[i, j]
                temp += 1.0 * dataMat[i, j] ** 2
            temp -= n
            temp /= (n - 1) * n
            P0 += temp
        P0 = 1.0 * P0 / N
        ysum = np.sum(dataMat, axis=0)
        for i in range(k):
            ysum[0, i] = (ysum[0, i] / sum) ** 2
        Pe = ysum * oneMat * 1.0
        ans = (P0 - Pe) / (1 - Pe)
        return ans[0, 0]
```