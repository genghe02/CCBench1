```python
# This class is used to simulate a server with basic functionalities such as adding and deleting addresses to/from a white list, receiving and sending data, and displaying sent or received data.
class Server:

    def __init__(self):
        # This function initializes the class with an empty list for the white list and two empty dictionaries for storing sent and received data.
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        # This function is used to add an address to the white list.
        # The function takes a single parameter, addr, which is the address to be added to the white list.
        # If the address is successfully added to the white list, the function returns the updated white list; otherwise, it returns False.
        # Test case: server = Server(), server.add_white_list('192.168.1.1') -> ['192.168.1.1']
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        # This function is used to remove an address from the white list.
        # The function takes a single parameter, addr, which is the address to be removed from the white list.
        # If the address is successfully removed from the white list, the function returns the updated white list; otherwise, it returns False.
        # Test case: server = Server(), server.add_white_list('192.168.1.1'), server.del_white_list('192.168.1.1') -> []
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        # This function is used to receive data from an address that is in the white list.
        # The function takes a single parameter, info, which is a dictionary containing the address ("addr") and the content ("content").
        # If the data is successfully received, the function returns the content; otherwise, it returns -1 or False.
        # Test case: server = Server(), server.add_white_list('192.168.1.1'), server.recv({'addr': '192.168.1.1', 'content': 'Hello'}) -> 'Hello'
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return -1
        addr = info["addr"]
        content = info["content"]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {"addr": addr, "content": content}
            return self.receive_struct["content"]

    def send(self, info):
        # This function is used to send data to an address.
        # The function takes a single parameter, info, which is a dictionary containing the address ("addr") and the content ("content").
        # If the data is successfully sent, the function does not return anything; otherwise, it returns an error message.
        # Test case: server = Server(), server.send({'addr': '192.168.1.1', 'content': 'Hello'})
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return "info structure is not correct"
        self.send_struct = {"addr": info["addr"], "content": info["content"]}

    def show(self, type):
        # This function is used to display the sent or received data.
        # The function takes a single parameter, type, which is a string representing the type of data to display ("send" or "receive").
        # The function returns the data of the specified type; if the type is not recognized, the function returns False.
        # Test case: server = Server(), server.add_white_list('192.168.1.1'), server.recv({'addr': '192.168.1.1', 'content': 'Hello'}), server.show('receive') -> {'addr': '192.168.1.1', 'content': 'Hello'}
        if type == "send":
            return self.send_struct
        elif type == "receive":
            return self.receive_struct
        else:
            return False
```