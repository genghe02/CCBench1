```python
# This class is used for handling and validating IP addresses.
class IPAddress:
    def __init__(self, ip_address):
        # This is the constructor method for IPAddress class.
        # The parameter ip_address is a string that represents the IP address.
        self.ip_address = ip_address

    def is_valid(self):
        # This method checks if the IP address is valid based on the conditions: it should consist of 4 octets separated by dots, 
        # each octet should be a digit between 0 and 255.
        # It returns True if the IP address is valid and False otherwise.
        # Test cases:
        # >>> ip = IPAddress('192.168.0.1')
        # >>> ip.is_valid()
        # True
        # >>> ip = IPAddress('256.0.0.1')
        # >>> ip.is_valid()
        # False
        octets = self.ip_address.split('.')
        if len(octets) != 4:
            return False
        for octet in octets:
            if not octet.isdigit() or int(octet) < 0 or int(octet) > 255:
                return False
        return True

    def get_octets(self):
        # This method returns the octets of the IP address if it is valid. If the IP address is not valid, it returns an empty list.
        # Test cases:
        # >>> ip = IPAddress('192.168.0.1')
        # >>> ip.get_octets()
        # ['192', '168', '0', '1']
        # >>> ip = IPAddress('256.0.0.1')
        # >>> ip.get_octets()
        # []
        if self.is_valid():
            return self.ip_address.split('.')
        else:
            return []

    def get_binary(self):
        # This method returns the binary representation of each octet in the IP address if it is valid. If the IP address is not valid, it returns an empty string.
        # Test cases:
        # >>> ip = IPAddress('192.168.0.1')
        # >>> ip.get_binary()
        # '11000000.10101000.00000000.00000001'
        # >>> ip = IPAddress('256.0.0.1')
        # >>> ip.get_binary()
        # ''
        if self.is_valid():
            binary_octets = []
            for octet in self.get_octets():
                binary_octets.append(format(int(octet), '08b'))
            return '.'.join(binary_octets)
        else:
            return ''
```