```python
# This class is used to perform operations on a binary string such as cleaning non-binary characters, calculating binary information, and converting binary to ASCII or UTF-8.
class BinaryDataProcessor:
    # The constructor method for class BinaryDataProcessor 
    # binary_string: str, the binary string on which operations are to be performed
    def __init__(self, binary_string):
        self.binary_string = binary_string
        # Clean any non-binary characters from the binary string
        self.clean_non_binary_chars()

    # This method is used to clean non-binary characters from the binary string
    # >>> processor = BinaryDataProcessor("12301")
    # >>> processor.binary_string
    # "01"
    def clean_non_binary_chars(self):
        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))

    # This method is used to calculate the percentage of ones and zeros in the binary string and also calculate the total length of the string.
    # >>> processor = BinaryDataProcessor("11001")
    # >>> processor.calculate_binary_info()
    # {'Zeroes': 0.4, 'Ones': 0.6, 'Bit length': 5}
    def calculate_binary_info(self):
        zeroes_count = self.binary_string.count('0')
        ones_count = self.binary_string.count('1')
        total_length = len(self.binary_string)

        zeroes_percentage = (zeroes_count / total_length)
        ones_percentage = (ones_count / total_length)

        return {
            'Zeroes': zeroes_percentage,
            'Ones': ones_percentage,
            'Bit length': total_length
        }

    # This method is used to convert the binary string to ASCII.
    # >>> processor = BinaryDataProcessor("01100001")
    # >>> processor.convert_to_ascii()
    # 'a'
    def convert_to_ascii(self):
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('ascii')

    # This method is used to convert the binary string to UTF-8.
    # >>> processor = BinaryDataProcessor("01100001")
    # >>> processor.convert_to_utf8()
    # 'a'
    def convert_to_utf8(self):
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('utf-8')
```