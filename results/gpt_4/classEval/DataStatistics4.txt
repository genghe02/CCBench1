import math

# This class provides methods to calculate statistical properties of data including correlation coefficient, skewness, kurtosis, and pdf.

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        # This function calculates and returns the correlation coefficient of two sets of data.
        # :param data1: list, the first set of data
        # :param data2: list, the second set of data
        # :return: float, the correlation coefficient of data1 and data2. If denominator is zero, returns 0.
        # Test case: >>> DataStatistics4.correlation_coefficient([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) should return a value near to 1.
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0

    @staticmethod
    def skewness(data):
        # This function calculates and returns the skewness of a data set.
        # :param data: list, the data set
        # :return: float, the skewness of the data. If std_deviation is zero, returns 0.
        # Test case: >>> DataStatistics4.skewness([1, 2, 3, 4, 5]) should return a value near to 0 as the data is symmetric.
        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness

    @staticmethod
    def kurtosis(data):
        # This function calculates and returns the kurtosis of a data set.
        # :param data: list, the data set
        # :return: float, the kurtosis of the data. If std_dev is zero, returns math.nan.
        # Test case: >>> DataStatistics4.kurtosis([1, 2, 3, 4, 5]) should return a value near to -1.2 as the data is perfectly normal.
        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        # This function calculates and returns the probability density function (pdf) of a data set given mu and sigma.
        # :param data: list, the data set
        # :param mu: float, the mean of the data
        # :param sigma: float, the standard deviation of the data
        # :return: list, a list containing the pdf value for each data point.
        # Test case: >>> DataStatistics4.pdf([1, 2, 3, 4, 5], 3, 1) should return a list of pdf values for each data point.
        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values