```python
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

# This is a class for handling MS Word Document files using python-docx module 
class DocFileHandler:
    def __init__(self, file_path):
        # Constructor method to initialize the file_path
        # param file_path: str, the path to the document file
        self.file_path = file_path

    def read_text(self):
        # This function reads the text from the document file
        # return: str, the text content of the document
        doc = Document(self.file_path)
        text = []
        for paragraph in doc.paragraphs:
            text.append(paragraph.text)
        return "\n".join(text)

    def write_text(self, content, font_size=12, alignment='left'):
        # This function writes text to the document file with given font size and alignment
        # param content: str, the text to be written to the document
        # param font_size: int, the font size of the text
        # param alignment: str, the alignment of the text. It can be 'left', 'center' or 'right'
        # return: bool, True if the write operation is successful, False otherwise
        try:
            doc = Document()
            paragraph = doc.add_paragraph()
            run = paragraph.add_run(content)
            font = run.font
            font.size = Pt(font_size)
            alignment_value = self._get_alignment_value(alignment)
            paragraph.alignment = alignment_value
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_heading(self, heading, level=1):
        # This function adds a heading to the document file
        # param heading: str, the heading to be added
        # param level: int, the level of the heading
        # return: bool, True if the heading is added successfully, False otherwise
        try:
            doc = Document(self.file_path)
            doc.add_heading(heading, level)
            doc.save(self.file_path)
            return True
        except:
            return False

    def add_table(self, data):
        # This function adds a table to the document file
        # param data: list of lists, the data to be added in the table
        # return: bool, True if the table is added successfully, False otherwise
        try:
            doc = Document(self.file_path)
            table = doc.add_table(rows=len(data), cols=len(data[0]))
            for i, row in enumerate(data):
                for j, cell_value in enumerate(row):
                    table.cell(i, j).text = str(cell_value)
            doc.save(self.file_path)
            return True
        except:
            return False

    def _get_alignment_value(self, alignment):
        # This private function returns the alignment value corresponding to the alignment string
        # param alignment: str, the alignment of the text. It can be 'left', 'center' or 'right'
        # return: WD_PARAGRAPH_ALIGNMENT, the alignment value corresponding to the alignment string
        alignment_options = {
            'left': WD_PARAGRAPH_ALIGNMENT.LEFT,
            'center': WD_PARAGRAPH_ALIGNMENT.CENTER,
            'right': WD_PARAGRAPH_ALIGNMENT.RIGHT
        }
        return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)
```
