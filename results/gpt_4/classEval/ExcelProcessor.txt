```python
import openpyxl

# This class is used for processing Excel files. It includes reading, writing, and processing data from Excel files.
class ExcelProcessor:
    def __init__(self):
        pass

    def read_excel(self, file_name):
        # This function is used for reading data from an Excel file.
        # param file_name: str, the name of the Excel file to be read.
        # return: list of tuples, each tuple contains the data of a row in the Excel file. If an error occurs, return None.
        data = []
        try:
            workbook = openpyxl.load_workbook(file_name)
            sheet = workbook.active
            for row in sheet.iter_rows(values_only=True):
                data.append(row)
            workbook.close()
            return data
        except:
            return None

    def write_excel(self, data, file_name):
        # This function is used for writing data into an Excel file.
        # param data: list of tuples, each tuple contains the data of a row to be written into the Excel file.
        # param file_name: str, the name of the Excel file to be written.
        # return: int, 1 if the writing operation is successful, 0 otherwise.
        # Test case for the function: 
        # >>> excel_processor = ExcelProcessor()
        # >>> excel_processor.write_excel([(1, 2, 3), (4, 5, 6)], 'test.xlsx')
        try:
            workbook = openpyxl.Workbook()
            sheet = workbook.active
            for row in data:
                sheet.append(row)
            workbook.save(file_name)
            workbook.close()
            return 1
        except:
            return 0

    def process_excel_data(self, N, save_file_name):
        # This function is used for processing data in an Excel file.
        # The processing rule is to append the N-th column of each row to the end of the row. If the N-th column is not digit, convert it to uppercase. 
        # param N: int, the index of the column to be processed.
        # param save_file_name: str, the name of the Excel file to be processed.
        # return: tuple, the first element is 1 if the processing operation is successful, 0 otherwise. The second element is the name of the new Excel file.
        # Test case for the function: 
        # >>> excel_processor = ExcelProcessor()
        # >>> excel_processor.process_excel_data(1, 'test.xlsx')
        data = self.read_excel(save_file_name)
        if data is None or N >= len(data[0]):
            return 0
        new_data = []
        for row in data:
            new_row = list(row[:])
            if not str(row[N]).isdigit():
                new_row.append(str(row[N]).upper())
            else:
                new_row.append(row[N])
            new_data.append(new_row)
        new_file_name = save_file_name.split('.')[0] + '_process.xlsx'
        success = self.write_excel(new_data, new_file_name)
        return success, new_file_name
```