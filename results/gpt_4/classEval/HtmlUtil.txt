```python
import re
import string
import gensim
from bs4 import BeautifulSoup


class HtmlUtil:
    # This class contains methods for processing HTML text, including formatting line feeds, extracting code from HTML, and replacing HTML tags with specific marks.

    def __init__(self):
        # Initialize the class with specific marks for different types of text found in the HTML.
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        # This private method replaces multiple line breaks with a single one in the text.
        # param text: str, the text where linefeeds will be formatted.
        # return: str, the text after formatting linefeeds.
        return re.sub(re.compile(r'\n+'), '\n', text)

    def format_line_html_text(self, html_text):
        # This method formats the HTML text by replacing code, lists, and paragraphs with specific marks or formats.
        # param html_text: str, the HTML text to be formatted.
        # return: str, the formatted text.
        # Test Case:
        # >>> util = HtmlUtil()
        # >>> util.format_line_html_text("<p>This is a paragraph</p><pre>This is code</pre><ul><li>This is a list item</li></ul>")
        if html_text is None or len(html_text) == 0:
            return ''
        soup = BeautifulSoup(html_text, 'lxml')
        ...
        clean_text = gensim.utils.decode_htmlentities(soup.get_text())
        return self.__format_line_feed(clean_text)

    def extract_code_from_html_text(self, html_text):
        # This method extracts all code blocks from the HTML text and returns them as a list.
        # param html_text: str, the HTML text from which to extract code.
        # return: list, a list of all code blocks found in the HTML text.
        # Test Case:
        # >>> util = HtmlUtil()
        # >>> util.extract_code_from_html_text("<pre>This is code</pre><p>This is not code</p>")
        text_with_code_tag = self.format_line_html_text(html_text)
        ...
        return code_list
```