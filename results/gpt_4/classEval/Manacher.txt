```python
# This is a class for finding longest palindromic substring using Manacher's algorithm
class Manacher:
    def __init__(self, input_string) -> None:
        # The constructor of the Manacher class.
        # param input_string: str, the string in which we are searching for palindromes
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        # Recursive function to find the length of palindrome centered at a given index.
        # param center: int, the center of the palindrome
        # param diff: int, the difference between the center and the current character
        # param string: str, the string in which we are searching for palindromes
        # return: int, the length of the palindrome
        # test case: assert(self.palindromic_length(2, 1, "aba") == 1)
        # test case: assert(self.palindromic_length(3, 1, "abba") == 1)
        if (center - diff == -1 or center + diff == len(string)
                or string[center - diff] != string[center + diff]):
            return 0
        return 1 + self.palindromic_length(center, diff + 1, string)

    def palindromic_string(self):
        # Function to find the longest palindromic substring in the input string.
        # return: str, the longest palindromic substring
        # test case: assert(self.palindromic_string() == "aba") for input_string = "abaxxx"
        # test case: assert(self.palindromic_string() == "abba") for input_string = "abbayyy"
        max_length = 0

        new_input_string = ""
        output_string = ""

        for i in self.input_string[:len(self.input_string) - 1]:
            new_input_string += i + "|"
        new_input_string += self.input_string[-1]

        for i in range(len(new_input_string)):

            length =self.palindromic_length(i, 1, new_input_string)

            if max_length < length:
                max_length = length
                start = i

        for i in new_input_string[start - max_length:start + max_length + 1]:
            if i != "|":
                output_string += i

        return output_string
```