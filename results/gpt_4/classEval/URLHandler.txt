```python
# This class is used for parsing and extracting components from a URL.
class URLHandler:
    # This function initializes the URLHandler class with a URL.
    def __init__(self, url):
        self.url = url

    # This function extracts and returns the scheme component of the URL.
    # Returns the scheme part of the URL if it exists, otherwise returns None.
    # Test case: 
    # handler = URLHandler('http://www.example.com')
    # print(handler.get_scheme()) # Output: 'http'
    def get_scheme(self):
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            return self.url[:scheme_end]
        return None

    # This function extracts and returns the host component of the URL.
    # Returns the host part of the URL if it exists, otherwise returns None.
    # Test case: 
    # handler = URLHandler('http://www.example.com/path')
    # print(handler.get_host()) # Output: 'www.example.com'
    def get_host(self):
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[:host_end]
            return url_without_scheme
        return None

    # This function extracts and returns the path component of the URL.
    # Returns the path part of the URL if it exists, otherwise returns None.
    # Test case: 
    # handler = URLHandler('http://www.example.com/path')
    # print(handler.get_path()) # Output: '/path'
    def get_path(self):
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[host_end:]
        return None

    # This function extracts and returns the query parameters of the URL as a dictionary.
    # Returns the query parameters as a dictionary if they exist, otherwise returns None.
    # Test case: 
    # handler = URLHandler('http://www.example.com/path?param1=value1&param2=value2')
    # print(handler.get_query_params()) # Output: {'param1': 'value1', 'param2': 'value2'}
    def get_query_params(self):
        query_start = self.url.find("?")
        fragment_start = self.url.find("#")
        if query_start != -1:
            query_string = self.url[query_start + 1:fragment_start]
            params = {}
            if len(query_string) > 0:
                param_pairs = query_string.split("&")
                for pair in param_pairs:
                    key_value = pair.split("=")
                    if len(key_value) == 2:
                        key, value = key_value
                        params[key] = value
            return params
        return None

    # This function extracts and returns the fragment component of the URL.
    # Returns the fragment part of the URL if it exists, otherwise returns None.
    # Test case: 
    # handler = URLHandler('http://www.example.com/path#fragment')
    # print(handler.get_fragment()) # Output: 'fragment'
    def get_fragment(self):
        fragment_start = self.url.find("#")
        if fragment_start != -1:
            return self.url[fragment_start + 1:]
        return None
```