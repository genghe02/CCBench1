```python
# This class represents the game of Gomoku (also known as five in a row), including game board initialization, making moves, and checking for a winner.
class GomokuGame:
    # This function initializes the game, setting up an empty board of the given size and setting the current player to 'X'.
    # The board_size parameter sets the size of the game board.
    def __init__(self, board_size):
        self.board_size = board_size
        # Initialize an empty game board as a 2D list
        self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
        # 'X' is the starting player
        self.current_player = 'X'

    # This function updates the game board with the current player's move at the given row and column, and then switches to the other player.
    # The parameters row and col specify the location of the current player's move.
    # Returns True if the move was valid (i.e., the specified location was empty), False otherwise.
    # Test case: game = GomokuGame(5); game.make_move(0, 0); game.make_move(0, 1) -> True
    def make_move(self, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            return True
        return False

    # This function checks if there is a winner in the game, i.e., if there are five consecutive same symbols in any direction.
    # Returns the symbol of the winner if there is one, None otherwise.
    # Test case: game = GomokuGame(5); for i in range(5): game.make_move(0, i); -> 'X'
    def check_winner(self):
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col] != ' ':
                    for direction in directions:
                        if self._check_five_in_a_row(row, col, direction):
                            return self.board[row][col]
        return None

    # This helper function checks if there are five consecutive symbols in the given direction starting at the given row and column.
    # The parameters row, col, and direction specify the starting location and direction of the check.
    # Returns True if there are five consecutive identical symbols, False otherwise.
    # Test case: game = GomokuGame(5); for i in range(5): game.make_move(i, i); game._check_five_in_a_row(0, 0, (1, 1)) -> True
    def _check_five_in_a_row(self, row, col, direction):
        dx, dy = direction
        count = 1
        symbol = self.board[row][col]
        for i in range(1, 5):
            new_row = row + dx * i
            new_col = col + dy * i
            if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
                return False
            if self.board[new_row][new_col] != symbol:
                return False
            count += 1
        return count == 5
```