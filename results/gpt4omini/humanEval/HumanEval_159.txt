```python
def eat(number, need, remaining):
    # This function simulates consuming a certain amount of resources based on the need and available remaining resources.
    # If enough resources are available, it consumes the requested amount; otherwise, it consumes whatever is left.
    
    # :param number: int, the current amount of resources consumed
    # :param need: int, the amount of resources needed to consume
    # :param remaining: int, the amount of resources that are still available to be consumed
    
    # :return: list, the updated amount of resources consumed and the remaining resources after consumption
    
    # Test cases for the function
    # >>> eat(5, 3, 10)  # should return [8, 7] as it consumes 3, resulting in 8 consumed and 7 remaining
    # >>> eat(2, 5, 2)   # should return [7, 0] as it consumes all remaining resources
    # >>> eat(0, 10, 5)  # should return [5, 0] as it consumes all remaining resources
    # >>> eat(4, 0, 5)   # should return [4, 5] as nothing is needed, remaining is unchanged
    # >>> eat(3, 2, 1)   # should return [4, 0] as it can only consume what is remaining
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0 ]
```