```python
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    # Parse a string of nested parentheses and return a list of integers representing the maximum depth of nested parentheses for each group in the string.
    
    # Example test cases for the function:
    # Test with a simple case of nested parentheses:
    # >>> parse_nested_parens("(()) () (()())")
    # Expected output: [2, 0, 3]
    
    # Test with no parentheses:
    # >>> parse_nested_parens("")
    # Expected output: []
    
    # Test with mismatched parentheses:
    # >>> parse_nested_parens("(()(")
    # Expected output: [2]
    
    # Test with multiple unmatched groups:
    # >>> parse_nested_parens(")(()()())()")
    # Expected output: [0, 2, 0]
    
    def parse_paren_group(s):
        # Calculate the maximum depth of nested parentheses in the given string
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
```