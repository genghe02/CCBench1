```python
def is_simple_power(x, n):
    # Check if x is a perfect power of n, where n is a positive integer.
    # The function evaluates if there exists an integer k such that n^k = x.
    # The function has two main conditions: if n equals 1, it checks if x equals 1.
    # If n is greater than 1, it iteratively multiplies n to check if it equals x.
    
    # Test cases:
    # >>> is_simple_power(8, 2)  # True, since 2^3 = 8
    # >>> is_simple_power(9, 3)  # True, since 3^2 = 9
    # >>> is_simple_power(10, 2)  # False, not a power of 2
    # >>> is_simple_power(1, 1)   # True, as any number to the power of 0 is 1
    # >>> is_simple_power(1, 2)   # True, as 2^0 is also 1
    # >>> is_simple_power(36, 6)  # False, not a power of 6
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
```