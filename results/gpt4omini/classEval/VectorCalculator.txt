```python
import numpy as np
from gensim import matutils
from numpy import dot, array

# This is a utility class for handling vector operations including similarity calculations.
class VectorUtil:
    @staticmethod
    def similarity(vector_1, vector_2):
        # Compute the cosine similarity between two vectors.
        # param vector_1: array-like, the first input vector.
        # param vector_2: array-like, the second input vector.
        # return: float, the cosine similarity value ranging from -1 to 1.
        # >>> VectorUtil.similarity(np.array([1, 0]), np.array([0, 1]))  # returns 0.0
        # >>> VectorUtil.similarity(np.array([1, 0]), np.array([1, 0]))  # returns 1.0
        return dot(matutils.unitvec(vector_1), matutils.unitvec(vector_2))

    @staticmethod
    def cosine_similarities(vector_1, vectors_all):
        # Calculate cosine similarities between a single vector and a list of vectors.
        # param vector_1: array-like, the reference vector for comparison.
        # param vectors_all: array-like, a matrix of vectors to compare against.
        # return: array, an array of cosine similarity values.
        # >>> VectorUtil.cosine_similarities(np.array([1, 0]), np.array([[1, 0], [0, 1]]))  # returns array([1.0, 0.0])
        norm = np.linalg.norm(vector_1)
        all_norms = np.linalg.norm(vectors_all, axis=1)
        dot_products = dot(vectors_all, vector_1)
        similarities = dot_products / (norm * all_norms)
        return similarities

    @staticmethod
    def n_similarity(vector_list_1, vector_list_2):
        # Compute the similarity based on the average of two lists of vectors.
        # param vector_list_1: list of array-like, first list of vectors.
        # param vector_list_2: list of array-like, second list of vectors.
        # return: float, the computed similarity value.
        # >>> VectorUtil.n_similarity([np.array([1, 2]), np.array([2, 3])], [np.array([1, 1]), np.array([1, 1])])  # returns a similarity score
        if not (len(vector_list_1) and len(vector_list_2)):
            raise ZeroDivisionError('At least one of the passed list is empty.')

        return dot(matutils.unitvec(array(vector_list_1).mean(axis=0)),
                   matutils.unitvec(array(vector_list_2).mean(axis=0)))

    @staticmethod
    def compute_idf_weight_dict(total_num, number_dict):
        # Calculate the Inverse Document Frequency (IDF) weights for a dictionary of term frequencies.
        # param total_num: int, the total number of documents.
        # param number_dict: dict, a dictionary with terms as keys and their document frequency as values.
        # return: dict, a dictionary of terms and their corresponding IDF weights.
        # >>> VectorUtil.compute_idf_weight_dict(10, {'term1': 2, 'term2': 5})  # returns a dict with IDF values
        index_2_key_map = {}

        index = 0

        count_list = []
        for key, count in number_dict.items():
            index_2_key_map[index] = key
            count_list.append(count)
            index = index + 1

        a = np.array(count_list)
        ## smooth, in case the divide by zero error
        a = np.log((total_num + 1) / (a + 1))
        result = {}

        for index, w in enumerate(a):
            key = index_2_key_map[index]
            result[key] = w

        return result
```