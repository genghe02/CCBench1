```python
import sqlite3

# This is a class for managing books in a SQLite database including adding, removing, borrowing, returning books, and searching for all books.
class BookManagementDB:
    def __init__(self, db_name):
        # Initialize the database connection and create the books table if it doesn't exist.
        # param db_name: str, the name of the database file to connect to.
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        # Create the books table with specified columns if it does not already exist.
        # Test case: Ensure the table is created only once and there are no duplicate tables in the database.
        self.cursor.execute('''    
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY,
                title TEXT,
                author TEXT,
                available INTEGER
            )
        ''')
        self.connection.commit()

    def add_book(self, title, author):
        # Insert a new book into the database with the given title and author and set it as available.
        # param title: str, the title of the book to be added.
        # param author: str, the author of the book to be added.
        # Test case: Add a book and verify that it appears in the database with the correct details.
        self.cursor.execute('''    
            INSERT INTO books (title, author, available)
            VALUES (?, ?, 1)
        ''', (title, author))
        self.connection.commit()

    def remove_book(self, book_id):
        # Remove a book from the database by its ID.
        # param book_id: int, the ID of the book to be removed.
        # Test case: Remove a book and verify that it no longer exists in the database.
        self.cursor.execute('''    
            DELETE FROM books WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def borrow_book(self, book_id):
        # Mark a book as borrowed by setting its availability to 0.
        # param book_id: int, the ID of the book to be borrowed.
        # Test case: Borrow a book and check that its available status changes to 0.
        self.cursor.execute('''    
            UPDATE books SET available = 0 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def return_book(self, book_id):
        # Mark a book as returned by setting its availability back to 1.
        # param book_id: int, the ID of the book to be returned.
        # Test case: Return a book and check that its available status reverts back to 1.
        self.cursor.execute('''    
            UPDATE books SET available = 1 WHERE id = ?
        ''', (book_id,))
        self.connection.commit()

    def search_books(self):
        # Retrieve all books from the database.
        # return: list of tuples, each tuple contains the details of a book (id, title, author, available).
        # Test case: Fetch all books and ensure the number of records matches expectations.
        self.cursor.execute('''    
            SELECT * FROM books
        ''')
        books = self.cursor.fetchall()
        return books
```