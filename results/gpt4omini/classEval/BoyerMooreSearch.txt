```python
class BoyerMooreSearch:
    # This class implements the Boyer-Moore string searching algorithm to find all occurrences of a pattern in a given text.
    def __init__(self, text, pattern):
        # Initialize the Boyer-Moore search with the text and pattern to search for.
        # param text: str, the text in which to search for the pattern
        # param pattern: str, the pattern to search for within the text
        self.text, self.pattern = text, pattern
        self.textLen, self.patLen = len(text), len(pattern)

    def match_in_pattern(self, char):
        # Check for a match of a character in the pattern starting from the end.
        # param char: str, the character to match in the pattern
        # return: int, index of the character in the pattern if found, else -1
        # some test cases for the function
        # >>> bm = BoyerMooreSearch("abcde", "cd")
        # >>> bm.match_in_pattern("c")
        # 0
        # >>> bm.match_in_pattern("e")
        # -1
        for i in range(self.patLen - 1, -1, -1):
            if char == self.pattern[i]:
                return i
        return -1

    def mismatch_in_text(self, currentPos):
        # Determine the position of the first mismatch between the pattern and the text.
        # param currentPos: int, the current position in the text being checked against the pattern
        # return: int, the index of the mismatch in the text if found, else -1
        # some test cases for the function
        # >>> bm = BoyerMooreSearch("abcde", "cd")
        # >>> bm.mismatch_in_text(1)
        # 3
        # >>> bm.mismatch_in_text(0)
        # -1
        for i in range(self.patLen - 1, -1, -1):
            if self.pattern[i] != self.text[currentPos + i]:
                return currentPos + i
        return -1

    def bad_character_heuristic(self):
        # Apply the bad character heuristic to find all starting positions of the pattern in the text.
        # return: list, a list of starting indices where the pattern occurs in the text
        # some test cases for the function
        # >>> bm = BoyerMooreSearch("ababcaabc", "abc")
        # >>> bm.bad_character_heuristic()
        # [5]
        # >>> bm = BoyerMooreSearch("abcabc", "abc")
        # >>> bm.bad_character_heuristic()
        # [0, 3]
        positions = []
        for i in range(self.textLen - self.patLen + 1):
            mismatch_index = self.mismatch_in_text(i)
            if mismatch_index == -1:
                positions.append(i)
            else:
                match_index = self.match_in_pattern(self.text[mismatch_index])
                i = (mismatch_index - match_index)
        return positions
```