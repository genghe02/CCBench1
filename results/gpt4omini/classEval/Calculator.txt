```python
class Calculator:
    # This class provides methods to evaluate mathematical expressions using basic operators.

    def __init__(self):
        # Initializes the calculator with a dictionary of operators and their corresponding lambda functions for computation.
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y,
            '^': lambda x, y: x ** y
        }

    def calculate(self, expression):
        # Evaluates the given mathematical expression and returns the result.
        # param expression: str, the mathematical expression to evaluate
        # return: float or None, the result of the evaluated expression, or None if there's nothing to evaluate
        # Test cases:
        # >>> calc = Calculator()
        # >>> calc.calculate('3 + 5')
        # 8.0
        # >>> calc.calculate('10 + 2 * 6')
        # 22.0
        # >>> calc.calculate('100 * 2 + 12')
        # 212.0
        # >>> calc.calculate('100 * (2 + 12)')
        # 1400.0
        # >>> calc.calculate('100 * (2 + 12) / 14')
        # 100.0
        operand_stack = []
        operator_stack = []
        num_buffer = ''

        for char in expression:
            if char.isdigit() or char == '.':
                num_buffer += char
            else:
                if num_buffer:
                    operand_stack.append(float(num_buffer))
                    num_buffer = ''

                if char in '+-*/^':
                    while (
                            operator_stack and
                            operator_stack[-1] != '(' and
                            self.precedence(operator_stack[-1]) >= self.precedence(char)
                    ):
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.append(char)
                elif char == '(':
                    operator_stack.append(char)
                elif char == ')':
                    while operator_stack and operator_stack[-1] != '(':
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.pop()

        if num_buffer:
            operand_stack.append(float(num_buffer))

        while operator_stack:
            operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

        return operand_stack[-1] if operand_stack else None

    def precedence(self, operator):
        # Returns the precedence level of a given operator.
        # param operator: str, the mathematical operator for which to determine precedence
        # return: int, the precedence level of the operator (higher number means higher precedence)
        # Test cases:
        # >>> calc = Calculator()
        # >>> calc.precedence('+')
        # 1
        # >>> calc.precedence('*')
        # 2
        # >>> calc.precedence('^')
        # 3
        # >>> calc.precedence('/')
        # 2
        precedences = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2,
            '^': 3
        }
        return precedences.get(operator, 0)

    def apply_operator(self, operand_stack, operator_stack):
        # Applies the operation defined by the operator at the top of the operator stack to the two operands at the top of the operand stack.
        # param operand_stack: list, stack of operands for calculations
        # param operator_stack: list, stack of operators for calculations
        # return: tuple (list, list), updated operand stack and operator stack after applying the operator
        # Test cases:
        # >>> calc = Calculator()
        # >>> stack = [3, 4]
        # >>> ops = ['+']
        # >>> calc.apply_operator(stack, ops)
        # ([7], [])
        operator = operator_stack.pop()
        if operator == '^':
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        else:
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        return operand_stack, operator_stack
```