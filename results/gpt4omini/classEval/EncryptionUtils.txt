```python
class EncryptionUtils:
    # This class provides various encryption algorithms including Caesar cipher, Vigenère cipher, and Rail Fence cipher.
    def __init__(self, key):
        # Initialize the EncryptionUtils class with a specific encryption key.
        # param key: str, the key used for the encryption algorithms
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        # Encrypt the given plaintext using the Caesar cipher algorithm with a specified shift.
        # param plaintext: str, the text to be encrypted
        # param shift: int, the number of positions to shift each letter in the plaintext
        # return: str, the resulting ciphertext after applying the Caesar cipher
        # >>> utils = EncryptionUtils("key")
        # >>> utils.caesar_cipher("Hello, World!", 3)  # Expected output: "Khoor, Zruog!"
        # >>> utils.caesar_cipher("abc XYZ", 1)        # Expected output: "bcd YZA"

        ciphertext = ""
        for char in plaintext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
                ciphertext += shifted_char
            else:
                ciphertext += char
        return ciphertext
    
    def vigenere_cipher(self, plain_text):
        # Encrypt the given plaintext using the Vigenère cipher algorithm with the initialized key.
        # param plain_text: str, the text to be encrypted
        # return: str, the resulting ciphertext after applying the Vigenère cipher
        # >>> utils = EncryptionUtils("KEY")
        # >>> utils.vigenere_cipher("ATTACK AT DAWN")  # Expected output: "KSWEPZ YF JDHOB"
        # >>> utils.vigenere_cipher("Hello, World!")   # Expected output: based on the key

        encrypted_text = ""
        key_index = 0
        for char in plain_text:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
                key_index += 1
            else:
                encrypted_text += char
        return encrypted_text

    def rail_fence_cipher(self, plain_text, rails):
        # Encrypt the given plaintext using the Rail Fence cipher algorithm with a specified number of rails.
        # param plain_text: str, the text to be encrypted
        # param rails: int, the number of rails to use in the Rail Fence cipher
        # return: str, the resulting ciphertext after applying the Rail Fence cipher
        # >>> utils = EncryptionUtils("key")
        # >>> utils.rail_fence_cipher("HELLO WORLD", 3)  # Expected output rearranged according to the Rail Fence pattern
        # >>> utils.rail_fence_cipher("This is a test.", 2)  # Expected output rearranged for 2 rails

        fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for char in plain_text:
            if row == 0 or row == rails-1:
                direction = -direction

            fence[row][col] = char
            col += 1
            row += direction

        encrypted_text = ''
        for i in range(rails):
            for j in range(len(plain_text)):
                if fence[i][j] != '\n':
                    encrypted_text += fence[i][j]

        return encrypted_text
```