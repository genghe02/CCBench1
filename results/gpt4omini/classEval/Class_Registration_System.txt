```python
# This is a class for managing student registrations and class enrollment in a class registration system.
class ClassRegistrationSystem:

    def __init__(self):
        # Initialize the list of registered students and a dictionary to store the classes each student is registered in.
        self.students = []
        self.students_registration_classes = {}

    def register_student(self, student):
        # Register a student in the system if they are not already registered.
        if student in self.students:
            return 0  # Return 0 if the student is already registered.
        else:
            self.students.append(student)  # Add the student to the registered list.
            return 1  # Return 1 indicating successful registration.

    def register_class(self, student_name, class_name):
        # Register a class for a specific student.
        # :param student_name: str, the name of the student to register for the class
        # :param class_name: str, the name of the class to be registered
        # :return: list, the updated list of classes the student is registered in
        # >>> crs = ClassRegistrationSystem()
        # >>> crs.register_student('Alice')
        # >>> crs.register_class('Alice', 'Math')
        # >>> crs.students_registration_classes
        # {'Alice': ['Math']}
        if student_name in self.students_registration_classes:
            self.students_registration_classes[student_name].append(class_name)  # Append class if student already exists.
        else:
            self.students_registration_classes[student_name] = [class_name]  # Create a new entry for the student.
        return self.students_registration_classes[student_name]  # Return the updated list of classes for the student.

    def get_students_by_major(self, major):
        # Retrieve a list of student names who are registered under a specific major.
        # :param major: str, the major to filter students by
        # :return: list, a list of student names who have the specified major
        # >>> crs = ClassRegistrationSystem()
        # >>> crs.register_student({'name': 'Alice', 'major': 'Math'})
        # >>> crs.get_students_by_major('Math')
        # ['Alice']
        student_list = []
        for student in self.students:
            if student["major"] == major:
                student_list.append(student["name"])  # Add student's name if they match the major.
        return student_list

    def get_all_major(self):
        # Get a list of all unique majors from registered students.
        # :return: list, a list of unique majors
        # >>> crs = ClassRegistrationSystem()
        # >>> crs.register_student({'name': 'Alice', 'major': 'Math'})
        # >>> crs.register_student({'name': 'Bob', 'major': 'Science'})
        # >>> crs.get_all_major()
        # ['Math', 'Science']
        major_list = []
        for student in self.students:
            if student["major"] not in major_list:
                major_list.append(student["major"])  # Only add unique majors.
        return major_list

    def get_most_popular_class_in_major(self, major):
        # Determine the most popular class among students of a specific major.
        # :param major: str, the major to filter students by
        # :return: str, the name of the most popular class for the specified major
        # >>> crs = ClassRegistrationSystem()
        # >>> crs.register_student({'name': 'Alice', 'major': 'Math'})
        # >>> crs.register_class('Alice', 'Calculus')
        # >>> crs.register_student({'name': 'Bob', 'major': 'Math'})
        # >>> crs.register_class('Bob', 'Calculus')
        # >>> crs.register_class('Bob', 'Algebra')
        # >>> crs.get_most_popular_class_in_major('Math')
        # 'Calculus'
        class_list = []
        for student in self.students:
            if student["major"] == major:
                class_list += self.students_registration_classes[student["name"]]  # Collect all classes for matching major students.
        most_popular_class = max(set(class_list), key=class_list.count)  # Find the class that appears most frequently.
        return most_popular_class
```