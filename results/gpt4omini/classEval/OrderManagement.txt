```python
# This is a class that represents an order management system, handling menu items, selected dishes and sales calculations.
class Order:

    def __init__(self):
        # Initialize an empty menu and selected dishes for the order.
        self.menu = []
        # menu = [{"dish": dish name, "price": price, "count": count}, ...]
        self.selected_dishes = []
        # selected_dish = {"dish": dish name, "count": count, price: price}
        self.sales = {}
        # sales = {"dish": sales factor, ...} to manage how many times each dish is sold.

    def add_dish(self, dish):
        # Adds a specified dish to the order if it is available in the menu with enough quantity.
        # param dish: dict, contains information about the dish including name and count to be added.
        # return: bool, True if the dish was added successfully, False otherwise.
        # Test cases:
        # 1. Assuming `dish` is available and count is available, it should return True.
        # 2. If `dish` count exceeds available count, it should return False.

        for menu_dish in self.menu:
            if dish["dish"] == menu_dish["dish"]:
                if menu_dish["count"] < dish["count"]:
                    return False
                else:
                    menu_dish["count"] -= dish["count"]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        # Calculates the total price of the selected dishes in the order.
        # return: float, the total price of all selected dishes.
        # Test cases:
        # 1. If there are selected dishes, it should return the correct total price.
        # 2. If there are no selected dishes, it should return 0.

        total = 0
        for dish in self.selected_dishes:
            total += dish["price"] * dish["count"] * self.sales[dish["dish"]]
        return total

    def checkout(self):
        # Finalizes the order by calculating the total and resetting selected dishes.
        # return: float/bool, returns total amount if there are selected dishes, False otherwise.
        # Test cases:
        # 1. If selected dishes are empty, it should return False.
        # 2. If selected dishes exist, it should return the total amount and reset the selections.

        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total
```