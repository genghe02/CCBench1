```python
import math

# This class provides methods for statistical data analysis including correlation coefficient, skewness, kurtosis, and probability density function.
class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        # Calculate the Pearson correlation coefficient between two datasets.
        # param data1: list of numerical values, first dataset for correlation
        # param data2: list of numerical values, second dataset for correlation
        # return: float, the correlation coefficient value ranging from -1 to 1
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [4, 5, 6])  # Returns: 1.0 (perfect positive correlation)
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [6, 5, 4])  # Returns: -1.0 (perfect negative correlation)
        # >>> DataStatistics4.correlation_coefficient([1, 2, 3], [1, 2, 3])  # Returns: 1.0 (perfect positive correlation, same data)

        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0
    
    @staticmethod
    def skewness(data):
        # Calculate the skewness of a dataset to assess the asymmetry of the distribution.
        # param data: list of numerical values, the dataset to analyze for skewness
        # return: float, the skewness value indicating the symmetry of the data
        # >>> DataStatistics4.skewness([1, 2, 2, 3, 4])  # Returns: approximately 0.0 (symmetrical)
        # >>> DataStatistics4.skewness([1, 1, 2, 3, 4])  # Returns: positive value (right skewed)
        # >>> DataStatistics4.skewness([4, 3, 2, 1, 1])  # Returns: negative value (left skewed)

        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness
    
    @staticmethod
    def kurtosis(data):
        # Calculate the kurtosis of a dataset to assess the "tailedness" of the distribution.
        # param data: list of numerical values, the dataset to analyze for kurtosis
        # return: float, the kurtosis value indicating the shape of the tails of the distribution
        # >>> DataStatistics4.kurtosis([1, 2, 2, 3, 4])  # Returns: approximately 0.0 (normal kurtosis)
        # >>> DataStatistics4.kurtosis([1, 1, 2, 3, 4])  # Returns: positive value (leptokurtic)
        # >>> DataStatistics4.kurtosis([4, 3, 2, 1, 1])  # Returns: negative value (platykurtic)

        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        # Calculate the probability density function (PDF) values for a given dataset following a normal distribution.
        # param data: list of numerical values, the dataset to calculate PDF for
        # param mu: float, mean of the normal distribution
        # param sigma: float, standard deviation of the normal distribution
        # return: list of float, the computed PDF values corresponding to each data point
        # >>> DataStatistics4.pdf([1, 2, 3], 2, 1)  # Returns: list of PDF values for a normal distribution with mean 2 and std dev 1

        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values
```