```python
class Server:
    # This is a class for managing a server with whitelisted addresses for sending and receiving messages.

    def __init__(self):
        # Initializes the Server instance with an empty whitelist and structures for sending and receiving data.
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        # Adds an address to the whitelist.
        # param addr: str, the address to be added to the whitelist.
        # return: bool, True if the address was added successfully, False if it was already in the whitelist.
        # Test cases:
        # >>> server = Server()
        # >>> server.add_white_list('192.168.1.1')
        # True
        # >>> server.add_white_list('192.168.1.1')
        # False
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        # Removes an address from the whitelist.
        # param addr: str, the address to be removed from the whitelist.
        # return: bool, True if the address was removed successfully, False if it was not found in the whitelist.
        # Test cases:
        # >>> server = Server()
        # >>> server.add_white_list('192.168.1.1')
        # True
        # >>> server.del_white_list('192.168.1.1')
        # True
        # >>> server.del_white_list('192.168.1.1')
        # False
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        # Receives data if the address is in the whitelist.
        # param info: dict, a dictionary containing "addr" and "content" keys.
        # return: the content associated with the address if allowed, -1 if input structure is incorrect, False if address is not whitelisted.
        # Test cases:
        # >>> server = Server()
        # >>> server.add_white_list('192.168.1.1')
        # >>> server.recv({'addr': '192.168.1.1', 'content': 'Hello'})
        # 'Hello'
        # >>> server.recv({'addr': '192.168.1.2', 'content': 'Hello'})
        # False
        # >>> server.recv('invalid_input')
        # -1
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return -1
        addr = info["addr"]
        content = info["content"]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {"addr": addr, "content": content}
            return self.receive_struct["content"]

    def send(self, info):
        # Sends data from the server.
        # param info: dict, a dictionary containing "addr" and "content" keys.
        # return: str, a message indicating if the information structure is correct.
        # Test cases:
        # >>> server = Server()
        # >>> server.send({'addr': '192.168.1.1', 'content': 'Hello'})
        # 'info structure is not correct' (if addr is not in white list)
        # >>> server.add_white_list('192.168.1.1')
        # >>> server.send({'addr': '192.168.1.1', 'content': 'Hello'})
        # None
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return "info structure is not correct"
        self.send_struct = {"addr": info["addr"], "content": info["content"]}

    def show(self, type):
        # Displays the sent or received structure based on the type provided.
        # param type: str, indicates which structure to show, either "send" or "receive".
        # return: dict, the structure corresponding to the specified type, or False if neither type is specified.
        # Test cases:
        # >>> server = Server()
        # >>> server.add_white_list('192.168.1.1')
        # >>> server.send({'addr': '192.168.1.1', 'content': 'Hello'})
        # >>> server.show('send')
        # {'addr': '192.168.1.1', 'content': 'Hello'}
        # >>> server.show('receive')
        # False
        if type == "send":
            return self.send_struct
        elif type == "receive":
            return self.receive_struct
        else:
            return False
```