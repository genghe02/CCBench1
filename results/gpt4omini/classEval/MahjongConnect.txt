```python
import random

# This class represents the Mahjong Connect game mechanics, including board initialization and moves.
class MahjongConnect:
    def __init__(self, BOARD_SIZE, ICONS):
        # Initialize the game board and icons
        # param BOARD_SIZE: tuple, the dimensions of the board (rows, columns)
        # param ICONS: list, the available icons to place on the board
        # >>> game = MahjongConnect((4, 4), ['A', 'B', 'C', 'D'])
        # >>> game.board  # Should print a 4x4 board with random icons
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def create_board(self):
        # Create a board filled with random icons for the Mahjong game
        # return: list, the generated game board as a 2D array
        # >>> board = game.create_board()  
        # >>> len(board)  # Should equal BOARD_SIZE[0]
        # >>> len(board[0])  # Should equal BOARD_SIZE[1]
        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
        return board

    def is_valid_move(self, pos1, pos2):
        # Check if the selected move between two positions is valid
        # param pos1: tuple, the coordinates of the first position (x1, y1)
        # param pos2: tuple, the coordinates of the second position (x2, y2)
        # return: bool, True if the move is valid, False otherwise
        # >>> game.is_valid_move((0, 0), (1, 1))  # Example move
        # >>> game.is_valid_move((0, 0), (0, 0))  # Same position, should return False
        x1, y1 = pos1
        x2, y2 = pos2

        # Check if positions are within the game board range
        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[0] and 0 <= y2 < self.BOARD_SIZE[1]):
            return False

        # Check if the two positions are the same
        if pos1 == pos2:
            return False

        # Check if the two positions have the same icon
        if self.board[x1][y1] != self.board[x2][y2]:
            return False

        # Check if there is a valid path between the two positions
        if not self.has_path(pos1, pos2):
            return False

        return True

    def has_path(self, pos1, pos2):
        # Determine if there is a valid path between two positions on the board
        # param pos1: tuple, the coordinates of the first position
        # param pos2: tuple, the coordinates of the second position
        # return: bool, True if a path exists, False otherwise
        # >>> game.has_path((0, 0), (1, 1))  # Example positions
        # >>> game.has_path((0, 0), (2, 2))  # Check for valid path
        visited = set()
        stack = [pos1]

        while stack:
            current_pos = stack.pop()
            if current_pos == pos2:
                return True

            if current_pos in visited:
                continue

            visited.add(current_pos)
            x, y = current_pos

            # Check adjacent positions (up, down, left, right)
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
                        stack.append((new_x, new_y))

        return False

    def remove_icons(self, pos1, pos2):
        # Remove icons from the board at the specified positions
        # param pos1: tuple, the coordinates of the first position to clear
        # param pos2: tuple, the coordinates of the second position to clear
        # >>> game.remove_icons((0, 0), (0, 1))  # Should clear icons at those positions
        x1, y1 = pos1
        x2, y2 = pos2
        self.board[x1][y1] = ' '
        self.board[x2][y2] = ' '

    def is_game_over(self):
        # Check if the game is over, meaning there are no icons left on the board
        # return: bool, True if the game is over, False otherwise
        # >>> game.is_game_over()  # Check if all icons are removed
        for row in self.board:
            if any(icon != ' ' for icon in row):
                return False
        return True
```