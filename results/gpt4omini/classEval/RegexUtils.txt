```python
import re

# This is a utility class that provides various regex operations such as matching, finding all occurrences, splitting text, and pattern generation.
class RegexUtils:

    def match(self, pattern, text):
        # Check if the given text matches the provided regex pattern.
        # param pattern: str, the regex pattern to match against
        # param text: str, the text to be checked for the pattern
        # return: bool, True if the text matches the pattern, False otherwise
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.match(r'^\d{3}$', '123')
        # True
        # >>> regex_utils.match(r'^\d{3}$', '1234')
        # False
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        # Find all occurrences of the regex pattern in the given text.
        # param pattern: str, the regex pattern to search for
        # param text: str, the text to search within
        # return: list, a list of all matches found in the text
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.findall(r'\d+', 'There are 2 apples and 3 oranges.')
        # ['2', '3']
        return re.findall(pattern, text)

    def split(self, pattern, text):
        # Split the given text using the provided regex pattern as the delimiter.
        # param pattern: str, the regex pattern to use for splitting
        # param text: str, the text to be split
        # return: list, a list of substrings obtained by splitting the text
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.split(r'\s+', 'Split this      string into words.')
        # ['Split', 'this', 'string', 'into', 'words.']
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        # Replace occurrences of the regex pattern in the text with the provided replacement.
        # param pattern: str, the regex pattern to search for
        # param replacement: str, the text to replace each match with
        # param text: str, the original text to be modified
        # return: str, the modified text with replacements made
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.sub(r'apples?', 'fruit', 'There are 2 apples and 3 oranges.')
        # 'There are 2 fruit and 3 oranges.'
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        # Generate a regex pattern for validating email addresses.
        # return: str, the regex pattern for email validation
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_email_pattern()
        # '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        # Generate a regex pattern for validating phone numbers in the format XXX-XXX-XXXX.
        # return: str, the regex pattern for phone number validation
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_phone_number_pattern()
        # '\\b\\d{3}-\\d{3}-\\d{4}\\b'
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        # Generate a regex pattern for splitting text into sentences.
        # return: str, the regex pattern for splitting sentences
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.generate_split_sentences_pattern()
        # '[.!?][\\s]{1,2}(?=[A-Z])'
        pattern = r'[.!?][\\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        # Split the given text into sentences based on punctuation marks.
        # param text: str, the text to be split into sentences
        # return: list, a list of sentences obtained from the text
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.split_sentences('Hello world! This is a test. Split me.')
        # ['Hello world!', 'This is a test.', 'Split me.']
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        # Validate if the provided phone number matches the expected format.
        # param phone_number: str, the phone number to validate
        # return: bool, True if the phone number matches the pattern, False otherwise
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.validate_phone_number('123-456-7890')
        # True
        # >>> regex_utils.validate_phone_number('123-4567-890')
        # False
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        # Extract all email addresses from the given text using regex.
        # param text: str, the text to search for email addresses
        # return: list, a list of extracted email addresses
        # >>> regex_utils = RegexUtils()
        # >>> regex_utils.extract_email('Contact us at info@example.com and support@example.org.')
        # ['info@example.com', 'support@example.org']
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)
```