```python
import json
import os

# This class provides methods for reading, writing, and processing JSON data from files.
class JSONProcessor:
    def read_json(self, file_path):
        # Read a JSON file and return its content as a dictionary.
        # param file_path: str, the path to the JSON file to be read.
        # return: dict or int, the parsed JSON data if successful; 0 if the file does not exist; -1 if an error occurs.
        # >>> processor = JSONProcessor()
        # >>> processor.read_json('existing_file.json')  # returns the JSON data
        # >>> processor.read_json('non_existent_file.json')  # returns 0
        # >>> processor.read_json('invalid_json_file.json')  # returns -1
        if not os.path.exists(file_path):
            return 0
        try:
            with open(file_path, 'r') as file:
                data = json.load(file)
            return data
        except:
            return -1

    def write_json(self, data, file_path):
        # Write a dictionary to a JSON file.
        # param data: dict, the data to be written to the JSON file.
        # param file_path: str, the path where the JSON file will be written.
        # return: int, 1 if the write operation was successful; -1 if an error occurs.
        # >>> processor = JSONProcessor()
        # >>> processor.write_json({'key': 'value'}, 'output.json')  # returns 1
        # >>> processor.write_json({'key': 'value'}, 'readonly_file.json')  # returns -1
        try:
            with open(file_path, 'w') as file:
                json.dump(data, file)
            return 1
        except:
            return -1

    def process_json(self, file_path, remove_key):
        # Process a JSON file by removing a specified key from its content.
        # param file_path: str, the path to the JSON file that needs to be processed.
        # param remove_key: str, the key that should be removed from the JSON data.
        # return: int, 1 if the key was removed successfully; 0 if the file does not exist, the key was not found, or an error occurs.
        # >>> processor = JSONProcessor()
        # >>> processor.process_json('existing_file.json', 'key_to_remove')  # returns 1 if key was removed
        # >>> processor.process_json('non_existent_file.json', 'key_to_remove')  # returns 0
        # >>> processor.process_json('existing_file.json', 'non_existing_key')  # returns 0
        data = self.read_json(file_path)
        if data == 0 or data == -1:
            return 0
        if remove_key in data:
            del data[remove_key]
            self.write_json(data, file_path)
            return 1
        else:
            return 0
```