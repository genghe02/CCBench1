```python
import random

# This class represents a Snake game, managing the snake's movement, food, and game state.
class Snake:
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        # Initializes the snake's attributes including its size, screen dimensions, block size, and initial food position.
        # 
        # :param SCREEN_WIDTH: int, the width of the game screen
        # :param SCREEN_HEIGHT: int, the height of the game screen
        # :param BLOCK_SIZE: int, the size of each block representing the snake and food
        # :param food_position: tuple, the initial position of the food on the screen
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        # Moves the snake in the specified direction, handles growth when eating food, and checks for collisions.
        #
        # :param direction: tuple, the direction in which the snake moves represented as (x, y) increments
        # 
        # :return: None
        #
        # Test cases:
        # >>> snake = Snake(300, 300, 10, (100, 100))
        # >>> snake.move((1, 0))  # moves right
        # >>> snake.move((0, -1)) # moves up, eats food if on food_position
        # >>> snake.move((-1, 0)) # moves left
        # >>> snake.move((0, 1))  # moves down
        cur = self.positions[0]
        x, y = direction

        new = (
            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
        )

        if new == self.food_position:
            self.eat_food()

        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        # Generates a random position for the food ensuring it does not overlap with the snake.
        #
        # :return: None
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,
                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        # Resets the snake's length, position, and score to their initial values and places food in a new random location.
        #
        # :return: None
        #
        # Test cases:
        # >>> snake = Snake(300, 300, 10, (100, 100))
        # >>> snake.move((1, 0))  # Assume this eats food
        # >>> snake.reset()        # Snake should be reset
        self.length = 1
        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        # Increases the length of the snake and its score when food is eaten, and generates new food position.
        #
        # :return: None
        #
        # Test cases:
        # >>> snake = Snake(300, 300, 10, (100, 100))
        # >>> snake.eat_food()     # Length should increase by 1 and score by 100
        self.length += 1
        self.score += 100
        self.random_food_position()
```