```python
import random

# This is a class for simulating a Blackjack game, handling the deck, player hands, and winner evaluation.
class BlackjackGame:
    def __init__(self):
        # Initialize the game by creating a shuffled deck and empty hands for the player and dealer.
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        # Generate a standard deck of cards, consisting of all combinations of ranks and suits.
        # return: list, a shuffled deck of 52 unique playing cards.
        # >>> game = BlackjackGame()
        # >>> len(game.create_deck()) == 52
        # >>> all(card in game.create_deck() for card in ['AS', '2S', '3S', 'KD', 'QC', 'JH'])
        deck = []
        suits = ['S', 'C', 'D', 'H']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        for suit in suits:
            for rank in ranks:
                deck.append(rank + suit)
        random.shuffle(deck)
        return deck

    def calculate_hand_value(self, hand):
        # Calculate the total value of a given hand of cards according to Blackjack rules.
        # param hand: list, the cards in the player's or dealer's hand.
        # return: int, the total value of the hand, adjusted for Aces.
        # >>> game = BlackjackGame()
        # >>> game.calculate_hand_value(['10S', 'AS'])  # 21
        # >>> game.calculate_hand_value(['9H', '9D'])   # 18
        # >>> game.calculate_hand_value(['AH', '3D', '8S'])  # 12
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        # Determine the winner between the player and the dealer based on their hand values.
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        else:
            if player_value <= dealer_value:
                return 'Dealer wins'
            else:
                return 'Player wins'
```