```python
class DiscountStrategy:
    # This class implements a discount strategy for customers based on their purchases and promotions.

    def __init__(self, customer, cart, promotion=None):
        # Initializes the DiscountStrategy with a customer, their shopping cart, and an optional promotion.
        # :param customer: dict, contains customer information including loyalty points.
        # :param cart: list of dicts, where each dict represents an item with its quantity and price.
        # :param promotion: callable or None, a function that calculates a discount based on the order.

        # Example test cases:
        # >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        # >>> cart = [{'product': 'item1', 'quantity': 1, 'price': 50}, {'product': 'item2', 'quantity': 3, 'price': 15}]
        # >>> strategy = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    def total(self):
        # Calculates the total price of items in the cart.
        # :return: float, the total amount of all items in the cart.

        # Example test cases:
        # >>> strategy.total()
        # 95.0  // For the previously defined cart containing 1 item at $50 and 3 items at $15.
        
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        # Computes the amount due after applying any eligible promotion.
        # :return: float, the final amount due after discount has been applied.

        # Example test cases:
        # >>> strategy.due()
        # 90.25  // If a 5% discount applies based on customer loyalty.

        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        # Calculates a promotion based on the customer's loyalty points.
        # :param order: DiscountStrategy, the order for which the discount is being calculated.
        # :return: float, the discount amount based on customer loyalty.

        # Example test cases:
        # >>> order = DiscountStrategy({'fidelity': 1200}, [{'product': 'item1', 'quantity': 1, 'price': 50}])
        # >>> DiscountStrategy.FidelityPromo(order)
        # 2.5  // If the order has a total of $50.

        return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        # Calculates a discount based on the quantity of items in the cart.
        # :param order: DiscountStrategy, the order for which the discount is being calculated.
        # :return: float, the total discount based on bulk items purchased.

        # Example test cases:
        # >>> order = DiscountStrategy({'fidelity': 500}, [{'product': 'item1', 'quantity': 21, 'price': 1}])
        # >>> DiscountStrategy.BulkItemPromo(order)
        # 2.1  // Discount for buying 21 items at $1 each.

        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        # Calculates a promotion for orders with a large variety of items.
        # :param order: DiscountStrategy, the order for which the discount is being calculated.
        # :return: float, the discount amount for large orders.

        # Example test cases:
        # >>> order = DiscountStrategy({'fidelity': 500}, [{'product': 'item1', 'quantity': 1, 'price': 50}, {'product': 'item2', 'quantity': 1, 'price': 50}])
        # >>> DiscountStrategy.LargeOrderPromo(order)
        # 0  // No discount as the number of unique products is less than 10.

        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
```