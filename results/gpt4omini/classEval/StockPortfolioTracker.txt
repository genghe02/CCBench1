```python
class StockPortfolioTracker:
    # This class tracks a stock portfolio, allowing operations such as adding, removing, buying, and selling stocks.
    def __init__(self, cash_balance):
        # Initializes the StockPortfolioTracker with a given cash balance.
        self.portfolio = []
        self.cash_balance = cash_balance

    def add_stock(self, stock):
        # Adds a stock to the portfolio, or updates the quantity if it already exists.
        # param stock: dict, a dictionary containing stock details including 'name' and 'quantity'
        # >>> tracker = StockPortfolioTracker(1000)
        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 10})
        # >>> tracker.add_stock({'name': 'AAPL', 'quantity': 5})  # This should increase the quantity of AAPL to 15
        for pf in self.portfolio:
            if pf['name'] == stock['name']:
                pf['quantity'] += stock['quantity']
                return

        self.portfolio.append(stock)

    def remove_stock(self, stock):
        # Removes a stock from the portfolio, decreasing the quantity or removing it entirely if the quantity reaches zero.
        # param stock: dict, a dictionary containing stock details including 'name' and 'quantity'
        # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 5})  # This should reduce the quantity of AAPL
        # >>> tracker.remove_stock({'name': 'AAPL', 'quantity': 15})  # This should return False if AAPL quantity is less than 15
        for pf in self.portfolio:
            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:
                pf['quantity'] -= stock['quantity']
                if pf['quantity'] == 0:
                    self.portfolio.remove(pf)
                return True
        return False

    def buy_stock(self, stock):
        # Purchases a stock if there are sufficient funds available and adds it to the portfolio.
        # param stock: dict, a dictionary containing stock details including 'name', 'quantity', and 'price'
        # return: bool, True if stock is bought successfully, False if not enough cash balance
        # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 10, 'price': 150})  # Should return True if cash_balance is adequate
        # >>> tracker.buy_stock({'name': 'AAPL', 'quantity': 10, 'price': 2000})  # Should return False if insufficient balance
        if stock['price'] * stock['quantity'] > self.cash_balance:
            return False
        else:
            self.add_stock(stock)
            self.cash_balance -= stock['price'] * stock['quantity']
            return True

    def sell_stock(self, stock):
        # Sells a stock from the portfolio and updates the cash balance based on the sale price.
        # param stock: dict, a dictionary containing stock details including 'name', 'quantity', and 'price'
        # return: bool, True if stock is sold successfully, False otherwise
        # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 5, 'price': 150})  # Should return True if AAPL quantity is sufficient
        # >>> tracker.sell_stock({'name': 'AAPL', 'quantity': 15, 'price': 150})  # Should return False if AAPL quantity is insufficient
        if self.remove_stock(stock) == False:
            return False
        self.cash_balance += stock['price'] * stock['quantity']
        return True

    def calculate_portfolio_value(self):
        # Calculates the total value of the portfolio including cash balance and stock values.
        # return: float, total value of the portfolio
        # >>> tracker.calculate_portfolio_value()  # Should return the total value including cash balance and stock values
        total_value = self.cash_balance
        for stock in self.portfolio:
            total_value += stock['price'] * stock['quantity']
        return total_value

    def get_portfolio_summary(self):
        # Provides a summary of the stocks in the portfolio including their values and the cash balance.
        # return: tuple, (total value of portfolio, summary of stocks with their name and value)
        # >>> tracker.get_portfolio_summary()  # Should return total portfolio value and details of each stock
        summary = []
        for stock in self.portfolio:
            value = self.get_stock_value(stock)
            summary.append({"name": stock["name"], "value": value})
        portfolio_value = self.calculate_portfolio_value()
        return portfolio_value, summary

    def get_stock_value(self, stock):
        # Calculates the value of a single stock based on its price and quantity.
        # param stock: dict, a dictionary containing stock details including 'price' and 'quantity'
        # return: float, calculated value of the stock
        # >>> tracker.get_stock_value({'name': 'AAPL', 'quantity': 10, 'price': 150})  # Should return 1500
        return stock['price'] * stock['quantity']
```