```python
import urllib.parse

# This class handles the parsing and manipulation of URL path segments.
class UrlPath:
    def __init__(self):
        # Initialize the UrlPath object with an empty list of segments and an end tag flag.
        self.segments = []
        self.with_end_tag = False

    def add(self, segment):
        # Add a new segment to the list of segments after fixing its path format.
        # param segment: str, the segment of the URL to be added
        # >>> url_path = UrlPath()
        # >>> url_path.add('example')
        # >>> url_path.segments  # ['example']
        # >>> url_path.add('/test/')
        # >>> url_path.segments  # ['example', 'test']
        self.segments.append(self.fix_path(segment))

    def parse(self, path, charset):
        # Parse a given URL path and store its segments.
        # param path: str, the URL path to be parsed
        # param charset: str, the character encoding to use for decoding segments
        # >>> url_path = UrlPath()
        # >>> url_path.parse('/my/path/', 'utf-8')
        # >>> url_path.segments  # ['my', 'path']
        # >>> url_path.with_end_tag  # True
        if path:
            if path.endswith('/'):
                self.with_end_tag = True

            path = self.fix_path(path)
            if path:
                split = path.split('/')
                for seg in split:
                    decoded_seg = urllib.parse.unquote(seg, encoding=charset)
                    self.segments.append(decoded_seg)

    @staticmethod
    def fix_path(path):
        # Fix the format of a given path by stripping leading and trailing slashes.
        # param path: str, the path to be fixed
        # return: str, the fixed segment string without leading or trailing slashes
        # >>> UrlPath.fix_path('/example/')  # 'example'
        # >>> UrlPath.fix_path('   /test   ')  # 'test'
        # >>> UrlPath.fix_path('')  # ''
        if not path:
            return ''

        segment_str = path.strip('/')
        return segment_str
```