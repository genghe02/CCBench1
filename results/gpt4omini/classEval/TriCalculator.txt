```python
from math import pi, fabs

# This class provides methods for calculating trigonometric functions using Taylor series expansion.
class TriCalculator:

    def __init__(self):
        pass

    def cos(self, x):
        # Calculate the cosine of an angle x (in degrees) using the Taylor series approximation.
        # param x: float, the angle in degrees for which the cosine is to be calculated
        # return: float, the cosine of angle x, rounded to 10 decimal places
        # >>> calc = TriCalculator()
        # >>> calc.cos(0)
        # 1.0
        # >>> calc.cos(90)
        # 0.0
        # >>> calc.cos(180)
        # -1.0
        # >>> calc.cos(270)
        # 0.0
        # >>> calc.cos(360)
        # 1.0
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        # Calculate the factorial of a non-negative integer a iteratively.
        # param a: int, the non-negative integer for which the factorial is to be computed
        # return: int, the factorial of a
        # >>> calc = TriCalculator()
        # >>> calc.factorial(5)
        # 120
        # >>> calc.factorial(0)
        # 1
        # >>> calc.factorial(1)
        # 1
        b = 1
        while a != 1:
            b *= a
            a -= 1
        return b

    def taylor(self, x, n):
        # Calculate the Taylor series approximation for cosine of angle x (in degrees).
        # param x: float, the angle in degrees for which the Taylor series is computed
        # param n: int, the number of terms in the Taylor series
        # return: float, the approximated value of cosine of x
        # >>> calc = TriCalculator()
        # >>> calc.taylor(0, 10)
        # 1.0
        # >>> calc.taylor(60, 10)
        # 0.5
        # >>> calc.taylor(90, 10)
        # 0.0
        a = 1
        x = x / 180 * pi
        count = 1
        for k in range(1, n):
            if count % 2 != 0:
                a -= (x ** (2 * k)) / self.factorial(2 * k)
            else:
                a += (x ** (2 * k)) / self.factorial(2 * k)
            count += 1
        return a

    def sin(self, x):
        # Calculate the sine of an angle x (in degrees) using the Taylor series approximation.
        # param x: float, the angle in degrees for which the sine is to be calculated
        # return: float, the sine of angle x, rounded to 10 decimal places
        # >>> calc = TriCalculator()
        # >>> calc.sin(0)
        # 0.0
        # >>> calc.sin(30)
        # 0.5
        # >>> calc.sin(90)
        # 1.0
        # >>> calc.sin(180)
        # 0.0
        x = x / 180 * pi
        g = 0
        t = x
        n = 1

        while fabs(t) >= 1e-15:
            g += t
            n += 1
            t = -t * x * x / (2 * n - 1) / (2 * n - 2)
        return round(g, 10)

    def tan(self, x):
        # Calculate the tangent of an angle x (in degrees) as the ratio of sine to cosine.
        # param x: float, the angle in degrees for which the tangent is to be calculated
        # return: float or bool, the tangent of angle x if cosine is not zero, otherwise False
        # >>> calc = TriCalculator()
        # >>> calc.tan(45)
        # 1.0
        # >>> calc.tan(0)
        # 0.0
        # >>> calc.tan(90)
        # False
        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return False
```