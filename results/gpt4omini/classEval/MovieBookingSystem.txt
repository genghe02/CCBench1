```python
from datetime import datetime
import numpy as np

# This class manages a movie booking system, allowing users to add movies, book tickets, and check available movies.
class MovieBookingSystem:
    def __init__(self):
        # Initializes a new instance of the MovieBookingSystem with an empty list of movies.
        # Example test case: system = MovieBookingSystem()
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        # Adds a new movie to the system with the given details.
        # :param name: str, the name of the movie
        # :param price: float, the ticket price for the movie
        # :param start_time: str, the start time of the movie in 'HH:MM' format
        # :param end_time: str, the end time of the movie in 'HH:MM' format
        # :param n: int, the number of seats in one dimension of the seating arrangement
        # Example test cases: 
        # system.add_movie('Inception', 10.5, '14:00', '16:30', 5) 
        # system.add_movie('Titanic', 12.0, '17:00', '20:00', 4)
        movie = {
            'name': name,
            'price': price,
            'start_time': datetime.strptime(start_time, '%H:%M'),
            'end_time': datetime.strptime(end_time, '%H:%M'),
            'seats': np.zeros((n, n))
        }
        self.movies.append(movie)

    def book_ticket(self, name, seats_to_book):
        # Books tickets for a specified movie if the requested seats are available.
        # :param name: str, the name of the movie for which tickets are to be booked
        # :param seats_to_book: list of tuples, each tuple contains row and column indices of seats to book
        # :return: str, "Booking success." if all requested seats are booked, otherwise "Booking failed." or "Movie not found."
        # Example test cases: 
        # system.book_ticket('Inception', [(0, 0), (0, 1)]) 
        # system.book_ticket('Titanic', [(0, 0), (0, 1), (0, 0)]) 
        for movie in self.movies:
            if movie['name'] == name:
                for seat in seats_to_book:
                    if movie['seats'][seat[0]][seat[1]] == 0:
                        movie['seats'][seat[0]][seat[1]] = 1
                    else:
                        return "Booking failed."
                return "Booking success."
        return "Movie not found."

    def available_movies(self, start_time, end_time):
        # Retrieves a list of movies that are available for booking within the specified time frame.
        # :param start_time: str, the start time in 'HH:MM' format
        # :param end_time: str, the end time in 'HH:MM' format
        # :return: list of str, names of the available movies
        # Example test cases: 
        # system.available_movies('13:00', '18:00') 
        # system.available_movies('17:00', '21:00')
        start_time = datetime.strptime(start_time, '%H:%M')
        end_time = datetime.strptime(end_time, '%H:%M')

        available_movies = []
        for movie in self.movies:
            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:
                available_movies.append(movie['name'])

        return available_movies
```