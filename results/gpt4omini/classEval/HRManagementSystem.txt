```python
class HRManagementSystem:
    # This class manages employee records, allowing for adding, removing, updating, and retrieving employee details.
    def __init__(self):
        # Initialize an empty dictionary to hold employee records.
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        # Add a new employee to the system.
        # :param employee_id: int, unique identifier for the employee
        # :param name: str, name of the employee
        # :param position: str, job position of the employee
        # :param department: str, department of the employee
        # :param salary: float, salary of the employee
        # :return: bool, True if the employee was added successfully, False if the employee already exists
        # >>> hms = HRManagementSystem()
        # >>> hms.add_employee(1, 'John Doe', 'Developer', 'IT', 60000)  # returns True
        # >>> hms.add_employee(1, 'Jane Doe', 'Manager', 'HR', 70000)   # returns False
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        # Remove an employee from the system.
        # :param employee_id: int, unique identifier for the employee to be removed
        # :return: bool, True if the employee was removed successfully, False if the employee does not exist
        # >>> hms = HRManagementSystem()
        # >>> hms.add_employee(1, 'John Doe', 'Developer', 'IT', 60000)
        # >>> hms.remove_employee(1)  # returns True
        # >>> hms.remove_employee(2)  # returns False
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        # Update the details of an existing employee.
        # :param employee_id: int, unique identifier for the employee to be updated
        # :param employee_info: dict, dictionary containing the fields to update and their new values
        # :return: bool, True if the employee was updated successfully, False if the employee does not exist or the info is invalid
        # >>> hms = HRManagementSystem()
        # >>> hms.add_employee(1, 'John Doe', 'Developer', 'IT', 60000)
        # >>> hms.update_employee(1, {'position': 'Senior Developer'})  # returns True
        # >>> hms.update_employee(1, {'invalid_field': 'value'})  # returns False
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        # Retrieve the details of an employee.
        # :param employee_id: int, unique identifier for the employee to retrieve
        # :return: dict or bool, employee details if found, otherwise False
        # >>> hms = HRManagementSystem()
        # >>> hms.add_employee(1, 'John Doe', 'Developer', 'IT', 60000)
        # >>> hms.get_employee(1)  # returns employee details
        # >>> hms.get_employee(2)  # returns False
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        # List all employees in the system.
        # :return: dict, all employee details in the system, structured by employee ID
        # >>> hms = HRManagementSystem()
        # >>> hms.add_employee(1, 'John Doe', 'Developer', 'IT', 60000)
        # >>> hms.list_employees()  # returns details of John Doe
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data
```