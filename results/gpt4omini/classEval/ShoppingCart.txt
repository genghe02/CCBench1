```python
class ShoppingCart:
    # This class represents a shopping cart that allows adding, removing, and viewing items, as well as calculating the total price.
    def __init__(self):
        # Initialize the shopping cart with an empty dictionary to store items.
        self.items = {}

    def add_item(self, item, price, quantity=1):
        # Add an item to the shopping cart with the specified price and quantity.
        # param item: str, the name of the item to be added
        # param price: float, the price of the item
        # param quantity: int, the number of items to add (default is 1)
        # return: None, this function does not return anything
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.99, 3)
        # >>> cart.items
        # {'apple': {'price': 0.99, 'quantity': 3}}
        if item in self.items:
            self.items[item] = {'price': price, 'quantity': quantity}
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        # Remove a specified quantity of an item from the shopping cart.
        # param item: str, the name of the item to be removed
        # param quantity: int, the number of items to remove (default is 1)
        # return: None, this function does not return anything
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.99, 3)
        # >>> cart.remove_item('apple', 2)
        # >>> cart.items
        # {'apple': {'price': 0.99, 'quantity': 1}}
        if item in self.items:
            self.items[item]['quantity'] -= quantity
        else:
            pass

    def view_items(self) -> dict:
        # Return a dictionary of the current items in the shopping cart.
        # return: dict, the items in the cart with their prices and quantities
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.99, 2)
        # >>> cart.view_items()
        # {'apple': {'price': 0.99, 'quantity': 2}}
        return self.items

    def total_price(self) -> float:
        # Calculate the total price of all items in the shopping cart.
        # return: float, the total price of all items in the cart
        # >>> cart = ShoppingCart()
        # >>> cart.add_item('apple', 0.99, 2)
        # >>> cart.add_item('banana', 0.59, 3)
        # >>> cart.total_price()
        # 3.16
        return sum([item['quantity'] * item['price'] for item in self.items.values()])
```