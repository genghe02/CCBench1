```python
class Interpolation:
    # This class provides methods for performing 1D and 2D interpolation on given data points.
    
    def __init__(self):
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        # Interpolates the value at given x_interp points based on the known values in x and y using linear interpolation.
        # param x: list or array-like, the x-coordinates of the known data points
        # param y: list or array-like, the y-coordinates of the known data points corresponding to x
        # param x_interp: list or array-like, the x-coordinates at which interpolation is desired
        # return: list, interpolated y-values corresponding to x_interp points
        # Test cases:
        # >>> Interpolation.interpolate_1d([1, 2, 3], [1, 4, 9], [1.5, 2.5])
        # [2.5, 6.5]
        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        # Interpolates the value at given (x_interp, y_interp) points based on the known values in z using bilinear interpolation.
        # param x: list or array-like, the x-coordinates of the known data points
        # param y: list or array-like, the y-coordinates of the known data points corresponding to z
        # param z: 2D list or array-like, the known values at the grid defined by x and y
        # param x_interp: list or array-like, the x-coordinates at which interpolation is desired
        # param y_interp: list or array-like, the y-coordinates at which interpolation is desired
        # return: list, interpolated z-values corresponding to the (x_interp, y_interp) pairs
        # Test cases:
        # >>> Interpolation.interpolate_2d([1, 2], [1, 2], [[1, 2], [3, 4]], [1.5], [1.5])
        # [2.5]
        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j+1]:
                            z00 = z[i][j]
                            z01 = z[i][j+1]
                            z10 = z[i+1][j]
                            z11 = z[i+1][j+1]
                            zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
                                   z10 * (xi - x[i]) * (y[j+1] - yi) +
                                   z01 * (x[i+1] - xi) * (yi - y[j]) +
                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp
```