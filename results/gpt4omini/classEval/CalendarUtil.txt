```python
from datetime import datetime, timedelta

# This class provides utility functions to manage calendar events such as adding, removing, and fetching events, along with checking availability.
class CalendarUtil:
    def __init__(self):
        # Initialize the CalendarUtil instance with an empty list to store events.
        self.events = []

    def add_event(self, event):
        # Add a new event to the calendar.
        # param event: dict, an event containing details such as 'date', 'start_time', and 'end_time'.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        self.events.append(event)

    def remove_event(self, event):
        # Remove an event from the calendar if it exists.
        # param event: dict, the event details to be removed.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        # >>> calendar.remove_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)}) 
        if event in self.events:
            self.events.remove(event)

    def get_events(self, date):
        # Retrieve a list of events on a specific date.
        # param date: datetime, the date for which to retrieve events.
        # return: list, a list of events occurring on the specified date.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        # >>> calendar.get_events(datetime(2023, 10, 15))
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

    def is_available(self, start_time, end_time):
        # Check if a specified time slot is available for an event.
        # param start_time: datetime, the start time of the slot to check.
        # param end_time: datetime, the end time of the slot to check.
        # return: bool, True if the slot is available, False otherwise.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        # >>> calendar.is_available(datetime(2023, 10, 15, 9, 0), datetime(2023, 10, 15, 10, 0)) # Should return True
        # >>> calendar.is_available(datetime(2023, 10, 15, 10, 0), datetime(2023, 10, 15, 11, 0)) # Should return False
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

    def get_available_slots(self, date):
        # Get a list of available time slots for a specific date.
        # param date: datetime, the date for which to find available slots.
        # return: list, a list of available hour-long slots on the specified date.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        # >>> calendar.get_available_slots(datetime(2023, 10, 15)) # Should return slots excluding 10:00 to 11:00
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)

        return available_slots

    def get_upcoming_events(self, num_events):
        # Retrieve a specified number of upcoming events.
        # param num_events: int, the number of upcoming events to retrieve.
        # return: list, a list of the upcoming events sorted by start time.
        # >>> calendar = CalendarUtil()
        # >>> calendar.add_event({'date': datetime(2023, 10, 15), 'start_time': datetime(2023, 10, 15, 10, 0), 'end_time': datetime(2023, 10, 15, 11, 0)})
        # >>> calendar.get_upcoming_events(1) # Should return the upcoming event added.
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
            if len(upcoming_events) == num_events:
                break
        return upcoming_events
```