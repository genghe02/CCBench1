# This function finds the minimum cost to reach the bottom right corner from the top left corner of a grid with obstacles
>>> minPath([[0,0,0],[1,1,0],[1,1,0]], 5) # returns [1, 1, 1, 1, 1]
>>> minPath([[0,1],[0,0]], 1) # returns [1]
>>> minPath([[0,0],[1,1]], 3) # returns [1, 1, 1] 

def minPath(grid, k):
    # Calculate the minimum cost to reach the bottom right corner considering obstacles
    >>> minPath([[0,0,0],[1,1,0],[1,1,0]], 5) # returns [1, 1, 1, 1, 1]
    >>> minPath([[0,1],[0,0]], 1) # returns [1]
    >>> minPath([[0,0],[1,1]], 3) # returns [1, 1, 1]
    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans