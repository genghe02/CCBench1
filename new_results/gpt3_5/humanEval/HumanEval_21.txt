Input:
def rescale_to_unit(numbers: List[float]) -> List[float]:
    <Requirements for the code>
    <some test cases for the function>
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]

❌ Wrong Output:
# This function rescales a list of numbers to the unit scale
# Uses list comprehension
def rescale_to_unit(numbers: List[float]) -> List[float]:
    >>> rescale_to_unit([0, 1, 2, 3, 4, 5])
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]

Correct Output:

def rescale_to_unit(numbers: List[float]) -> List[float]:
    # Rescale a list of numbers to the unit scale using min-max normalization
    >>> rescale_to_unit([0, 1, 2, 3, 4, 5]) # returns [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    >>> rescale_to_unit([3, 4, 5, 6, 7, 8]) # returns [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    >>> rescale_to_unit([10, 20, 30, 40, 50]) # returns [0.0, 0.25, 0.5, 0.75, 1.0]
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]