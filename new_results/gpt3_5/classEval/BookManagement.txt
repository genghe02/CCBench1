"""
This class manages a book inventory system.

The class provides methods to add, remove, and view books in the inventory.
"""

class BookManagement:
    def __init__(self):
        """
        Initialize the BookManagement class with an empty inventory.
        """
        self.inventory = {}

    def add_book(self, title, quantity=1):
        """
        Add or increase the quantity of a book in the inventory.

        Parameters:
            title (str): The title of the book to add
            quantity (int): The quantity of books to add (default is 1)

        Adds the specified quantity of books to the inventory for the given title.
        If the title already exists in the inventory, the quantity is increased.

        Test cases:
            # Test case 1: Add new book
            add_book('Python Programming')
            assert inventory['Python Programming'] == 1
            
            # Test case 2: Add multiple books
            add_book('Data Science Essentials', 3)
            assert inventory['Data Science Essentials'] == 3
            
            # Test case 3: Add books to existing title
            add_book('Python Programming', 2)
            assert inventory['Python Programming'] == 3
        """
        if title in self.inventory:
            self.inventory[title] += quantity
        else:
            self.inventory[title] = quantity

    def remove_book(self, title, quantity):
        """
        Remove or decrease the quantity of a book in the inventory.

        Parameters:
            title (str): The title of the book to remove
            quantity (int): The quantity of books to remove

        Removes the specified quantity of books from the inventory for the given title.
        If the title does not exist or the quantity is greater than available, raises an error.

        Test cases:
            # Test case 1: Remove existing book
            add_book('Deep Learning', 5)
            remove_book('Deep Learning', 3)
            assert inventory['Deep Learning'] == 2
            
            # Test case 2: Remove all books
            remove_book('Deep Learning', 2)
            assert 'Deep Learning' not in inventory
            
            # Test case 3: Remove non-existing book
            try:
                remove_book('Artificial Intelligence', 1)
            except:
                assert True
        """
        if title not in self.inventory or self.inventory[title] < quantity:
            raise Exception("Insufficient quantity")
        self.inventory[title] -= quantity
        if self.inventory[title] == 0:
            del self.inventory[title]

    def view_inventory(self):
        """
        View the entire book inventory.

        Returns:
            dict: A dictionary representing the current inventory of books.

        Returns the entire current inventory of books as a dictionary.

        Test cases:
            # Test case 1: Empty inventory
            assert view_inventory() == {}
            
            # Test case 2: Non-empty inventory
            add_book('Web Development', 10)
            add_book('Networking Basics', 5)
            assert view_inventory() == {'Web Development': 10, 'Networking Basics': 5}

            # Test case 3: Updated inventory
            remove_book('Web Development', 3)
            assert view_inventory() == {'Web Development': 7, 'Networking Basics': 5}
        """
        return self.inventory

    def view_book_quantity(self, title):
        """
        View the quantity of a specific book in the inventory.

        Parameters:
            title (str): The title of the book to get the quantity for.

        Returns:
            int: The quantity of the specified book in the inventory. Returns 0 if the book is not found.

        Test cases:
            # Test case 1: Existing book quantity
            add_book('Machine Learning with Python', 5)
            assert view_book_quantity('Machine Learning with Python') == 5
            
            # Test case 2: Non-existing book quantity
            assert view_book_quantity('Cybersecurity Essentials') == 0
            
            # Test case 3: Zero quantity book
            add_book('Computer Vision', 0)
            assert view_book_quantity('Computer Vision') == 0
        """
        if title not in self.inventory:
            return 0
        return self.inventory[title]