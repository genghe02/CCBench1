"""
This class represents a Currency Converter that allows conversion between different currencies based on exchange rates.

It provides methods for converting amounts from one currency to another, accessing supported currencies, adding new currency exchange rates, and updating existing rates.
"""

class CurrencyConverter:
    
    def __init__(self):
        """
        Initialize the CurrencyConverter object with default exchange rates.
        """

        self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }

    def convert(self, amount, from_currency, to_currency):
        """
        Convert an amount from one currency to another based on exchange rates.

        Parameters:
            amount (float): The amount to convert
            from_currency (str): The currency code to convert from
            to_currency (str): The currency code to convert to
            
        Returns:
            float: The converted amount in the target currency
        
        Test cases:
            # Test case 1: Convert from USD to EUR
            assert convert(100.0, 'USD', 'EUR') == 85.0
            
            # Test case 2: Convert from GBP to CAD
            assert convert(50.0, 'GBP', 'CAD') == 86.80555555555554
            
            # Test case 3: Invalid currency conversion
            assert convert(100.0, 'USD', 'XYZ') == False

        if from_currency == to_currency:
            return amount

        if from_currency not in self.rates or to_currency not in self.rates:
            return False

        from_rate = self.rates[from_currency]
        to_rate = self.rates[to_currency]

        converted_amount = (amount / from_rate) * to_rate
        return converted_amount

    def get_supported_currencies(self):
        """
        Get a list of all supported currency codes.
        
        Returns:
            list: A list of supported currency codes
        
        Test cases:
            # Test case 1: Check supported currencies
            assert get_supported_currencies() == ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']
            
            # Test case 2: Add new currency rate
            add_currency_rate('BTC', 55000.0)
            assert get_supported_currencies() == ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY', 'BTC']
            
            # Test case 3: Check with no supported currencies
            assert get_supported_currencies() != []

        return list(self.rates.keys())

    def add_currency_rate(self, currency, rate):
        """
        Add a new currency exchange rate to the converter.
        
        Parameters:
            currency (str): The code of the new currency
            rate (float): The exchange rate against USD
        
        Returns:
            bool: True if the rate was added successfully, False otherwise
        
        Test cases:
            # Test case 1: Add new currency rate
            assert add_currency_rate('BTC', 55000.0) == True
            
            # Test case 2: Add existing currency rate
            assert add_currency_rate('USD', 1.0) == False
            
            # Test case 3: Add incorrect rate
            assert add_currency_rate('XYZ', -1) == False

        if currency in self.rates:
            return False
        self.rates[currency] = rate
        return True

    def update_currency_rate(self, currency, new_rate):
        """
        Update the exchange rate of an existing currency in the converter.
        
        Parameters:
            currency (str): The code of the currency to update
            new_rate (float): The new exchange rate against USD
        
        Returns:
            bool: True if the rate was updated successfully, False otherwise
        
        Test cases:
            # Test case 1: Update existing currency rate
            assert update_currency_rate('EUR', 0.80) == True
            
            # Test case 2: Update non-existent currency rate
            assert update_currency_rate('XYZ', 2.0) == False
            
            # Test case 3: Update with negative rate
            assert update_currency_rate('JPY', -1) == False

        if currency not in self.rates:
            return False
        self.rates[currency] = new_rate
        return True
"""