"""
This class provides functionality to read and write CSV files, and process data within the CSV file.

The class CSVProcessor includes methods to read CSV files, write data to CSV files, and process data in the CSV file according to the specified column number.

"""

import csv


class CSVProcessor:

    def __init__(self):
        """
        Initializes the CSV Processor class.
        """

    def read_csv(self, file_name):
        """
        Read and retrieve data from the CSV file.

        Parameters:
            file_name (str): The name of the CSV file to read

        Returns:
            tuple: A tuple containing the title row and data of the CSV file
        
        Test cases:
            # Test case 1: Successful read
            title, data = read_csv('data.csv')
            assert len(data) > 0
            
            # Test case 2: Empty CSV file
            title, data = read_csv('empty.csv')
            assert len(data) == 0
            
            # Test case 3: Missing file
            title, data = read_csv('non_existent.csv')
            assert title == None and data == None
        """

        data = []
        with open(file_name, 'r') as file:
            reader = csv.reader(file)
            title = next(reader)
            for row in reader:
                data.append(row)
        return title, data

    def write_csv(self, data, file_name):
        """
        Write data to a CSV file.

        Parameters:
            data (list): List of data to be written to the CSV file
            file_name (str): The name of the CSV file to write 

        Returns:
            int: 1 if write operation is successful, 0 if an error occurs

        Test cases:
            # Test case 1: Successful write
            data = [['A', 'B'], [1, 2]]
            assert write_csv(data, 'output.csv') == 1
            
            # Test case 2: Data is empty
            data = []
            assert write_csv(data, 'empty.csv') == 1
            
            # Test case 3: Write error
            data = [['A', 'B'], [1, 2]]
            assert write_csv(data, 'output.csv') == 0
        """

        try:
            with open(file_name, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerows(data)
            return 1
        except:
            return 0

    def process_csv_data(self, N, save_file_name):
        """
        Process the CSV data by converting the specified column data to uppercase.

        Parameters:
            N (int): Column number to process
            save_file_name (str): The name of the CSV file to save processed data

        Returns:
            str: The name of the processed CSV file

        Test cases:
            # Test case 1: Process data for column 1
            assert process_csv_data(1, 'data.csv') == 'data_process.csv'
            
            # Test case 2: Process data for column 0
            assert process_csv_data(0, 'data.csv') == 'data_process.csv'
            
            # Test case 3: Non-existent file processing
            assert process_csv_data(1, 'invalid.csv') == 'invalid_process.csv'
        """

        title, data = self.read_csv(save_file_name)
        column_data = [row[N] for row in data]
        column_data = [row.upper() for row in column_data]
        new_data = [title, column_data]
        return self.write_csv(new_data, save_file_name.split('.')[0] + '_process.csv')