"""
This class represents a shopping cart that allows adding, removing, and viewing items, as well as calculating the total price of the items.

"""

class ShoppingCart:
    def __init__(self):
        """
        Initialize the shopping cart with an empty items dictionary.
        """
        self.items = {}

    def add_item(self, item, price, quantity=1):
        """
        Add an item to the shopping cart with the specified price and quantity.
        
        Parameters:
            item (str): The name of the item to be added
            price (float): The price of the item
            quantity (int): The quantity of the item to be added (default is 1)
        
        Returns:
            None
        
        Test cases:
            # Test case 1: Normal usage
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 2)
            assert cart.items == {'apple': {'price': 1.5, 'quantity': 2}}
            
            # Test case 2: Edge case with default quantity
            cart = ShoppingCart()
            cart.add_item('banana', 0.75)
            assert cart.items == {'banana': {'price': 0.75, 'quantity': 1}}
            
            # Test case 3: Error case with negative quantity
            cart = ShoppingCart()
            cart.add_item('grapes', 2.0, -1)
            assert cart.items == {}
        """

        if item in self.items:
            self.items[item] = {'price': price, 'quantity': quantity}
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        """
        Remove a specified quantity of an item from the shopping cart.
        
        Parameters:
            item (str): The name of the item to be removed
            quantity (int): The quantity of the item to be removed (default is 1)
        
        Returns:
            None
        
        Test cases:
            # Test case 1: Normal usage
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 2)
            cart.remove_item('apple', 1)
            assert cart.items['apple']['quantity'] == 1
            
            # Test case 2: Edge case with default quantity
            cart = ShoppingCart()
            cart.add_item('banana', 0.75, 2)
            cart.remove_item('banana')
            assert cart.items['banana']['quantity'] == 1
            
            # Test case 3: Error case with invalid item
            cart = ShoppingCart()
            cart.remove_item('orange')
            assert cart.items == {}
        """

        if item in self.items:
            self.items[item]['quantity'] -= quantity
        else:
            pass

    def view_items(self) -> dict:
        """
        Return the current items in the shopping cart.
        
        Returns:
            dict: Dictionary containing the items and their price and quantity.
        
        Test cases:
            # Test case 1: Normal usage
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 2)
            assert cart.view_items() == {'apple': {'price': 1.5, 'quantity': 2}}
            
            # Test case 2: Edge case with empty cart
            cart = ShoppingCart()
            assert cart.view_items() == {}
            
            # Test case 3: Normal usage with multiple items
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 2)
            cart.add_item('banana', 0.75, 1)
            assert cart.view_items() == {'apple': {'price': 1.5, 'quantity': 2}, 'banana': {'price': 0.75, 'quantity': 1}}
        """

        return self.items

    def total_price(self) -> float:
        """
        Calculate the total price of all items in the shopping cart.
        
        Returns:
            float: Total price of all items in the shopping cart.
        
        Test cases:
            # Test case 1: Normal usage
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 2)
            cart.add_item('banana', 0.75, 1)
            assert cart.total_price() == 3.75
            
            # Test case 2: Edge case with single item
            cart = ShoppingCart()
            cart.add_item('apple', 1.5, 1)
            assert cart.total_price() == 1.5
            
            # Test case 3: Error case with no items
            cart = ShoppingCart()
            assert cart.total_price() == 0.0
        """

        return sum([item['quantity'] * item['price'] for item in self.items.values()])
```