"""
This class represents a Manacher algorithm implementation for finding the longest palindromic substring in a given input string.
"""

class Manacher:
    def __init__(self, input_string) -> None:
        """
        Initialize the Manacher object with the input string.

        Parameters:
            input_string (str): The input string for palindromic substring search.
        """
        self.input_string = input_string

    def palindromic_length(self, center, diff, string):
        """
        Calculate the length of the palindromic substring at a given center and diff position.

        Parameters:
            center (int): The center index to check palindrome from.
            diff (int): The difference from the center to check for symmetry.
            string (str): The input string to check for palindromic properties.

        Returns:
            int: 0 if no palindrome found or the length of the palindromic substring if found.

        Test cases:
            # Test case 1: Empty palindrome
            assert palindromic_length(0, 0, "abcdefg") == 0
            
            # Test case 2: Even length palindrome
            assert palindromic_length(3, 2, "abacdfcfdba") == 6
            
            # Test case 3: Odd length palindrome
            assert palindromic_length(4, 2, "abcdefedcba") == 7
        """
        if (center - diff == -1 or center + diff == len(string)
                or string[center - diff] != string[center + diff]):
            return 0
        return 1 + self.palindromic_length(center, diff + 1, string)


    def palindromic_string(self):
        """
        Find the longest palindromic substring in the input string.

        Returns:
            str: The longest palindromic substring found in the input string.

        Test cases:
            # Test case 1: No palindrome
            assert palindromic_string() == ""
            
            # Test case 2: Even length palindromic substring
            assert palindromic_string() == "abacdfcfdba"
            
            # Test case 3: Odd length palindromic substring
            assert palindromic_string() == "abcdefedcba"
        """
        max_length = 0

        new_input_string = ""
        output_string = ""

        for i in self.input_string[:len(self.input_string) - 1]:
            new_input_string += i + "|"
        new_input_string += self.input_string[-1]

        for i in range(len(new_input_string)):
            length = self.palindromic_length(i, 1, new_input_string)

            if max_length < length:
                max_length = length
                start = i

        for i in new_input_string[start - max_length:start + max_length + 1]:
            if i != "|":
                output_string += i

        return output_string