"""
This class represents an Eight Puzzle solving algorithm that can find a sequence of moves to solve an initial state and reach a goal state.

The class implements methods to find the blank space (0), move tiles in four directions, get possible moves, and solve the Eight Puzzle problem.
"""

class EightPuzzle:
    def __init__(self, initial_state):
        """
        Initialize the Eight Puzzle solver with the initial state and goal state.

        Parameters:
            initial_state (list): 3x3 list representing the initial state of the puzzle

        """
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        """
        Find the position of the blank space (0) in the given state.

        Parameters:
            state (list): 3x3 list representing the current state of the puzzle

        Returns:
            tuple: A tuple (i, j) representing the row and column indices of the blank space
        
        Test cases:
            # Test case 1: Normal case
            assert find_blank([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == (1, 1)
            
            # Test case 2: Edge case - Blank in a corner
            assert find_blank([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == (0, 0)
            
            # Test case 3: Error case - Blank not found
            assert find_blank([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) is None
        """
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j

    def move(self, state, direction):
        """
        Move the blank space in the specified direction.

        Parameters:
            state (list): 3x3 list representing the current state of the puzzle
            direction (str): Direction to move the blank space (up, down, left, right)

        Returns:
            list: The new state of the puzzle after moving the blank space
        
        Test cases:
            # Test case 1: Move up
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'up') == [[1, 2, 3], [4, 8, 6], [7, 0, 5]]
            
            # Test case 2: Move right
            assert move([[1, 2, 3], [0, 4, 6], [7, 8, 5]], 'right') == [[1, 2, 3], [4, 0, 6], [7, 8, 5]]
            
            # Test case 3: Error case - Invalid direction
            assert move([[1, 2, 3], [4, 5, 6], [7, 8, 0]], 'invalid') is None
        """
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]

        if direction == 'up':
            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        elif direction == 'down':
            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        elif direction == 'left':
            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        elif direction == 'right':
            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]

        return new_state

    def get_possible_moves(self, state):
        """
        Get a list of possible moves (directions) for the blank space in the current state.

        Parameters:
            state (list): 3x3 list representing the current state of the puzzle

        Returns:
            list: A list of valid directions to move the blank space
        
        Test cases:
            # Test case 1: Normal case - Blank in the middle
            assert get_possible_moves([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == ['up', 'down', 'left', 'right']
            
            # Test case 2: Edge case - Blank at the top
            assert get_possible_moves([[0, 2, 3], [4, 1, 6], [7, 8, 5]]) == ['down', 'left', 'right']
            
            # Test case 3: Error case - Blank not found
            assert get_possible_moves([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []
        """
        moves = []
        i, j = self.find_blank(state)

        if i > 0:
            moves.append('up')
        if i < 2:
            moves.append('down')
        if j > 0:
            moves.append('left')
        if j < 2:
            moves.append('right')

        return moves

    def solve(self):
        """
        Solve the Eight Puzzle problem starting from the initial state and reaching the goal state.

        Returns:
            list or None: A list of moves leading from the initial state to the goal state, or None if no solution is found
        
        Test cases:
            # Test case 1: Solvable puzzle
            assert solve() == ['up', 'left', 'down', 'right', 'up', 'left', 'down', 'right']
            
            # Test case 2: Unsolvable puzzle
            assert solve([[1, 2, 3], [4, 5, 6], [8, 7, 0]]) is None
            
            # Test case 3: Error case - Invalid initial state
            assert solve([[1, 2], [4, 5]]) is None
        """
        open_list = [(self.initial_state, [])]
        closed_list = []

        while open_list:
            current_state, path = open_list.pop(0)
            closed_list.append(current_state)

            if current_state == self.goal_state:
                return path

            for move in self.get_possible_moves(current_state):
                new_state = self.move(current_state, move)
                if new_state not in closed_list:
                    open_list.append((new_state, path + [move]))

        return None