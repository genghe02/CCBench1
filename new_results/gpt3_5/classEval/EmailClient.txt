"""
This class represents an Email Client that has functionalities like sending, receiving, and managing emails.

It allows users to send emails, manage their inbox, and fetch new emails.
"""

from datetime import datetime

class EmailClient:
    def __init__(self, addr, capacity) -> None:
        """
        Initialize the EmailClient instance with address (addr) and inbox capacity (capacity).

        Parameters:
            addr (str): Email address of the client
            capacity (int): Maximum capacity of the client's email inbox
        
        Returns:
            None
        """
        self.addr = addr
        self.capacity = capacity
        self.inbox = []
    
    def send_to(self, recv, content, size):
        """
        Send an email to another recipient.

        Parameters:
            recv (EmailClient): Recipient of the email
            content (str): Email content
            size (int): Size of the email
        
        Returns:
            bool: True if email sent successfully, False if inbox full
        
        Test cases:
            # Test case 1: Send email successfully
            assert send_to(other_client, "Hello!", 10) == True
            
            # Test case 2: Fail to send email due to recipient's full inbox
            assert send_to(other_client, "Bye!", 15) == False
            
            # Test case 3: Send email within capacity limit
            assert send_to(other_client, "Greetings", 5) == True
        """
        if not recv.is_full_with_one_more_email(size):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            email = {
                "sender": self.addr,
                "receiver": recv.addr,
                "content": content,
                "size": size,
                "time": timestamp,
                "state": "unread"
            }
            recv.inbox.append(email)
            return True
        else:
            self.clear_inbox(size)
            return False
    
    def fetch(self):
        """
        Fetch the next unread email from the client's inbox.

        Returns:
            dict or None: Email dict if available, None if no more unread emails
        
        Test cases:
            # Test case 1: Fetch an unread email
            email = fetch()
            if email:
                assert email['state'] == "unread"
            
            # Test case 2: Inbox is empty, fetch returns None
            assert fetch() == None
            
            # Test case 3: Mark email as read after fetching
            email = fetch()
            if email:
                assert email['state'] == "read"
        """
        if len(self.inbox) == 0:
            return None
        for i in range(len(self.inbox)):
            if self.inbox[i]['state'] == "unread":
                self.inbox[i]['state'] = "read"
                return self.inbox[i]
        return None

    def is_full_with_one_more_email(self, size):
        """
        Check if the inbox is full with additional email of given size.

        Parameters:
            size (int): Size of the potential additional email
        
        Returns:
            bool: True if inbox will be full with additional email, False otherwise
        
        Test cases:
            # Test case 1: Inbox is full with one more email
            assert is_full_with_one_more_email(10) == True
            
            # Test case 2: Add one more small email, inbox not full
            assert is_full_with_one_more_email(5) == False
            
            # Test case 3: Add one large email, inbox full
            assert is_full_with_one_more_email(20) == True
        """
        occupied_size = self.get_occupied_size()
        return True if occupied_size + size > self.capacity else False
        
    def get_occupied_size(self):
        """
        Calculate the total occupied size of all emails in the inbox.

        Returns:
            int: Total size of emails stored in the inbox
        
        Test cases:
            # Test case 1: Occupied size of empty inbox is 0
            assert get_occupied_size() == 0
            
            # Test case 2: Sum occupied sizes of multiple emails
            assert get_occupied_size() == 30
            
            # Test case 3: Size after adding and clearing emails
            send_to(other_client, "Hi there!", 10)
            clear_inbox(5)
            assert get_occupied_size() == 5
        """
        occupied_size = 0
        for email in self.inbox:
            occupied_size += email["size"]
        return occupied_size

    def clear_inbox(self, size):
        """
        Clear emails from the inbox up to a certain size limit.

        Parameters:
            size (int): Size that should be cleared from the inbox
        
        Returns:
            None
        
        Test cases:
            # Test case 1: Clear inbox with size equal to inbox capacity
            clear_inbox(self.capacity)
            assert len(self.inbox) == 0
            
            # Test case 2: Clear partial inbox space
            clear_inbox(15)
            assert get_occupied_size() == 15
            
            # Test case 3: Clearing when the inbox is empty
            clear_inbox(0)
            assert get_occupied_size() == 0
        """
        if len(self.addr) == 0:
            return
        freed_space = 0
        while freed_space < size and self.inbox:
            email = self.inbox[0]
            freed_space += email['size']
            del self.inbox[0]