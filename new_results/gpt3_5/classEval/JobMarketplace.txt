"""
This class provides functionalities for managing job listings and resume submissions in a job marketplace.
"""

class JobMarketplace:
    def __init__(self):
        """
        Initialize the JobMarketplace class with empty job listings and resumes lists.
        """
        self.job_listings = []
        self.resumes = []

    def post_job(self, job_title, company, requirements):
        """
        Post a new job listing with the given details.

        Parameters:
            job_title (str): The title of the job listing
            company (str): The company offering the job
            requirements (list): List of requirements for the job listing

        Returns:
            None

        Test cases:
            # Test case 1: Post a job listing
            job_market = JobMarketplace()
            job_market.post_job("Software Engineer", "ABC Corp", ["Python", "Django"])
            assert len(job_market.job_listings) == 1

            # Test case 2: Post a job listing with empty requirements
            job_market = JobMarketplace()
            job_market.post_job("Data Analyst", "XYZ Inc", [])
            assert len(job_market.job_listings) == 1

            # Test case 3: Post a job listing with special characters
            job_market = JobMarketplace()
            job_market.post_job("Data Analyst @ #", "Special Corp", ["Statistics", "Excel"])
            assert len(job_market.job_listings) == 1

    def remove_job(self, job):
        """
        Remove a job listing.

        Parameters:
            job (dict): The job listing to be removed

        Returns:
            None

        Test cases:
            # Test case 1: Remove an existing job listing
            job_market = JobMarketplace()
            job = {"job_title": "Software Engineer", "company": "ABC Corp", "requirements": ["Python", "Django"]}
            job_market.job_listings.append(job)
            job_market.remove_job(job)
            assert len(job_market.job_listings) == 0

            # Test case 2: Remove a non-existent job listing
            job_market = JobMarketplace()
            job = {"job_title": "Data Analyst", "company": "XYZ Inc", "requirements": []}
            job_market.remove_job(job)  # No jobs exist
            assert len(job_market.job_listings) == 0

            # Test case 3: Remove job listing with non-ascii characters
            job_market = JobMarketplace()
            job = {"job_title": "Data Scientist", "company": "Special", "requirements": ["AI", "ML"]}
            job_market.job_listings.append(job)
            job_market.remove_job(job)
            assert len(job_market.job_listings) == 0

    def submit_resume(self, name, skills, experience):
        """
        Submit a resume with the given details.

        Parameters:
            name (str): The name of the resume submitter
            skills (list): List of skills possessed by the submitter
            experience (int): Years of experience of the submitter

        Returns:
            None

        Test cases:
            # Test case 1: Submit a resume
            job_market = JobMarketplace()
            job_market.submit_resume("John Doe", ["Python", "Java"], 3)
            assert len(job_market.resumes) == 1

            # Test case 2: Submit a resume with empty skills
            job_market = JobMarketplace()
            job_market.submit_resume("Jane Smith", [], 5)
            assert len(job_market.resumes) == 1

            # Test case 3: Submit a resume with negative experience
            job_market = JobMarketplace()
            job_market.submit_resume("Alice Wonderland", ["Communication"], -1)
            assert len(job_market.resumes) == 1

    def withdraw_resume(self, resume):
        """
        Withdraw a submitted resume.

        Parameters:
            resume (dict): The resume to be withdrawn

        Returns:
            None

        Test cases:
            # Test case 1: Withdraw an existing resume
            job_market = JobMarketplace()
            resume = {"name": "John Doe", "skills": ["Python", "Java"], "experience": 3}
            job_market.resumes.append(resume)
            job_market.withdraw_resume(resume)
            assert len(job_market.resumes) == 0

            # Test case 2: Withdraw a non-existent resume
            job_market = JobMarketplace()
            resume = {"name": "Jane Smith", "skills": [], "experience": 5}
            job_market.withdraw_resume(resume)  # No resumes exist
            assert len(job_market.resumes) == 0

            # Test case 3: Withdraw resume with special characters in name
            job_market = JobMarketplace()
            resume = {"name": "Alice @ #", "skills": ["Communication"], "experience": 1}
            job_market.resumes.append(resume)
            job_market.withdraw_resume(resume)
            assert len(job_market.resumes) == 0

    def search_jobs(self, criteria):
        """
        Search for jobs based on the criteria.

        Parameters:
            criteria (str): The search criteria to find matching job listings

        Returns:
            list: List of job listings matching the search criteria

        Test cases:
            # Test case 1: Search for jobs matching job title
            job_market = JobMarketplace()
            job_market.post_job("Software Engineer", "ABC Corp", ["Python", "Django"])
            matching_jobs = job_market.search_jobs("engineer")
            assert len(matching_jobs) == 1

            # Test case 2: Search for jobs with specific skill requirement
            job_market = JobMarketplace()
            job_market.post_job("Data Analyst", "XYZ Inc", ["Statistics", "Excel"])
            matching_jobs = job_market.search_jobs("statistics")
            assert len(matching_jobs) == 1

            # Test case 3: Search for non-existing criteria
            job_market = JobMarketplace()
            job_market.post_job("Data Scientist", "Special", ["AI", "ML"])
            matching_jobs = job_market.search_jobs("test")
            assert len(matching_jobs) == 0

    def get_job_applicants(self, job):
        """
        Get the applicants who match the requirements of the job.

        Parameters:
            job (dict): The job listing to find matching applicants for

        Returns:
            list: List of resumes of applicants matching the job requirements

        Test cases:
            # Test case 1: Get applicants for a job
            job_market = JobMarketplace()
            job_market.post_job("Software Engineer", "ABC Corp", ["Python", "Django"])
            job = {"job_title": "Software Engineer", "company": "ABC Corp", "requirements": ["Python", "Django"]}
            job_market.submit_resume("John Doe", ["Python", "Java"], 3)
            applicants = job_market.get_job_applicants(job)
            assert len(applicants) == 1

            # Test case 2: Get no applicants for a job
            job_market = JobMarketplace()
            job_market.post_job("Data Analyst", "XYZ Inc", ["Statistics", "Excel"])
            job = {"job_title": "Data Analyst", "company": "XYZ Inc", "requirements": ["Statistics", "Excel"]}
            job_market.submit_resume("Jane Smith", ["Java", "R"], 5)
            applicants = job_market.get_job_applicants(job)
            assert len(applicants) == 0

            # Test case 3: Get applicants for a job without requirements
            job_market = JobMarketplace()
            job_market.post_job("Intern", "ABC Corp", [])
            job = {"job_title": "Intern", "company": "ABC Corp", "requirements": []}
            job_market.submit_resume("Alice Wonderland", ["Communication"], 1)
            applicants = job_market.get_job_applicants(job)
            assert len(applicants) == 1
"""