"""
This class implements a Push Box Game with a player, boxes, targets, and obstacles on a map grid.
"""

class PushBoxGame:
    def __init__(self, map):
        """
        Initialize the game with the provided map.

        Parameters:
            map (list): A 2D list representing the game map with the player position ('O'), targets ('G'), boxes ('X'), and obstacles ('#')

        Test cases:
            # Test case 1: Empty map
            assert PushBoxGame([]).player_row == 0

            # Test case 2: Initialize player and targets
            assert PushBoxGame([["O", ".", "G"]]).player_row == 0

            # Test case 3: Initialize player, targets, and boxes
            assert PushBoxGame([["O", ".", "G"], [".", "X", "#"]]).boxes == [(1, 1)]
        """
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        """
        Initialize the game state by setting player, targets, boxes from the map.

        Test cases:
            # Test case 1: Initialize player position
            assert PushBoxGame([["O", ".", "G"]]).player_col == 0

            # Test case 2: Initialize target count
            assert PushBoxGame([["O", ".", "G"], [".", "X", "#"]]).target_count == 1

            # Test case 3: Initialize boxes
            assert PushBoxGame([["O", "X", "G"]]).boxes == [(0, 1)]
        """
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == "O":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == "G":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == "X":
                    self.boxes.append((row, col))

    def check_win(self):
        """
        Check if all boxes are on targets to determine game win state.

        Returns:
            bool: True if all boxes are on targets, False otherwise
        
        Test cases:
            # Test case 1: All boxes on targets
            assert PushBoxGame([["O", ".", "G", "."], [".", ".", ".", "X"]]).check_win() == True

            # Test case 2: Box not on target
            assert PushBoxGame([["O", ".", "G"], [".", ".", ".", "X"]]).check_win() == False

            # Test case 3: No boxes in game
            assert PushBoxGame([["O", ".", "G"]]).check_win() == False
        """
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        """
        Move the player in the specified direction and handle box pushing.

        Parameters:
            direction (str): Direction to move the player - 'w' (up), 's' (down), 'a' (left), 'd' (right)

        Returns:
            bool: True if game is won after the move, False otherwise

        Test cases:
            # Test case 1: Move player up
            assert PushBoxGame([["O", ".", "G"], [".", ".", ".", "."]]).move('w') == False

            # Test case 2: Push box to target
            assert PushBoxGame([["O", ".", "G", "."], [".", ".", ".", "X"]]).move('d') == True

            # Test case 3: Move against obstacle
            assert PushBoxGame([["O", "#", "G"], [".", ".", ".", "X"]]).move('a') == False
        """
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == "w":
            new_player_row -= 1
        elif direction == "s":
            new_player_row += 1
        elif direction == "a":
            new_player_col -= 1
        elif direction == "d":
            new_player_col += 1

        if self.map[new_player_row][new_player_col] != "#":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != "#":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()
"""