"""
This class provides utility functions for processing HTML text.

The class includes methods for formatting HTML text, extracting code snippets from HTML text, and handling line feeds.
"""

import re
import string
import gensim
from bs4 import BeautifulSoup


class HtmlUtil:

    def __init__(self):
        """
        Initialization method for the HtmlUtil class.
        Initializes special marks for various types of text elements.
        """
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        """
        Replaces multiple line breaks with a single line break in the given text.

        Parameters:
            text (str): The text to format line feeds in.

        Returns:
            str: The text with normalized line feeds.
        """
        return re.sub(re.compile(r'\n+'), '\n', text)

    def format_line_html_text(self, html_text):
        """
        Formats HTML text by applying specific rules to different HTML elements.

        Parameters:
            html_text (str): The input HTML text to format.

        Returns:
            str: The formatted HTML text with specific markup applied.

        Test cases:
            # Test case 1: Empty HTML text
            assert format_line_html_text('') == ''

            # Test case 2: HTML text with code block
            assert format_line_html_text('<pre>print("Hello, World!")</pre>') == '-CODE-'
            
            # Test case 3: HTML text with list items
            assert format_line_html_text('<ul><li>Item 1.</li><li>Item 2</li></ul>') == '[...]-Item 1.[...]-Item 2.'
        """
        
        if html_text is None or len(html_text) == 0:
            return ''
        soup = BeautifulSoup(html_text, 'lxml')

        code_tag = soup.find_all(name=['pre', 'blockquote'])
        for tag in code_tag:
            tag.string = self.CODE_MARK

        ul_ol_group = soup.find_all(name=['ul', 'ol'])
        for ul_ol_item in ul_ol_group:
            li_group = ul_ol_item.find_all('li')
            for li_item in li_group:
                li_item_text = li_item.get_text().strip()
                if len(li_item_text) == 0:
                    continue
                if li_item_text[-1] in string.punctuation:
                    li_item.string = '[{0}]{1}'.format('-', li_item_text)
                    continue
                li_item.string = '[{0}]{1}.'.format('-', li_item_text)

        p_group = soup.find_all(name=['p'])
        for p_item in p_group:
            p_item_text = p_item.get_text().strip()
            if p_item_text:
                if p_item_text[-1] in string.punctuation:
                    p_item.string = p_item_text
                    continue
                next_sibling = p_item.find_next_sibling()
                if next_sibling and self.CODE_MARK in next_sibling.get_text():
                    p_item.string = p_item_text + ':'
                    continue
                p_item.string = p_item_text + '.'

        clean_text = gensim.utils.decode_htmlentities(soup.get_text())
        return self.__format_line_feed(clean_text)

    def extract_code_from_html_text(self, html_text):
        """
        Extracts code snippets from the formatted HTML text.

        Parameters:
            html_text (str): The formatted HTML text with identifiable code snippets.

        Returns:
            list: A list of extracted code snippets from the input HTML text.

        Test cases:
            # Test case 1: HTML text without code snippet
            assert extract_code_from_html_text('<p>Hello, World!</p>') == []

            # Test case 2: HTML text with single code block
            assert extract_code_from_html_text('<pre>print("Hello, World!")</pre>') == ['print("Hello, World!")']
            
            # Test case 3: HTML text with multiple code blocks
            assert extract_code_from_html_text('<pre>code block 1</pre><pre>code block 2</pre>') == ['code block 1', 'code block 2']
        """
        
        text_with_code_tag = self.format_line_html_text(html_text)

        if self.CODE_MARK not in text_with_code_tag:
            return []

        code_index_start = 0
        soup = BeautifulSoup(html_text, 'lxml')
        code_tag = soup.find_all(name=['pre', 'blockquote'])
        code_count = text_with_code_tag.count(self.CODE_MARK)
        code_list = []
        for code_index in range(code_index_start, code_index_start + code_count):
            code = code_tag[code_index].get_text()
            if code:
                code_list.append(code)
        return code_list