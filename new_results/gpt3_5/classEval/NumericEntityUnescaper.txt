"""
This class implements a Numeric Entity Unescaper that replaces numeric character references within a string with their corresponding Unicode characters.
"""

class NumericEntityUnescaper:
    def __init__(self):
        """
        NumericEntityUnescaper class initialization.
        """
        pass

    def replace(self, string):
        """
        Replace numeric character references with their corresponding Unicode characters in the given string.

        Parameters:
            string (str): The input string containing numeric character references

        Returns:
            str: The string with numeric character references replaced by Unicode characters

        Test cases:
            # Test case 1: Numeric character reference in decimal format
            assert replace('This is a numeric reference &#65;') == 'This is a numeric reference A'

            # Test case 2: Numeric character reference in hexadecimal format
            assert replace('This is a numeric reference &#x41;') == 'This is a numeric reference A'

            # Test case 3: Invalid numeric character reference
            assert replace('Invalid entity &#;') == 'Invalid entity &#;'

            # Test case 4: Empty string
            assert replace('') == ''

            # Test case 5: String with no numeric character references
            assert replace('No numeric references here!') == 'No numeric references here!'
        """

        out = []
        pos = 0
        length = len(string)

        while pos < length - 2:
            if string[pos] == '&' and string[pos + 1] == '#':
                start = pos + 2
                is_hex = False
                first_char = string[start]

                if first_char == 'x' or first_char == 'X':
                    start += 1
                    is_hex = True

                if start == length:
                    return ''.join(out)

                end = start
                while end < length and self.is_hex_char(string[end]):
                    end += 1

                if end < length and string[end] == ';':
                    try:
                        entity_value = int(string[start:end], 16 if is_hex else 10)
                    except:
                        return ''.join(out)

                    out.append(chr(entity_value))
                    pos = end + 1
                    continue

            out.append(string[pos])
            pos += 1

        return ''.join(out)

    @staticmethod
    def is_hex_char(char):
        """
        Check if a character is a hexadecimal digit.

        Parameters:
            char (str): The character to check

        Returns:
            bool: True if the character is a hexadecimal digit, False otherwise

        Test cases:
            # Test case 1: Hex character 'A'
            assert is_hex_char('A') == True
            
            # Test case 2: Non-hex character '.'
            assert is_hex_char('.') == False
            
            # Test case 3: Numeric character '5'
            assert is_hex_char('5') == True
        """
        return char.isdigit() or ('a' <= char.lower() <= 'f')
```