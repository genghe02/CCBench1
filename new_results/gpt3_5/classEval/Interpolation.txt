"""
This class provides interpolation methods for 1D and 2D data.

The class contains static methods to perform linear interpolation in 1D and 2D space.
"""

class Interpolation:
    def __init__(self):
        """
        Initialization method for the Interpolation class.
        """
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """
        Perform linear interpolation in 1D space between given data points.

        Parameters:
            x (list): List of x-coordinates of data points
            y (list): List of y-coordinates of data points
            x_interp (list): List of x-coordinates where interpolation is desired
        
        Returns:
            list: Interpolated y-coordinates corresponding to x_interp
        
        Test cases:
            # Test case 1: Interpolating between two points
            assert interpolate_1d([0, 1], [1, 2], [0.5]) == [1.5]
            
            # Test case 2: Edge case of extrapolation
            assert interpolate_1d([0, 1, 2], [1, 2, 3], [-1, 3]) == [0, 4]
            
            # Test case 3: Interpolation within data range
            assert interpolate_1d([0, 1], [1, 2], [0.25, 0.75]) == [1.25, 1.75]
        """

        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        """
        Perform bilinear interpolation in 2D space between given data points.

        Parameters:
            x (list): List of x-coordinates of grid points
            y (list): List of y-coordinates of grid points
            z (2D list): Data matrix corresponding to x, y grid
            x_interp (list): List of x-coordinates where interpolation is desired
            y_interp (list): List of y-coordinates where interpolation is desired
        
        Returns:
            list: Interpolated z-values corresponding to x_interp, y_interp
        
        Test cases:
            # Test case 1: Interpolating between four grid points
            assert interpolate_2d([0, 1], [0, 1], [[1, 2], [3, 4]], [0.5], [0.5]) == [2.5]
            
            # Test case 2: Edge case interpolation near boundary
            assert interpolate_2d([0, 1], [0, 1], [[1, 2], [3, 4]], [0, 1], [0, 1]) == [1, 4]
            
            # Test case 3: Interpolation within data range
            assert interpolate_2d([0, 1, 2], [0, 1, 2], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [0.5, 1.5], [0.5, 1.5]) == [3, 6]
        """
        
        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j+1]:
                            z00 = z[i][j]
                            z01 = z[i][j+1]
                            z10 = z[i+1][j]
                            z11 = z[i+1][j+1]
                            zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
                                  z10 * (xi - x[i]) * (y[j+1] - yi) +
                                  z01 * (x[i+1] - xi) * (yi - y[j]) +
                                  z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp
"""