"""
This class represents an Order management system that allows adding dishes, calculating total price, and processing checkouts.
"""

class Order:

    def __init__(self):
        """
        Initialize the Order class with an empty menu, selected dishes, and sales.

        Variables:
            menu (list): List containing dictionaries of available dishes with counts
            selected_dishes (list): List of selected dishes with quantities
            sales (dict): Dictionary containing sales multiplier for each dish
        """
        self.menu = []
        self.selected_dishes = []
        self.sales = {}

    def add_dish(self, dish):
        """
        Add a dish to the selected dishes list and update the available count in the menu.

        Parameters:
            dish (dict): Dictionary containing dish name, count, and price
        
        Returns:
            bool: True if dish is added successfully, False otherwise
        
        Test cases:
            # Test case 1: Adding dish with available count
            input = {"dish": "Pizza", "count": 2, "price": 12.5}
            expected_output = True

            # Test case 2: Adding dish with count exceeding menu availability
            input = {"dish": "Burger", "count": 5, "price": 8.5}
            expected_output = False

            # Test case 3: Adding dish not in menu
            input = {"dish": "Salad", "count": 1, "price": 6.75}
            expected_output = False
        """
        for menu_dish in self.menu:
            if dish["dish"] == menu_dish["dish"]:
                if menu_dish["count"] < dish["count"]:
                    return False
                else:
                    menu_dish["count"] -= dish["count"]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        """
        Calculate the total price of all selected dishes based on their quantities and prices.

        Returns:
            float: Total price of all selected dishes
        
        Test cases:
            # Test case 1: Calculating total with multiple dishes
            selected_dishes = [{"dish": "Pizza", "count": 2, "price": 12.5}, {"dish": "Salad", "count": 1, "price": 6.75}]
            expected_output = 31.75

            # Test case 2: Calculating total with no dishes
            selected_dishes = []
            expected_output = 0.0

            # Test case 3: Calculating total with one dish
            selected_dishes = [{"dish": "Burger", "count": 3, "price": 8.5}]
            expected_output = 25.5
        """
        total = 0
        for dish in self.selected_dishes:
            total += dish["price"] * dish["count"] * self.sales[dish["dish"]]
        return total

    def checkout(self):
        """
        Process the checkout by calculating the total price and resetting the selected dishes.

        Returns:
            float or False: Total price of selected dishes if checkout successful, False if no dishes selected
        
        Test cases:
            # Test case 1: Processing checkout with selected dishes
            selected_dishes = [{"dish": "Pizza", "count": 2, "price": 12.5}]
            expected_output = 25.0

            # Test case 2: Processing checkout with no selected dishes
            selected_dishes = []
            expected_output = False

            # Test case 3: Processing checkout after calculating total
            selected_dishes = [{"dish": "Burger", "count": 4, "price": 8.5}]
            expected_output = 34.0
        """
        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total