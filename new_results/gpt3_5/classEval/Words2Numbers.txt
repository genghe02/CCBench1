'''
This class implements a utility to convert textual representations of numbers into integer form.

It provides methods to parse textual representations of numbers and validate their format.

The class initializes dictionaries to store mappings between words and numbers, as well as ordinal words and their corresponding values.

It also defines lists of units, tens, and scales used to convert textual numbers into integers.
'''

class Words2Numbers:

    def __init__(self):
        """
        Initializes the Words2Numbers class with word-to-number mappings.
        """
        self.numwords = {}
        self.units = [
            "zero", "one", "two", "three", "four", "five", "six", "seven", "eight",
            "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen",
            "sixteen", "seventeen", "eighteen", "nineteen",
        ]
        self.tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
        self.scales = ["hundred", "thousand", "million", "billion", "trillion"]

        self.numwords["and"] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def text2int(self, textnum):
        """
        Convert a textual number representation into an integer.
        
        Parameters:
            textnum (str): The textual number to convert
        
        Returns:
            str: The integer representation of the textual number
        
        Test cases:
            # Test case 1: Normal usage
            assert text2int('twenty two') == '22'
            
            # Test case 2: Edge case (ordinal word)
            assert text2int('twelfth') == '12'
            
            # Test case 3: Error case (invalid input)
            assert text2int('invalid number') == ''
        """
        textnum = textnum.replace('-', ' ')

        current = result = 0
        curstring = ""
        onnumber = False
        for word in textnum.split():
            if word in self.ordinal_words:
                scale, increment = (1, self.ordinal_words[word])
                current = current * scale + increment
                onnumber = True
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    if onnumber:
                        curstring += repr(result + current) + " "
                    curstring += word + " "
                    result = current = 0
                    onnumber = False
                else:
                    scale, increment = self.numwords[word]
                    current = current * scale + increment
                    if scale > 100:
                        result += current
                        current = 0
                    onnumber = True

        if onnumber:
            curstring += repr(result + current)

        return curstring

    def is_valid_input(self, textnum):
        """
        Validate the format of a textual number input.
        
        Parameters:
            textnum (str): The textual number to validate
        
        Returns:
            bool: True if the input is valid, False otherwise
        
        Test cases:
            # Test case 1: Normal input validation
            assert is_valid_input('twenty two') == True
            
            # Test case 2: Ordinal word handling
            assert is_valid_input('twelfth') == True
            
            # Test case 3: Invalid input format
            assert is_valid_input('invalid number') == False
        """

        textnum = textnum.replace('-', ' ')

        for word in textnum.split():
            if word in self.ordinal_words:
                continue
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    return False

        return True