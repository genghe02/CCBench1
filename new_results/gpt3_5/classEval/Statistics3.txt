"""
This class implements various statistical functions for analyzing data.

It includes methods like median, mode, correlation, mean, correlation matrix, standard deviation, and z-score calculations.
"""

import math

class Statistics3:

    @staticmethod
    def median(data):
        """
        Calculate the median value of a given dataset.

        Parameters:
            data (list): A list of numerical values from which to calculate the median

        Returns:
            float: The median value of the input data

        Test cases:
            # Test case 1: Odd-length list
            assert Statistics3.median([1, 3, 5, 7, 9]) == 5.0
            
            # Test case 2: Even-length list
            assert Statistics3.median([2, 4, 6, 8]) == 5.0
            
            # Test case 3: Empty list
            assert Statistics3.median([]) is None
        """

        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        """
        Find the mode value(s) of a given dataset.

        Parameters:
            data (list): A list of values from which to find the mode
        
        Returns:
            list: A list of mode value(s) present in the input data

        Test cases:
            # Test case 1: Single mode
            assert Statistics3.mode([1, 1, 1, 2, 2, 3]) == [1]
            
            # Test case 2: Multiple modes
            assert Statistics3.mode([1, 1, 2, 2, 3, 3, 3]) == [3]
            
            # Test case 3: No mode
            assert Statistics3.mode([1, 2, 3, 4, 5]) == []
        """

        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        """
        Calculate the correlation coefficient between two datasets.

        Parameters:
            x (list): First list of numerical values
            y (list): Second list of numerical values
        
        Returns:
            float: The correlation coefficient between the two input datasets
                   Returns None if denominator is zero

        Test cases:
            # Test case 1: Perfect correlation
            assert Statistics3.correlation([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == 1.0

            # Test case 2: No correlation
            assert Statistics3.correlation([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) == 0.0

            # Test case 3: Empty input
            assert Statistics3.correlation([], []) is None
        """

        n = len(x)
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        """
        Calculate the mean value of a given dataset.

        Parameters:
            data (list): A list of numerical values to calculate the mean
        
        Returns:
            float: The mean value of the input data
                   Returns None for an empty input

        Test cases:
            # Test case 1: Sample data
            assert Statistics3.mean([1, 2, 3, 4, 5]) == 3.0

            # Test case 2: Empty list
            assert Statistics3.mean([]) is None

            # Test case 3: Single value
            assert Statistics3.mean([42]) == 42.0
        """

        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        """
        Generate a correlation matrix for a given multi-dimensional dataset.

        Parameters:
            data (list): A 2D list of numerical values for which to calculate correlation
        
        Returns:
            list: A 2D matrix where each element is the correlation coefficient between two columns
                  Returns None if len(data) is less than 2

        Test cases:
            # Test case 1: Simple case with two columns
            assert Statistics3.correlation_matrix([[1, 2, 3], [4, 5, 6]]) == [[1.0, 1.0], [1.0, 1.0]]

            # Test case 2: Empty input
            assert Statistics3.correlation_matrix([]) == None

            # Test case 3: Single column input
            assert Statistics3.correlation_matrix([[1, 2, 3]]) == None
        """

        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        """
        Calculate the standard deviation of a given dataset.

        Parameters:
            data (list): A list of numerical values for which to calculate the standard deviation
        
        Returns:
            float: The standard deviation value of the input data
                   Returns None for a dataset with less than 2 elements

        Test cases:
            # Test case 1: Standard case
            assert Statistics3.standard_deviation([1, 2, 3, 4, 5]) == 1.5811388300841898

            # Test case 2: Empty input
            assert Statistics3.standard_deviation([]) is None

            # Test case 3: Single value
            assert Statistics3.standard_deviation([42]) is None
        """

        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        """
        Calculate the z-scores of a given dataset.

        Parameters:
            data (list): A list of numerical values for which to calculate the z-scores
        
        Returns:
            list: A list of z-scores corresponding to the input data
                  Returns None if standard deviation is zero or dataset is empty

        Test cases:
            # Test case 1: Standard case
            assert Statistics3.z_score([1, 2, 3, 4, 5]) == [-1.2649110640673518, -0.6324555320336759, 0.0, 0.6324555320336759, 1.2649110640673518]

            # Test case 2: Empty input
            assert Statistics3.z_score([]) is None

            # Test case 3: No variability in data
            assert Statistics3.z_score([1, 1, 1, 1, 1]) is None
        """

        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]
"""