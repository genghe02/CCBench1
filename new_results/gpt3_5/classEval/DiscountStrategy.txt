"""
This class implements a discount strategy for a customer's shopping cart based on different promotion schemes.

The DiscountStrategy class allows for the calculation of a discounted total price based on the items in the cart and the selected promotion.
"""

class DiscountStrategy:
    def __init__(self, customer, cart, promotion=None):
        """
        Initialize the DiscountStrategy object with customer details, shopping cart items, and an optional promotion function.

        Parameters:
            customer (dict): Customer information
            cart (list): List of items in the shopping cart
            promotion (function): Optional promotion function to calculate discounts

        Test cases:
            # Test case 1: No promotion provided
            strategy = DiscountStrategy(customer={}, cart=[{'product': 'item1', 'quantity': 2, 'price': 10}])
            assert strategy.__total == 20

            # Test case 2: Promotion provided
            def dummy_promotion(order):
                return 5
            strategy = DiscountStrategy(customer={}, cart=[{'product': 'item1', 'quantity': 2, 'price': 10}], promotion=dummy_promotion)
            assert strategy.__total == 20

            # Test case 3: Empty cart
            strategy = DiscountStrategy(customer={}, cart=[])
            assert strategy.__total == 0

        """
        self.customer = customer
        self.cart = cart
        self.promotion = promotion
        self.__total = self.total()

    def total(self):
        """
        Calculate the total price of all items in the shopping cart.

        Returns:
            float: Total price of items in the cart

        Test cases:
            # Test case 1: Positive values
            assert total() == 100
            
            # Test case 2: Zero total
            assert total() == 0
            
            # Test case 3: Negative values
            assert total() == -50
        """
        self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
        return self.__total

    def due(self):
        """
        Calculate the total amount due after applying any discounts based on the selected promotion.

        Returns:
            float: Total amount due after applying discounts

        Test cases:
            # Test case 1: No promotion
            strategy = DiscountStrategy(customer={}, cart=[{'product': 'item1', 'quantity': 2, 'price': 10}])
            assert strategy.due() == 20
            
            # Test case 2: Applying promotion
            def dummy_promotion(order):
                return 5
            strategy = DiscountStrategy(customer={}, cart=[{'product': 'item1', 'quantity': 2, 'price': 10}], promotion=dummy_promotion)
            assert strategy.due() == 15
            
            # Test case 3: Empty cart
            strategy = DiscountStrategy(customer={}, cart=[])
            assert strategy.due() == 0
        """
        if self.promotion is None:
            discount = 0
        else:
            discount = self.promotion(self)
        return self.__total - discount

    @staticmethod
    def FidelityPromo(order):
        """
        Calculate the discount based on the customer's fidelity level.

        Parameters:
            order (DiscountStrategy): DiscountStrategy object representing the order

        Returns:
            float: Discount amount based on fidelity level

        Test cases:
            # Test case 1: Low fidelity
            assert FidelityPromo(order) == 0
            
            # Test case 2: High fidelity
            assert FidelityPromo(order) == 10
            
            # Test case 3: Negative fidelity
            assert FidelityPromo(order) == 0
        """
        return order.total() * 0.05 if order.customer.get('fidelity', 0) >= 1000 else 0

    @staticmethod
    def BulkItemPromo(order):
        """
        Calculate the discount based on bulk purchase of items.

        Parameters:
            order (DiscountStrategy): DiscountStrategy object representing the order

        Returns:
            float: Discount amount based on bulk item purchase

        Test cases:
            # Test case 1: No bulk discount
            assert BulkItemPromo(order) == 0
            
            # Test case 2: Bulk discount available
            assert BulkItemPromo(order) == 10
            
            # Test case 3: Negative quantity
            assert BulkItemPromo(order) == 0
        """
        discount = 0
        for item in order.cart:
            if item['quantity'] >= 20:
                discount += item['quantity'] * item['price'] * 0.1
        return discount

    @staticmethod
    def LargeOrderPromo(order):
        """
        Calculate the discount based on the number of unique products in the order.

        Parameters:
            order (DiscountStrategy): DiscountStrategy object representing the order

        Returns:
            float: Discount amount based on the size of the order

        Test cases:
            # Test case 1: Small order
            assert LargeOrderPromo(order) == 0
            
            # Test case 2: Large order with discount
            assert LargeOrderPromo(order) == 15
            
            # Test case 3: Negative quantity
            assert LargeOrderPromo(order) == 0
        """
        return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
```