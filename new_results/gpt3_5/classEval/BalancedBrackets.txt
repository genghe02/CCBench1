"""
This class represents a BalancedBrackets checker that verifies the balance of different types of brackets in an expression.
"""

class BalancedBrackets:
    
    def __init__(self, expr):
        """
        Initialize the BalancedBrackets class with the expression to check.
        
        Parameters:
            expr (str): The input expression containing various brackets

        """
        self.stack = []
        self.left_brackets = ["(", "{", "["]
        self.right_brackets = [")", "}", "]"]
        self.expr = expr

    def clear_expr(self):
        """
        Remove characters from the expression that are not brackets.
        
        Test cases:
            # Test case 1: With numbers
            assert clear_expr("a(b{c})") == "(})"
            
            # Test case 2: Mixed characters
            assert clear_expr("((a{}b))") == "({})"
            
            # Test case 3: Only brackets
            assert clear_expr("{[(()){}]((}))") == "{[(()){}]}"
        """
        self.expr = ''.join(c for c in self.expr if (c in self.left_brackets or c in self.right_brackets))

    def check_balanced_brackets(self):
        """
        Check if the brackets in the expression are balanced.
        
        Returns:
            bool: True if brackets are balanced, False otherwise
        
        Test cases:
            # Test case 1: Regular brackets
            assert check_balanced_brackets("((()))") == True
            
            # Test case 2: Empty expression
            assert check_balanced_brackets("") == True
            
            # Test case 3: Unbalanced brackets
            assert check_balanced_brackets("{[()]})") == False
        """
        self.clear_expr()
        for Brkt in self.expr:
            if Brkt in self.left_brackets:
                self.stack.append(Brkt)
            else:
                Current_Brkt = self.stack.pop()
                if Current_Brkt == "(":
                    if Brkt != ")":
                        return False
                if Current_Brkt == "{":
                    if Brkt != "}":
                        return False
                if Current_Brkt == "[":
                    if Brkt != "]":
                        return False
        if self.stack:
            return False
        return True
```