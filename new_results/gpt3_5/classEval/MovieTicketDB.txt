"""
This class represents a Movie Ticket Database that allows for ticket management in a SQLite database.

The class includes methods to create the necessary table, insert new tickets, search for tickets by customer name, and delete tickets by ticket ID.
"""

import sqlite3


class MovieTicketDB:
    def __init__(self, db_name):
        """
        Initialize the MovieTicketDB object with the connection to the SQLite database.

        Parameters:
            db_name (str): The name of the SQLite database
        
        Returns:
            None
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """
        Create the 'tickets' table in the SQLite database if it does not exist.

        Parameters:
            None
        
        Returns:
            None
        """
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """
        Insert a new ticket into the 'tickets' table in the database.

        Parameters:
            movie_name (str): The name of the movie
            theater_name (str): The name of the theater
            seat_number (str): The seat number
            customer_name (str): The name of the customer
        
        Returns:
            None
        """
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        """
        Search for tickets in the 'tickets' table based on the customer's name.

        Parameters:
            customer_name (str): The name of the customer to search for
        
        Returns:
            List of tuples: List of tickets matching the customer's name
        
        Test cases:
            # Test case 1: Normal case
            assert search_tickets_by_customer('Alice') == [(1, 'Movie 1', 'Theater 1', 'A1', 'Alice')]
            
            # Test case 2: Edge case with no matching tickets
            assert search_tickets_by_customer('Bob') == []
            
            # Test case 3: Error case with invalid customer name
            assert search_tickets_by_customer('') == []
        """
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        """
        Delete a ticket from the 'tickets' table based on the ticket ID.

        Parameters:
            ticket_id (int): The ID of the ticket to be deleted
        
        Returns:
            None
        """
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()
```