"""
This class represents a Big Number Calculator that can perform addition, subtraction, and multiplication operations on large integers.
"""

class BigNumCalculator:
    @staticmethod
    def add(num1, num2):
        """
        Add two large integers represented as strings.
        
        Parameters:
            num1 (str): The first large integer
            num2 (str): The second large integer
            
        Returns:
            str: The sum of the two large integers as a string
            
        Test cases:
            # Test case 1: Normal addition
            assert add('1234', '5678') == '6912'
            
            # Test case 2: Addition with carry
            assert add('999', '1') == '1000'
            
            # Test case 3: Addition with leading zeros
            assert add('0001234', '0005678') == '0006912'
        """
        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        carry = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_sum = int(num1[i]) + int(num2[i]) + carry
            carry = digit_sum // 10
            digit = digit_sum % 10
            result.insert(0, str(digit))

        if carry > 0:
            result.insert(0, str(carry))

        return ''.join(result)

    @staticmethod
    def subtract(num1, num2):
        """
        Subtract two large integers represented as strings.
        
        Parameters:
            num1 (str): The first large integer
            num2 (str): The second large integer
            
        Returns:
            str: The difference between the two large integers as a string
            
        Test cases:
            # Test case 1: Normal subtraction
            assert subtract('5678', '1234') == '4444'
            
            # Test case 2: Subtraction with borrowing
            assert subtract('1000', '1') == '999'
            
            # Test case 3: Subtraction with negative result
            assert subtract('1234', '5678') == '-4444'
        """
        if len(num1) < len(num2):
            num1, num2 = num2, num1
            negative = True
        elif len(num1) > len(num2):
            negative = False
        else:
            if num1 < num2:
                num1, num2 = num2, num1
                negative = True
            else:
                negative = False

        max_length = max(len(num1), len(num2))
        num1 = num1.zfill(max_length)
        num2 = num2.zfill(max_length)

        borrow = 0
        result = []
        for i in range(max_length - 1, -1, -1):
            digit_diff = int(num1[i]) - int(num2[i]) - borrow

            if digit_diff < 0:
                digit_diff += 10
                borrow = 1
            else:
                borrow = 0

            result.insert(0, str(digit_diff))

        while len(result) > 1 and result[0] == '0':
            result.pop(0)

        if negative:
            result.insert(0, '-')

        return ''.join(result)

    @staticmethod
    def multiply(num1, num2):
        """
        Multiply two large integers represented as strings.
        
        Parameters:
            num1 (str): The first large integer
            num2 (str): The second large integer
            
        Returns:
            str: The product of the two large integers as a string
            
        Test cases:
            # Test case 1: Normal multiplication
            assert multiply('123', '456') == '56088'
            
            # Test case 2: Multiplication by zero
            assert multiply('999', '0') == '0'
            
            # Test case 3: Multiplication with leading zeros
            assert multiply('000123', '000456') == '0056088'
        """
        len1, len2 = len(num1), len(num2)
        result = [0] * (len1 + len2)

        for i in range(len1 - 1, -1, -1):
            for j in range(len2 - 1, -1, -1):
                mul = int(num1[i]) * int(num2[j])
                p1, p2 = i + j, i + j + 1
                total = mul + result[p2]

                result[p1] += total // 10
                result[p2] = total % 10

        start = 0
        while start < len(result) - 1 and result[start] == 0:
            start += 1

        return ''.join(map(str, result[start:]))