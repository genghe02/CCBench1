"""
This class contains utilities for decryption of encrypted texts using various algorithms like Caesar, Vigenere, and Rail Fence.

Import necessary modules logging and datetime.
"""

import logging
import datetime


class DecryptionUtils:
    def __init__(self, key):
        """
        Initialize DecryptionUtils object with a key for Vigenere cipher.

        Parameters:
            key (str): The key used for Vigenere decryption.
        """
        self.key = key
    
    def caesar_decipher(self, ciphertext, shift):
        """
        Decrypt the Caesar cipher encrypted text.

        Parameters:
            ciphertext (str): The text encrypted using the Caesar cipher.
            shift (int): The number of alphabet positions to shift for decryption.
        
        Returns:
            str: Decrypted plaintext text.
        
        Test cases:
            # Test case 1: Normal decryption
            assert caesar_decipher('Khoor zruog', 3) == 'Hello world'
            
            # Test case 2: Decryption with large shift
            assert caesar_decipher('Olar!', 50) == 'John!'
            
            # Test case 3: Decryption with special characters
            assert caesar_decipher('S|w%w#>',
              7) == 'J|n%i#>'
        """

        plaintext = ""
        for char in ciphertext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
                plaintext += shifted_char
            else:
                plaintext += char
        return plaintext
    
    def vigenere_decipher(self, ciphertext):
        """
        Decrypt the Vigenere cipher encrypted text.

        Parameters:
            ciphertext (str): The text encrypted using the Vigenere cipher.
        
        Returns:
            str: Decrypted plaintext text.
        
        Test cases:
            # Test case 1: Normal decryption
            assert vigenere_decipher('Mflzvvn lsezvq!', 'Python') == 'Hello world!'
            
            # Test case 2: Decryption with special characters
            assert vigenere_decipher('Ade!f|w# ?', 'XYZ') == 'Yes!it# ?'
            
            # Test case 3: Decryption with non-alphabetic characters
            assert vigenere_decipher('YTI* YI', 'ABCD') == 'TOP* SEC'
        """

        decrypted_text = ""
        key_index = 0
        for char in ciphertext:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char
                key_index += 1
            else:
                decrypted_text += char
        return decrypted_text
    
    def rail_fence_decipher(self, encrypted_text, rails):
        """
        Decrypt the Rail Fence cipher encrypted text.

        Parameters:
            encrypted_text (str): The text encrypted using the Rail Fence cipher.
            rails (int): The number of rail levels used for encryption.
        
        Returns:
            str: Decrypted plaintext text.
        
        Test cases:
            # Test case 1: Normal decryption
            assert rail_fence_decipher('WCIRYACPELNTTOE', 3) == 'WEAREDISCOVEREDFLEEATONCE'
            
            # Test case 2: Decryption with fewer rails
            assert rail_fence_decipher('ARROFSAWCTESALERNN', 2) == 'AFTERROWSOFTABLESCLEAN'
            
            # Test case 3: Decryption with special characters
            assert rail_fence_decipher('MH.IMORU*GDLEKE?CNRPROXTEA', 4) == 'MODERNGULFEXCHANGEPROGRAM!'
        """
        
        fence = [['\n' for _ in range(len(encrypted_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            fence[row][col] = ''
            col += 1
            row += direction

        index = 0
        for i in range(rails):
            for j in range(len(encrypted_text)):
                if fence[i][j] == '':
                    fence[i][j] = encrypted_text[index]
                    index += 1

        plain_text = ''
        direction = -1
        row, col = 0, 0
        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            plain_text += fence[row][col]
            col += 1
            row += direction

        return plain_text