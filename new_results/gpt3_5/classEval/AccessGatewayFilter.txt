"""
This class provides an Access Gateway Filter that handles request filtering, authentication, and logging.

The class implements methods to filter requests, validate request URIs, get user information from JWT tokens, and log user activity.
"""

import logging
import datetime


class AccessGatewayFilter:
    """
    Access Gateway filter class for request filtering, validation, and logging.
    """

    def __init__(self):
        """
        Constructor for the AccessGatewayFilter class.
        """

    def filter(self, request):
        """
        Filters the incoming requests based on URI and user authorization.

        Parameters:
            request (dict): The incoming request object containing path and method.

        Returns:
            bool: True if the request is authorized, False otherwise.

        Test cases:
            # Test case 1: Valid request
            assert filter({'path': '/api/users', 'method': 'GET'}) == True
            
            # Test case 2: Invalid request
            assert filter({'path': '/admin/users', 'method': 'GET'}) == False
            
            # Test case 3: Exception handling
            assert filter({'path': '/api/users', 'method': 'GET', 'headers': {'Authorization': 'Invalid'}}) == False
        """

        request_uri = request['path']
        method = request['method']

        if self.is_start_with(request_uri):
            return True

        try:
            token = self.get_jwt_user(request)
            user = token['user']
            if user['level'] > 2:
                self.set_current_user_info_and_log(user)
                return True
        except:
            return False

    def is_start_with(self, request_uri):
        """
        Checks if the request URI starts with allowed prefixes.

        Parameters:
            request_uri (str): The URI path to check.

        Returns:
            bool: True if the URI starts with an allowed prefix, False otherwise.

        Test cases:
            # Test case 1: API endpoint
            assert is_start_with('/api/users') == True
            
            # Test case 2: Login endpoint
            assert is_start_with('/login') == True
            
            # Test case 3: Protected endpoint
            assert is_start_with('/admin/users') == False
        """

        start_with = ["/api", '/login']
        for s in start_with:
            if request_uri.startswith(s):
                return True
        return False

    def get_jwt_user(self, request):
        """
        Extracts user information from JWT token in the request headers.

        Parameters:
            request (dict): The incoming request object containing headers.

        Returns:
            dict: User information extracted from the JWT token.

        Test cases:
            # Test case 1: Valid JWT token
            assert get_jwt_user({'headers': {'Authorization': {'jwt': 'token', 'user': {'name': 'John'}}}}) != None
            
            # Test case 2: Invalid JWT token expiry
            assert get_jwt_user({'headers': {'Authorization': {'jwt': 'token', 'user': {'name': 'Jane'}}}}) == None
            
            # Test case 3: Missing JWT token
            assert get_jwt_user({'headers': {}}) == None
        """

        token = request['headers']['Authorization']
        user = token['user']
        if token['jwt'].startswith(user['name']):
            jwt_str_date = token['jwt'].split(user['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    def set_current_user_info_and_log(self, user):
        """
        Logs the current user information and activity.

        Parameters:
            user (dict): The user information retrieved from JWT.

        Returns:
            None

        Test cases:
            # Test case 1: Logging user info
            set_current_user_info_and_log({'name': 'Alice', 'address': '123 Main St', 'level': 3})
            
            # Test case 2: Logging admin info
            set_current_user_info_and_log({'name': 'Admin', 'address': '456 Admin St', 'level': 5})
            
            # Test case 3: No user info provided
            set_current_user_info_and_log({})
        """

        host = user['address']
        logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)