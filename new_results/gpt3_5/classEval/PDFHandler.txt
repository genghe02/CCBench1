"""
This class represents a PDF handler that facilitates merging multiple PDF files and extracting text content from them.

The class encapsulates methods to merge PDF files and extract text content from them.

import PyPDF2

class PDFHandler:
    def __init__(self, filepaths):
        """
        Initialize the PDF handler with a list of file paths.

        Parameters:
            filepaths (list): List of file paths to the PDF files
        """
        self.filepaths = filepaths
        # PdfFileReader is deprecated and was removed in PyPDF2 3.0.0. Use PdfReader instead.
        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]

    def merge_pdfs(self, output_filepath):
        """
        Merge the PDF files into a single PDF file.

        Parameters:
            output_filepath (str): File path to save the merged PDF

        Returns:
            str: Message indicating the location where the merged PDF is saved

        Test cases:
            # Test case 1: Merge two PDFs successfully
            assert merge_pdfs("merged.pdf") == "Merged PDFs saved at merged.pdf"
            
            # Test case 2: Merge PDF from empty file list
            assert merge_pdfs("empty.pdf") == "Merged PDFs saved at empty.pdf"
            
            # Test case 3: Merge non-existing PDFs
            assert merge_pdfs("nonexist.pdf") == "Merged PDFs saved at nonexist.pdf"
        """
        pdf_writer = PyPDF2.PdfWriter()
        
        for reader in self.readers:
            # reader.getNumPages is deprecated and was removed in PyPDF2 3.0.0. Use len(reader.pages) instead.
            for page_num in range(len(reader.pages)):
                # reader.getPage(pageNumber) is deprecated and was removed in PyPDF2 3.0.0. Use reader.pages[page_number] instead.
                page = reader.pages[page_num]
                # addPage is deprecated and was removed in PyPDF2 3.0.0. Use add_page instead.
                pdf_writer.add_page(page)
        
        with open(output_filepath, 'wb') as out:
            pdf_writer.write(out)
        return f"Merged PDFs saved at {output_filepath}"

    def extract_text_from_pdfs(self):
        """
        Extract text content from the PDF files.

        Returns:
            list: List of text content extracted from each PDF page
        
        Test cases:
            # Test case 1: Extract text from PDF with known content
            assert extract_text_from_pdfs() == ["Page 1 Content", "Page 2 Content", ...]
            
            # Test case 2: Extract text from empty PDF file
            assert extract_text_from_pdfs() == [""]
            
            # Test case 3: Extract text from non-PDF file
            assert extract_text_from_pdfs() == []
        """
        pdf_texts = []
        for reader in self.readers:
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                pdf_texts.append(page.extract_text())
        return pdf_texts
"""