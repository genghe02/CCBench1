"""
This class implements chat functionality allowing users to exchange messages.

The chat class provides methods to add users, remove users, send messages between users, and get messages for a specific user.
"""

from datetime import datetime

class Chat:
    def __init__(self):
        """
        Initialize the chat with an empty user dictionary to store user messages.
        """
        self.users = {}

    def add_user(self, username):
        """
        Add a new user to the chat. Only unique usernames are allowed.

        Parameters:
            username (str): The username of the user to be added

        Returns:
            bool: True if the username was added successfully, False if the username already exists.

        Test cases:
            # Test case 1: Add a new user
            assert add_user('Alice') == True
            
            # Test case 2: Add an existing user
            assert add_user('Alice') == False
            
            # Test case 3: Add another new user
            assert add_user('Bob') == True
        """
        if username in self.users:
            return False
        else:
            self.users[username] = []
            return True

    def remove_user(self, username):
        """
        Remove a user from the chat.

        Parameters:
            username (str): The username of the user to be removed.

        Returns:
            bool: True if the user was removed successfully, False if the user does not exist.

        Test cases:
            # Test case 1: Remove an existing user
            assert remove_user('Alice') == True
            
            # Test case 2: Remove a non-existing user
            assert remove_user('Charlie') == False
            
            # Test case 3: Remove another existing user
            assert remove_user('Bob') == True
        """
        if username in self.users:
            del self.users[username]
            return True
        else:
            return False

    def send_message(self, sender, receiver, message):
        """
        Send a message from one user to another user.

        Parameters:
            sender (str): The username of the message sender.
            receiver (str): The username of the message receiver.
            message (str): The content of the message.

        Returns:
            bool: True if the message was sent successfully, False if sender or receiver does not exist.

        Test cases:
            # Test case 1: Send valid message
            assert send_message('Alice', 'Bob', 'Hello!') == True
            
            # Test case 2: Send message with non-existing sender
            assert send_message('Charlie', 'Bob', 'Hi.') == False
            
            # Test case 3: Send message with non-existing receiver
            assert send_message('Alice', 'David', 'Goodbye!') == False
        """
        if sender not in self.users or receiver not in self.users:
            return False

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_info = {
            'sender': sender,
            'receiver': receiver,
            'message': message,
            'timestamp': timestamp
        }
        self.users[sender].append(message_info)
        self.users[receiver].append(message_info)
        return True

    def get_messages(self, username):
        """
        Get all messages for a specific user.

        Parameters:
            username (str): The username of the user to retrieve messages for.

        Returns:
            list: List of message dictionaries with sender, receiver, message, and timestamp.

        Test cases:
            # Test case 1: Get messages for existing user
            assert get_messages('Alice') == [{'sender': 'Bob', 'receiver': 'Alice', 'message': 'Hi!', 'timestamp': '2022-12-31 23:59:59'}]
            
            # Test case 2: Get messages for non-existing user
            assert get_messages('Eve') == []
            
            # Test case 3: Get messages for another existing user
            assert get_messages('Bob') == [{'sender': 'Alice', 'receiver': 'Bob', 'message': 'Hello!', 'timestamp': '2022-12-31 23:59:59'}]
        """
        if username not in self.users:
            return []
        return self.users[username]