"""
This class provides functionality to format a given number into words with optional cents.

It converts a numerical value into its word representation with optional cents included.
"""

class NumberWordFormatter:
    def __init__(self):
        """
        Initializes the NumberWordFormatter class with predefined constants for conversion.
        """
        self.NUMBER = ["", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE"]
        self.NUMBER_TEEN = ["TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN",
                            "EIGHTEEN", "NINETEEN"]
        self.NUMBER_TEN = ["TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY"]
        self.NUMBER_MORE = ["", "THOUSAND", "MILLION", "BILLION"]
        self.NUMBER_SUFFIX = ["k", "w", "", "m", "", "", "b", "", "", "t", "", "", "p", "", "", "e"]

    def format(self, x):
        """
        Format a numerical value into words with optional cents.

        Parameters:
            x: int or float - The numerical value to format
        
        Returns:
            str: The word representation of the numerical value
        
        Test cases:
            # Test case 1: Positive integer value
            assert format(12345) == "TWELVE THOUSAND THREE HUNDRED FORTY-FIVE ONLY"
            
            # Test case 2: Decimal value with cents
            assert format(4321.45) == "FOUR THOUSAND THREE HUNDRED TWENTY-ONE AND CENTS FORTY-FIVE ONLY"
            
            # Test case 3: Negative value
            assert format(-1000) == "ONE THOUSAND ONLY"
        """

        if x is not None:
            return self.format_string(str(x))
        else:
            return ""

    def format_string(self, x):
        """
        Converts a string representation of a number into words.

        Parameters:
            x: str - The string representation of a numerical value
        
        Returns:
            str: The formatted word representation of the number
        
        Test cases:
            # Test case 1: Integer value
            assert format_string("123456") == "ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX ONLY"
            
            # Test case 2: Decimal value
            assert format_string("987.65") == "NINE HUNDRED EIGHTY-SEVEN AND CENTS SIXTY-FIVE ONLY"
            
            # Test case 3: Zero value
            assert format_string("0") == "ZERO ONLY"
        """
        
        lstr, rstr = (x.split('.') + [''])[:2]
        lstrrev = lstr[::-1]
        a = [''] * 5

        if len(lstrrev) % 3 == 1:
            lstrrev += "00"
        elif len(lstrrev) % 3 == 2:
            lstrrev += "0"

        lm = ""
        for i in range(len(lstrrev) // 3):
            a[i] = lstrrev[3 * i:3 * i + 3][::-1]
            if a[i] != "000":
                lm = self.trans_three(a[i]) + " " + self.parse_more(i) + " " + lm
            else:
                lm += self.trans_three(a[i])

        xs = f"AND CENTS {self.trans_two(rstr)} " if rstr else ""
        if not lm.strip():
            return "ZERO ONLY"
        else:
            return f"{lm.strip()} {xs}ONLY"

    def trans_two(self, s):
        """
        Translates a two-digit number into its word representation.

        Parameters:
            s: str - The two-digit number to translate
        
        Returns:
            str: The word representation of the input number
        
        Test cases:
            # Test case 1: Single digit number
            assert trans_two("5") == "FIVE"
            
            # Test case 2: Teen number
            assert trans_two("13") == "THIRTEEN"
            
            # Test case 3: Double-digit number
            assert trans_two("64") == "SIXTY-FOUR"
        """
        
        s = s.zfill(2)
        if s[0] == "0":
            return self.NUMBER[int(s[-1])]
        elif s[0] == "1":
            return self.NUMBER_TEEN[int(s) - 10]
        elif s[1] == "0":
            return self.NUMBER_TEN[int(s[0]) - 1]
        else:
            return self.NUMBER_TEN[int(s[0]) - 1] + " " + self.NUMBER[int(s[-1])]

    def trans_three(self, s):
        """
        Translates a three-digit number into its word representation.

        Parameters:
            s: str - The three-digit number to translate
        
        Returns:
            str: The word representation of the input number
        
        Test cases:
            # Test case 1: Basic three-digit number
            assert trans_three("123") == "ONE HUNDRED AND TWENTY-THREE"
            
            # Test case 2: Three-digit number with zero middle digit
            assert trans_three("206") == "TWO HUNDRED AND SIX"
            
            # Test case 3: Three-digit number ending in zero
            assert trans_three("900") == "NINE HUNDRED"
        """
        
        if s[0] == "0":
            return self.trans_two(s[1:])
        elif s[1:] == "00":
            return f"{self.NUMBER[int(s[0])]} HUNDRED"
        else:
            return f"{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}"

    def parse_more(self, i):
        """
        Parses the suffix for larger numbers such as thousand, million, etc.

        Parameters:
            i: int - The index of the suffix
        
        Returns:
            str: The corresponding suffix based on the index
        
        Test cases:
            # Test case 1: Thousand suffix
            assert parse_more(1) == "THOUSAND"
            
            # Test case 2: Million suffix
            assert parse_more(2) == "MILLION"
            
            # Test case 3: Invalid suffix
            assert parse_more(5) == ""
        """
        
        return self.NUMBER_MORE[i]