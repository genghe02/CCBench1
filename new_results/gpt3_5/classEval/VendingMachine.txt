"""
The class VendingMachine simulates a vending machine that allows users to add items, insert coins, purchase items, restock items, and display the available items.
"""

class VendingMachine:
    
    def __init__(self):
        """
        Initialize the vending machine inventory and balance.
        """
        self.inventory = {}
        self.balance = 0

    def add_item(self, item_name, price, quantity):
        """
        Add a new item to the vending machine.
        
        Parameters:
            item_name (str): The name of the item to add.
            price (float): The price of the item.
            quantity (int): The quantity of the item to add.
        
        Returns:
            None
        
        Test cases:
            # Test case 1: Add a new item
            add_item('Soda', 1.50, 10)
            assert 'Soda' in self.inventory.keys()
            
            # Test case 2: Restock an existing item
            add_item('Chips', 1.00, 5)
            assert self.inventory['Chips']['quantity'] == 5
            
            # Test case 3: Invalid item quantity
            add_item('Candy', 0.75, -2)
            assert 'Candy' not in self.inventory.keys()
    """

        if not self.restock_item(item_name, quantity):
            self.inventory[item_name] = {'price': price, 'quantity': quantity}

    def insert_coin(self, amount):
        """
        Insert coins into the vending machine's balance.
        
        Parameters:
            amount (float): The amount of money to insert.
        
        Returns:
            float: New balance after inserting the coins.
        
        Test cases:
            # Test case 1: Insert $1
            assert insert_coin(1.00) == 1.00
            
            # Test case 2: Insert $0.50
            assert insert_coin(0.50) == 0.50
            
            # Test case 3: Insert negative amount
            assert insert_coin(-1.00) == 0.00
    """
        self.balance += amount
        return self.balance

    def purchase_item(self, item_name):
        """
        Purchase an item from the vending machine if available.
        
        Parameters:
            item_name (str): The name of the item to purchase.
        
        Returns:
            Union[float, bool]: Remaining balance if item purchased successfully, False otherwise.
        
        Test cases:
            # Test case 1: Purchase existing item
            insert_coin(2.00)
            add_item('Soda', 1.50, 3)
            assert purchase_item('Soda') == 0.50
            
            # Test case 2: Insufficient balance
            add_item('Chips', 1.00, 2)
            assert purchase_item('Chips') == False
            
            # Test case 3: Purchase non-existent item
            assert purchase_item('Candy') == False
    """
        if item_name in self.inventory:
            item = self.inventory[item_name]
            if item['quantity'] > 0 and self.balance >= item['price']:
                self.balance -= item['price']
                item['quantity'] -= 1
                return self.balance
            else:
                return False
        else:
            return False

    def restock_item(self, item_name, quantity):
        """
        Restock an existing item in the vending machine.
        
        Parameters:
            item_name (str): The name of the item to restock.
            quantity (int): The quantity of the item to add.
        
        Returns:
            bool: True if item restocked successfully, False otherwise.
        
        Test cases:
            # Test case 1: Restock existing item
            add_item('Chips', 1.00, 2)
            assert restock_item('Chips', 3) == True
            
            # Test case 2: Restock non-existent item
            assert restock_item('Candy', 5) == False
            
            # Test case 3: Restock negative quantity
            assert restock_item('Soda', -2) == False
    """

        if item_name in self.inventory:
            self.inventory[item_name]['quantity'] += quantity
            return True
        else:
            return False

    def display_items(self):
        """
        Display the available items in the vending machine.
        
        Returns:
            Union[str, bool]: A string containing information about available items, False if no items are available.
        
        Test cases:
            # Test case 1: Display items when inventory is empty
            assert display_items() == False
            
            # Test case 2: Display items with existing inventory
            add_item('Soda', 1.50, 3)
            add_item('Chips', 1.00, 5)
            expected_output = "Soda - $1.5 [3]\nChips - $1.0 [5]"
            assert display_items() == expected_output
    """

        if not self.inventory:
            return False
        else:
            items = []
            for item_name, item_info in self.inventory.items():
                items.append(f"{item_name} - ${item_info['price']} [{item_info['quantity']}]")
            return "\n".join(items)