"""
This class provides statistical functions to calculate correlation coefficient, skewness, kurtosis, and probability density function (PDF) for given data arrays.
"""

import math

class DataStatistics4:

    @staticmethod
    def correlation_coefficient(data1, data2):
        """
        Calculate the correlation coefficient between two data arrays.

        Parameters:
            data1 (list): First data array
            data2 (list): Second data array
        
        Returns:
            float: Correlation coefficient value
        
        Test cases:
            # Test case 1: Positive correlation
            assert correlation_coefficient([1, 2, 3, 4], [2, 4, 6, 8]) == 1.0
            
            # Test case 2: Negative correlation
            assert correlation_coefficient([1, 2, 3, 4], [4, 3, 2, 1]) == -1.0
            
            # Test case 3: No correlation
            assert correlation_coefficient([1, 2, 3], [4, 5, 6]) == 0.0

        """
        n = len(data1)
        mean1 = sum(data1) / n
        mean2 = sum(data2) / n

        numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
        denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))

        return numerator / denominator if denominator != 0 else 0
    
    @staticmethod
    def skewness(data):
        """
        Calculate the skewness of a given data array.

        Parameters:
            data (list): Data array for skewness calculation
        
        Returns:
            float: Skewness value
        
        Test cases:
            # Test case 1: Right-skewed data
            assert skewness([1, 2, 3, 4, 5]) > 0
            
            # Test case 2: Left-skewed data
            assert skewness([5, 4, 3, 2, 1]) < 0
            
            # Test case 3: Symmetric data
            assert skewness([1, 2, 3, 2, 1]) == 0

        """
        n = len(data)
        mean = sum(data) / n
        variance = sum((x - mean) ** 2 for x in data) / n
        std_deviation = math.sqrt(variance)

        skewness = sum((x - mean) ** 3 for x in data) * n / ((n - 1) * (n - 2) * std_deviation ** 3) if std_deviation != 0 else 0

        return skewness
    
    @staticmethod
    def kurtosis(data):
        """
        Calculate the kurtosis of a given data array.

        Parameters:
            data (list): Data array for kurtosis calculation
        
        Returns:
            float: Kurtosis value
        
        Test cases:
            # Test case 1: Leptokurtic data
            assert kurtosis([1, 2, 3, 4, 5]) > 0
            
            # Test case 2: Platykurtic data
            assert kurtosis([1, 2, 3, 4, 3]) < 0
            
            # Test case 3: Mesokurtic data
            assert kurtosis([1, 2, 3, 4, 3]) == 0

        """
        n = len(data)
        mean = sum(data) / n
        std_dev = math.sqrt(sum((x - mean) ** 2 for x in data) / n)

        if std_dev == 0:
            return math.nan

        centered_data = [(x - mean) for x in data]
        fourth_moment = sum(x ** 4 for x in centered_data) / n

        kurtosis_value = (fourth_moment / std_dev ** 4) - 3

        return kurtosis_value
    
    @staticmethod
    def pdf(data, mu, sigma):
        """
        Calculate the probability density function (PDF) for a given data array with specified mean and standard deviation.

        Parameters:
            data (list): Data array for PDF calculation
            mu (float): Mean value
            sigma (float): Standard deviation value
        
        Returns:
            list: PDF values for the data array
        
        Test cases:
            # Test case 1: Non-zero PDF values
            assert pdf([1, 2, 3, 4, 5], 3, 1) == [0.24197072451914337, 0.05399096651318806, 0.0044318484119380075, 0.00013383022576488537, 1.4867195147342977e-06]
            
            # Test case 2: Zero standard deviation PDF
            assert pdf([1, 2, 3, 4, 5], 3, 0) == [0, 0, 0, 0, 0]
            
            # Test case 3: Zero mean and standard deviation
            assert pdf([1, 2, 3, 4, 5], 0, 0) == [0, 0, 0, 0, 0]

        """
        pdf_values = [1 / (sigma * math.sqrt(2 * math.pi)) * math.exp(-0.5 * ((x - mu) / sigma) ** 2) for x in data]
        return pdf_values
"""