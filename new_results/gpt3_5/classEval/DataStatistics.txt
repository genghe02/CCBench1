"""
This class implements data statistical calculations including mean, median, and mode.

The class contains methods to calculate the mean, median, and mode of a given list of numerical data.
"""

from collections import Counter

class DataStatistics:

    def mean(self, data):
        """
        Calculate the mean of a list of numerical data.

        Parameters:
            data (list): A list of numerical values for which to calculate the mean
        
        Returns:
            float: The mean of the input data
        
        Test cases:
            # Test case 1: Normal case
            assert mean([1, 2, 3, 4, 5]) == 3.0
            
            # Test case 2: Handling decimal values
            assert mean([2.5, 3.5, 4.5]) == 3.5
            
            # Test case 3: Empty input list
            assert mean([]) == 0.0

        return round(sum(data) / len(data), 2)

    def median(self, data):
        """
        Calculate the median of a list of numerical data.

        Parameters:
            data (list): A list of numerical values for which to calculate the median
        
        Returns:
            float: The median of the input data
        
        Test cases:
            # Test case 1: Odd number of elements
            assert median([1, 2, 3, 4, 5]) == 3
            
            # Test case 2: Even number of elements
            assert median([2, 4, 6, 8]) == 5.0
            
            # Test case 3: Reverse sorted input
            assert median([5, 4, 3, 2, 1]) == 3

        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 0:
            middle = n // 2
            return round((sorted_data[middle - 1] + sorted_data[middle]) / 2, 2)
        else:
            middle = n // 2
            return sorted_data[middle]

    def mode(self, data):
        """
        Calculate the mode of a list of numerical data.

        Parameters:
            data (list): A list of numerical values for which to calculate the mode
        
        Returns:
            list: List of mode values in input data
        
        Test cases:
            # Test case 1: Single mode
            assert mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [4]
            
            # Test case 2: Multiple modes
            assert mode([1, 2, 2, 3, 3, 3, 4, 4, 4]) == [3, 4]
            
            # Test case 3: No mode case
            assert mode([1, 2, 3, 4, 5]) == []
            
        counter = Counter(data)
        mode_count = max(counter.values())
        mode = [x for x, count in counter.items() if count == mode_count]
        return mode
"""