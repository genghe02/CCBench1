"""
This class implements a Binary Data Processor that handles cleaning non-binary characters from a binary string, calculating binary information, and converting binary data to ASCII or UTF-8.

"""

class BinaryDataProcessor:
    def __init__(self, binary_string):
        """
        Initialize the BinaryDataProcessor with a binary string.

        Parameters:
            binary_string (str): String containing binary data
        
        Test cases:
            # Test case 1: Normal binary string
            assert BinaryDataProcessor("11001100").binary_string == "11001100"
            
            # Test case 2: Binary string with non-binary characters
            assert BinaryDataProcessor("11a00d00").binary_string == "110000"
            
            # Test case 3: Binary string with special characters
            assert BinaryDataProcessor("1100@#11").binary_string == "110011"
        """
        self.binary_string = binary_string
        self.clean_non_binary_chars()

    def clean_non_binary_chars(self):
        """
        Clean the binary string by removing any non-binary characters.

        Test cases:
            # Test case 1: Normal binary string
            assert clean_non_binary_chars("11001100") == "11001100"
            
            # Test case 2: Binary string with non-binary characters
            assert clean_non_binary_chars("11a00d00") == "110000"
            
            # Test case 3: Binary string with special characters
            assert clean_non_binary_chars("1100@#11") == "110011"
        """
        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))

    def calculate_binary_info(self):
        """
        Calculate the binary information such as zeros percentage, ones percentage, and total length.

        Returns:
            dict: Dictionary containing 'Zeroes', 'Ones', and 'Bit length' information
        
        Test cases:
            # Test case 1: Normal binary string
            assert calculate_binary_info("11001100") == {'Zeroes': 0.5, 'Ones': 0.5, 'Bit length': 8}
            
            # Test case 2: Only zeros binary string
            assert calculate_binary_info("00000000") == {'Zeroes': 1.0, 'Ones': 0.0, 'Bit length': 8}
            
            # Test case 3: Only ones binary string
            assert calculate_binary_info("11111111") == {'Zeroes': 0.0, 'Ones': 1.0, 'Bit length': 8}
        """
        zeroes_count = self.binary_string.count('0')
        ones_count = self.binary_string.count('1')
        total_length = len(self.binary_string)

        zeroes_percentage = (zeroes_count / total_length)
        ones_percentage = (ones_count / total_length)

        return {
            'Zeroes': zeroes_percentage,
            'Ones': ones_percentage,
            'Bit length': total_length
        }

    def convert_to_ascii(self):
        """
        Convert the binary string to ASCII representation.

        Returns:
            str: ASCII representation of the binary string
        
        Test cases:
            # Test case 1: Normal binary to ASCII conversion
            assert convert_to_ascii("0100100001100101011011000110110001101111") == "Hello"
            
            # Test case 2: Binary with incomplete bytes to ASCII
            assert convert_to_ascii("01001000") == "H"
            
            # Test case 3: Binary string with special characters to ASCII
            assert convert_to_ascii("010101110100110000100000010101000100000101") == "W h T"
        """
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('ascii')

    def convert_to_utf8(self):
        """
        Convert the binary string to UTF-8 representation.

        Returns:
            str: UTF-8 representation of the binary string
        
        Test cases:
            # Test case 1: Normal binary to UTF-8 conversion
            assert convert_to_utf8("1100001011000010110000101100001011000100110001101101101") == "Hello World"
            
            # Test case 2: Binary with incomplete bytes to UTF-8
            assert convert_to_utf8("1100001011000010110000101") == "Hello"
            
            # Test case 3: Binary string with special characters to UTF-8
            assert convert_to_utf8("010101110100110000100000010101000100000101") == "W h T"
        """
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('utf-8')
```