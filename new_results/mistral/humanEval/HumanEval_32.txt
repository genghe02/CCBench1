 def poly(xs: list, x: float):
   # The input list xs contains the coefficients of the polynomial, in reversed order
   # Use the given x value to calculate the polynomial result
   >>> poly([1., 2., 3.], 2.0) # returns 1+4x+8x^2
   return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs[::-1])])

def find_zero(xs: list):
   # Use the bisection method to find the root of the polynomial represented by xs
   # The method assumes the polynomial changes sign between the given interval
   >>> find_zero([1., -3., 2.]) # finds the root of x^3 - 3x + 1
   begin, end = -1., 1.
   while poly(xs, begin) * poly(xs, end) > 0:
       begin *= 2.0
       end *= 2.0
   while end - begin > 1e-10:
       center = (begin + end) / 2.0
       if poly(xs, center) * poly(xs, begin) > 0:
           begin = center
       else:
           end = center
   return begin</s>