 """
This class, ExcelProcessor, is responsible for reading and writing data from Excel files using Openpyxl library.
"""

import openpyxl

class ExcelProcessor:

    def __init__(self):
        """
        Initializes an instance of the ExcelProcessor class.
        """
        pass

    def read_excel(self, file_name):
        """
        Reads data from an Excel file and returns it in a 2D list.

        Parameters:
            file_name (str): The name of the Excel file to read from.

        Returns:
            list: A list containing rows of data read from the file.

        Test cases:
            # Test case 1: Valid file
            data = excel_processor.read_excel('test_data.xlsx')
            assert len(data) > 0
            
            # Test case 2: Non-existent file
            data = excel_processor.read_excel('non_existent_file.xlsx')
            assert data is None
            
            # Test case 3: Empty file
            data = excel_processor.read_excel('empty_file.xlsx')
            assert len(data) == 0
        """
        data = []
        try:
            workbook = openpyxl.load_workbook(file_name)
            sheet = workbook.active
            for row in sheet.iter_rows(values_only=True):
                data.append(row)
            workbook.close()
            return data
        except:
            return None

    def write_excel(self, data, file_name):
        """
        Writes data to an Excel file.

        Parameters:
            data (list): A 2D list containing rows of data to write to the file.
            file_name (str): The name of the Excel file to write to.

        Returns:
            int: 1 if successful, 0 if an error occurs.

        Test cases:
            # Test case 1: Valid write
            success, _ = excel_processor.write_excel([['A1', 'B1'], ['C1', 'D1']], 'test_write.xlsx')
            assert success == 1

            # Test case 2: Non-writeable file
            success, _ = excel_processor.write_excel([['A1', 'B1'], ['C1', 'D1']], 'read_only_file.xlsx')
            assert success == 0

            # Test case 3: Invalid file type
            success, _ = excel_processor.write_excel([['A1', 'B1'], ['C1', 'D1']], 'invalid_file.txt')
            assert success == 0
        """
        try:
            workbook = openpyxl.Workbook()
            sheet = workbook.active
            for row in data:
                sheet.append(row)
            workbook.save(file_name)
            workbook.close()
            return 1
        except:
            return 0

    def process_excel_data(self, N, save_file_name):
        """
        Processes Excel data by converting specific cells to uppercase.

        Parameters:
            N (int): The index of the column containing the data to be processed.
            save_file_name (str): The name of the Excel file to save the processed data in.

        Returns:
            tuple: A tuple containing a success status (int) and the new file name.

        Test cases:
            # Test case 1: Process empty file
            success, _ = excel_processor.process_excel_data(1, 'empty_file.xlsx')
            assert success == 0

            # Test case 2: Valid process
            success, new_file_name = excel_processor.process_excel_data(1, 'test_data.xlsx')
            assert success == 1
            assert new_file_name == 'test_data_process.xlsx'

            # Test case 3: Non-existent file
            success, _ = excel_processor.process_excel_data(1, 'non_existent_file.xlsx')
            assert success == 0</s>