 """
This class, `NumberWordFormatter`, converts a given number into its textual representation in the form of words.
"""

import re

class NumberWordFormatter:

 def __init__(self):
 """
 Initialization method for `NumberWordFormatter` class.
 """
 self.NUMBER = ["", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE"]
 self.NUMBER_TEEN = ["TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN",
 "EIGHTEEN",
 "NINETEEN"]
 self.NUMBER_TEN = ["TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY"]
 self.NUMBER_MORE = ["", "THOUSAND", "MILLION", "BILLION"]
 self.NUMBER_SUFFIX = ["k", "w", "", "m", "", "", "b", "", "", "t", "", "", "p", "", "", "e"]

 def format(self, x):
 """
 Converts the number 'x' to its textual representation in the form of words.

 Parameters:
 x (int or float): The number to be converted into words

 Returns:
 str: A string representing the number in the form of words

 Test cases:
 # Test case 1: Format positive integer
 assert format(12345678) == "SIX HUNDRED AND FORTY-FIVE THOUSAND SIX HUNDRED AND SEVENTY-EIGHT"

 # Test case 2: Format positive float
 assert format(123456789.321) == "ONE HUNDRED AND TWENTY-THREE MILLION FOUR HUNDRED AND EIGHTY-FIVE THOUSAND " \
 "SEVEN HUNDRED AND SEVENTY-EIGHT AND THREE TENTHS ONLY"

 # Test case 3: Format zero
 assert format(0) == "ZERO ONLY"

 # Test case 4: Format negative integer
 assert format(-12345678) == "MINUS SIX HUNDRED AND FORTY-FIVE THOUSAND SIX HUNDRED AND SEVENTY-EIGHT " \
 "AND THREE TENTHS ONLY"
 """
 if x is not None:
 return self.format_string(str(x))
 else:
 return ""

 def format_string(self, x):
 """
 Helper method for the format method to convert a string representation of a number to its textual
 representation in the form of words.

 Parameters:
 x (str): The number to be converted into words

 Returns:
 str: A string representing the number in the form of words

 Test cases:
 # Test case 1: Format positive integer
 assert format_string("12345678") == "SIX HUNDRED AND FORTY-FIVE THOUSAND SIX HUNDRED AND SEVENTY-EIGHT"

 # Test case 2: Format positive float
 assert format_string("123456789.321") == "ONE HUNDRED AND TWENTY-THREE MILLION FOUR HUNDRED AND EIGHTY-FIVE " \
 "THOUSAND SEVEN HUNDRED AND SEVENTY-EIGHT AND THREE TENTHS ONLY"

 # Test case 3: Format zero
 assert format_string("0") == "ZERO ONLY"

 # Test case 4: Format negative integer
 assert format_string("-12345678") == "MINUS SIX HUNDRED AND FORTY-FIVE THOUSAND SIX HUNDRED AND SEVENTY-EIGHT " \
 "AND THREE TENTHS ONLY"
"""
 lstr, rstr = (x.split('.') + [''])[:2]
 lstrrev = lstr[::-1]
 a = [''] * 5

 if len(lstrrev) % 3 == 1:
 lstrrev += "00"
 elif len(lstrrev) % 3 == 2:
 lstrrev += "0"

 lm = ""
 for i in range(len(lstrrev) // 3):
 a[i] = lstrrev[3 * i:3 * i + 3][::-1]
 if a[i] != "000":
 lm = self.trans_three(a[i]) + " " + self.parse_more(i) + " " + lm
 else:
 lm += self.trans_three(a[i])

 xs = f"AND CENTS {self.trans_two(rstr)} " if rstr else ""
 if not lm.strip():
 return "ZERO ONLY"
 else:
 return f"{lm.strip()} {xs}ONLY"

 def trans_two(self, s):
 """
 Helper method to convert a string of two digits to its textual representation as a word.

 Parameters:
 s (str): A string of two digits

 Returns:
 str: A string representing the number in the form of words

 Test cases:
 # Test case 1: Format a number with a single digit
 assert trans_two("1") == "ONE"

 # Test case 2: Format a number with two digits '10'
 assert trans_two("10") == "TEN"

 # Test case 3: Format a number with a teen number '11'
 assert trans_two("11") == "ELEVEN"

 # Test case 4: Format a number with digits '12'
 assert trans_two("12") == "TWELVE"
"""
 s = s.zfill(2)
 if s[0] == "0":
 return self.NUMBER[int(s[-1])]
 elif s[0] == "1":
 return self.NUMBER_TEEN[int(s) - 10]
 elif s[1] == "0":
 return self.NUMBER_TEN[int(s[0]) - 1]
 else:
 return self.NUMBER_TEN[int(s[0]) - 1] + " " + self.NUMBER[int(s[-1])]

 def trans_three(self, s):
 """
 Helper method to convert a string of three digits to its textual representation as words.

 Parameters:
 s (str): A string of three digits

 Returns:
 str: A string representing the number in the form of words

 Test cases:
 # Test case 1: Format '000'
 assert trans_three("000") == ""

 # Test case 2: Format a single digit
 assert trans_three("1") == ""

 # Test case 3: Format a number ending with hundred
 assert trans_three("100") == "ONE HUNDRED"

 # Test case 4: Format a number in the range of '101 to 199'
 assert trans_three("102") == "ONE HUNDRED AND TWENTY"

 # Test case 5: Format a number ending with thousand
 assert trans_three("1010") == "ONE THOUSAND"

 # Test case 6: Format a number in the range of '1001 to 1999'
 assert trans_three("1002") == "ONE THOUSAND AND TWENTY"
"""
 if s[0] == "0":
 return self.trans_two(s[1:])
 elif s[1:] == "00":
 return f"{self.NUMBER[int(s[0])]} HUNDRED"
 else:
 return f"{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}"

 def parse_more(self, i):
 """
 Helper method to determine the suffix for numbers with more than three digits.

 Parameters:
 i (int): An integer representing the place value in the number

 Returns:
 str: A string representing the suffix 'thousand', 'million', or 'billion' based on the place value

 Test cases:
 # Test case 1: Parse suffix for thousand place value
 assert parse_more(0) == "THOUSAND"

 # Test case 2: Parse suffix for million place value
 assert parse_more(1) == "MILLION"

 # Test case 3: Parse suffix for billion place value
 assert parse_more(2) == "BILLION"
"""
 return self.NUMBER_MORE[i]</s>