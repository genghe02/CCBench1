 """
This class, named MetricsCalculator2, provides functions to calculate Mean Reciprocal Rank (MRR) and Average Percentage (AP) based on given input data.
"""

import numpy as np


class MetricsCalculator2:

    def __init__(self):
        """
        Initialization method for MetricsCalculator2 class.
        """
        pass

    @staticmethod
    def mrr(data):
        """
        Calculate Mean Reciprocal Rank (MRR) based on the given data.

        Parameters:
            data (list or tuple): A list or tuple of sub-lists and total number of items in each sub-list.

        Returns:
            tuple: A tuple containing the calculated MRR value and a list of MRR values for each sub-list.

        Test cases:
            # Test case 1: MRR for a single sub-list
            assert mrr([[5, 3, 1], 3]) == (0.5, [0.5])

            # Test case 2: MRR for multiple sub-lists
            assert mrr([[[1, 2, 3], 3], [ [4, 5], 2 ]]) == (np.mean([0.5, 2.5]), [0.5, 2.5])

            # Test case 3: Check input validation for empty input
            with pytest.raises(Exception):
                mrr([[5, 3, 1], 4])
        """

        if type(data) != list and type(data) != tuple:
            raise Exception("the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple")

        if len(data) == 0:
            return 0.0, [0.0]
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return 0.0, [0.0]
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)

                mr_np = sub_list * ranking_array

                mr = 0.0
                for team in mr_np:
                    if team > 0:
                        mr = team
                        break

                return mr, [mr]

        if type(data) == list:
            separate_result = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)

                if total_num == 0:
                    mr = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
                    mr_np = sub_list * ranking_array

                    mr = 0.0
                    for team in mr_np:
                        if team > 0:
                            mr = team
                            break

                separate_result.append(mr)
            return np.mean(separate_result), separate_result

    @staticmethod
    def map(data):
        """
        Calculate Average Percentage (AP) based on the given data.

        Parameters:
            data (list or tuple): A list or tuple of sub-lists and total number of items in each sub-list.

        Returns:
            tuple: A tuple containing the calculated AP value and a list of AP values for each sub-list.

        Test cases:
            # Test case 1: AP for a single sub-list
            assert map([[5, 3, 1], 3]) == (0.5, [0.5])

            # Test case 2: AP for multiple sub-lists
            assert map([[[1, 2, 3], 3], [ [4, 5], 2 ]]) == (np.mean([0.5, 0.6666666666666667]), [0.5, 0.6666666666666667])

            # Test case 3: Check input validation for empty input
            with pytest.raises(Exception):
                map([[5, 3, 1], 4])
        """

        if type(data) != list and type(data) != tuple:
            raise Exception("the input must be a tuple([0,...,1,...],int) or a iteration of list of tuple")

        if len(data) == 0:
            return 0.0, [0.0]
        if type(data) == tuple:
            (sub_list, total_num) = data
            sub_list = np.array(sub_list)
            if total_num == 0:
                return 0.0, [0.0]
            else:
                ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)

                right_ranking_list = []
                count = 1
                for t in sub_list:
                    if t == 0:
                        right_ranking_list.append(0)
                    else:
                        right_ranking_list.append(count)
                        count += 1

                ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
                return ap, [ap]

        if type(data) == list:
            separate_result = []
            for (sub_list, total_num) in data:
                sub_list = np.array(sub_list)

                if total_num == 0:
                    ap = 0.0
                else:
                    ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)

                    right_ranking_list = []
                    count = 1
                    for t in sub_list:
                        if t == 0:
                            right_ranking_list.append(0)
                        else:
                            right_ranking_list.append(count)
                            count += 1

                    ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num

                separate_result.append(ap)
            return np.mean(separate_result), separate_result</s>