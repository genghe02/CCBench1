 """
This class represents a Music Player that manages a playlist of songs, plays, stops, and switches between songs, sets volume, and provides shuffle functionality.
"""

import random

class MusicPlayer:

    def __init__(self):
        """
        Initialize a new MusicPlayer instance.
       """
        self.playlist = []
        self.current_song = None
        self.volume = 50

    def add_song(self, song):
        """
        Add a song to the MusicPlayer's playlist.

        Parameters:
            song (Song): A Song instance to be added
        
        Test cases:
            # Test case 1: Adding a valid song to the empty playlist
            music_player = MusicPlayer()
            song = Song("test.mp3", "test artist")
            music_player.add_song(song)
            assert len(music_player.playlist) == 1
            
            # Test case 2: Adding an existing song to the playlist
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            music_player.add_song(song1)
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song2)
            music_player.add_song(song1)
            assert len(music_player.playlist) == 3
        """
        self.playlist.append(song)

    def remove_song(self, song):
        """
        Remove a song from the MusicPlayer's playlist, if it exists.

        Parameters:
            song (Song): A Song instance to be removed
        
        Test cases:
            # Test case 1: Removing a song from an empty playlist
            music_player = MusicPlayer()
            assert music_player.remove_song(None) == False
            
            # Test case 2: Removing an existing song from a non-empty playlist
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            music_player.add_song(song1)
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song2)
            music_player.remove_song(song1)
            assert len(music_player.playlist) == 1
            
            # Test case 3: Removing a nonexistent song from a non-empty playlist
            music_player = MusicPlayer()
            music_player.remove_song(song2)
            assert len(music_player.playlist) == 1
        """
        if song in self.playlist:
            self.playlist.remove(song)
            if self.current_song == song:
                self.stop()

    def play(self):
        """
        Play the next song in the MusicPlayer's playlist.

        Returns:
            Song: The currently playing song, if there's one, or None if the playlist is empty
        
        Test cases:
            # Test case 1: Playing the first song in an empty playlist
            music_player = MusicPlayer()
            assert music_player.play() is None
            
            # Test case 2: Playing the first song in a non-empty playlist
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            music_player.add_song(song1)
            assert music_player.play() == song1
            
            # Test case 3: Playing the next song when there's more than one song
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.play()
            assert music_player.play() == song2
        """
        if self.playlist and self.current_song:
            return self.playlist[0]
        elif len(self.playlist):
            return None

    def stop(self):
        """
        Stop the currently playing song and set the current_song attribute to None.

        Returns:
            bool: True if there was a currently playing song and it was stopped, False otherwise
        
        Test cases:
            # Test case 1: Stopping a non-playing MusicPlayer instance
            music_player = MusicPlayer()
            assert music_player.stop() == False
            
            # Test case 2: Stopping a playing MusicPlayer instance
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            music_player.add_song(song1)
            music_player.play()
            assert music_player.stop() == True
        """
        if self.current_song:
            self.current_song = None
            return True
        else:
            return False

    def switch_song(self):
        """
        Switch to the next song in the MusicPlayer's playlist.

        Returns:
            bool: True if there is a next song in the playlist and it has been set as the new current_song, False otherwise
        
        Test cases:
            # Test case 1: Switching to the next song when there are more than one song
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.play()
            music_player.switch_song()
            assert music_player.current_song == song2
            
            # Test case 2: Switching to the last song when there are more than one song
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.switch_song()
            assert music_player.current_song == song1
        """
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index < len(self.playlist) - 1:
                self.current_song = self.playlist[current_index + 1]
                return True
            else:
                return False
        else:
            return False

    def previous_song(self):
        """
        Switch to the previous song in the MusicPlayer's playlist.

        Returns:
            bool: True if there is a previous song in the playlist and it has been set as the new current_song, False otherwise
        
        Test cases:
            # Test case 1: Switching to the previous song when there are more than one song
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.play()
            music_player.switch_song()
            music_player.previous_song()
            assert music_player.current_song == song1
            
            # Test case 2: Switching to the first song when there are more than one song
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.previous_song()
            assert music_player.current_song == None
        """
        if self.current_song:
            current_index = self.playlist.index(self.current_song)
            if current_index > 0:
                self.current_song = self.playlist[current_index - 1]
                return True
            else:
                return False
        else:
            return False

    def set_volume(self, volume):
        """
        Set the MusicPlayer's volume.

        Parameters:
            volume (int): The new volume level, between 0 and 100
        
        Test cases:
            # Test case 1: Setting a valid volume level
            music_player = MusicPlayer()
            music_player.set_volume(75)
            assert music_player.volume == 75
            
            # Test case 2: Setting a volume level out of range
            music_player = MusicPlayer()
            assert music_player.set_volume(150) == False
        """
        if 0 <= volume <= 100:
            self.volume = volume
        else:
            return False

    def shuffle(self):
        """
        Shuffle the songs in the MusicPlayer's playlist.

        Returns:
            bool: True if the shuffling process has been successfully completed, False otherwise
        
        Test cases:
            # Test case 1: Shuffling an empty playlist
            music_player = MusicPlayer()
            assert music_player.shuffle() == False
            
            # Test case 2: Shuffling a non-empty playlist
            music_player = MusicPlayer()
            song1 = Song("song1.mp3", "artist1")
            song2 = Song("song2.mp3", "artist2")
            music_player.add_song(song1)
            music_player.add_song(song2)
            music_player.shuffle()
            shuffled_songs = [music_player.play() for _ in range(10)]
            assert len(set(shuffled_songs)) == len(music_player.playlist)
        """
        if self.playlist:
            import random
            random.shuffle(self.playlist)
            return True
        else:
            return False</s>