 """
This class provides static methods for performing complex arithmetic operations.
"""

@staticmethod
def add(c1, c2):
"""
Addition method.

Parameters:
    c1 (complex): Complex number 1
    c2 (complex): Complex number 2

Returns:
    complex: The sum of c1 and c2

Test cases:
    # Test case 1: Simple addition
    assert add(complex(1, 2), complex(3, 4)) == complex(4, 6)
    
    # Test case 2: Complex numbers with real parts equal
    assert add(complex(5, 0), complex(3, 2)) == complex(8, 2)
    
    # Test case 3: Complex numbers with imaginary parts equal
    assert add(complex(0, 3), complex(0, 3)) == complex(0, 6)
"""
real = c1.real + c2.real
imaginary = c1.imag + c2.imag
answer = complex(real, imaginary)
return answer

@staticmethod
def subtract(c1, c2):
"""
Subtraction method.

Parameters:
    c1 (complex): Complex number 1
    c2 (complex): Complex number 2

Returns:
    complex: The difference of c1 and c2

Test cases:
    # Test case 1: Simple subtraction
    assert subtract(complex(3, 4), complex(1, 2)) == complex(2, 2)
    
    # Test case 2: Complex numbers with real parts equal, imaginary parts negative
    assert subtract(complex(5, 0), complex(0, 3)) == complex(5, -3)
    
    # Test case 3: Complex numbers with both real and imaginary parts different
    assert subtract(complex(3, 4), complex(2, 1)) == complex(1, 3)
"""
real = c1.real - c2.real
imaginary = c1.imag - c2.imag
return complex(real, imaginary)

@staticmethod
def multiply(c1, c2):
"""
Multiplication method.

Parameters:
    c1 (complex): Complex number 1
    c2 (complex): Complex number 2

Returns:
    complex: The product of c1 and c2

Test cases:
    # Test case 1: Simple multiplication
    assert multiply(complex(1, 2), complex(3, 4)) == complex(3, 10)
    
    # Test case 2: Complex numbers with real parts equal
    assert multiply(complex(5, 0), complex(3, 2)) == complex(15, 6)
    
    # Test case 3: Complex numbers with imaginary parts equal
    assert multiply(complex(0, 3), complex(0, 3)) == complex(0, 9)
"""
real = (c1.real * c2.real) - (c1.imag * c2.imag)
imaginary = (c1.real * c2.imag) + (c1.imag * c2.real)
return complex(real, imaginary)

@staticmethod
def divide(c1, c2):
"""
Division method.

Parameters:
    c1 (complex): Complex number 1
    c2 (complex): Complex number 2

Returns:
    complex: The quotient of c1 and c2

Test cases:
    # Test case 1: Simple division
    assert divide(complex(5, 4), complex(3, 2)) == complex(1.6, 1.2)
    
    # Test case 2: Divide by zero
    try:
        divide(complex(0, 0), complex(1, 1))
    except ZeroDivisionError as e:
        assert str(e) == "division by zero"
    
    # Test case 3: Complex numbers with both real and imaginary parts different
    assert divide(complex(3, 4), complex(1, 2)) == complex(3.5, 2.2)</s>