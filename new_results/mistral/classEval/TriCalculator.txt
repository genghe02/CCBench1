 """
This class defines a TriCalculator that can calculate trigonometric functions using Taylor series expansions.
"""

from math import pi, fabs


class TriCalculator:

    def __init__(self):
        """
        Initialization method.
        """
        pass

    def cos(self, x):
        """
        Calculate the cosine of a given angle in degrees using the Taylor series expansion.

        Parameters:
            x (float): Angle in degrees
        
        Returns:
            float: Cosine of the angle
        
        Test cases:
            # Test case 1: Simple cos calculation
            calculator = TriCalculator()
            result = calculator.cos(0)
            assert result == 1

            # Test case 2: Cos calculation with non-zero angle
            calculator = TriCalculator()
            result = calculator.cos(45)
            assert result > 0

            # Test case 3: Cos calculation with large negative angle
            calculator = TriCalculator()
            result = calculator.cos(-90)
            assert result == -1
        """

        x = x / 180 * pi
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        """
        Calculate the factorial of a given number.

        Parameters:
            a (int): The number to find the factorial of
        
        Returns:
            int: The factorial of the given number
        
        Test cases:
            # Test case 1: Factorial of 0
            assert TriCalculator().factorial(0) == 1

            # Test case 2: Factorial of 5
            assert TriCalculator().factorial(5) == 120

            # Test case 3: Factorial of 10
            assert TriCalculator().factorial(10) == 3628800
        """

        b = 1
        if a == 0:
            return 1

        while a != 0:
            b *= a
            a -= 1
        return b

    def taylor(self, x, n):
        """
        Calculate the value of a Taylor series expansion up to a given order.

        Parameters:
            x (float): The value at which to evaluate the series
            n (int): The number of terms in the series
        
        Returns:
            float: The calculated value of the series
        
        Test cases:
            # Test case 1: Simple Taylor series calculation
            calculator = TriCalculator()
            result = calculator.taylor(0, 5)
            assert result == 1

            # Test case 2: Taylor series calculation for sin
            calculator = TriCalculator()
            result = calculator.sin(30)
            assert abs(result - 0.5) < 1e-8

            # Test case 3: Taylor series calculation for cos with high order
            calculator = TriCalculator()
            result = calculator.cos(2 * pi)
            assert abs(result - 1) < 1e-8
        """

        a = 1
        if x == 0 or n == 0:
            return a

        x = x / 180 * pi
        count = 1
        for k in range(1, n):
            a += ((-1) ** k) * (x ** (2 * k)) / self.factorial(2 * k)
            count += 1

        return a

    def sin(self, x):
        """
        Calculate the sine of a given angle in degrees using the Taylor series expansion.

        Parameters:
            x (float): Angle in degrees
        
        Returns:
            float: Sine of the angle
        
        Test cases:
            # Test case 1: Simple sin calculation
            calculator = TriCalculator()
            result = calculator.sin(0)
            assert result == 0

            # Test case 2: Sin calculation with non-zero angle
            calculator = TriCalculator()
            result = calculator.sin(45)
            assert result > 0

            # Test case 3: Sin calculation with large angle
            calculator = TriCalculator()
            result = calculator.sin(180)
            assert result == -1
        """

        x = x / 180 * pi
        g = 0
        t = x
        n = 1

        while abs(t) > 1e-15:
            g += t
            n += 1
            t = (-t) * (x * x) / (2 * n - 1) / (2 * n - 2)

        return round(g, 10)

    def tan(self, x):
        """
        Calculate the tangent of a given angle in degrees using the Taylor series expansion.

        Parameters:
            x (float): Angle in degrees
        
        Returns:
            float: Tangent of the angle
        
        Test cases:
            # Test case 1: Simple tan calculation
            calculator = TriCalculator()
            result = calculator.tan(0)
            assert result == 0

            # Test case 2: Tan calculation with positive angle
            calculator = TriCalculator()
            result = calculator.tan(45)
            assert result > 0

            # Test case 3: Tan calculation with large angle
            calculator = TriCalculator()
            result = calculator.tan(90)
            assert result == inf
        """

        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return "Undefined"</s>