 ```python
"""
This class represents a MovieBookingSystem where users can add movies, book tickets, and check available movies.
"""

from datetime import datetime
import numpy as np

class MovieBookingSystem:
    def __init__(self):
        """
        Initialize an empty MovieBookingSystem object.

        Test cases:
            # Test case 1: Empty initialization
            system = MovieBookingSystem()
            assert len(system.movies) == 0

            # Test case 2: Initialization with data
            data = [
                {'name': 'MovieA', 'price': 10, 'start_time': datetime(hour=10, minute=30), 'end_time': datetime(hour=11, minute=30), 'seats': np.zeros((5, 5))},
                {'name': 'MovieB', 'price': 5, 'start_time': datetime(hour=14, minute=0), 'end_time': datetime(hour=16, minute=0), 'seats': np.zeros((3, 3))}
            ]
            system = MovieBookingSystem()
            system.movies.extend(data)
            assert len(system.movies) == 2
        """
        self.movies = []

    def add_movie(self, name, price, start_time, end_time, n):
        """
        Add a new movie to the system.

        Parameters:
            name (str): The name of the movie
            price (float): The price of each ticket
            start_time (str): The start time of the movie in 'HH:MM' format
            end_time (str): The end time of the movie in 'HH:MM' format
            n (int): The number of rows in the movie's seating area

        Returns:
            None

        Test cases:
            # Test case 1: Add movie with given data
            system = MovieBookingSystem()
            system.add_movie('MovieC', 8, '13:30', '15:30', 5)
            assert len(system.movies) == 1

            # Test case 2: Add movie with invalid data
            system = MovieBookingSystem()
            with pytest.raises(ValueError):
                system.add_movie('MovieD', 'InvalidPrice', '11:15', '12:15', 4)
        
        """
        movie = {
            'name': name,
            'price': price,
            'start_time': datetime.strptime(start_time, '%H:%M'),
            'end_time': datetime.strptime(end_time, '%H:%M'),
            'seats': np.zeros((n, n))
        }
        self.movies.append(movie)

    def book_ticket(self, name, seats_to_book):
        """
        Attempt to book tickets for a movie.

        Parameters:
            name (str): The name of the movie
            seats_to_book (list): A list of seats to be booked, in format [(row, col)]

        Returns:
            str: A message indicating the success or failure of the booking

        Test cases:
            # Test case 1: Successful booking
            system = MovieBookingSystem()
            system.add_movie('MovieE', 7, '17:15', '19:15', 6)
            seats_to_book = [(1, 2), (3, 4)]
            assert system.book_ticket('MovieE', seats_to_book) == "Booking success."

            # Test case 2: Failure when all seats are taken
            system = MovieBookingSystem()
            system.add_movie('MovieF', 5, '18:45', '20:45', 4)
            seats_to_book = [(1, 1), (1, 2), (1, 3), (1, 4)]
            assert system.book_ticket('MovieF', seats_to_book) == "Booking failed."

            # Test case 3: Failure when movie not found
            system = MovieBookingSystem()
            assert system.book_ticket('MovieG', [(1, 1), (1, 2)]) == "Movie not found."
        
        """
        for movie in self.movies:
            if movie['name'] == name:
                for seat in seats_to_book:
                    if movie['seats'][seat[0]][seat[1]] == 0:
                        movie['seats'][seat[0]][seat[1]] = 1
                        return "Booking success."
                return "Booking failed."
        return "Movie not found."

    def available_movies(self, start_time, end_time):
        """
        Get a list of available movies during the specified time range.

        Parameters:
            start_time (str): The start time of the time range in 'HH:MM' format
            end_time (str): The end time of the time range in 'HH:MM' format

        Returns:
            list: A list of available movie names

        Test cases:
            # Test case 1: Movies within given time range
            system = MovieBookingSystem()
            system.add_movie('MovieH', 6, '16:00', '18:00', 3)
            system.add_movie('MovieI', 4, '17:30', '19:30', 4)
            assert available_movies(system, '17:00', '19:30') == ['MovieI']

            # Test case 2: Movies outside given time range
            system = MovieBookingSystem()
            system.add_movie('MovieJ', 9, '14:15', '16:15', 5)
            assert available_movies(system, '12:00', '15:00') == []

            # Test case 3: Movies partially within given time range
            system = MovieBookingSystem()
            system.add_movie('MovieK', 7, '14:45', '16:45', 3)
            assert available_movies(system, '14:30', '16:15') == ['MovieK']
        
        """
        start_time = datetime.strptime(start_time, '%H:%M')
        end_time = datetime.strptime(end_time, '%H:%M')

        available_movies = []
        for movie in self.movies:
            if start_time <= movie['start_time'] and movie['end_time'] <= end_time:
                available_movies.append(movie['name'])

        return available_movies
```</s>