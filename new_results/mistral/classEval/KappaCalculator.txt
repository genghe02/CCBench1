 ```python
"""
This class is responsible for calculating Cohen's Kappa and Fleiss' Kappa statistics.
"""

import numpy as np


class KappaCalculator:

    @staticmethod
    def kappa(testData, k):
        """
        Calculates Cohen's Kappa statistic.

        Parameters:
            testData (list): A list containing 'k' numpy arrays, representing 'k' raters and their respective agreements.
            k (int): Number of raters.

        Returns:
            float: The calculated Cohen's Kappa coefficient.

        Test cases:
            # Test case 1: Sample test data
            data = [np.array([1, 2, 3, 3, 2, 2]), np.array([2, 3, 3, 2, 1, 1])]
            assert kappa(data, 6) == 0.75
            
            # Test case 2: Perfect agreement
            data = [np.array([1, 1, 1, 1, 1, 1]), np.array([1, 1, 1, 1, 1, 1])]
            assert kappa(data, 6) == 1.0
            
            # Test case 3: No agreement
            data = [np.array([0, 1, 0, 1, 0, 1]), np.array([1, 0, 1, 0, 1, 0])]
            assert kappa(data, 6) < 0
        """
        dataMat = np.mat(testData)
        P0 = 0.0
        for i in range(k):
            P0 += dataMat[i, i] * 1.0
        xsum = np.sum(dataMat, axis=1)
        ysum = np.sum(dataMat, axis=0)
        sum = np.sum(dataMat)
        Pe = float(ysum * xsum) / sum / sum
        P0 = float(P0 / sum * 1.0)
        cohens_coefficient = float((P0 - Pe) / (1 - Pe))
        return cohens_coefficient

    @staticmethod
    def fleiss_kappa(testData, N, k, n):
        """
        Calculates Fleiss' Kappa statistic.

        Parameters:
            testData (list): A list containing 'N' numpy arrays, representing 'N' raters and their 'k' categories.
            N (int): Number of raters.
            k (int): Number of categories.
            n (int): Number of observations.

        Returns:
            float: The calculated Fleiss' Kappa coefficient.

        Test cases:
            # Test case 1: Sample test data
            data = [[1, 2, 2], [2, 1, 3], [3, 2, 1], [1, 3, 2]]
            assert fleiss_kappa(data, 4, 3, len(data[0])) == 0.5
            
            # Test case 2: Perfect agreement
            data = [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
            assert fleiss_kappa(data, 4, 3, len(data[0])) == 1.0
            
            # Test case 3: No agreement
            data = [[0, 1, 1], [1, 0, 0], [1, 1, 0], [0, 0, 1]]
            assert fleiss_kappa(data, 4, 3, len(data[0])) < 0
        """
        dataMat = np.mat(testData, float)
        oneMat = np.ones((k, 1))
        sum = 0.0
        P0 = 0.0
        for i in range(N):
            temp = 0.0
            for j in range(k):
                sum += dataMat[i, j]
                temp += 1.0 * dataMat[i, j] ** 2
            temp -= n
            temp /= (n - 1) * n
            P0 += temp
        P0 = 1.0 * P0 / N
        ysum = np.sum(dataMat, axis=0)
        for i in range(k):
            ysum[0, i] = (ysum[0, i] / sum) ** 2
        Pe = ysum * oneMat * 1.0
        ans = (P0 - Pe) / (1 - Pe)
        return ans[0, 0]
```</s>