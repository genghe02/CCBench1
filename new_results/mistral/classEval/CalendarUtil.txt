 """
This class, CalendarUtil, provides methods to manage a calendar by adding, removing, and getting events, as well as checking availability and retrieving available slots.
"""

from datetime import datetime, timedelta

class CalendarUtil:
    def __init__(self):
        """
        Initializes an empty CalendarUtil instance.
        """
        pass

    def add_event(self, event):
        """
        Adds an event to the calendar.

        Parameters:
            event (dict): An event dictionary containing 'start_time' and 'end_time' fields.
        
        Test cases:
            # Test case 1: Add a new event
            event = {'start_time': datetime(2022, 1, 1, 10, 30), 'end_time': datetime(2022, 1, 1, 11, 30)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            # Test case 2: Add an event overlapping with another event
            event_overlap = {'start_time': datetime(2022, 1, 1, 11, 30), 'end_time': datetime(2022, 1, 1, 12, 30)}
            calendar = CalendarUtil()
            event_to_add = {'start_time': datetime(2022, 1, 1, 11, 30), 'end_time': datetime(2022, 1, 1, 12, 0)}
            calendar.add_event(event_to_add)
            calendar.add_event(event_overlap)
            # Test case 3: Add an event before another event
            event_before = {'start_time': datetime(2022, 1, 1, 12, 30), 'end_time': datetime(2022, 1, 1, 13, 30)}
            calendar = CalendarUtil()
            event_to_add = {'start_time': datetime(2022, 1, 1, 11, 30), 'end_time': datetime(2022, 1, 1, 12, 30)}
            calendar.add_event(event_to_add)
            calendar.add_event(event_before)
        """
        self.events.append(event)

    def remove_event(self, event):
        """
        Removes an event from the calendar if it exists.

        Parameters:
            event (dict): An event dictionary containing 'start_time' and 'end_time' fields.
        
        Test cases:
            # Test case 1: Remove an existing event
            event = {'start_time': datetime(2022, 1, 1, 10, 30), 'end_time': datetime(2022, 1, 1, 11, 30)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            calendar.remove_event(event)
            # Test case 2: Remove a non-existing event
            event = {'start_time': datetime(2022, 1, 1, 10, 30), 'end_time': datetime(2022, 1, 1, 11, 30)}
            calendar = CalendarUtil()
            calendar.remove_event(event)
        """
        if event in self.events:
            self.events.remove(event)

    def get_events(self, date):
        """
        Retrieves all events occurring on a given date.

        Parameters:
            date (datetime): The desired date.
        
        Returns:
            list: A list of event dictionaries.
        
        Test cases:
            # Test case 1: Get all events on a date
            date = datetime(2022, 1, 1)
            calendar = CalendarUtil()
            event1 = {'start_time': datetime(2022, 1, 1, 10, 30), 'end_time': datetime(2022, 1, 1, 11, 30)}
            event2 = {'start_time': datetime(2022, 1, 1, 12, 30), 'end_time': datetime(2022, 1, 1, 13, 30)}
            calendar.add_event(event1)
            calendar.add_event(event2)
            result = calendar.get_events(date)
            assert result == [event1, event2]
            # Test case 2: Get events on a date with no events
            result = calendar.get_events(date)
            assert result == []
        """
        events_on_date = []
        for event in self.events:
            if event['date'].date() == date.date():
                events_on_date.append(event)
        return events_on_date

    def is_available(self, start_time, end_time):
        """
        Checks if a given time slot is available based on existing events.

        Parameters:
            start_time (datetime): The start time of the time slot.
            end_time (datetime): The end time of the time slot.
        
        Returns:
            bool: True if the time slot is available, False otherwise.
        
        Test cases:
            # Test case 1: Check if a time slot is available
            start_time = datetime(2022, 1, 1, 13, 30)
            end_time = datetime(2022, 1, 1, 14, 30)
            calendar = CalendarUtil()
            assert calendar.is_available(start_time, end_time) == True
            # Test case 2: Check if a time slot is occupied
            start_time = datetime(2022, 1, 1, 13, 30)
            end_time = datetime(2022, 1, 1, 14, 30)
            event = {'start_time': datetime(2022, 1, 1, 13, 30), 'end_time': datetime(2022, 1, 1, 13, 31)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            assert calendar.is_available(start_time, end_time) == False
            # Test case 3: Check if a time slot is available before an event starts
            start_time = datetime(2022, 1, 1, 12, 30)
            end_time = datetime(2022, 1, 1, 13, 30)
            event = {'start_time': datetime(2022, 1, 1, 13, 30), 'end_time': datetime(2022, 1, 1, 14, 30)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            assert calendar.is_available(start_time, end_time) == True
        """
        for event in self.events:
            if start_time < event['end_time'] and end_time > event['start_time']:
                return False
        return True

    def get_available_slots(self, date):
        """
        Retrieves available time slots on a given date based on existing events.

        Parameters:
            date (datetime): The desired date.
        
        Returns:
            list: A list of tuples, where each tuple is a start and end datetime of an available time slot.
        
        Test cases:
            # Test case 1: Get available slots on a date with no events
            date = datetime(2022, 1, 1)
            calendar = CalendarUtil()
            available_slots = calendar.get_available_slots(date)
            assert available_slots == []
            # Test case 2: Get available slots on a date with one event
            date = datetime(2022, 1, 1)
            start_time = datetime(2022, 1, 1, 12, 0)
            end_time = datetime(2022, 1, 1, 13, 0)
            event = {'start_time': datetime(2022, 1, 1, 14, 0), 'end_time': datetime(2022, 1, 1, 15, 0)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            available_slots = calendar.get_available_slots(date)
            assert len(available_slots) == 1
            assert available_slots[0] == (start_time, end_time)
            # Test case 3: Get available slots on a date with multiple events
            date = datetime(2022, 1, 1)
            start_time = datetime(2022, 1, 1, 12, 0)
            end_time = datetime(2022, 1, 1, 13, 0)
            event1 = {'start_time': datetime(2022, 1, 1, 14, 0), 'end_time': datetime(2022, 1, 1, 15, 0)}
            event2 = {'start_time': datetime(2022, 1, 1, 16, 0), 'end_time': datetime(2022, 1, 1, 17, 0)}
            calendar = CalendarUtil()
            calendar.add_event(event1)
            calendar.add_event(event2)
            available_slots = calendar.get_available_slots(date)
            assert len(available_slots) == 2
            # Test case 4: Get available slots on a date with only partly occupied time slots
            start_time = datetime(2022, 1, 1, 13, 30)
            end_time = datetime(2022, 1, 1, 14, 30)
            event = {'start_time': datetime(2022, 1, 1, 13, 0), 'end_time': datetime(2022, 1, 1, 14, 30)}
            calendar = CalendarUtil()
            calendar.add_event(event)
            available_slots = calendar.get_available_slots(date)
            assert len(available_slots) == 1
            assert available_slots[0][0] > start_time
            assert available_slots[0][1] < end_time
        """
        available_slots = []
        start_time = datetime(date.year, date.month, date.day, 0, 0)
        end_time = datetime(date.year, date.month, date.day, 23, 59)

        while start_time < end_time:
            slot_end_time = start_time + timedelta(minutes=60)
            if self.is_available(start_time, slot_end_time):
                available_slots.append((start_time, slot_end_time))
            start_time += timedelta(minutes=60)

        return available_slots

    def get_upcoming_events(self, num_events):
        """
        Retrieves the specified number of upcoming events.

        Parameters:
            num_events (int): The number of events to retrieve.
        
        Returns:
            list: A list of upcoming event dictionaries.
        
        Test cases:
            # Test case 1: Retrieve 3 upcoming events
            calendar = CalendarUtil()
            event1 = {'start_time': datetime(2022, 1, 1, 10, 30), 'end_time': datetime(2022, 1, 1, 11, 30)}
            event2 = {'start_time': datetime(2022, 1, 1, 12, 30), 'end_time': datetime(2022, 1, 1, 13, 30)}
            event3 = {'start_time': datetime(2022, 1, 1, 14, 30), 'end_time': datetime(2022, 1, 1, 15, 30)}
            calendar.add_event(event1)
            calendar.add_event(event2)
            calendar.add_event(event3)
            result = calendar.get_upcoming_events(3)
            assert len(result) == 3
            assert result[0] == event3
            assert result[1] == event2
            assert result[2] == event1
            # Test case 2: Retrieve 2 upcoming events when only 1 is available
            result = calendar.get_upcoming_events(2)
            assert len(result) == 1
            assert result[0] == event3
            # Test case 3: Retrieve 1 upcoming event when less than 1 is available
            result = calendar.get_upcoming_events(1)
            assert len(result) == 0
        """
        now = datetime.now()
        upcoming_events = []
        for event in self.events:
            if event['start_time'] >= now:
                upcoming_events.append(event)
                if len(upcoming_events) == num_events:
                    break
        return upcoming_events</s>