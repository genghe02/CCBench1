 """
This class, named HtmlUtil, is a utility class that helps in formatting and extracting code from HTML text.
"""

import re
import string
import gensim
from bs4 import BeautifulSoup


class HtmlUtil:

    def __init__(self):
        """
        Initialization method documentation.
        """
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        """
        Format the line feed character in the given text by converting multiple new lines to a single new line.
        
        Parameters:
            text (str): The text to format
            
        Returns:
            str: The formatted text with a single new line character instead of multiple
        
        Test cases:
            # Test case 1: Empty text
            assert HtmlUtil.__format_line_feed("") == ""
            
            # Test case 2: Multiple new lines
            input = "abc\n\ndef"
            expected_output = "abc\ndef"
            assert HtmlUtil.__format_line_feed(input) == expected_output
        """
        return re.sub(re.compile(r'\n+'), '\n', text)

    def format_line_html_text(self, html_text):
        """
        Format the HTML text by converting all new lines to a single new line, replacing empty line elements with a single line, and applying other modifications to the text.
        
        Parameters:
            html_text (str): The HTML text to format
            
        Returns:
            str: The formatted HTML text
        
        Test cases:
            # Test case 1: Empty HTML text
            assert HtmlUtil().format_line_html_text("") == ""
            
            # Test case 2: HTML text with new lines and line elements
            input = """<p>This is the first line<br>This is the second line<p>"""
            expected_output = 'This is the first line<br>This is the second line.'
            assert HtmlUtil().format_line_html_text(input) == expected_output
            
            # Test case 3: HTML text with no new lines or line elements
            input = '<p>This is the line</p>'
            assert HtmlUtil().format_line_html_text(input) == 'This is the line.'
        """
        if html_text is None or len(html_text) == 0:
            return ''
        soup = BeautifulSoup(html_text, 'lxml')

        code_tag = soup.find_all(name=['pre', 'blockquote'])
        for tag in code_tag:
            tag.string = self.CODE_MARK

        ul_ol_group = soup.find_all(name=['ul', 'ol'])
        for ul_ol_item in ul_ol_group:
            li_group = ul_ol_item.find_all('li')
            for li_item in li_group:
                li_item_text = li_item.get_text().strip()
                if len(li_item_text) == 0:
                    continue
                if li_item_text[-1] in string.punctuation:
                    li_item.string = '[{0}]{1}'.format('-', li_item_text)
                    continue
                li_item.string = '[{0}]{1}.'.format('-', li_item_text)

        p_group = soup.find_all(name=['p'])
        for p_item in p_group:
            p_item_text = p_item.get_text().strip()
            if p_item_text:
                if p_item_text[-1] in string.punctuation:
                    p_item.string = p_item_text
                    continue
                next_sibling = p_item.find_next_sibling()
                if next_sibling and self.CODE_MARK in next_sibling.get_text():
                    p_item.string = p_item_text + ':'
                    continue
                p_item.string = p_item_text + '.'

        clean_text = gensim.utils.decode_htmlentities(soup.get_text())
        return self.__format_line_feed(clean_text)

    def extract_code_from_html_text(self, html_text):
        """
        Extract all the code blocks from the given HTML text by finding the 'pre' and 'blockquote' tags.
        
        Parameters:
            html_text (str): The HTML text containing the code blocks
            
        Returns:
            list: A list of strings, where each string represents a code block found in the HTML text
        
        Test cases:
            # Test case 1: Empty HTML text
            assert HtmlUtil().extract_code_from_html_text("") == []
            
            # Test case 2: HTML text with no code blocks
            input = """<p>This is a paragraph</p>"""
            assert HtmlUtil().extract_code_from_html_text(input) == []
            
            # Test case 3: HTML text with one code block
            input = """<pre><code>def hello():\n  print("Hello, World!")</code></pre>"""
            expected_output = ['def hello():\n  print("Hello, World!")']
            assert HtmlUtil().extract_code_from_html_text(input) == expected_output
            
            # Test case 4: HTML text with multiple code blocks
            input = """<pre><code>def func1():\n  print("Function 1")</code></pre>\
                     <pre><code>def func2():\n  print("Function 2")</code></pre>\
                     <p>This is a paragraph</p>"""
            expected_output = ['def func1():\n  print("Function 1")', 'def func2():\n  print("Function 2")']
            assert HtmlUtil().extract_code_from_html_text(input) == expected_output
        """
        text_with_code_tag = self.format_line_html_text(html_text)

        if self.CODE_MARK not in text_with_code_tag:
            return []

        code_index_start = 0
        soup = BeautifulSoup(html_text, 'lxml')
        code_tag = soup.find_all(name=['pre', 'blockquote'])
        code_count = text_with_code_tag.count(self.CODE_MARK)
        code_list = []
        for code_index in range(code_index_start, code_index_start + code_count):
            code = code_tag[code_index].get_text()
            if code:
                code_list.append(code)
        return code_list</s>