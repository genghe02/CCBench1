 """
This class is designed to calculate the result of a given mathematical expression using Postfix notation.
"""

import re
from collections import deque
from decimal import Decimal

class ExpressionCalculator:

 def __init__(self):
 """
 Initialization method.
"""
 self.postfix_stack = deque()
 self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]

 def calculate(self, expression):
 """
 Performs the calculation based on a given mathematical expression in Postfix notation.

 Parameters:
 expression (str): The mathematical expression in Postfix notation

 Returns:
 float: The calculated result of the expression

 Test cases:
 # Test case 1: Basic addition
 assert calculator.calculate('3 4 +') == 7.0

 # Test case 2: Basic subtraction
 assert calculator.calculate('5 3 -') == 2.0

 # Test case 3: Basic multiplication
 assert calculator.calculate('7 2 *') == 14.0
"""
 self.prepare(self.transform(expression))

 result_stack = deque()
 self.postfix_stack.reverse()

 while self.postfix_stack:
 current_op = self.postfix_stack.pop()
 if not self.is_operator(current_op):
 result_stack.append(current_op)
 else:
 second_value = result_stack.pop()
 first_value = result_stack.pop()

 temp_result = self._calculate(first_value, second_value, current_op)
 result_stack.append(str(temp_result))

 return float(eval("*".join(result_stack)))

 def prepare(self, expression):
 """
 Prepares the expression for calculation by converting it to Postfix notation.

 Parameters:
 expression (str): The mathematical expression

 Test cases:
 # Test case 1: Basic addition
 assert calculator.prepare('3 + 4') == ['3', '4', '+']

 # Test case 2: Basic subtraction
 assert calculator.prepare('5 - 3') == ['5', '3', '-']

 # Test case 3: Basic multiplication
 assert calculator.prepare('7 * 2') == ['7', '2', '*']
"""
 op_stack = deque([','])
 arr = list(expression)
 current_index = 0
 count = 0

 for i, current_op in enumerate(arr):
 if self.is_operator(current_op):
 if count > 0:
 self.postfix_stack.append("".join(arr[current_index: current_index + count]))
 peek_op = op_stack[-1]
 if current_op == ')':
 while op_stack[-1] != '(':
 self.postfix_stack.append(str(op_stack.pop()))
 op_stack.pop()
 else:
 while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
 self.postfix_stack.append(str(op_stack.pop()))
 peek_op = op_stack[-1]
 op_stack.append(current_op)

 count = 0
 current_index = i + 1
 else:
 count += 1

 if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):
 self.postfix_stack.append("".join(arr[current_index: current_index + count]))

 while op_stack[-1] != ',':
 self.postfix_stack.append(str(op_stack.pop()))

 def is_operator(self, c):
 """
 Checks if a given character is an operator.

 Parameters:
 c (str): The character to check

 Returns:
 bool: True if the character is an operator, False otherwise

 Test cases:
 # Test case 1: Basic addition
 assert calculator.is_operator('+') == True

 # Test case 2: Basic subtraction
 assert calculator.is_operator('-') == True

 # Test case 3: Basic multiplication
 assert calculator.is_operator('*') == True

 # Test case 4: Basic division
 assert calculator.is_operator('/') == True

 # Test case 5: Basic percent
 assert calculator.is_operator('%') == True

 # Test case 6: Parentheses
 assert calculator.is_operator('(') == True
 assert calculator.is_operator(')') == True
"""
 return c in {'+', '-', '*', '/', '(', ')', '%'}

 def compare(self, cur, peek):
 """
 Compares the priority of two operators.

 Parameters:
 cur (str): The current operator
 peek (str): The peek operator

 Returns:
 bool: True if the current operator has higher priority than the peek operator, False otherwise

 Test cases:
 # Test case 1: Comparison between parentheses and percent
 assert calculator.compare('%', ')') == False

 # Test case 2: Comparison between multiplication and addition
 assert calculator.compare('*', '+') == False

 # Test case 3: Comparison between multiplication and subtraction
 assert calculator.compare('*', '-') == False
"""
 if cur == '%':
 cur = '/'
 if peek == '%':
 peek = '/'
 return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]

 @staticmethod
 def _calculate(first_value, second_value, current_op):
 """
 Performs the calculation based on two values and an operator.

 Parameters:
 first_value (str): The first value
 second_value (str): The second value
 current_op (str): The operator

 Returns:
 str: The calculated result

 Test cases:
 # Test case 1: Basic addition
 assert calculator._calculate('3', '4', '+') == '7'

 # Test case 2: Basic subtraction
 assert calculator._calculate('5', '3', '-') == '2'

 # Test case 3: Basic multiplication
 assert calculator._calculate('7', '2', '*') == '14'
"""
 if current_op == '+':
 return str(Decimal(first_value) + Decimal(second_value))
 elif current_op == '-':
 return str(Decimal(first_value) - Decimal(second_value))
 elif current_op == '*':
 return str(Decimal(first_value) * Decimal(second_value))
 elif current_op == '/':
 return str(Decimal(first_value) / Decimal(second_value))
 elif current_op == '%':
 return str(Decimal(first_value) % Decimal(second_value))
 else:
 raise ValueError("Unexpected operator: {}".format(current_op))

 @staticmethod
 def transform(expression):
 """
 Converts a given mathematical expression to Postfix notation.

 Parameters:
 expression (str): The mathematical expression

 Returns:
 str: The converted expression in Postfix notation

 Test cases:
 # Test case 1: Basic addition
 assert calculator.transform('2 + 3') == '2 3 +'

 # Test case 2: Basic subtraction
 assert calculator.transform('3 - 2') == '3 2 -'

 # Test case 3: Basic multiplication
 assert calculator.transform('3 * 4') == '3 4 *'
"""
 expression = re.sub(r"\s+", "", expression)
 expression = re.sub(r"=$", "", expression)
 arr = list(expression)

 for i, c in enumerate(arr):
 if c == '-':
 if i == 0:
 arr[i] = '~'
 else:
 prev_c = arr[i - 1]
 if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:
 arr[i] = '~'

 if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):
 arr[0] = '-'
 return "0" + "".join(arr)
 else:
 return "".join(arr)</s>