 """
This class, named DecryptionUtils, provides methods to decipher encoded text using various decryption techniques such as Caesar cipher, Vigenere cipher, and Rail fence cipher.
"""

import string


class DecryptionUtils:

    def __init__(self, key):
        """
        Initialize the DecryptionUtils instance with the key for Vigenere cipher.

        Parameters:
            key (str): The encryption key for Vigenere cipher decryption
        """
        self.key = key

    def caesar_decipher(self, ciphertext, shift):
        """
        Decipher Caesar cipher encoded text by shifting each letter back by the given shift value.

        Parameters:
            ciphertext (str): The encoded text to decipher
            shift (int): The shift value used during the encryption process

        Returns:
            str: The deciphered text

        Test cases:
            # Test case 1: Decipher text with shift=1
            assert decryption_utils.caesar_decipher("HelloWorld".encode(), 1) == "GhiFqjKqWx"
            
            # Test case 2: Decipher text with negative shift
            assert decryption_utils.caesar_decipher("GhiFqjKqWx".encode(), -1) == "FghEpilPvy"
            
            # Test case 3: Decipher text with shift=26
            assert decryption_utils.caesar_decipher("GhiFqjKqWx".encode(), 26) == "HelloWorld"
        """
        plaintext = ""
        for char in ciphertext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
                plaintext += shifted_char
            else:
                plaintext += char
        return plaintext

    def vigenere_decipher(self, ciphertext):
        """
        Decipher text encoded using Vigenere cipher with the provided key.

        Parameters:
            ciphertext (str): The encoded text to decipher

        Returns:
            str: The deciphered text

        Test cases:
            # Test case 1: Decipher text with a repeated key
            assert decryption_utils.vigenere_decipher("Uwvnbvauq xqxq rqyj cqab nbfc".encode()) == "HelloWorld"
            
            # Test case 2: Decipher text with a longer key
            assert decryption_utils.vigenere_decipher("Uwvnbvauq xqxq kdolpjzf qzqz cqzg bxqn ygqu olqk aqjh gxpp ixop jrkj".encode()) == "The quick brown fox jumps over the lazy dog"
            
            # Test case 3: Decipher text with an empty key
            assert decryption_utils.vigenere_decipher("Uwvnbvauq xqxq rqyj cqab".encode()) == "Error: Key length should be the same as the text length"
        """
        decrypted_text = ""
        key_index = 0
        for char in ciphertext:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char
                key_index += 1
            else:
                decrypted_text += char
        return decrypted_text

    def rail_fence_decipher(self, encrypted_text, rails):
        """
        Decipher text encoded using a Rail fence cipher.

        Parameters:
            encrypted_text (str): The encoded text to decipher
            rails (int): The number of rails used during the encryption process

        Returns:
            str: The deciphered text

        Test cases:
            # Test case 1: Decipher text using 2 rails
            assert decryption_utils.rail_fence_decipher("CANNESCAN", 2) == "ENSCANNEC"
            
            # Test case 2: Decipher text using 3 rails
            assert decryption_utils.rail_fence_decipher("JAVASCRIPTISAMAZING", 3) == "TOBESTRONGMIGHTBEASTOPBUTISAMAZINGJAVASCRIPT"
            
            # Test case 3: Decipher text using invalid number of rails
            assert decryption_utils.rail_fence_decipher("RAILFENCE", 5) == "Error: Invalid number of rails"
        """
        fence = [['\n' for _ in range(len(encrypted_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            fence[row][col] = ''
            col += 1
            row += direction

        index = 0
        for i in range(rails):
            for j in range(len(encrypted_text)):
                if fence[i][j] == '':
                    fence[i][j] = encrypted_text[index]
                    index += 1

        plain_text = ''
        direction = -1
        row, col = 0, 0
        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            plain_text += fence[row][col]
            col += 1
            row += direction

        return plain_text</s>