 """
This class, named RegexUtils, is designed to handle various regex operations such as pattern matching, finding all occurrences, splitting strings, and substituting text.
"""

import re


class RegexUtils:

    def match(self, pattern, text):
        """
        Method to check if a given pattern matches a given text.

        Parameters:
            pattern (str): The regex pattern
            text (str): The text to search in

        Returns:
            bool: Returns True if the pattern matches the text, False otherwise.

        Test cases:
            # Test case 1: Matched pattern
            regex_utils = RegexUtils()
            pattern = r'\d{4}-\d{2}-\d{2}'
            text = "My birthdate is 1995-03-15"
            assert regex_utils.match(pattern, text) == True
            
            # Test case 2: Not matched pattern
            assert regex_utils.match(r'\d{5}', 'Hello, World!') == False
            
            # Test case 3: Empty text and pattern
            assert regex_utils.match('', '') == True
        """
        ans = re.match(pattern, text)
        if ans:
            return True
        else:
            return False

    def findall(self, pattern, text):
        """
        Method to find all occurrences of a given pattern in a given text.

        Parameters:
            pattern (str): The regex pattern
            text (str): The text to search in

        Returns:
            list: Returns a list containing all the occurrences of the pattern in the text.

        Test cases:
            # Test case 1: Find multiple occurrences
            regex_utils = RegexUtils()
            pattern = r'\d+'
            text = "One 1 two 11 three 111 four"
            expected_output = [1, 11, 111, 111]
            assert regex_utils.findall(pattern, text) == expected_output
            
            # Test case 2: Empty text and pattern
            assert regex_utils.findall('', '') == []
            
            # Test case 3: No occurrences in the text
            assert regex_utils.findall(r'\d{5}', "Hello, World!") == []
        """
        return re.findall(pattern, text)

    def split(self, pattern, text):
        """
        Method to split a given text based on a given pattern.

        Parameters:
            pattern (str): The regex pattern
            text (str): The text to split

        Returns:
            list: Returns a list where each element is a part of the text before the pattern.

        Test cases:
            # Test case 1: Split with multiple occurrences
            regex_utils = RegexUtils()
            pattern = r'[,]'
            text = "apple,banana,cherry,orange"
            expected_output = ['apple', 'banana', 'cherry', 'orange']
            assert regex_utils.split(pattern, text) == expected_output
            
            # Test case 2: Empty text and pattern
            assert regex_utils.split('', '') == []
            
            # Test case 3: No occurrences in the text
            assert regex_utils.split(r'\d', "Hello, World!") == ["Hello, World!"]
        """
        return re.split(pattern, text)

    def sub(self, pattern, replacement, text):
        """
        Method to substitute all occurrences of a given pattern with a given replacement string in a given text.

        Parameters:
            pattern (str): The regex pattern
            replacement (str): The replacement string
            text (str): The text to replace in

        Returns:
            str: Returns the text with all occurrences of the pattern replaced with the replacement string.

        Test cases:
            # Test case 1: Substitution with single occurrence
            regex_utils = RegexUtils()
            pattern = r'\d+'
            replacement = 'NUMBER'
            text = "One 1 two 11 three 111 four"
            expected_output = "One NUMBER two NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER four"
            assert regex_utils.sub(pattern, replacement, text) == expected_output
            
            # Test case 2: Empty text and pattern
            assert regex_utils.sub('', '') == ''
            
            # Test case 3: No occurrences in the text
            assert regex_utils.sub(r'\d', "LETTER", "Hello, World!") == "Hello, World!"
        """
        return re.sub(pattern, replacement, text)

    def generate_email_pattern(self):
        """
        Method to generate the regex pattern for validating email addresses.

        Returns:
            str: Returns the regex pattern for validating email addresses.

        Test cases:
            # Test case 1: Validate a valid email address
            regex_utils = RegexUtils()
            assert regex_utils.match(regex_utils.generate_email_pattern(), "test@example.com") == True
            
            # Test case 2: Validate an invalid email address
            assert regex_utils.match(regex_utils.generate_email_pattern(), "invalidemail.com") == False
        """
        pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return pattern

    def generate_phone_number_pattern(self):
        """
        Method to generate the regex pattern for validating phone numbers.

        Returns:
            str: Returns the regex pattern for validating phone numbers.

        Test cases:
            # Test case 1: Validate a valid phone number
            regex_utils = RegexUtils()
            assert regex_utils.match(regex_utils.generate_phone_number_pattern(), "123-456-7890") == True
            
            # Test case 2: Validate an invalid phone number
            assert regex_utils.match(regex_utils.generate_phone_number_pattern(), "12345") == False
        """
        pattern = r'\b\d{3}-\d{3}-\d{4}\b'
        return pattern

    def generate_split_sentences_pattern(self):
        """
        Method to generate the regex pattern for splitting sentences.

        Returns:
            str: Returns the regex pattern for splitting sentences.

        Test cases:
            # Test case 1: Split sentences with multiple occurrences
            regex_utils = RegexUtils()
            pattern = regex_utils.generate_split_sentences_pattern()
            text = "Hello, World! This is a test. How about some more text?"
            expected_output = ['Hello, World!', 'This is a test.', 'How about some more text?']
            assert regex_utils.split(pattern, text) == expected_output
            
            # Test case 2: Empty text
            assert regex_utils.split(pattern, '') == []
            
            # Test case 3: No occurrences in the text
            assert regex_utils.split(r'[.]', "Hello, World!") == ["Hello, World!"]
        """
        pattern = r'[.!?][\s]{1,2}(?=[A-Z])'
        return pattern

    def split_sentences(self, text):
        """
        Method to split a given text into sentences using regex.

        Parameters:
            text (str): The text to split

        Returns:
            list: Returns a list where each element is a sentence in the given text.

        Test cases:
            # Test case 1: Split sentences with multiple occurrences
            regex_utils = RegexUtils()
            pattern = regex_utils.generate_split_sentences_pattern()
            text = "Hello, World! This is a test. How about some more text?"
            expected_output = ['Hello, World!', 'This is a test.', 'How about some more text?']
            assert regex_utils.split_sentences(text) == expected_output
            
            # Test case 2: Empty text
            assert regex_utils.split_sentences('') == []
            
            # Test case 3: No occurrences in the text
            assert regex_utils.split_sentences("Hello, World!") == ["Hello, World!"]
        """
        pattern = self.generate_split_sentences_pattern()
        return self.split(pattern, text)

    def validate_phone_number(self, phone_number):
        """
        Method to validate a given phone number using regex.

        Parameters:
            phone_number (str): The phone number to validate

        Returns:
            bool: Returns True if the phone number is valid, False otherwise.

        Test cases:
            # Test case 1: Validate a valid phone number
            regex_utils = RegexUtils()
            assert regex_utils.validate_phone_number("123-456-7890") == True
            
            # Test case 2: Validate an invalid phone number
            assert regex_utils.validate_phone_number("12345") == False
        """
        pattern = self.generate_phone_number_pattern()
        return self.match(pattern, phone_number)

    def extract_email(self, text):
        """
        Method to extract all valid emails from a given text using regex.

        Parameters:
            text (str): The text to extract emails from

        Returns:
            list: Returns a list of all valid emails found in the text.

        Test cases:
            # Test case 1: Extract multiple emails from a text
            regex_utils = RegexUtils()
            text = "Please send your feedback to john.doe@example.com or jane.doe@example.com"
            expected_output = ['john.doe@example.com', 'jane.doe@example.com']
            assert regex_utils.extract_email(text) == expected_output
            
            # Test case 2: Extract an email with special characters
            assert regex_utils.extract_email("Please send your feedback to info@Example.Com") == ['info@Example.Com']
            
            # Test case 3: Empty text
            assert regex_utils.extract_email('') == []
        """
        pattern = self.generate_email_pattern()
        return self.findall(pattern, text)</s>