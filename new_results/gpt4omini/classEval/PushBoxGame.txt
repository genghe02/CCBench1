```python
"""
This class implements a simple push box game where a player moves boxes to designated target positions on a grid.
"""

class PushBoxGame:
    def __init__(self, map):
        """
        Initializes the PushBoxGame with a given map structure.

        Parameters:
            map (list of list of str): A 2D grid representation of the game where:
                - "O" represents the player starting position
                - "G" represents target positions
                - "X" represents box positions
                - "#" represents walls

        Test cases:
            # Test case 1: Standard grid with player and targets
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', 'X', 'G', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)

            # Test case 2: No targets
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', '#', '#', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)

            # Test case 3: Multiple targets and boxes
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', 'X', 'G', '#'],
                ['#', 'X', 'G', '#', '#']
            ]
            game = PushBoxGame(input_map)
        """
        
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        """
        Initializes the game state by locating the player, targets, and boxes based on the provided map.
        
        Test cases:
            # Test case 1: When map has one player, two targets and two boxes
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', 'X', 'G', '#'],
                ['#', 'X', 'G', '#', '#']
            ]
            game = PushBoxGame(input_map)
            assert game.player_row == 1
            assert game.player_col == 1
            assert len(game.targets) == 2
            assert len(game.boxes) == 2

            # Test case 2: Map without any boxes or targets
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', '#', '#', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)
            assert len(game.targets) == 0
            assert len(game.boxes) == 0
            
            # Test case 3: Map with only player
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', '#', '#', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)
            assert game.player_row == 1
            assert game.player_col == 1
        """
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == "O":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == "G":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == "X":
                    self.boxes.append((row, col))

    def check_win(self):
        """
        Checks if the game has been won by verifying if all boxes are on their target positions.
        
        Returns:
            bool: True if all boxes are on targets, False otherwise.

        Test cases:
            # Test case 1: All boxes on targets
            game = PushBoxGame([
                ['#', '#', '#', '#', '#'],
                ['#', 'G', 'G', '#', '#'],
                ['#', '#', '#', '#', '#']
            ])
            game.boxes = [(1,1), (1,2)]
            assert game.check_win() == True
            
            # Test case 2: Boxes not on targets
            game = PushBoxGame([
                ['#', '#', '#', '#', '#'],
                ['#', 'X', 'G', '#', '#'],
                ['#', '#', '#', '#', '#']
            ])
            game.boxes = [(1,1)]
            assert game.check_win() == False

            # Test case 3: No boxes
            game = PushBoxGame([
                ['#', '#', '#', '#', '#'],
                ['#', 'O', '#', '#', '#'],
                ['#', '#', '#', '#', '#']
            ])
            assert game.check_win() == False
        """
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        """
        Moves the player in the specified direction, and if a box is pushed, checks if it can be moved.
        
        Parameters:
            direction (str): The direction to move the player, can be 'w' (up), 's' (down), 'a' (left), or 'd' (right).
        
        Returns:
            bool: The result of the check_win() method after the move, True if the game is over.
        
        Test cases:
            # Test case 1: Standard move (no box)
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', 'X', 'G', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)
            output = game.move('d')  # Move right to target
            assert output == True
            
            # Test case 2: Box pushed to target
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', 'X', 'G', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)
            output = game.move('d')  # Move right and push box to target
            assert output == True
            
            # Test case 3: Invalid move (wall)
            input_map = [
                ['#', '#', '#', '#', '#'],
                ['#', 'O', '#', 'G', '#'],
                ['#', '#', '#', '#', '#']
            ]
            game = PushBoxGame(input_map)
            output = game.move('a')  # Move left into a wall
            assert output == False
        """
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == "w":
            new_player_row -= 1
        elif direction == "s":
            new_player_row += 1
        elif direction == "a":
            new_player_col -= 1
        elif direction == "d":
            new_player_col += 1

        # Check for valid movement
        if self.map[new_player_row][new_player_col] != "#":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != "#":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()
```