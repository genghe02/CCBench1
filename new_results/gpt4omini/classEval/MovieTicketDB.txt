```python
"""
This class handles interactions with a movie ticket database, providing methods for creating tables, inserting tickets, searching for tickets by customer, and deleting tickets.
"""

import sqlite3

class MovieTicketDB:
    def __init__(self, db_name):
        """
        Initializes the MovieTicketDB class and establishes a connection to the SQLite database.

        Parameters:
            db_name (str): The name of the database file to connect or create.

        Returns:
            None
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """
        Creates the tickets table in the database if it does not already exist.

        Returns:
            None
        """
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """
        Inserts a new ticket into the tickets table.

        Parameters:
            movie_name (str): The name of the movie for which the ticket is issued.
            theater_name (str): The name of the theater where the movie is shown.
            seat_number (str): The seat number assigned for the ticket.
            customer_name (str): The name of the customer who purchased the ticket.

        Returns:
            None
        """
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        """
        Searches for tickets associated with a specific customer name.

        Parameters:
            customer_name (str): The name of the customer whose tickets are to be searched for.

        Returns:
            list: A list of tuples containing ticket information for the specified customer.
        """
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        """
        Deletes a ticket from the database using the ticket ID.

        Parameters:
            ticket_id (int): The ID of the ticket to be deleted.

        Returns:
            None
        """
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()
```