```python
"""
This class handles operations related to PDF files, including merging multiple PDFs and extracting text from them.
"""

import PyPDF2


class PDFHandler:
    def __init__(self, filepaths):
        """
        Initialization method for the PDFHandler class.

        Parameters:
            filepaths (list of str): A list containing the file paths of the PDFs to be handled.

        Returns:
            None
        """
        self.filepaths = filepaths
        # PdfFileReader is deprecated and was removed in PyPDF2 3.0.0. Use PdfReader instead.
        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]

    def merge_pdfs(self, output_filepath):
        """
        Merges multiple PDF files into a single PDF file.

        Parameters:
            output_filepath (str): The file path where the merged PDF will be saved.

        Returns:
            str: A message indicating the location of the saved merged PDF.

        Test cases:
            # Test case 1: Merging two PDFs
            pdf_handler = PDFHandler(['file1.pdf', 'file2.pdf'])
            result = pdf_handler.merge_pdfs('merged.pdf')
            assert result == "Merged PDFs saved at merged.pdf"
            
            # Test case 2: Merging multiple PDFs (normal case)
            pdf_handler = PDFHandler(['file1.pdf', 'file2.pdf', 'file3.pdf'])
            result = pdf_handler.merge_pdfs('merged_multiple.pdf')
            assert result == "Merged PDFs saved at merged_multiple.pdf"
            
            # Test case 3: Attempting to merge PDFs but providing an invalid output path
            pdf_handler = PDFHandler(['file1.pdf', 'file2.pdf'])
            try:
                pdf_handler.merge_pdfs('invalid_path/merged.pdf')
            except IOError as e:
                assert str(e) == 'Unable to write to file at invalid_path/merged.pdf'
        """
        pdf_writer = PyPDF2.PdfWriter()

        for reader in self.readers:
            # reader.getNumPages is deprecated and was removed in PyPDF2 3.0.0. Use len(reader.pages) instead.
            for page_num in range(len(reader.pages)):
                # reader.getPage(pageNumber) is deprecated and was removed in PyPDF2 3.0.0. Use reader.pages[page_number] instead.
                page = reader.pages[page_num]
                # addPage is deprecated and was removed in PyPDF2 3.0.0. Use add_page instead.
                pdf_writer.add_page(page)

        with open(output_filepath, 'wb') as out:
            pdf_writer.write(out)
        return f"Merged PDFs saved at {output_filepath}"

    def extract_text_from_pdfs(self):
        """
        Extracts text from all PDF files handled by this class.

        Returns:
            list of str: A list containing the extracted text from each PDF.

        Test cases:
            # Test case 1: Extracting text from a single PDF
            pdf_handler = PDFHandler(['file_with_text.pdf'])
            texts = pdf_handler.extract_text_from_pdfs()
            assert len(texts) > 0  # Expecting at least some text to be extracted
            
            # Test case 2: Extracting text from multiple PDFs
            pdf_handler = PDFHandler(['file1.pdf', 'file2.pdf'])
            texts = pdf_handler.extract_text_from_pdfs()
            assert len(texts) > 0  # Expecting combined text extraction
            
            # Test case 3: Extracting text from an empty PDF (no pages)
            pdf_handler = PDFHandler(['empty.pdf'])
            texts = pdf_handler.extract_text_from_pdfs()
            assert texts == []  # Expecting an empty list since no text exists
        """
        pdf_texts = []
        for reader in self.readers:
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                pdf_texts.append(page.extract_text())
        return pdf_texts
```