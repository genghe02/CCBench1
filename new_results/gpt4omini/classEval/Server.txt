```python
"""
This class serves as a simple server implementation that manages a whitelist of addresses 
and processes sending and receiving data from whitelisted addresses.
"""

class Server:

    def __init__(self):
        """
        Initializes the Server object with an empty whitelist and structures 
        for sending and receiving data.
        """
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        """
        Adds an address to the whitelist if it is not already present.

        Parameters:
            addr (str): The address to be added to the whitelist.

        Returns:
            list or bool: 
                - The updated whitelist if the address was added.
                - False if the address was already in the whitelist.

        Test cases:
            # Test case 1: Add an address
            assert add_white_list('192.168.1.1') == ['192.168.1.1']
            
            # Test case 2: Attempt to add an existing address
            assert add_white_list('192.168.1.1') == False
            
            # Test case 3: Add another address
            assert add_white_list('10.0.0.1') == ['192.168.1.1', '10.0.0.1']
        """
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        """
        Removes an address from the whitelist if it is present.

        Parameters:
            addr (str): The address to be removed from the whitelist.

        Returns:
            list or bool: 
                - The updated whitelist if the address was removed.
                - False if the address was not found in the whitelist.

        Test cases:
            # Test case 1: Remove an existing address
            assert del_white_list('192.168.1.1') == ['10.0.0.1']

            # Test case 2: Attempt to remove an address not in the list
            assert del_white_list('192.168.1.2') == False
            
            # Test case 3: Remove another address
            assert del_white_list('10.0.0.1') == []
        """
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        """
        Receives information from a given address if it is whitelisted.

        Parameters:
            info (dict): A dictionary containing 'addr' (str) and 'content' (str) keys.

        Returns:
            str or int or bool: 
                - The content received if the address is whitelisted.
                - -1 if the input structure is incorrect.
                - False if the address is not whitelisted.

        Test cases:
            # Test case 1: Receive data from a whitelisted address
            add_white_list('192.168.1.1')
            assert recv({'addr': '192.168.1.1', 'content': 'Hello'}) == 'Hello'
            
            # Test case 2: Receive data from a non-whitelisted address
            assert recv({'addr': '192.168.1.2', 'content': 'Hello'}) == False
            
            # Test case 3: Receive with incorrect structure
            assert recv({'address': '192.168.1.1', 'content': 'Hello'}) == -1
        """
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return -1
        addr = info["addr"]
        content = info["content"]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {"addr": addr, "content": content}
            return self.receive_struct["content"]

    def send(self, info):
        """
        Sends information to a given address by storing it in the send structure.

        Parameters:
            info (dict): A dictionary containing 'addr' (str) and 'content' (str) keys.

        Returns:
            str: 
                - A confirmation message if the structure is correct.
                - An error message if the structure is incorrect.

        Test cases:
            # Test case 1: Send data with correct structure
            assert send({'addr': '192.168.1.1', 'content': 'Hello'}) == None
            
            # Test case 2: Send data with incorrect structure
            assert send({'address': '192.168.1.1', 'content': 'Hello'}) == "info structure is not correct"

            # Test case 3: Send with missing content
            assert send({'addr': '192.168.1.1'}) == "info structure is not correct"
        """
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return "info structure is not correct"
        self.send_struct = {"addr": info["addr"], "content": info["content"]}

    def show(self, type):
        """
        Displays the sent or received information based on the requested type.

        Parameters:
            type (str): Type of information to display ('send' or 'receive').

        Returns:
            dict or bool: 
                - The send or receive structure if type is valid.
                - False if the type is invalid.

        Test cases:
            # Test case 1: Show sent structure
            send({'addr': '192.168.1.1', 'content': 'Hello'})
            assert show('send') == {'addr': '192.168.1.1', 'content': 'Hello'}
            
            # Test case 2: Show received structure
            recv({'addr': '192.168.1.1', 'content': 'Hello'})
            assert show('receive') == {'addr': '192.168.1.1', 'content': 'Hello'}
            
            # Test case 3: Show with invalid type
            assert show('invalid') == False
        """
        if type == "send":
            return self.send_struct
        elif type == "receive":
            return self.receive_struct
        else:
            return False
```