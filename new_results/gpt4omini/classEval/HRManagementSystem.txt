```python
"""
This class implements a simple Human Resources Management System that handles employee records,
including adding, removing, updating, and retrieving employee details.
"""

class HRManagementSystem:
    def __init__(self):
        """
        Initializes a new instance of the HRManagementSystem class,
        with an empty dictionary to store employee records.
        """
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        """
        Adds a new employee to the system.

        Parameters:
            employee_id (int): Unique identifier for the employee.
            name (str): Name of the employee.
            position (str): Job position of the employee.
            department (str): Department where the employee works.
            salary (float): Salary of the employee.

        Returns:
            bool: True if the employee was added successfully, False if
            an employee with the same ID already exists.

        Test cases:
            # Test case 1: Successful addition of employee
            result = hr_system.add_employee(1, 'Alice', 'Developer', 'IT', 60000)
            assert result is True
            
            # Test case 2: Attempt to add an employee with existing ID
            result = hr_system.add_employee(1, 'Bob', 'Manager', 'HR', 80000)
            assert result is False
            
            # Test case 3: Add employee with different ID
            result = hr_system.add_employee(2, 'Charlie', 'Analyst', 'Finance', 70000)
            assert result is True
        """
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        """
        Removes an employee from the system.

        Parameters:
            employee_id (int): Unique identifier for the employee to remove.

        Returns:
            bool: True if the employee was removed successfully, False if the 
            employee was not found.

        Test cases:
            # Test case 1: Successful removal
            result = hr_system.remove_employee(1)
            assert result is True
            
            # Test case 2: Attempt to remove an employee who does not exist
            result = hr_system.remove_employee(3)
            assert result is False

            # Test case 3: Remove employee that exists
            result = hr_system.remove_employee(2)
            assert result is True
        """
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        """
        Updates the information of an existing employee.

        Parameters:
            employee_id (int): Unique identifier for the employee to update.
            employee_info (dict): Dictionary containing the updated employee information.

        Returns:
            bool: True if the employee information was updated successfully, 
            False if the employee does not exist or the provided info is invalid.

        Test cases:
            # Test case 1: Successful update
            result = hr_system.update_employee(1, {'name': 'Alice Smith', 'salary': 65000})
            assert result is True
            
            # Test case 2: Attempt to update non-existing employee
            result = hr_system.update_employee(3, {'name': 'Daisy', 'salary': 30000})
            assert result is False

            # Test case 3: Update with invalid fields (no employee info)
            result = hr_system.update_employee(2, {})
            assert result is False
        """
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        """
        Retrieves the details of a specific employee.

        Parameters:
            employee_id (int): Unique identifier for the employee to retrieve.

        Returns:
            dict|bool: A dictionary containing the employee's details if found,
            or False if the employee does not exist.

        Test cases:
            # Test case 1: Retrieve existing employee
            result = hr_system.get_employee(1)
            assert result == {'name': 'Alice', 'position': 'Developer', 'department': 'IT', 'salary': 60000}

            # Test case 2: Retrieve non-existing employee
            result = hr_system.get_employee(3)
            assert result is False
            
            # Test case 3: Retrieve another existing employee
            hr_system.add_employee(2, 'Charlie', 'Analyst', 'Finance', 70000)
            result = hr_system.get_employee(2)
            assert result == {'name': 'Charlie', 'position': 'Analyst', 'department': 'Finance', 'salary': 70000}
        """
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        """
        Lists all employees in the system.

        Returns:
            dict: A dictionary containing the details of all employees,
            with employee IDs as keys.

        Test cases:
            # Test case 1: List employees when there are none
            result = hr_system.list_employees()
            assert result == {}
            
            # Test case 2: List employees when some exist
            hr_system.add_employee(1, 'Alice', 'Developer', 'IT', 60000)
            hr_system.add_employee(2, 'Charlie', 'Analyst', 'Finance', 70000)
            result = hr_system.list_employees()
            assert result == {
                1: {'employee_ID': 1, 'name': 'Alice', 'position': 'Developer', 'department': 'IT', 'salary': 60000},
                2: {'employee_ID': 2, 'name': 'Charlie', 'position': 'Analyst', 'department': 'Finance', 'salary': 70000}
            }
            
            # Test case 3: List employees after removing one
            hr_system.remove_employee(1)
            result = hr_system.list_employees()
            assert result == {
                2: {'employee_ID': 2, 'name': 'Charlie', 'position': 'Analyst', 'department': 'Finance', 'salary': 70000}
            }
        """
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data
```