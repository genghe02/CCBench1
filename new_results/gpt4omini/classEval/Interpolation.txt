```python
"""
This class provides methods for 1D and 2D interpolation of datasets.
"""

class Interpolation:
    def __init__(self):
        """
        Initializes the Interpolation class.
        """
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """
        Performs 1D linear interpolation for the given data points.

        Parameters:
            x (list): A list of distinct x-coordinates of the known data points.
            y (list): A list of corresponding y-coordinates of the known data points.
            x_interp (list): A list of x-coordinates at which to interpolate values.

        Returns:
            list: A list of interpolated y-values corresponding to x_interp.

        Test cases:
            # Test case 1: Normal interpolation
            x = [0, 1, 2]
            y = [0, 1, 4]
            x_interp = [0.5, 1.5]
            expected_output = [0.5, 2.5]
            assert Interpolation.interpolate_1d(x, y, x_interp) == expected_output

            # Test case 2: Edge case with boundary x values
            x_interp = [0, 2]
            expected_output = [0, 4]
            assert Interpolation.interpolate_1d(x, y, x_interp) == expected_output

            # Test case 3: Error case with x values not in the range
            x_interp = [-1, 3]
            expected_output = []  # Should return an empty list or raise an error
            try:
                Interpolation.interpolate_1d(x, y, x_interp)
            except ValueError as e:
                assert str(e) == 'All x_interp must be between min(x) and max(x)'
        """
        if not (min(x) <= min(x_interp) and max(x_interp) <= max(x)):
            raise ValueError('All x_interp must be between min(x) and max(x)')

        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i + 1]:
                    yi = y[i] + (y[i + 1] - y[i]) * (xi - x[i]) / (x[i + 1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp

    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        """
        Performs bilinear interpolation for the given 2D data points.

        Parameters:
            x (list): A list of distinct x-coordinates of the known data points.
            y (list): A list of distinct y-coordinates of the known data points.
            z (list of lists): A 2D list containing corresponding z-values for each (x, y) pair.
            x_interp (list): A list of x-coordinates at which to interpolate values.
            y_interp (list): A list of y-coordinates at which to interpolate values.

        Returns:
            list: A list of interpolated z-values corresponding to (x_interp, y_interp).

        Test cases:
            # Test case 1: Normal interpolation
            x = [0, 1]
            y = [0, 1]
            z = [[1, 2], [3, 4]]
            x_interp = [0.5]
            y_interp = [0.5]
            expected_output = [2.5]
            assert Interpolation.interpolate_2d(x, y, z, x_interp, y_interp) == expected_output

            # Test case 2: Edge case with boundary x and y values
            x_interp = [0, 1]
            y_interp = [0, 1]
            expected_output = [1, 4]
            assert Interpolation.interpolate_2d(x, y, z, x_interp, y_interp) == expected_output

            # Test case 3: Error case with x/y values not in the range
            x_interp = [-1]
            y_interp = [2]
            expected_output = []  # Should return an empty list or raise an error
            try:
                Interpolation.interpolate_2d(x, y, z, x_interp, y_interp)
            except ValueError as e:
                assert str(e) == 'All x_interp and y_interp must be between min(x) and max(x), min(y) and max(y)'
        """
        if not (min(x) <= min(x_interp) <= max(x) and min(y) <= min(y_interp) <= max(y)):
            raise ValueError('All x_interp and y_interp must be between min(x) and max(x), min(y) and max(y)')

        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i + 1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j + 1]:
                            z00 = z[i][j]
                            z01 = z[i][j + 1]
                            z10 = z[i + 1][j]
                            z11 = z[i + 1][j + 1]
                            zi = (z00 * (x[i + 1] - xi) * (y[j + 1] - yi) +
                                   z10 * (xi - x[i]) * (y[j + 1] - yi) +
                                   z01 * (x[i + 1] - xi) * (yi - y[j]) +
                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i + 1] - x[i]) * (y[j + 1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp
```