```python
"""
This class converts English words representing numbers into their integer representations.
"""

class Words2Numbers:

    def __init__(self):
        """
        Initializes the Words2Numbers class and sets up the necessary mappings
        for number words, tens, scales, and ordinal words.
        """
        self.numwords = {}
        self.units = [
            "zero", "one", "two", "three", "four", "five", "six", "seven", "eight",
            "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen",
            "sixteen", "seventeen", "eighteen", "nineteen",
        ]
        self.tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
        self.scales = ["hundred", "thousand", "million", "billion", "trillion"]

        self.numwords["and"] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def text2int(self, textnum):
        """
        Converts a number in word form to its integer representation.

        Parameters:
            textnum (str): The number in word form to convert to an integer.

        Returns:
            str: The string representation of the integer value.

        Test cases:
            # Test case 1: Simple number
            assert text2int("twenty one") == "21"
            
            # Test case 2: Large number
            assert text2int("one hundred twenty three thousand four hundred fifty six") == "123456"

            # Test case 3: Complex number with ordinals
            assert text2int("one thousand two hundred and twelve") == "1212"
        """
        textnum = textnum.replace('-', ' ')

        current = result = 0
        curstring = ""
        onnumber = False
        for word in textnum.split():
            if word in self.ordinal_words:
                scale, increment = (1, self.ordinal_words[word])
                current = current * scale + increment
                onnumber = True
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    if onnumber:
                        curstring += repr(result + current) + " "
                    curstring += word + " "
                    result = current = 0
                    onnumber = False
                else:
                    scale, increment = self.numwords[word]
                    current = current * scale + increment
                    if scale > 100:
                        result += current
                        current = 0
                    onnumber = True

        if onnumber:
            curstring += repr(result + current)

        return curstring

    def is_valid_input(self, textnum):
        """
        Checks if the input string is a valid representation of a number in words.

        Parameters:
            textnum (str): The number in word form to validate.

        Returns:
            bool: True if the input is valid, False otherwise.

        Test cases:
            # Test case 1: Valid input
            assert is_valid_input("one hundred and five") == True
            
            # Test case 2: Invalid input
            assert is_valid_input("five apple") == False
            
            # Test case 3: Input with ordinals
            assert is_valid_input("first second") == True
        """
        textnum = textnum.replace('-', ' ')

        for word in textnum.split():
            if word in self.ordinal_words:
                continue
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    return False

        return True
```