```python
"""
This class is responsible for managing student data in a SQLite database.
It provides methods to create a student table, insert new student records, 
search for students by name, and delete student records by name.
"""

import sqlite3


class StudentDatabaseProcessor:

    def __init__(self, database_name):
        """
        Initializes an instance of the StudentDatabaseProcessor class.

        Parameters:
            database_name (str): The name of the SQLite database file.
        """
        self.database_name = database_name

    def create_student_table(self):
        """
        Creates a table for storing student records in the database.

        This method will create a table named 'students' if it does not already exist.
        The table contains fields for id, name, age, gender, and grade.

        Returns:
            None
            
        Test cases:
            # Test case 1: Create the student table
            processor.create_student_table()
            # Verify the table is created (could check database directly)
            
            # Test case 2: Creating the table again should not throw an error
            processor.create_student_table()
            # Verify no exceptions were raised

            # Test case 3: Check if the table exists in the database
            conn = sqlite3.connect(processor.database_name)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='students';")
            assert cursor.fetchone() is not None
            conn.close()
        """
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        create_table_query = """
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            gender TEXT,
            grade INTEGER
        )
        """
        cursor.execute(create_table_query)

        conn.commit()
        conn.close()

    def insert_student(self, student_data):
        """
        Inserts a new student record into the students table.

        Parameters:
            student_data (dict): A dictionary containing student information. 
                                 Expected keys are 'name', 'age', 'gender', and 'grade'.

        Returns:
            None
            
        Test cases:
            # Test case 1: Insert a valid student
            processor.insert_student({'name': 'John Doe', 'age': 20, 'gender': 'M', 'grade': 3})
            # Verify the record is inserted successfully

            # Test case 2: Insert a student with missing data (should raise an error)
            try:
                processor.insert_student({'name': 'Jane Doe', 'age': 22})  # Missing gender and grade
            except Exception as e:
                assert 'not enough values to unpack' in str(e)

            # Test case 3: Insert a student with negative age (should raise an error)
            try:
                processor.insert_student({'name': 'Invalid Student', 'age': -5, 'gender': 'M', 'grade': 2})
            except Exception as e:
                assert 'CHECK constraint failed' in str(e)  # Check for appropriate constraints
        """
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        insert_query = """
        INSERT INTO students (name, age, gender, grade)
        VALUES (?, ?, ?, ?)
        """
        cursor.execute(insert_query,
                       (student_data['name'], student_data['age'], student_data['gender'], student_data['grade']))

        conn.commit()
        conn.close()

    def search_student_by_name(self, name):
        """
        Searches for a student record in the students table by their name.

        Parameters:
            name (str): The name of the student to search for.

        Returns:
            list: A list of matching student records, each represented as a tuple.
            
        Test cases:
            # Test case 1: Search for an existing student
            students = processor.search_student_by_name('John Doe')
            assert len(students) > 0  # Assuming 'John Doe' was inserted earlier

            # Test case 2: Search for a non-existing student
            students = processor.search_student_by_name('Nonexistent Student')
            assert len(students) == 0  # Should return an empty list

            # Test case 3: Search with an empty name
            students = processor.search_student_by_name('')
            assert len(students) == 0  # Assuming no students have empty names
        """
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        select_query = "SELECT * FROM students WHERE name = ?"
        cursor.execute(select_query, (name,))
        result = cursor.fetchall()

        conn.close()

        return result

    def delete_student_by_name(self, name):
        """
        Deletes a student record from the students table by their name.

        Parameters:
            name (str): The name of the student to delete.

        Returns:
            None

        Test cases:
            # Test case 1: Delete an existing student
            processor.delete_student_by_name('John Doe')
            students = processor.search_student_by_name('John Doe')
            assert len(students) == 0  # Should be deleted

            # Test case 2: Attempt to delete a non-existing student (should not error)
            processor.delete_student_by_name('Nonexistent Student')
            # No assertion needed, method should complete without exception

            # Test case 3: Delete using an empty name (possibly skip as no record to delete)
            processor.delete_student_by_name('')
            # Should not raise exception
        """
        conn = sqlite3.connect(self.database_name)
        cursor = conn.cursor()

        delete_query = "DELETE FROM students WHERE name = ?"
        cursor.execute(delete_query, (name,))

        conn.commit()
        conn.close()
```