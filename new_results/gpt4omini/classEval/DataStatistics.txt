```python
"""
This class provides statistical analysis methods for calculating mean, median, and mode from a dataset.
"""

from collections import Counter

class DataStatistics:
    def mean(self, data):
        """
        Calculate the mean (average) of a list of numbers.
        
        Parameters:
            data (list of float): A list of numbers from which to calculate the mean.
        
        Returns:
            float: The mean of the provided list of numbers, rounded to two decimal places.
        
        Test cases:
            # Test case 1: Normal case
            input_data = [1, 2, 3, 4, 5]
            expected_output = 3.00
            
            # Test case 2: Edge case with negative numbers
            input_data = [-1, -2, -3, -4, -5]
            expected_output = -3.00
            
            # Test case 3: Edge case with single element
            input_data = [5]
            expected_output = 5.00
        """
        return round(sum(data) / len(data), 2)

    def median(self, data):
        """
        Calculate the median of a list of numbers.
        
        Parameters:
            data (list of float): A list of numbers from which to calculate the median.
        
        Returns:
            float: The median of the provided list of numbers. If the list length is even, 
            it returns the average of the two middle numbers.
        
        Test cases:
            # Test case 1: Normal case with odd number of elements
            input_data = [1, 3, 2] 
            expected_output = 2
            
            # Test case 2: Normal case with even number of elements
            input_data = [1, 5, 2, 4] 
            expected_output = 3.00
            
            # Test case 3: Edge case with single element
            input_data = [7]
            expected_output = 7.00
        """
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 0:
            middle = n // 2
            return round((sorted_data[middle - 1] + sorted_data[middle]) / 2, 2)
        else:
            middle = n // 2
            return sorted_data[middle]

    def mode(self, data):
        """
        Calculate the mode(s) of a list of numbers.
        
        Parameters:
            data (list of float): A list of numbers from which to calculate the mode.
        
        Returns:
            list: A list containing the mode(s) of the provided list of numbers. If there 
            are multiple modes, all of them will be returned.
        
        Test cases:
            # Test case 1: Normal case
            input_data = [1, 2, 2, 3] 
            expected_output = [2]
            
            # Test case 2: Multiple modes
            input_data = [1, 1, 2, 2, 3] 
            expected_output = [1, 2]
            
            # Test case 3: Edge case with no mode
            input_data = [1, 2, 3] 
            expected_output = [1, 2, 3]
        """
        counter = Counter(data)
        mode_count = max(counter.values())
        mode = [x for x, count in counter.items() if count == mode_count]

        # Handle the case if every element occurs once (no mode)
        if mode_count == 1:
            return list(set(data))
        return mode
```