```python
"""
This class provides static methods for statistical calculations such as mean, median, mode, 
correlation, correlation matrix, standard deviation, and z-scores.
"""

import math

class Statistics3:

    @staticmethod
    def median(data):
        """
        Calculate the median of a dataset.

        Parameters:
            data (list of float): A list of numerical data.

        Returns:
            float: The median value of the dataset, or None if the dataset is empty.

        Test cases:
            # Test case 1: Odd number of elements
            input_data = [1, 2, 3, 4, 5]
            expected_output = 3
            
            # Test case 2: Even number of elements
            input_data = [1, 2, 3, 4, 5, 6]
            expected_output = 3.5
            
            # Test case 3: Empty dataset
            input_data = []
            expected_output = None
        """
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        """
        Calculate the mode of a dataset.

        Parameters:
            data (list of float): A list of numerical data.

        Returns:
            list of float: A list of mode values. If there is no mode, returns an empty list.

        Test cases:
            # Test case 1: Single mode
            input_data = [1, 2, 2, 3]
            expected_output = [2]

            # Test case 2: Multiple modes
            input_data = [1, 2, 2, 3, 3]
            expected_output = [2, 3]

            # Test case 3: No mode
            input_data = [1, 2, 3]
            expected_output = []
        """
        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        """
        Calculate the Pearson correlation coefficient between two datasets.

        Parameters:
            x (list of float): First dataset.
            y (list of float): Second dataset.

        Returns:
            float: The Pearson correlation coefficient, or None if the denominator is zero.

        Test cases:
            # Test case 1: Positive correlation
            input_x = [1, 2, 3]
            input_y = [2, 4, 6]
            expected_output = 1.0
            
            # Test case 2: No correlation
            input_x = [1, 2, 3]
            input_y = [1, 3, 2]
            expected_output = 0.0
            
            # Test case 3: Perfect negative correlation
            input_x = [1, 2, 3]
            input_y = [3, 2, 1]
            expected_output = -1.0
        """
        n = len(x)
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        """
        Calculate the mean of a dataset.

        Parameters:
            data (list of float): A list of numerical data.

        Returns:
            float: The mean value of the dataset, or None if the dataset is empty.

        Test cases:
            # Test case 1: Normal case
            input_data = [1, 2, 3]
            expected_output = 2.0
            
            # Test case 2: Single value
            input_data = [5]
            expected_output = 5.0
            
            # Test case 3: Empty dataset
            input_data = []
            expected_output = None
        """
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        """
        Calculate the correlation matrix of a dataset.

        Parameters:
            data (list of list of float): A list of datasets, where each dataset is a list of numerical values.

        Returns:
            list of list of float: A correlation matrix indicating the correlations between each pair of datasets.

        Test cases:
            # Test case 1: Simple dataset
            input_data = [[1, 2], [2, 4], [3, 6]]
            expected_output = [[1.0, 1.0], [1.0, 1.0]]
            
            # Test case 2: No correlation
            input_data = [[1, 2, 3], [1, 3, 2]]
            expected_output = [[1.0, 0.0], [0.0, 1.0]]
            
            # Test case 3: Empty data (should handle gracefully)
            input_data = []
            expected_output = []
        """
        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        """
        Calculate the standard deviation of a dataset.

        Parameters:
            data (list of float): A list of numerical data.

        Returns:
            float: The standard deviation of the dataset, or None if the dataset has less than 2 elements.

        Test cases:
            # Test case 1: Normal case
            input_data = [1, 2, 3, 4, 5]
            expected_output = 1.5811388300841898
            
            # Test case 2: Single value
            input_data = [5]
            expected_output = None
            
            # Test case 3: Empty dataset
            input_data = []
            expected_output = None
        """
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        """
        Calculate the z-scores of a dataset.

        Parameters:
            data (list of float): A list of numerical data.

        Returns:
            list of float: A list of z-scores, or None if standard deviation is zero or the dataset is empty.

        Test cases:
            # Test case 1: Normal case
            input_data = [1, 2, 3]
            expected_output = [-1.224744871391589, 0.0, 1.224744871391589]
            
            # Test case 2: Single value
            input_data = [5]
            expected_output = None
            
            # Test case 3: Empty dataset
            input_data = []
            expected_output = None
        """
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]
```