```python
"""
This class provides functionality to validate and manipulate IP addresses.
"""

class IPAddress:
    def __init__(self, ip_address):
        """
        Initializes the IPAddress instance with the given IP address.
        
        Parameters:
            ip_address (str): The IP address to be validated and used, in string format.
        """
        self.ip_address = ip_address

    def is_valid(self):
        """
        Validates the IP address to check if it is a correctly formatted IPv4 address.
        
        Returns:
            bool: True if the IP address is valid, False otherwise.
        
        Test cases:
            # Test case 1: Valid IP address
            input = '192.168.0.1'
            expected_output = True
            
            # Test case 2: Invalid IP address with too many octets
            input = '192.168.0.1.1'
            expected_output = False
            
            # Test case 3: Invalid octet value
            input = '256.100.50.25'
            expected_output = False
        """
        octets = self.ip_address.split('.')
        if len(octets) != 4:
            return False
        for octet in octets:
            if not octet.isdigit() or int(octet) < 0 or int(octet) > 255:
                return False
        return True

    def get_octets(self):
        """
        Returns the individual octets of the IP address as a list if valid; otherwise, returns an empty list.
        
        Returns:
            list: A list of octets as strings if the IP address is valid, otherwise an empty list.
        
        Test cases:
            # Test case 1: Valid IP address
            input = '192.168.1.1'
            expected_output = ['192', '168', '1', '1']
            
            # Test case 2: Invalid IP address
            input = '256.100.50.25'
            expected_output = []
            
            # Test case 3: Non-standard format
            input = 'abc.def.ghi.jkl'
            expected_output = []
        """
        if self.is_valid():
            return self.ip_address.split('.')
        else:
            return []

    def get_binary(self):
        """
        Converts the validated IP address into its binary representation.
        
        Returns:
            str: The binary representation of the IP address as a dot-separated string of 8-bit binary numbers if valid; otherwise, returns an empty string.
        
        Test cases:
            # Test case 1: Valid IP address
            input = '192.168.1.1'
            expected_output = '11000000.10101000.00000001.00000001'
            
            # Test case 2: Invalid IP address
            input = '256.100.50.25'
            expected_output = ''
            
            # Test case 3: Valid but zero IP address
            input = '0.0.0.0'
            expected_output = '00000000.00000000.00000000.00000000'
        """
        if self.is_valid():
            binary_octets = []
            for octet in self.get_octets():
                binary_octets.append(format(int(octet), '08b'))
            return '.'.join(binary_octets)
        else:
            return ''
```