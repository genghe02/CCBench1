```python
"""
This class represents a simple Blackjack game implementation.
It manages the deck of cards, player and dealer hands, and determines the game outcome.
"""

import random

class BlackjackGame:
    def __init__(self):
        """
        Initialization method for the BlackjackGame class.

        This method creates a new deck of cards and initializes the player and dealer hands as empty lists.
        """
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        """
        Create and shuffle a standard deck of 52 playing cards.

        Returns:
            list: A shuffled list of cards in the form of strings representing rank and suit.
        
        Test cases:
            # Test case 1: Check deck length
            assert len(create_deck()) == 52
            
            # Test case 2: Check for uniqueness of cards
            deck = create_deck()
            assert len(deck) == len(set(deck))  # No duplicates
            
            # Test case 3: Verify suits and ranks are correct
            deck = create_deck()
            assert all(card[-1] in ['S', 'C', 'D', 'H'] for card in deck)
            assert all(card[:-1] in ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] for card in deck)
        """
        deck = []
        suits = ['S', 'C', 'D', 'H']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        for suit in suits:
            for rank in ranks:
                deck.append(rank + suit)
        random.shuffle(deck)
        return deck

    def calculate_hand_value(self, hand):
        """
        Calculate the total value of a given hand in Blackjack.

        Parameters:
            hand (list): A list of strings representing the cards in the player's or dealer's hand.

        Returns:
            int: The value of the hand, taking into account the rules of Blackjack regarding Aces.
        
        Test cases:
            # Test case 1: Normal hand
            assert calculate_hand_value(['10S', 'KH']) == 20
            
            # Test case 2: Hand with Ace
            assert calculate_hand_value(['AS', '8H']) == 19
            
            # Test case 3: Hand exceeding 21
            assert calculate_hand_value(['AH', 'KH', '2D']) == 23
        """
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        """
        Determine the winner between the player and dealer based on their hands.

        Parameters:
            player_hand (list): The list of strings representing the player's hand.
            dealer_hand (list): The list of strings representing the dealer's hand.

        Returns:
            str: A message declaring the winner ("Player wins" or "Dealer wins").
        
        Test cases:
            # Test case 1: Player wins
            assert check_winner(['10S', 'KH'], ['9D', '8H']) == 'Player wins'
            
            # Test case 2: Dealer wins
            assert check_winner(['5H', '5D'], ['10S', 'KH']) == 'Dealer wins'
            
            # Test case 3: Both exceed 21, dealer wins
            assert check_winner(['10H', 'QH', '2D'], ['10S', '9H', '3H']) == 'Dealer wins'
        """
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        else:
            if player_value <= dealer_value:
                return 'Dealer wins'
            else:
                return 'Player wins'
```