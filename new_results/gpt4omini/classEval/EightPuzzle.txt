```python
"""
This class represents an implementation of the Eight Puzzle game, providing methods to manipulate the puzzle state and solve the puzzle.
"""

class EightPuzzle:
    def __init__(self, initial_state):
        """
        Initializes the EightPuzzle with a given initial state.

        Parameters:
            initial_state (list of list of int): A 3x3 list representing the initial state of the puzzle,
                                                   where 0 represents the blank space.
        """
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        """
        Finds the position of the blank space (represented by 0) in the given state.

        Parameters:
            state (list of list of int): The current state of the puzzle.

        Returns:
            tuple: A tuple (i, j) representing the row and column indices of the blank space.

        Test cases:
            # Test case 1: Find the blank in the initial state
            assert find_blank([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == (1, 1)
            
            # Test case 2: Find the blank in a different configuration
            assert find_blank([[1, 2, 3], [4, 5, 6], [0, 7, 8]]) == (2, 0)
            
            # Test case 3: Blank in the top left corner
            assert find_blank([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == (0, 0)
        """
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j

    def move(self, state, direction):
        """
        Moves the blank space in the specified direction.

        Parameters:
            state (list of list of int): The current state of the puzzle.
            direction (str): The direction to move the blank: 'up', 'down', 'left', or 'right'.

        Returns:
            list of list of int: The new state of the puzzle after the move.

        Test cases:
            # Test case 1: Move blank up
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'up') == [[1, 2, 3], [0, 4, 6], [7, 8, 5]]
            
            # Test case 2: Move blank down
            assert move([[1, 2, 3], [0, 4, 6], [7, 8, 5]], 'down') == [[1, 2, 3], [4, 8, 6], [7, 0, 5]]
            
            # Test case 3: Move blank left
            assert move([[1, 2, 3], [4, 5, 6], [7, 0, 8]], 'left') == [[1, 2, 3], [4, 5, 6], [0, 7, 8]]
        """
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]

        if direction == 'up':
            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        elif direction == 'down':
            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        elif direction == 'left':
            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        elif direction == 'right':
            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]

        return new_state

    def get_possible_moves(self, state):
        """
        Gets all possible moves for the current state of the puzzle based on the position of the blank.

        Parameters:
            state (list of list of int): The current state of the puzzle.

        Returns:
            list of str: A list of possible moves: 'up', 'down', 'left', 'right'.

        Test cases:
            # Test case 1: Possible moves when blank is in the center
            assert get_possible_moves([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == ['up', 'down', 'left', 'right']
            
            # Test case 2: Possible moves when blank is in the top row
            assert get_possible_moves([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == ['down', 'right']
            
            # Test case 3: Possible moves when blank is in the bottom right corner
            assert get_possible_moves([[1, 2, 3], [4, 5, 0], [7, 8, 6]]) == ['up', 'left']
        """
        moves = []
        i, j = self.find_blank(state)

        if i > 0:
            moves.append('up')
        if i < 2:
            moves.append('down')
        if j > 0:
            moves.append('left')
        if j < 2:
            moves.append('right')

        return moves

    def solve(self):
        """
        Solves the Eight Puzzle using a breadth-first search strategy.

        Returns:
            list of str: The sequence of moves to solve the puzzle or None if no solution is found.

        Test cases:
            # Test case 1: Solve the puzzle with a given initial state
            assert solve(EightPuzzle([[1, 2, 3], [4, 0, 6], [7, 5, 8]])) == ['down', 'left', 'up']
            
            # Test case 2: Solve from a more scrambled state
            assert solve(EightPuzzle([[1, 2, 3], [5, 4, 0], [7, 8, 6]])) == ['down']
            
            # Test case 3: Already solved puzzle
            assert solve(EightPuzzle([[1, 2, 3], [4, 5, 6], [7, 8, 0]])) == []
        """
        open_list = [(self.initial_state, [])]
        closed_list = []

        while open_list:
            current_state, path = open_list.pop(0)
            closed_list.append(current_state)

            if current_state == self.goal_state:
                return path

            for move in self.get_possible_moves(current_state):
                new_state = self.move(current_state, move)
                if new_state not in closed_list:
                    open_list.append((new_state, path + [move]))

        return None
```