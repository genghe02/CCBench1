```python
"""
This class represents a shopping cart that manages items, prices, and quantities for a user's shopping session.
"""

class ShoppingCart:
    
    def __init__(self):
        """
        Initializes a new instance of the ShoppingCart class with an empty items dictionary.
        """
        self.items = {}

    def add_item(self, item, price, quantity=1):
        """
        Adds an item to the shopping cart, specifying the price and quantity.

        Parameters:
            item (str): The name of the item to add.
            price (float): The price of the item.
            quantity (int, optional): The quantity of the item to add, defaults to 1.

        Returns:
            None

        Test cases:
            # Test case 1: Adding a single item
            cart = ShoppingCart()
            cart.add_item('apple', 0.5, 1)
            assert cart.items['apple'] == {'price': 0.5, 'quantity': 1}
            
            # Test case 2: Adding multiple quantities of an item
            cart.add_item('apple', 0.5, 3)
            assert cart.items['apple'] == {'price': 0.5, 'quantity': 3}
            
            # Test case 3: Adding a new item
            cart.add_item('banana', 0.25, 2)
            assert 'banana' in cart.items
            assert cart.items['banana'] == {'price': 0.25, 'quantity': 2}
        """
        if item in self.items:
            self.items[item]['quantity'] += quantity
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        """
        Removes a specified quantity of an item from the shopping cart.

        Parameters:
            item (str): The name of the item to remove.
            quantity (int, optional): The quantity of the item to remove, defaults to 1.

        Returns:
            None

        Test cases:
            # Test case 1: Removing a single item
            cart = ShoppingCart()
            cart.add_item('apple', 0.5, 2)
            cart.remove_item('apple', 1)
            assert cart.items['apple']['quantity'] == 1
            
            # Test case 2: Removing an item not in cart
            cart.remove_item('banana')
            assert 'banana' not in cart.items
            
            # Test case 3: Removing more than available
            cart.remove_item('apple', 3)
            assert cart.items['apple']['quantity'] == 1
        """
        if item in self.items:
            self.items[item]['quantity'] -= quantity
            if self.items[item]['quantity'] <= 0:
                del self.items[item]

    def view_items(self) -> dict:
        """
        Returns a dictionary of items currently in the shopping cart.

        Returns:
            dict: A dictionary containing item names as keys and their price and quantity as values.

        Test cases:
            # Test case 1: Viewing items in an empty cart
            cart = ShoppingCart()
            assert cart.view_items() == {}
            
            # Test case 2: Viewing items in a filled cart
            cart.add_item('apple', 0.5, 2)
            cart.add_item('banana', 0.25, 3)
            assert cart.view_items() == {
                'apple': {'price': 0.5, 'quantity': 2},
                'banana': {'price': 0.25, 'quantity': 3}
            }
            
            # Test case 3: Viewing items after removal
            cart.remove_item('banana', 3)
            assert cart.view_items() == {'apple': {'price': 0.5, 'quantity': 2}}
        """
        return self.items

    def total_price(self) -> float:
        """
        Calculates the total price of all items in the cart.

        Returns:
            float: The total price of all items in the shopping cart.

        Test cases:
            # Test case 1: Total price of an empty cart
            cart = ShoppingCart()
            assert cart.total_price() == 0.0
            
            # Test case 2: Total price with multiple items
            cart.add_item('apple', 0.5, 2)
            cart.add_item('banana', 0.25, 3)
            assert cart.total_price() == (0.5 * 2) + (0.25 * 3)  # Should be 1.5
            
            # Test case 3: Total price after item removal
            cart.remove_item('banana', 3)
            assert cart.total_price() == (0.5 * 2)  # Should be 1.0
        """
        return sum([item['quantity'] * item['price'] for item in self.items.values()])
```