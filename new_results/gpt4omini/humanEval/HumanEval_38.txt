```python
def truncate_number(number: float) -> float:
   # Return the decimal part of a float number by using modulo 1.0
   >>> truncate_number(3.5) # returns 0.5
   >>> truncate_number(-3.5) # returns 0.5
   >>> truncate_number(0.0) # returns 0.0
   return number % 1.0


def encode_cyclic(s: str):
    # Split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # Cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    # Decode the cyclic encoded string by applying the encoding twice.
    return encode_cyclic(encode_cyclic(s))
```