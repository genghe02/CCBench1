"""
This class provides methods for encrypting text using three types of ciphers: Caesar, Vigenere, and Rail Fence.
"""

class EncryptionUtils:
    def __init__(self, key):
        """
        Initializes the `EncryptionUtils` with a key.

        Parameters:
            key (str): The key used in the Vigenere cipher encryption process.
        """
        self.key = key

    def caesar_cipher(self, plaintext, shift):
        """
        Encrypts the given plaintext using the Caesar cipher method.

        Parameters:
            plaintext (str): The text to be encrypted.
            shift (int): The number of places each character in the plaintext is shifted down the alphabet.

        Returns:
            str: The encrypted ciphertext.

        Test cases:
            # Test case 1: Normal usage
            assert caesar_cipher('HELLO', 3) == 'KHOOR'
            
            # Test case 2: Wrapping from 'Z' to 'A'
            assert caesar_cipher('XYZ', 3) == 'ABC'
            
            # Test case 3: Non-alphabetic characters
            assert caesar_cipher('HELLO, WORLD!', 3) == 'KHOOR, ZRUOG!'
        """
        ciphertext = ""
        for char in plaintext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
                ciphertext += shifted_char
            else:
                ciphertext += char
        return ciphertext
    
    def vigenere_cipher(self, plain_text):
        """
        Encrypts the given plaintext using the Vigenere cipher method.

        Parameters:
            plain_text (str): The text to be encrypted.

        Returns:
            str: The encrypted ciphertext.

        Test cases:
            # Test case 1: Normal usage
            assert vigenere_cipher('HELLO') == 'JGNNQ'
            
            # Test case 2: Key wrapping
            assert vigenere_cipher('XYZXYZ') == 'ACYACY'
            
            # Test case 3: Non-alphabetic characters
            assert vigenere_cipher('HELLO, WORLD!') == 'JGNNQ, YQTNF!'
        """
        encrypted_text = ""
        key_index = 0
        for char in plain_text:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
                key_index += 1
            else:
                encrypted_text += char
        return encrypted_text

    def rail_fence_cipher(self, plain_text, rails):
        """
        Encrypts the given plaintext using the Rail Fence cipher method.

        Parameters:
            plain_text (str): The text to be encrypted.
            rails (int): The number of rails in the fence.

        Returns:
            str: The encrypted ciphertext.

        Test cases:
            # Test case 1: Normal usage
            assert rail_fence_cipher('HELLO WORLD', 3) == 'HOREL OLLWD'
            
            # Test case 2: More rails than characters
            assert rail_fence_cipher('HI', 5) == 'HI'
            
            # Test case 3: Non-alphabetic characters
            assert rail_fence_cipher('HELLO, WORLD!', 3) == 'HOREL, OLLWD!'
        """
        fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for char in plain_text:
            if row == 0 or row == rails-1:
                direction = -direction

            fence[row][col] = char
            col += 1
            row += direction

        encrypted_text = ''
        for i in range(rails):
            for j in range(len(plain_text)):
                if fence[i][j] != '\n':
                    encrypted_text += fence[i][j]

        return encrypted_text
