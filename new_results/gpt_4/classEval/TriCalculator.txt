"""
The class TriCalculator is designed to compute the values of trigonometric functions - cosine, sine and tangent. 
It uses Taylor series to compute the cosine and sine, and their quotient to compute the tangent.
"""

from math import pi, fabs


class TriCalculator:

    def __init__(self):
        """
        This is the initialization method for the TriCalculator class.
        """
        pass

    def cos(self, x):
        """
        Computes the cosine of the input angle using the Taylor series.
        
        Parameters:
            x (int/float): The angle in degrees.
        
        Returns:
            float: The cosine of the input angle.
        
        Test cases:
            # Test case 1: Normal case
            assert cos(60) == 0.5

            # Test case 2: Edge case
            assert cos(0) == 1.0
            
            # Test case 3: Error case
            assert cos('a') == Error
        """
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        """
        Computes the factorial of the input number.
        
        Parameters:
            a (int): The number to compute the factorial of.
            
        Returns:
            int: The factorial of the input number.
            
        Test cases:
            # Test case 1: Normal case
            assert factorial(5) == 120
            
            # Test case 2: Edge case
            assert factorial(0) == 1
            
            # Test case 3: Error case
            assert factorial(-1) == Error
        """
        b = 1
        while a != 1:
            b *= a
            a -= 1
        return b

    def taylor(self, x, n):
        """
        Computes the Taylor series of cosine.
        
        Parameters:
            x (int/float): The angle in degrees.
            n (int): The number of terms in the Taylor series.
            
        Returns:
            float: The sum of the first 'n' terms of the Taylor series.
            
        Test cases:
            # Test case 1: Normal case
            assert taylor(60, 5) == an appropriate float number
            
            # Test case 2: Edge case
            assert taylor(0, 5) == 1.0
            
            # Test case 3: Error case
            assert taylor('a', 5) == Error
        """
        a = 1
        x = x / 180 * pi
        count = 1
        for k in range(1, n):
            if count % 2 != 0:
                a -= (x ** (2 * k)) / self.factorial(2 * k)
            else:
                a += (x ** (2 * k)) / self.factorial(2 * k)
            count += 1
        return a

    def sin(self, x):
        """
        Computes the sine of the input angle using the Taylor series.
        
        Parameters:
            x (int/float): The angle in degrees.
            
        Returns:
            float: The sine of the input angle.
            
        Test cases:
            # Test case 1: Normal case
            assert sin(30) == 0.5
            
            # Test case 2: Edge case
            assert sin(0) == 0.0
            
            # Test case 3: Error case
            assert sin('a') == Error
        """
        x = x / 180 * pi
        g = 0
        t = x
        n = 1

        while fabs(t) >= 1e-15:
            g += t
            n += 1
            t = -t * x * x / (2 * n - 1) / (2 * n - 2)
        return round(g, 10)

    def tan(self, x):
        """
        Computes the tangent of the input angle as the quotient of sine and cosine.
        
        Parameters:
            x (int/float): The angle in degrees.
            
        Returns:
            float: The tangent of the input angle if cosine is not equal to zero.
            bool: False if cosine of the input angle is equal to zero.
            
        Test cases:
            # Test case 1: Normal case
            assert tan(45) == 1.0
            
            # Test case 2: Edge case
            assert tan(0) == 0.0
            
            # Test case 3: Error case
            assert tan(90) == False
        """
        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return False