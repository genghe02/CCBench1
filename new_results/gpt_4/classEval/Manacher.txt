"""
The class `Manacher` is used to find the longest palindromic substring in a given string using Manacher's algorithm.
"""

class Manacher:
    def __init__(self, input_string: str) -> None:
        """
        Initializes the Manacher class with the input string.
        
        Parameters:
            input_string (str): The string in which to find the longest palindromic substring.
        """
        self.input_string = input_string

    def palindromic_length(self, center: int, diff: int, string: str) -> int:
        """
        Recursive function to find the length of the palindrome centered at a given index.
        
        Parameters:
            center (int): The index of the center of the palindrome.
            diff (int): The difference between the center index and the current index.
            string (str): The string in which to find the palindrome.
            
        Returns:
            int: The length of the palindrome centered at the given index.
        
        Test cases:
            # Test case 1: Single character string
            assert palindromic_length(0, 1, 'a') == 1
            
            # Test case 2: Non-palindromic string
            assert palindromic_length(1, 1, 'abc') == 0
            
            # Test case 3: Palindromic string
            assert palindromic_length(2, 1, 'aba') == 2
        """
        if (center - diff == -1 or center + diff == len(string)
                or string[center - diff] != string[center + diff]):
            return 0
        return 1 + self.palindromic_length(center, diff + 1, string)

    def palindromic_string(self) -> str:
        """
        Method to find the longest palindromic substring in the input string.
        
        Returns:
            str: The longest palindromic substring in the input string.
        
        Test cases:
            # Test case 1: Single character string
            assert palindromic_string('a') == 'a'
            
            # Test case 2: Non-palindromic string
            assert palindromic_string('abc') == 'a'
            
            # Test case 3: Palindromic string
            assert palindromic_string('racecar') == 'racecar'
        """
        max_length = 0

        new_input_string = ""
        output_string = ""

        for i in self.input_string[:len(self.input_string) - 1]:
            new_input_string += i + "|"
        new_input_string += self.input_string[-1]

        for i in range(len(new_input_string)):

            length = self.palindromic_length(i, 1, new_input_string)

            if max_length < length:
                max_length = length
                start = i

        for i in new_input_string[start - max_length:start + max_length + 1]:
            if i != "|":
                output_string += i

        return output_string