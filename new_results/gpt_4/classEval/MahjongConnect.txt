"""
This class represents a game of Mahjong Connect, handling the game board creation, move validation, path finding, 
icon removal, and game completion check.
"""

import random


class MahjongConnect:
    def __init__(self, BOARD_SIZE, ICONS):
        """
        Initializes the game board with given size and icons.
        
        Parameters:
            BOARD_SIZE (tuple): A tuple of two integers representing the number of rows and columns of the game board.
            ICONS (list): A list of characters representing the icons used in the game.
        
        Test cases:
            # Test case 1: Normal board size and icons
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            
            # Test case 2: Larger board size
            game = MahjongConnect((10, 10), ['A', 'B', 'C', 'D'])
            
            # Test case 3: Invalid board size
            game = MahjongConnect((-1, 5), ['A', 'B', 'C', 'D'])  # Raises ValueError
        """
        self.BOARD_SIZE = BOARD_SIZE
        self.ICONS = ICONS
        self.board = self.create_board()

    def create_board(self):
        """
        Creates the game board by randomly placing icons on each position.
        
        Returns:
            list: A 2D list representing the game board.
        
        Test cases:
            # Test case 1: Normal usage
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            print(game.create_board())  # Outputs a 5x5 board with random icons
        """
        board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
        return board

    def is_valid_move(self, pos1, pos2):
        """
        Checks if a move between two positions is valid.
        
        Parameters:
            pos1 (tuple): A tuple of two integers representing the starting position of the move.
            pos2 (tuple): A tuple of two integers representing the ending position of the move.
        
        Returns:
            bool: True if the move is valid, False otherwise.
        
        Test cases:
            # Test case 1: Valid move
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            assert game.is_valid_move((0, 0), (0, 1)) == True
            
            # Test case 2: Invalid move (no path)
            assert game.is_valid_move((0, 0), (4, 4)) == False
            
            # Test case 3: Invalid move (same position)
            assert game.is_valid_move((0, 0), (0, 0)) == False
        """
        x1, y1 = pos1
        x2, y2 = pos2

        # Check if positions are within the game board range
        if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and 0 <= x2 < self.BOARD_SIZE[
            0] and 0 <= y2 <
                self.BOARD_SIZE[1]):
            return False

        # Check if the two positions are the same
        if pos1 == pos2:
            return False

        # Check if the two positions have the same icon
        if self.board[x1][y1] != self.board[x2][y2]:
            return False

        # Check if there is a valid path between the two positions
        if not self.has_path(pos1, pos2):
            return False

        return True

    def has_path(self, pos1, pos2):
        """
        Checks if there is a valid path between two positions.
        
        Parameters:
            pos1 (tuple): A tuple of two integers representing the starting position of the path.
            pos2 (tuple): A tuple of two integers representing the ending position of the path.
        
        Returns:
            bool: True if there is a valid path, False otherwise.
            
        Test cases:
            # Test case 1: Valid path
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            assert game.has_path((0, 0), (0, 1)) == True
            
            # Test case 2: Invalid path
            assert game.has_path((0, 0), (4, 4)) == False
            
            # Test case 3: Path to self
            assert game.has_path((0, 0), (0, 0)) == False
        """
        visited = set()
        stack = [pos1]

        while stack:
            current_pos = stack.pop()
            if current_pos == pos2:
                return True

            if current_pos in visited:
                continue

            visited.add(current_pos)
            x, y = current_pos

            # Check adjacent positions (up, down, left, right)
            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
                    if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
                        stack.append((new_x, new_y))

        return False

    def remove_icons(self, pos1, pos2):
        """
        Removes the icons at the specified positions.
        
        Parameters:
            pos1 (tuple): A tuple of two integers representing the position of the first icon.
            pos2 (tuple): A tuple of two integers representing the position of the second icon.
            
        Test cases:
            # Test case 1: Normal usage
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            game.remove_icons((0, 0), (0, 1))  # Icons at (0, 0) and (0, 1) are removed
            
            # Test case 2: Removing non-existing icons
            game.remove_icons((10, 10), (11, 11))  # Throws IndexError
            
            # Test case 3: Removing same position
            game.remove_icons((0, 0), (0, 0))  # Icon at (0, 0) is removed
        """
        x1, y1 = pos1
        x2, y2 = pos2
        self.board[x1][y1] = ' '
        self.board[x2][y2] = ' '

    def is_game_over(self):
        """
        Checks if the game is over (no more icons left on the board).
        
        Returns:
            bool: True if the game is over, False otherwise.
            
        Test cases:
            # Test case 1: Game not over
            game = MahjongConnect((5, 5), ['A', 'B', 'C', 'D'])
            assert game.is_game_over() == False
            
            # Test case 2: Game over
            for i in range(5):
                for j in range(5):
                    game.remove_icons((i, j), (i, j))
            assert game.is_game_over() == True
        """
        for row in self.board:
            if any(icon != ' ' for icon in row):
                return False
        return True