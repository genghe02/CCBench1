```python
"""
The class Words2Numbers is used for converting English text into its equivalent integer representation.
"""

class Words2Numbers:

    def __init__(self):
        """
        Initialization method for the Words2Numbers class.
        It initializes the words that represent units, tens, scales, and their corresponding numeric values.
        The method does not require any parameters and does not return any value.
        """
        self.numwords = {}
        self.units = [
            "zero", "one", "two", "three", "four", "five", "six", "seven", "eight",
            "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen",
            "sixteen", "seventeen", "eighteen", "nineteen",
        ]
        self.tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
        self.scales = ["hundred", "thousand", "million", "billion", "trillion"]

        self.numwords["and"] = (1, 0)
        for idx, word in enumerate(self.units):
            self.numwords[word] = (1, idx)
        for idx, word in enumerate(self.tens):
            self.numwords[word] = (1, idx * 10)
        for idx, word in enumerate(self.scales):
            self.numwords[word] = (10 ** (idx * 3 or 2), 0)

        self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
        self.ordinal_endings = [('ieth', 'y'), ('th', '')]

    def text2int(self, textnum):
        """
        Convert English text into its equivalent integer representation.

        Parameters:
            textnum (str): The input text in English to be converted into integer
        
        Returns:
            str: The converted integer in string representation
        
        Test cases:
            # Test case 1: Normal case
            assert text2int('twenty one') == '21'
            
            # Test case 2: Edge case with large numbers
            assert text2int('one million two hundred thirty four thousand five hundred sixty seven') == '1234567'
            
            # Test case 3: Error case with invalid input
            assert text2int('twenty one apple') == 'twenty one apple'
        """
        textnum = textnum.replace('-', ' ')

        current = result = 0
        curstring = ""
        onnumber = False
        for word in textnum.split():
            if word in self.ordinal_words:
                scale, increment = (1, self.ordinal_words[word])
                current = current * scale + increment
                onnumber = True
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    if onnumber:
                        curstring += repr(result + current) + " "
                    curstring += word + " "
                    result = current = 0
                    onnumber = False
                else:
                    scale, increment = self.numwords[word]
                    current = current * scale + increment
                    if scale > 100:
                        result += current
                        current = 0
                    onnumber = True

        if onnumber:
            curstring += repr(result + current)

        return curstring

    def is_valid_input(self, textnum):
        """
        Check if the input text can be converted to an integer.

        Parameters:
            textnum (str): The input text to be checked
            
        Returns:
            bool: True if the input text can be converted to an integer, False otherwise
            
        Test cases:
            # Test case 1: Valid input
            assert is_valid_input('twenty one') == True
            
            # Test case 2: Invalid input
            assert is_valid_input('twenty one apple') == False
            
            # Test case 3: Empty input
            assert is_valid_input('') == False
        """

        textnum = textnum.replace('-', ' ')

        for word in textnum.split():
            if word in self.ordinal_words:
                continue
            else:
                for ending, replacement in self.ordinal_endings:
                    if word.endswith(ending):
                        word = "%s%s" % (word[:-len(ending)], replacement)

                if word not in self.numwords:
                    return False

        return True
```