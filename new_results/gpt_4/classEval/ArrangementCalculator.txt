"""
This class calculates arrangements of objects using factorials and permutations, providing both count and selection methods.
"""

import itertools


class ArrangementCalculator:
    def __init__(self, datas):
        """
        Initializes the class with the data for which arrangements are to be calculated.

        Parameters:
            datas (list): The list of objects for which arrangements are to be calculated.
        """
        self.datas = datas

    @staticmethod
    def count(n, m=None):
        """
        Counts the number of arrangements of n objects taken m at a time.

        Parameters:
            n (int): The total number of objects.
            m (int, optional): The number of objects taken at a time. Defaults to None, which means all objects are taken.

        Returns:
            int: The number of arrangements.

        Test cases:
            # Test case 1: Normal usage
            assert count(5, 3) == 60

            # Test case 2: Edge case where n equals m
            assert count(5, 5) == 120

            # Test case 3: Error case where m is larger than n
            assert count(3, 5) == ValueError("m should not be greater than n")
        """
        if m is None or n == m:
            return ArrangementCalculator.factorial(n)
        else:
            return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)

    @staticmethod
    def count_all(n):
        """
        Counts the total number of all possible arrangements of n objects taken m at a time, for all values of m.

        Parameters:
            n (int): The total number of objects.

        Returns:
            int: The total number of all possible arrangements.

        Test cases:
            # Test case 1: Normal usage
            assert count_all(4) == 64

            # Test case 2: Edge case where n equals 1
            assert count_all(1) == 1

            # Test case 3: Error case where n is negative
            assert count_all(-4) == ValueError("n should be a positive integer")
        """
        total = 0
        for i in range(1, n + 1):
            total += ArrangementCalculator.count(n, i)
        return total

    def select(self, m=None):
        """
        Selects all possible arrangements of the data taken m at a time.

        Parameters:
            m (int, optional): The number of objects taken at a time. Defaults to None, which means all objects are taken.

        Returns:
            list: A list of all possible arrangements.

        Test cases:
            # Test case 1: Normal usage
            ac = ArrangementCalculator([1, 2, 3])
            assert ac.select(2) == [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]

            # Test case 2: Edge case where m equals the length of the data
            assert ac.select(3) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

            # Test case 3: Error case where m is larger than the length of the data
            assert ac.select(5) == ValueError("m should not be greater than the length of the data")
        """
        if m is None:
            m = len(self.datas)
        result = []
        for permutation in itertools.permutations(self.datas, m):
            result.append(list(permutation))
        return result

    def select_all(self):
        """
        Selects all possible arrangements of the data taken m at a time, for all values of m.

        Returns:
            list: A list of all possible arrangements.

        Test cases:
            # Test case 1: Normal usage
            ac = ArrangementCalculator([1, 2, 3])
            assert ac.select_all() == [[1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

            # Test case 2: Edge case where the data only contains one object
            ac = ArrangementCalculator([1])
            assert ac.select_all() == [[1]]

            # Test case 3: Error case where the data is empty
            ac = ArrangementCalculator([])
            assert ac.select_all() == ValueError("The data should not be empty")
        """
        result = []
        for i in range(1, len(self.datas) + 1):
            result.extend(self.select(i))
        return result

    @staticmethod
    def factorial(n):
        """
        Calculates the factorial of n.

        Parameters:
            n (int): The number for which the factorial is to be calculated.

        Returns:
            int: The factorial of n.

        Test cases:
            # Test case 1: Normal usage
            assert factorial(5) == 120

            # Test case 2: Edge case where n equals 1
            assert factorial(1) == 1

            # Test case 3: Error case where n is negative
            assert factorial(-5) == ValueError("n should be a positive integer")
        """
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result