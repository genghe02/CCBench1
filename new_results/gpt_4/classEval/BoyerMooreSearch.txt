"""
The class BoyerMooreSearch implements the Boyer-Moore algorithm for string matching.
This algorithm finds the occurrences of a pattern in a text string.
"""

class BoyerMooreSearch:
    def __init__(self, text, pattern):
        """
        Initializes the BoyerMooreSearch instance.

        Parameters:
            text (str): The input text in which to search for the pattern.
            pattern (str): The pattern to search for within the text.
        """
        self.text, self.pattern = text, pattern
        self.textLen, self.patLen = len(text), len(pattern)

    def match_in_pattern(self, char):
        """
        Finds the last occurrence of the character in the pattern.

        Parameters:
            char (str): The character to find in the pattern.

        Returns:
            int: The index of the last occurrence of the character in the pattern, or -1 if the character is not found.

        Test cases:
            # Test case 1: Character is in the pattern
            assert match_in_pattern('a') == 1

            # Test case 2: Character is not in the pattern
            assert match_in_pattern('b') == -1

            # Test case 3: Character is the first character of the pattern
            assert match_in_pattern('c') == 0
        """
        for i in range(self.patLen - 1, -1, -1):
            if char == self.pattern[i]:
                return i
        return -1

    def mismatch_in_text(self, currentPos):
        """
        Finds the first mismatching character from the end of the pattern in the text.

        Parameters:
            currentPos (int): The current position in the text.

        Returns:
            int: The index of the first mismatching character in the text, or -1 if there is no mismatch.

        Test cases:
            # Test case 1: There is a mismatch in the text
            assert mismatch_in_text(2) == 3

            # Test case 2: There is no mismatch in the text
            assert mismatch_in_text(1) == -1

            # Test case 3: The mismatch is at the first character of the pattern
            assert mismatch_in_text(3) == 3
        """
        for i in range(self.patLen - 1, -1, -1):
            if self.pattern[i] != self.text[currentPos + i]:
                return currentPos + i
        return -1

    def bad_character_heuristic(self):
        """
        Implements the bad character heuristic of the Boyer-Moore algorithm.

        Returns:
            list: A list of all positions in the text where the pattern is found.

        Test cases:
            # Test case 1: The pattern is found in the text
            assert bad_character_heuristic() == [1, 3]

            # Test case 2: The pattern is not found in the text
            assert bad_character_heuristic() == []

            # Test case 3: The pattern is found at the beginning of the text
            assert bad_character_heuristic() == [0]
        """
        positions = []
        for i in range(self.textLen - self.patLen + 1):
            mismatch_index = self.mismatch_in_text(i)
            if mismatch_index == -1:
                positions.append(i)
            else:
                match_index = self.match_in_pattern(self.text[mismatch_index])
                i = (mismatch_index - match_index)
        return positions