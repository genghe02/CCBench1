"""
The class ExpressionCalculator provides methods to perform arithmetic operations on mathematical expressions. 
It transforms the input expression into a postfix notation, and then calculates the result. 
It supports parentheses, negation, and the operators +, -, *, /, %.
"""

import re
from collections import deque
from decimal import Decimal


class ExpressionCalculator:
    def __init__(self):
        """
        Initialization method to set up the deque for postfix notation and operator priority.
        """
        self.postfix_stack = deque()
        self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]

    def calculate(self, expression):
        """
        Calculate the result of the given arithmetic expression.

        Parameters:
            expression (str): The arithmetic expression to calculate.
        
        Returns:
            float: The result of the calculation.
        
        Test cases:
            # Test case 1: Normal usage with all operators
            assert calculate("((2+3)*4)/2%3") == 1.0
            
            # Test case 2: Expression with negative numbers
            assert calculate("-1+2") == 1.0
            
            # Test case 3: Expression with parentheses
            assert calculate("(2+3)*(4-2)") == 10.0
        """
        self.prepare(self.transform(expression))

        result_stack = deque()
        self.postfix_stack.reverse()

        while self.postfix_stack:
            current_op = self.postfix_stack.pop()
            if not self.is_operator(current_op):
                current_op = current_op.replace("~", "-")
                result_stack.append(current_op)
            else:
                second_value = result_stack.pop()
                first_value = result_stack.pop()

                first_value = first_value.replace("~", "-")
                second_value = second_value.replace("~", "-")

                temp_result = self._calculate(first_value, second_value, current_op)
                result_stack.append(str(temp_result))

        return float(eval("*".join(result_stack)))

    def prepare(self, expression):
        """
        Convert the input infix expression into postfix notation.

        Parameters:
            expression (str): The infix expression to be converted.
        
        Test cases:
            # Test case 1: Normal usage
            assert prepare("(2+3)*4") == deque(['2', '3', '+', '4', '*'])
            
            # Test case 2: Expression with parentheses
            assert prepare("((2+3)*4)/2") == deque(['2', '3', '+', '4', '*', '2', '/'])
            
            # Test case 3: Expression with negative numbers
            assert prepare("-1+2") == deque(['~1', '2', '+'])
        """
        op_stack = deque([','])
        arr = list(expression)
        current_index = 0
        count = 0

        for i, current_op in enumerate(arr):
            if self.is_operator(current_op):
                if count > 0:
                    self.postfix_stack.append("".join(arr[current_index: current_index + count]))
                peek_op = op_stack[-1]
                if current_op == ')':
                    while op_stack[-1] != '(':
                        self.postfix_stack.append(str(op_stack.pop()))
                    op_stack.pop()
                else:
                    while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
                        self.postfix_stack.append(str(op_stack.pop()))
                        peek_op = op_stack[-1]
                    op_stack.append(current_op)

                count = 0
                current_index = i + 1
            else:
                count += 1

        if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):
            self.postfix_stack.append("".join(arr[current_index: current_index + count]))

        while op_stack[-1] != ',':
            self.postfix_stack.append(str(op_stack.pop()))

    @staticmethod
    def is_operator(c):
        """
        Check if the character is an arithmetic operator.

        Parameters:
            c (str): The character to check.
        
        Returns:
            bool: True if the character is an operator, False otherwise.
        
        Test cases:
            # Test case 1: Addition operator
            assert is_operator('+') == True
            
            # Test case 2: Non-operator character
            assert is_operator('3') == False
            
            # Test case 3: Parentheses
            assert is_operator('(') == True
        """
        return c in {'+', '-', '*', '/', '(', ')', '%'}

    def compare(self, cur, peek):
        """
        Compare the priorities of two operators.

        Parameters:
            cur (str): The current operator.
            peek (str): The operator at the top of the stack.
        
        Returns:
            bool: True if the priority of peek is higher or equal to cur, False otherwise.
        
        Test cases:
            # Test case 1: Same priority
            assert compare('*', '/') == True
            
            # Test case 2: Lower priority
            assert compare('*', '+') == False
            
            # Test case 3: Higher priority
            assert compare('+', '*') == True
        """
        if cur == '%':
            cur = '/'
        if peek == '%':
            peek = '/'
        return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]

    @staticmethod
    def _calculate(first_value, second_value, current_op):
        """
        Perform the arithmetic operation on two values.

        Parameters:
            first_value (str): The first value.
            second_value (str): The second value.
            current_op (str): The operator.
        
        Returns:
            Decimal: The result of the operation.
        
        Test cases:
            # Test case 1: Addition
            assert _calculate('2', '3', '+') == 5.0
            
            # Test case 2: Division
            assert _calculate('4', '2', '/') == 2.0
            
            # Test case 3: Modulo
            assert _calculate('10', '3', '%') == 1.0
        """
        if current_op == '+':
            return Decimal(first_value) + Decimal(second_value)
        elif current_op == '-':
            return Decimal(first_value) - Decimal(second_value)
        elif current_op == '*':
            return Decimal(first_value) * Decimal(second_value)
        elif current_op == '/':
            return Decimal(first_value) / Decimal(second_value)
        elif current_op == '%':
            return Decimal(first_value) % Decimal(second_value)
        else:
            raise ValueError("Unexpected operator: {}".format(current_op))

    @staticmethod
    def transform(expression):
        """
        Perform necessary transformations on the input expression.

        Parameters:
            expression (str): The input expression.
        
        Returns:
            str: The transformed expression.
        
        Test cases:
            # Test case 1: Expression with negative numbers
            assert transform("-1+2") == '~1+2'
            
            # Test case 2: Expression with parentheses
            assert transform("(-1+2)*3") == '~1+2*3'
            
            # Test case 3: Expression with whitespace
            assert transform(" 1 + 2 ") == '1+2'
        """
        expression = re.sub(r"\s+", "", expression)
        expression = re.sub(r"=$", "", expression)
        arr = list(expression)

        for i, c in enumerate(arr):
            if c == '-':
                if i == 0:
                    arr[i] = '~'
                else:
                    prev_c = arr[i - 1]
                    if prev_c in {'+', '-', '*', '/', '(', 'E', 'e'}:
                        arr[i] = '~'

        if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):
            arr[0] = '-'
            return "0" + "".join(arr)
        else:
            return "".join(arr)