"""
This class provides static methods to perform basic arithmetic operations (addition, subtraction, multiplication, and division) on complex numbers.
"""

class ComplexCalculator:
    def __init__(self):
        """
        Initialization method for the ComplexCalculator class.
        Since all methods in this class are static, the constructor does not need to do anything.
        """
        pass

    @staticmethod
    def add(c1, c2):
        """
        Adds two complex numbers.

        Parameters:
            c1 (complex): The first complex number.
            c2 (complex): The second complex number.

        Returns:
            complex: The sum of the two input complex numbers.

        Test cases:
            # Test case 1: Normal case
            assert add(complex(1, 1), complex(2, 2)) == complex(3, 3)

            # Test case 2: Zero complex number
            assert add(complex(0, 0), complex(2, 2)) == complex(2, 2)

            # Test case 3: Negative complex number
            assert add(complex(-1, -1), complex(2, 2)) == complex(1, 1)
        """
        real = c1.real + c2.real
        imaginary = c1.imag + c2.imag
        answer = complex(real, imaginary)
        return answer
    
    @staticmethod
    def subtract(c1, c2):
        """
        Subtracts the second complex number from the first one.

        Parameters:
            c1 (complex): The first complex number.
            c2 (complex): The second complex number.

        Returns:
            complex: The result of the subtraction operation.

        Test cases:
            # Test case 1: Normal case
            assert subtract(complex(2, 2), complex(1, 1)) == complex(1, 1)

            # Test case 2: Zero complex number
            assert subtract(complex(2, 2), complex(0, 0)) == complex(2, 2)

            # Test case 3: Negative complex number
            assert subtract(complex(2, 2), complex(-1, -1)) == complex(3, 3)
        """
        real = c1.real - c2.real
        imaginary = c1.imag - c2.imag
        return complex(real, imaginary)
    
    @staticmethod
    def multiply(c1, c2):
        """
        Multiplies two complex numbers.

        Parameters:
            c1 (complex): The first complex number.
            c2 (complex): The second complex number.

        Returns:
            complex: The product of the two input complex numbers.

        Test cases:
            # Test case 1: Normal case
            assert multiply(complex(1, 1), complex(2, 2)) == complex(0, 4)

            # Test case 2: Zero complex number
            assert multiply(complex(0, 0), complex(2, 2)) == complex(0, 0)

            # Test case 3: Negative complex number
            assert multiply(complex(-1, -1), complex(2, 2)) == complex(0, -4)
        """
        real = c1.real * c2.real - c1.imag * c2.imag
        imaginary = c1.real * c2.imag + c1.imag * c2.real
        return complex(real, imaginary)
    
    @staticmethod
    def divide(c1, c2):
        """
        Divides the first complex number by the second one.

        Parameters:
            c1 (complex): The numerator complex number.
            c2 (complex): The denominator complex number.

        Returns:
            complex: The result of the division operation.

        Test cases:
            # Test case 1: Normal case
            assert divide(complex(1, 1), complex(1, 1)) == complex(1, 0)

            # Test case 2: Zero complex number
            assert divide(complex(0, 0), complex(2, 2)) == complex(0, 0)

            # Test case 3: Division by zero
            try:
                divide(complex(2, 2), complex(0, 0))
            except ZeroDivisionError:
                print("Successfully caught division by zero error.")
        """
        denominator = c2.real**2 + c2.imag**2
        real = (c1.real * c2.real + c1.imag * c2.imag) / denominator
        imaginary = (c1.imag * c2.real - c1.real * c2.imag) / denominator
        return complex(real, imaginary)