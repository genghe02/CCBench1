```python
"""
This class simulates a 24 point card game where players use arithmetic operations to combine 
four numbers to get 24. 
"""

import random


class TwentyFourPointGame:
    def __init__(self) -> None:
        """
        Initializes an empty list to store the four random numbers (cards).
        """
        self.nums = []

    def _generate_cards(self):
        """
        Generates four random numbers between 1 and 9 (inclusive) and stores them in self.nums list.
        
        Test cases:
            # Test case 1: Check if four numbers are generated
            TwentyFourPointGame._generate_cards()
            assert len(TwentyFourPointGame.nums) == 4
            
            # Test case 2: Check if the generated numbers are between 1 and 9
            TwentyFourPointGame._generate_cards()
            assert all(1 <= num <= 9 for num in TwentyFourPointGame.nums)
        """
        for i in range(4):
            self.nums.append(random.randint(1, 9))
        assert len(self.nums) == 4

    def get_my_cards(self):
        """
        Clears the self.nums list and generates four new numbers (cards) to store in the list.
        
        Returns:
            list[int]: The list of four randomly generated numbers.
        
        Test cases:
            # Test case 1: Check if the returned list has four elements
            assert len(TwentyFourPointGame.get_my_cards()) == 4
            
            # Test case 2: Check if the elements in the returned list are between 1 and 9
            assert all(1 <= num <= 9 for num in TwentyFourPointGame.get_my_cards())
        """
        self.nums = []
        self._generate_cards()
        return self.nums

    def answer(self, expression):
        """
        Verifies if the given expression is a valid answer by checking if it uses all the numbers 
        in self.nums exactly once and evaluates to 24.

        Parameters:
            expression (str): The expression to verify.
        
        Returns:
            bool: True if the expression is a valid answer, False otherwise.
        
        Test cases:
            # Test case 1: Valid answer
            TwentyFourPointGame.nums = [1, 2, 3, 4]
            assert TwentyFourPointGame.answer("1*2*3*4") == True

            # Test case 2: Valid answer with parentheses
            TwentyFourPointGame.nums = [2, 2, 2, 3]
            assert TwentyFourPointGame.answer("(2-2)*(2-3)") == True
            
            # Test case 3: Invalid answer - incorrect arithmetic
            TwentyFourPointGame.nums = [1, 2, 3, 4]
            assert TwentyFourPointGame.answer("1+2+3+4") == False
            
            # Test case 4: Invalid answer - not using all numbers
            TwentyFourPointGame.nums = [1, 2, 3, 4]
            assert TwentyFourPointGame.answer("1*2*3") == False
        """
        if expression == 'pass':
            return self.get_my_cards()
        statistic = {}
        for c in expression:
            if c.isdigit() and int(c) in self.nums:
                statistic[c] = statistic.get(c, 0) + 1

        nums_used = statistic.copy()

        for num in self.nums:
            if nums_used.get(str(num), -100) != -100 and nums_used[str(num)] > 0:
                nums_used[str(num)] -= 1
            else:
                return False

        if all(count == 0 for count in nums_used.values()) == True:
            return self.evaluate_expression(expression)
        else:
            return False

    def evaluate_expression(self, expression):
        """
        Evaluates the given expression and checks if it equals 24.

        Parameters:
            expression (str): The expression to evaluate.
        
        Returns:
            bool: True if the expression evaluates to 24, False otherwise.
        
        Test cases:
            # Test case 1: Expression evaluates to 24
            assert TwentyFourPointGame.evaluate_expression("1*2*3*4") == True

            # Test case 2: Expression evaluates to a number other than 24
            assert TwentyFourPointGame.evaluate_expression("1+2+3+4") == False
            
            # Test case 3: Invalid expression
            assert TwentyFourPointGame.evaluate_expression("1+2*") == False
        """
        try:
            if eval(expression) == 24:
                return True
            else:
                return False
        except Exception as e:
            return False
```