"""
The class PushBoxGame represents a game where a player moves boxes onto targets. 
The game map is represented by a 2D list where different characters represent the player, boxes, targets, and walls.
"""

class PushBoxGame:
    def __init__(self, map):
        """
        Initializes the game with the given map.
        
        Parameters:
            map (list): A 2D list representing the game map. 
                        "O" represents the player, "X" represents boxes, "G" represents targets, and "#" represents walls.
        
        Test cases:
            # Test case 1: Normal map
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", " ", "G", "#"],
                ["#", " ", "X", " ", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
            
            # Test case 2: Map with no boxes or targets
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", " ", " ", "#"],
                ["#", " ", " ", " ", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
            
            # Test case 3: Map with multiple boxes and targets
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", "X", "G", "#"],
                ["#", " ", "X", "G", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
        """
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        """
        Initializes the game state based on the given map.
        
        Test cases:
            # This method is called in the initializer, so no separate test cases are needed.
        """
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == "O":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == "G":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == "X":
                    self.boxes.append((row, col))

    def check_win(self):
        """
        Checks if all boxes are on targets and the game is won.
        
        Returns:
            bool: True if all boxes are on targets and the game is won, False otherwise
            
        Test cases:
            # This method is called in the move method, so no separate test cases are needed.
        """
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        """
        Moves the player in the given direction and updates the game state.
        
        Parameters:
            direction (str): The direction to move the player. 
                             "w" for up, "s" for down, "a" for left, "d" for right.
        
        Returns:
            bool: True if the move resulted in winning the game, False otherwise
            
        Test cases:
            # Test case 1: Move player onto empty space
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", " ", "G", "#"],
                ["#", " ", "X", " ", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
            assert game.move("d") == False
            
            # Test case 2: Move player into wall
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", " ", "G", "#"],
                ["#", " ", "X", " ", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
            assert game.move("a") == False
            
            # Test case 3: Move player to push box onto target
            map = [
                ["#", "#", "#", "#", "#"],
                ["#", "O", "X", "G", "#"],
                ["#", " ", " ", " ", "#"],
                ["#", "#", "#", "#", "#"],
            ]
            game = PushBoxGame(map)
            assert game.move("d") == True
        """
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == "w":
            new_player_row -= 1
        elif direction == "s":
            new_player_row += 1
        elif direction == "a":
            new_player_col -= 1
        elif direction == "d":
            new_player_col += 1

        if self.map[new_player_row][new_player_col] != "#":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != "#":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()