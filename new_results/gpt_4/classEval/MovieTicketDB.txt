"""
This class represents a database for managing movie ticket reservations.
"""

import sqlite3

class MovieTicketDB:
    def __init__(self, db_name):
        """
        Initializes a connection to the SQLite database and creates a new table if it does not exist.

        Parameters:
            db_name (str): The name of the SQLite database file.
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """
        Creates a new table in the database to store ticket reservations.
        
        The table has the following structure:
            id (integer): The unique ticket ID.
            movie_name (text): The name of the movie.
            theater_name (text): The name of the theater.
            seat_number (text): The number of the seat.
            customer_name (text): The name of the customer.
        """
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """
        Inserts a new ticket reservation into the database.

        Parameters:
            movie_name (str): The name of the movie.
            theater_name (str): The name of the theater.
            seat_number (str): The number of the seat.
            customer_name (str): The name of the customer.
        
        Returns:
            None
        """
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        """
        Searches the database for ticket reservations by a specific customer.

        Parameters:
            customer_name (str): The name of the customer.
        
        Returns:
            list: A list of tuples representing the ticket reservations.
        
        Test cases:
            # Test case 1: Customer has reservations
            assert search_tickets_by_customer('John Doe') != []

            # Test case 2: Customer has no reservations
            assert search_tickets_by_customer('Jane Doe') == []

            # Test case 3: Customer name is not a string
            assert search_tickets_by_customer(123) raises TypeError
        """
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        """
        Deletes a ticket reservation from the database.

        Parameters:
            ticket_id (int): The ID of the ticket reservation.
        
        Returns:
            None
        """
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()