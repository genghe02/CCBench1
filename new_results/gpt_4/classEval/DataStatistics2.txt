"""
The class provides functionality for calculating various statistical measures such as sum, minimum, maximum, variance, 
standard deviation and correlation for a given dataset.
"""

import numpy as np


class DataStatistics2:
    def __init__(self, data):
        """
        Initialization method for DataStatistics2 class.

        Parameters:
            data (list or numpy array): The dataset for which statistical measures are to be calculated.
        """
        self.data = np.array(data)

    def get_sum(self):
        """
        Calculates the sum of the dataset.

        Returns:
            float: The sum of all values in the dataset.
        
        Test cases:
            # Test case 1: Normal usage
            data = [1, 2, 3, 4, 5]
            expected_output = 15.0
            
            # Test case 2: Empty dataset
            data = []
            expected_output = 0.0
            
            # Test case 3: Dataset with negative values
            data = [-1, -2, -3, -4, -5]
            expected_output = -15.0
        """
        return np.sum(self.data)

    def get_min(self):
        """
        Calculates the minimum value in the dataset.

        Returns:
            float: The minimum value in the dataset.
        
        Test cases:
            # Test case 1: Normal usage
            data = [1, 2, 3, 4, 5]
            expected_output = 1.0
            
            # Test case 2: Empty dataset
            data = []
            expected_output = nan
            
            # Test case 3: Dataset with negative values
            data = [-1, -2, -3, -4, -5]
            expected_output = -5.0
        """
        return np.min(self.data)

    def get_max(self):
        """
        Calculates the maximum value in the dataset.

        Returns:
            float: The maximum value in the dataset.
        
        Test cases:
            # Test case 1: Normal usage
            data = [1, 2, 3, 4, 5]
            expected_output = 5.0
            
            # Test case 2: Empty dataset
            data = []
            expected_output = nan
            
            # Test case 3: Dataset with negative values
            data = [-1, -2, -3, -4, -5]
            expected_output = -1.0
        """
        return np.max(self.data)

    def get_variance(self):
        """
        Calculates the variance of the dataset.

        Returns:
            float: The variance of the dataset rounded to 2 decimal places.
        
        Test cases:
            # Test case 1: Normal usage
            data = [1, 2, 3, 4, 5]
            expected_output = 2.5
            
            # Test case 2: Empty dataset
            data = []
            expected_output = nan
            
            # Test case 3: Dataset with negative values
            data = [-1, -2, -3, -4, -5]
            expected_output = 2.5
        """
        return round(np.var(self.data), 2)

    def get_std_deviation(self):
        """
        Calculates the standard deviation of the dataset.

        Returns:
            float: The standard deviation of the dataset rounded to 2 decimal places.
        
        Test cases:
            # Test case 1: Normal usage
            data = [1, 2, 3, 4, 5]
            expected_output = 1.58
            
            # Test case 2: Empty dataset
            data = []
            expected_output = nan
            
            # Test case 3: Dataset with negative values
            data = [-1, -2, -3, -4, -5]
            expected_output = 1.58
        """
        return round(np.std(self.data), 2)

    def get_correlation(self):
        """
        Calculates the correlation of the dataset.

        Returns:
            numpy array: The correlation coefficients of the dataset.
        
        Test cases:
            # Test case 1: Normal usage
            data = [[1, 2, 3], [4, 5, 6]]
            expected_output = array([[1., 1.],
                                     [1., 1.]])
            
            # Test case 2: Empty dataset
            data = []
            expected_output = array([])
            
            # Test case 3: Dataset with negative values
            data = [[-1, -2, -3], [-4, -5, -6]]
            expected_output = array([[1., 1.],
                                     [1., 1.]])
        """
        return np.corrcoef(self.data, rowvar=False)