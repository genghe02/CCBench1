"""
This class provides the functionality for an Access Gateway Filter that handles request filtering, authentication, and logging.
"""

import logging
import datetime


class AccessGatewayFilter:

    def __init__(self):
        """
        Initializes an instance of the AccessGatewayFilter class.
        """
        pass

    def filter(self, request):
        """
        Filters a request based on the request URI and user authorization level.

        Parameters:
            request (dict): A dictionary containing the details of the request. It should have keys 'path', 'method', and 'headers'.

        Returns:
            bool: True if the request is valid and allowed to pass through, False otherwise.

        Test cases:
            # Test case 1: Request is to an accessible endpoint, expect True
            input = {'path': '/api', 'method': 'GET', 'headers': {'Authorization': {'user': {'name': 'John', 'level': 3}, 'jwt': 'John2022-02-01'}}}
            expected_output = True
            
            # Test case 2: Request is to an inaccessible endpoint, expect False
            input = {'path': '/admin', 'method': 'GET', 'headers': {'Authorization': {'user': {'name': 'John', 'level': 1}, 'jwt': 'John2022-02-01'}}}
            expected_output = False
            
            # Test case 3: Request is missing Authorization header, expect False
            input = {'path': '/api', 'method': 'GET', 'headers': {}}
            expected_output = False
        """

        request_uri = request['path']
        method = request['method']

        if self.is_start_with(request_uri):
            return True

        try:
            token = self.get_jwt_user(request)
            user = token['user']
            if user['level'] > 2:
                self.set_current_user_info_and_log(user)
                return True
        except:
            return False

    def is_start_with(self, request_uri):
        """
        Checks if the request URI starts with any of the allowed prefixes.

        Parameters:
            request_uri (str): The URI path of the request.

        Returns:
            bool: True if the URI starts with an allowed prefix, False otherwise.

        Test cases:
            # Test case 1: Request URI starts with '/api', expect True
            assert is_start_with('/api/users') == True
            
            # Test case 2: Request URI starts with '/login', expect True
            assert is_start_with('/login') == True
            
            # Test case 3: Request URI starts with '/admin', expect False
            assert is_start_with('/admin/users') == False
        """
        
        start_with = ["/api", '/login']
        for s in start_with:
            if request_uri.startswith(s):
                return True
        return False

    def get_jwt_user(self, request):
        """
        Retrieves user information from the JWT token in the request.

        Parameters:
            request (dict): The request dictionary containing the 'headers' key, which includes the 'Authorization' key that holds the JWT token.

        Returns:
            dict: The token dictionary if the JWT token is valid and not expired, None otherwise.

        Test cases:
            # Test case 1: JWT token is valid and not expired, expect token dictionary
            input = {'headers': {'Authorization': {'user': {'name': 'John', 'level': 3}, 'jwt': 'John2022-02-01'}}}
            expected_output = {'user': {'name': 'John', 'level': 3}, 'jwt': 'John2022-02-01'}
            
            # Test case 2: JWT token is expired, expect None
            input = {'headers': {'Authorization': {'user': {'name': 'John', 'level': 3}, 'jwt': 'John2020-02-01'}}}
            expected_output = None
            
            # Test case 3: JWT token is missing 'user' key, expect None
            input = {'headers': {'Authorization': {'jwt': 'John2022-02-01'}}}
            expected_output = None
        """
        
        token = request['headers']['Authorization']
        user = token['user']
        if token['jwt'].startswith(user['name']):
            jwt_str_date = token['jwt'].split(user['name'])[1]
            jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
            if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
                return None
        return token

    def set_current_user_info_and_log(self, user):
        """
        Logs the current user's information.

        Parameters:
            user (dict): A dictionary containing the user's information, including 'name' and 'address'.

        Returns:
            None

        Test cases:
            # Test case 1: Logging a user with valid information, expect no errors
            user = {'name': 'John', 'address': '127.0.0.1', 'level': 3}
            
            # Test case 2: Logging a user with missing 'name' key, expect KeyError
            user = {'address': '127.0.0.1', 'level': 3}
            
            # Test case 3: Logging a user with missing 'address' key, expect KeyError
            user = {'name': 'John', 'level': 3}
        """
        
        host = user['address']
        logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)