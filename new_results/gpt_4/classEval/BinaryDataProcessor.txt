"""
This class provides methods to process binary data including cleaning, calculating statistics, and conversion to ASCII and UTF-8.
"""

class BinaryDataProcessor:
    def __init__(self, binary_string):
        """
        Constructor method that accepts a binary string and initializes the object.

        Parameters:
            binary_string (str): The input binary string to process.
        """
        self.binary_string = binary_string
        self.clean_non_binary_chars()

    def clean_non_binary_chars(self):
        """
        Cleans the binary string by removing any characters that are not 0 or 1.

        Test cases:
            # Test case 1: Remove non-binary characters
            input = '1010abc1010'
            expected_output = '10101010'
            
            # Test case 2: No non-binary characters to remove
            input = '10101010'
            expected_output = '10101010'
            
            # Test case 3: All non-binary characters
            input = 'abc'
            expected_output = ''
        """
        self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))

    def calculate_binary_info(self):
        """
        Calculates statistics about the binary string, including the percentage of zeroes, ones, and the total bit length.

        Returns:
            dict: A dictionary containing the statistics.

        Test cases:
            # Test case 1: Balanced binary string
            input = '10101010'
            expected_output = {'Zeroes': 0.5, 'Ones': 0.5, 'Bit length': 8}
            
            # Test case 2: All ones
            input = '1111'
            expected_output = {'Zeroes': 0.0, 'Ones': 1.0, 'Bit length': 4}
            
            # Test case 3: All zeroes
            input = '0000'
            expected_output = {'Zeroes': 1.0, 'Ones': 0.0, 'Bit length': 4}
        """
        zeroes_count = self.binary_string.count('0')
        ones_count = self.binary_string.count('1')
        total_length = len(self.binary_string)

        zeroes_percentage = (zeroes_count / total_length)
        ones_percentage = (ones_count / total_length)

        return {
            'Zeroes': zeroes_percentage,
            'Ones': ones_percentage,
            'Bit length': total_length
        }

    def convert_to_ascii(self):
        """
        Converts the binary string to an ASCII string.

        Returns:
            str: The converted ASCII string.

        Test cases:
            # Test case 1: Convert binary to ASCII
            input = '0100100001100101011011000110110001101111'
            expected_output = 'Hello'
            
            # Test case 2: Convert empty string
            input = ''
            expected_output = ''
            
            # Test case 3: Invalid binary string
            input = '10101010101010101010'
            expected_output = Error
        """
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('ascii')

    def convert_to_utf8(self):
        """
        Converts the binary string to a UTF-8 string.

        Returns:
            str: The converted UTF-8 string.

        Test cases:
            # Test case 1: Convert binary to UTF-8
            input = '0100100001100101011011000110110001101111'
            expected_output = 'Hello'
            
            # Test case 2: Convert empty string
            input = ''
            expected_output = ''
            
            # Test case 3: Invalid binary string
            input = '10101010101010101010'
            expected_output = Error
        """
        byte_array = bytearray()
        for i in range(0, len(self.binary_string), 8):
            byte = self.binary_string[i:i+8]
            decimal = int(byte, 2)
            byte_array.append(decimal)

        return byte_array.decode('utf-8')