"""
This class provides utility methods for IP address validation and hostname resolution.
"""

import socket


class IpUtil:

    @staticmethod
    def is_valid_ipv4(ip_address):
        """
        Checks if the given string is a valid IPv4 address.

        Parameters:
            ip_address (str): The string to be checked.

        Returns:
            bool: True if the string is a valid IPv4 address, False otherwise.

        Test cases:
            # Test case 1: Valid IPv4 address
            assert is_valid_ipv4('192.168.1.1') == True

            # Test case 2: Invalid IPv4 address (out of range)
            assert is_valid_ipv4('256.256.256.256') == False

            # Test case 3: Invalid IPv4 address (non-numeric characters)
            assert is_valid_ipv4('192.168.1.a') == False
        """
        try:
            socket.inet_pton(socket.AF_INET, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def is_valid_ipv6(ip_address):
        """
        Checks if the given string is a valid IPv6 address.

        Parameters:
            ip_address (str): The string to be checked.

        Returns:
            bool: True if the string is a valid IPv6 address, False otherwise.

        Test cases:
            # Test case 1: Valid IPv6 address
            assert is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334') == True

            # Test case 2: Invalid IPv6 address (extra characters)
            assert is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334::') == False

            # Test case 3: Invalid IPv6 address (non-hexadecimal characters)
            assert is_valid_ipv6('2001:0db8:85a3:0000:0000:8a2e:0370:733g') == False
        """
        try:
            socket.inet_pton(socket.AF_INET6, ip_address)
            return True
        except socket.error:
            return False

    @staticmethod
    def get_hostname(ip_address):
        """
        Returns the hostname for the given IP address.

        Parameters:
            ip_address (str): The IP address to be resolved.

        Returns:
            str: The hostname for the IP address, or None if the hostname could not be resolved.

        Test cases:
            # Test case 1: Known IP address
            assert get_hostname('8.8.8.8') == 'dns.google'

            # Test case 2: Unknown IP address
            assert get_hostname('192.0.2.0') == None

            # Test case 3: Invalid IP address
            assert get_hostname('256.256.256.256') == None
        """
        try:
            hostname = socket.gethostbyaddr(ip_address)[0]
            return hostname
        except socket.herror:
            return None
