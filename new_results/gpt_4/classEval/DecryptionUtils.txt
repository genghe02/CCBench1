```python
"""
This class provides methods to decrypt text that has been encrypted using Caesar cipher, 
Vigenere cipher, or the Rail Fence cipher.
"""
class DecryptionUtils:
    def __init__(self, key):
        """
        Initializes a new instance of the DecryptionUtils class.

        Parameters:
            key (str): The decryption key.
        """
        self.key = key
    
    def caesar_decipher(self, ciphertext, shift):
        """
        Decrypts a Caesar cipher encrypted text.

        Parameters:
            ciphertext (str): The encrypted text.
            shift (int): The number of positions each letter has been shifted to the right.

        Returns:
            str: The decrypted plain text.

        Test cases:
            # Test case 1: Normal usage
            assert caesar_decipher('KHOOR', 3) == 'HELLO'
            
            # Test case 2: Shift larger than alphabet size
            assert caesar_decipher('KHOOR', 29) == 'HELLO'
            
            # Test case 3: Non-alphabetic characters
            assert caesar_decipher('KH22RR', 3) == 'HE22LL'
        """
        plaintext = ""
        for char in ciphertext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
                plaintext += shifted_char
            else:
                plaintext += char
        return plaintext
    
    def vigenere_decipher(self, ciphertext):
        """
        Decrypts a Vigenere cipher encrypted text.

        Parameters:
            ciphertext (str): The encrypted text.

        Returns:
            str: The decrypted plain text.

        Test cases:
            # Test case 1: Normal usage
            assert vigenere_decipher('KHOOR', 'key') == 'HELLO'
            
            # Test case 2: Key shorter than ciphertext
            assert vigenere_decipher('KHOOR', 'k') == 'HELLO'
            
            # Test case 3: Non-alphabetic characters
            assert vigenere_decipher('KH22RR', 'key') == 'HE22LL'
        """
        decrypted_text = ""
        key_index = 0
        for char in ciphertext:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char
                key_index += 1
            else:
                decrypted_text += char
        return decrypted_text
    
    def rail_fence_decipher(self, encrypted_text, rails):
        """
        Decrypts a Rail Fence cipher encrypted text.

        Parameters:
            encrypted_text (str): The encrypted text.
            rails (int): The number of horizontal lines used in the cipher.

        Returns:
            str: The decrypted plain text.

        Test cases:
            # Test case 1: Normal usage
            assert rail_fence_decipher('HORELLO', 3) == 'HELLO'
            
            # Test case 2: More rails than characters
            assert rail_fence_decipher('HELLO', 6) == 'HELLO'
            
            # Test case 3: Non-alphabetic characters
            assert rail_fence_decipher('H2O2LLO', 3) == 'HE2LLO'
        """
        fence = [['\n' for _ in range(len(encrypted_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            fence[row][col] = ''
            col += 1
            row += direction

        index = 0
        for i in range(rails):
            for j in range(len(encrypted_text)):
                if fence[i][j] == '':
                    fence[i][j] = encrypted_text[index]
                    index += 1

        plain_text = ''
        direction = -1
        row, col = 0, 0
        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            plain_text += fence[row][col]
            col += 1
            row += direction

        return plain_text
```