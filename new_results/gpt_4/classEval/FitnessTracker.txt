"""
This class provides functionality for a fitness tracker, allowing for the calculation of body mass index (BMI), 
judging the condition of the user based on BMI, and calculating the recommended calorie intake.
"""

class FitnessTracker:
    def __init__(self, height, weight, age, sex) -> None:
        """
        Initializes the FitnessTracker class with necessary user data.

        Parameters:
            height (float): The height of the user in centimeters.
            weight (float): The weight of the user in kilograms.
            age (int): The age of the user in years.
            sex (str): The sex of the user. Either 'male' or 'female'.
        """
        self.height = height
        self.weight = weight
        self.age = age
        self.sex = sex
        self.BMI_std = [
            {"male": [20, 25]},
            {"female": [19, 24]}
        ]

    def get_BMI(self):
        """
        Calculates the body mass index (BMI) of the user.

        Returns:
            float: The body mass index of the user.

        Test cases:
            # Test case 1: Normal usage
            tracker = FitnessTracker(180, 70, 25, 'male')
            assert tracker.get_BMI() == 21.6

            # Test case 2: Edge case with minimum values
            tracker = FitnessTracker(1, 1, 0, 'male')
            assert tracker.get_BMI() == 1000.0

            # Test case 3: Error case with zero height
            tracker = FitnessTracker(0, 1, 0, 'male')
            try:
                tracker.get_BMI()
            except ZeroDivisionError:
                print("Cannot calculate BMI with zero height.")
        """
        return self.weight / self.height ** 2

    def condition_judge(self):
        """
        Judges the condition of the user based on their BMI.

        Returns:
            int: Returns 1 if the user is overweight, -1 if underweight, and 0 if within normal range.

        Test cases:
            # Test case 1: Overweight condition
            tracker = FitnessTracker(170, 80, 30, 'male')
            assert tracker.condition_judge() == 1

            # Test case 2: Underweight condition
            tracker = FitnessTracker(180, 50, 20, 'female')
            assert tracker.condition_judge() == -1

            # Test case 3: Normal weight condition
            tracker = FitnessTracker(180, 75, 25, 'male')
            assert tracker.condition_judge() == 0
        """
        BMI = self.get_BMI()
        if self.sex == "male":
            BMI_range = self.BMI_std[0]["male"]
        else:
            BMI_range = self.BMI_std[1]["female"]
        if BMI > BMI_range[1]:
            # too fat
            return 1
        elif BMI < BMI_range[0]:
            # too thin
            return -1
        else:
            # normal
            return 0

    def calculate_calorie_intake(self):
        """
        Calculates the recommended daily calorie intake for the user based on their condition.

        Returns:
            float: The recommended daily calorie intake.

        Test cases:
            # Test case 1: Overweight condition
            tracker = FitnessTracker(170, 80, 30, 'male')
            assert tracker.calculate_calorie_intake() == 2283.0

            # Test case 2: Underweight condition
            tracker = FitnessTracker(180, 50, 20, 'female')
            assert tracker.calculate_calorie_intake() == 2148.0

            # Test case 3: Normal weight condition
            tracker = FitnessTracker(180, 75, 25, 'male')
            assert tracker.calculate_calorie_intake() == 2531.0
        """
        if self.sex == "male":
            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5
        else:
            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161
        if self.condition_judge() == 1:
            calorie_intake = BMR * 1.2  # Sedentary lifestyle
        elif self.condition_judge() == -1:
            calorie_intake = BMR * 1.6  # Active lifestyle
        else:
            calorie_intake = BMR * 1.4  # Moderate lifestyle
        return calorie_intake