"""
This class provides methods to interact with a user login SQLite database including operations such as insert, delete and validate user login.
"""

import sqlite3


class UserLoginDB:
    def __init__(self, db_name):
        """
        Initializes the database connection and cursor.

        Parameters:
            db_name (str): The name of the SQLite database file.
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()

    def insert_user(self, username, password):
        """
        Inserts a new user into the users table in the database.

        Parameters:
            username (str): The username of the new user.
            password (str): The password of the new user.

        Test cases:
            # Test case 1: Inserting a new user
            db.insert_user("test_user", "test_pass")
            
            # Test case 2: Handling duplicate users
            db.insert_user("test_user", "test_pass")
            
            # Test case 3: Handling empty strings
            db.insert_user("", "")
        """
        self.cursor.execute('''
            INSERT INTO users (username, password)
            VALUES (?, ?)
        ''', (username, password))
        self.connection.commit()

    def search_user_by_username(self, username):
        """
        Searches for a user in the users table by username.

        Parameters:
            username (str): The username of the user to search for.
        
        Returns:
            tuple: A tuple containing the user's data if found, or None if not found.

        Test cases:
            # Test case 1: Searching for an existing user
            user = db.search_user_by_username("test_user")
            
            # Test case 2: Searching for a nonexistent user
            user = db.search_user_by_username("nonexistent_user")
            
            # Test case 3: Searching with an empty string
            user = db.search_user_by_username("")
        """
        self.cursor.execute('''
            SELECT * FROM users WHERE username = ?
        ''', (username,))
        user = self.cursor.fetchone()
        return user

    def delete_user_by_username(self, username):
        """
        Deletes a user from the users table by username.

        Parameters:
            username (str): The username of the user to delete.

        Test cases:
            # Test case 1: Deleting an existing user
            db.delete_user_by_username("test_user")
            
            # Test case 2: Deleting a nonexistent user
            db.delete_user_by_username("nonexistent_user")
            
            # Test case 3: Deleting with an empty string
            db.delete_user_by_username("")
        """
        self.cursor.execute('''
            DELETE FROM users WHERE username = ?
        ''', (username,))
        self.connection.commit()

    def validate_user_login(self, username, password):
        """
        Validates a user's login by checking their username and password against the database.

        Parameters:
            username (str): The username of the user attempting to login.
            password (str): The password of the user attempting to login.
        
        Returns:
            bool: True if the login is valid, False otherwise.

        Test cases:
            # Test case 1: Validating a correct login
            assert db.validate_user_login("test_user", "test_pass") == True
            
            # Test case 2: Validating an incorrect password
            assert db.validate_user_login("test_user", "wrong_pass") == False
            
            # Test case 3: Validating a nonexistent user
            assert db.validate_user_login("nonexistent_user", "test_pass") == False
        """
        user = self.search_user_by_username(username)
        if user is not None and user[1] == password:
            return True
        return False
