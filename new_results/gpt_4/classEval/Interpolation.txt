"""
This class provides methods for 1-dimensional and 2-dimensional interpolation of data.
"""

class Interpolation:
    def __init__(self):
        """
        Initialization method for the Interpolation class.
        """
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """
        Performs linear interpolation on 1-dimensional data.
        
        Parameters:
            x (list): The x-coordinates of the data points.
            y (list): The y-coordinates of the data points.
            x_interp (list): The x-coordinates where interpolation is required.
        
        Returns:
            list: The interpolated y-coordinates corresponding to x_interp.
        
        Test cases:
            # Test case 1: Regular usage
            x = [1, 2, 3] 
            y = [1, 2, 3]
            x_interp = [1.5, 2.5]
            expected_output = [1.5, 2.5]
            
            # Test case 2: Edge case with equal x values
            x = [1, 1, 1]
            y = [1, 2, 3]
            x_interp = [1]
            expected_output = [1]
            
            # Test case 3: Error case with x_interp out of range
            x = [1, 2, 3]
            y = [1, 2, 3]
            x_interp = [4]
            expected_output = []
        """
        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp
    
    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        """
        Performs bilinear interpolation on 2-dimensional data.
        
        Parameters:
            x (list): The x-coordinates of the data points.
            y (list): The y-coordinates of the data points.
            z (list of list): The z-values at each (x, y) data point.
            x_interp (list): The x-coordinates where interpolation is required.
            y_interp (list): The y-coordinates where interpolation is required.
        
        Returns:
            list: The interpolated z-values corresponding to (x_interp, y_interp).
        
        Test cases:
            # Test case 1: Regular usage
            x = [1, 2] 
            y = [1, 2]
            z = [[1, 2], [3, 4]]
            x_interp = [1.5]
            y_interp = [1.5]
            expected_output = [2.5]
            
            # Test case 2: Edge case with equal x and y values
            x = [1, 1]
            y = [1, 1]
            z = [[1, 2], [3, 4]]
            x_interp = [1]
            y_interp = [1]
            expected_output = [1]
            
            # Test case 3: Error case with x_interp and y_interp out of range
            x = [1, 2]
            y = [1, 2]
            z = [[1, 2], [3, 4]]
            x_interp = [3]
            y_interp = [3]
            expected_output = []
        """
        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j+1]:
                            z00 = z[i][j]
                            z01 = z[i][j+1]
                            z10 = z[i+1][j]
                            z11 = z[i+1][j+1]
                            zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
                                  z10 * (xi - x[i]) * (y[j+1] - yi) +
                                  z01 * (x[i+1] - xi) * (yi - y[j]) +
                                  z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp