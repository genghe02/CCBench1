"""
This class provides a simple implementation of a HR Management System that can add, remove, update, and list employees.
"""

class HRManagementSystem:
    def __init__(self):
        """
        Initialize the management system with an empty dictionary of employees.
        """
        self.employees = {}

    def add_employee(self, employee_id, name, position, department, salary):
        """
        Add a new employee to the system.

        Parameters:
            employee_id (int): The unique identifier for the employee
            name (str): The name of the employee
            position (str): The employee's position
            department (str): The department the employee belongs to
            salary (float): The employee's salary

        Returns:
            bool: True if the employee was successfully added, False otherwise

        Test cases:
            # Test case 1: Adding a new employee
            assert add_employee(1, 'John Doe', 'Software Engineer', 'IT', 60000) == True

            # Test case 2: Trying to add an employee with an existing ID
            assert add_employee(1, 'Jane Doe', 'Manager', 'Sales', 80000) == False

            # Test case 3: Adding an employee with invalid data types 
            # Should raise a TypeError
            assert add_employee('1', 'John Doe', 'Software Engineer', 'IT', '60000') raises TypeError
        """
        if employee_id in self.employees:
            return False
        else:
            self.employees[employee_id] = {
                'name': name,
                'position': position,
                'department': department,
                'salary': salary
            }
            return True

    def remove_employee(self, employee_id):
        """
        Remove an employee from the system.

        Parameters:
            employee_id (int): The unique identifier for the employee

        Returns:
            bool: True if the employee was successfully removed, False otherwise

        Test cases:
            # Test case 1: Removing an existing employee
            assert remove_employee(1) == True

            # Test case 2: Trying to remove a non-existent employee
            assert remove_employee(100) == False

            # Test case 3: Trying to remove an employee with an invalid ID
            # Should raise a TypeError
            assert remove_employee('1') raises TypeError
        """
        if employee_id in self.employees:
            del self.employees[employee_id]
            return True
        else:
            return False

    def update_employee(self, employee_id: int, employee_info: dict):
        """
        Update the information of an existing employee.

        Parameters:
            employee_id (int): The unique identifier for the employee
            employee_info (dict): A dictionary containing the updated information

        Returns:
            bool: True if the employee's information was successfully updated, False otherwise

        Test cases:
            # Test case 1: Updating an existing employee
            assert update_employee(1, {'name': 'John Smith', 'position': 'Senior Software Engineer'}) == True

            # Test case 2: Trying to update a non-existent employee
            assert update_employee(100, {'name': 'John Smith', 'position': 'Senior Software Engineer'}) == False

            # Test case 3: Trying to update an employee with invalid data types
            # Should raise a TypeError
            assert update_employee('1', {'name': 'John Smith', 'position': 'Senior Software Engineer'}) raises TypeError
        """
        employee = self.get_employee(employee_id)
        if employee == False:
            return False
        else:
            for key, value in employee_info.items():
                if key not in employee:
                    return False
            for key, value in employee_info.items():
                employee[key] = value
            return True

    def get_employee(self, employee_id):
        """
        Get the information of an employee.

        Parameters:
            employee_id (int): The unique identifier for the employee

        Returns:
            dict: A dictionary containing the employee's information, or False if the employee does not exist

        Test cases:
            # Test case 1: Retrieving an existing employee
            assert get_employee(1) == {'name': 'John Doe', 'position': 'Software Engineer', 'department': 'IT', 'salary': 60000}

            # Test case 2: Trying to retrieve a non-existent employee
            assert get_employee(100) == False

            # Test case 3: Trying to retrieve an employee with an invalid ID
            # Should raise a TypeError
            assert get_employee('1') raises TypeError
        """
        if employee_id in self.employees:
            return self.employees[employee_id]
        else:
            return False

    def list_employees(self):
        """
        Get the information of all employees.

        Returns:
            dict: A dictionary containing the information of all employees, or an empty dictionary if there are no employees

        Test cases:
            # Test case 1: Listing all employees when there are employees in the system
            assert list_employees() == {1: {'name': 'John Doe', 'position': 'Software Engineer', 'department': 'IT', 'salary': 60000}}

            # Test case 2: Listing all employees when there are no employees in the system
            assert list_employees() == {}
        """
        employee_data = {}
        if self.employees:
            for employee_id, employee_info in self.employees.items():
                employee_details = {}
                employee_details["employee_ID"] = employee_id
                for key, value in employee_info.items():
                    employee_details[key] = value
                employee_data[employee_id] = employee_details
        return employee_data