"""
This class provides functionality to generate a list of prime numbers up to a given number using the Sieve of Eratosthenes algorithm.
"""

class ChandrasekharSieve:
    def __init__(self, n):
        """
        Initialize the ChandrasekharSieve instance with a given upper limit.

        Parameters:
            n (int): The upper limit for the range of numbers to generate primes from.
        """
        self.n = n
        self.primes = self.generate_primes()

    def generate_primes(self):
        """
        Generate a list of prime numbers up to the given upper limit using the Sieve of Eratosthenes algorithm.

        Returns:
            list: A list of prime numbers up to the given upper limit.
            
        Test cases:
            # Test case 1: Normal usage with small input
            sieve = ChandrasekharSieve(10)
            assert sieve.generate_primes() == [2, 3, 5, 7]
            
            # Test case 2: Edge case where input is 2
            sieve = ChandrasekharSieve(2)
            assert sieve.generate_primes() == [2]
            
            # Test case 3: Edge case where input is less than 2
            sieve = ChandrasekharSieve(1)
            assert sieve.generate_primes() == []
        """
        if self.n < 2:
            return []

        sieve = [True] * (self.n + 1)
        sieve[0] = sieve[1] = False

        p = 2
        while p * p <= self.n:
            if sieve[p]:
                for i in range(p * p, self.n + 1, p):
                    sieve[i] = False
            p += 1

        primes = []
        for i in range(2, self.n + 1):
            if sieve[i]:
                primes.append(i)

        return primes

    def get_primes(self):
        """
        Get the list of prime numbers generated.

        Returns:
            list: The list of prime numbers generated by the instance.
            
        Test cases:
            # Test case 1: Normal usage after generating primes
            sieve = ChandrasekharSieve(10)
            assert sieve.get_primes() == [2, 3, 5, 7]
            
            # Test case 2: Calling get_primes without generating primes first
            sieve = ChandrasekharSieve(0)
            assert sieve.get_primes() == []
            
            # Test case 3: Calling get_primes after generating primes with an upper limit of 2
            sieve = ChandrasekharSieve(2)
            assert sieve.get_primes() == [2]
        """
        return self.primes