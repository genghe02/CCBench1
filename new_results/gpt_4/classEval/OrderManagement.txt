"""
This class represents a restaurant order system, allowing dishes to be added to an order, calculating total cost with discounts, and checking out.
"""

class Order:

    def __init__(self):
        """
        Initializes the order with an empty menu and selected dishes list, and an empty sales dictionary.
        """
        self.menu = []
        # menu = [{"dish": dish name, "price": price, "count": count}, ...]
        self.selected_dishes = []
        # selected_dish = {"dish": dish name, "count": count, price: price}
        self.sales = {}
        # 


    def add_dish(self, dish):
        """
        Adds the specified dish to the order if it is available in the menu and its count is not exceeded.
        
        Parameters:
            dish (dict): A dictionary containing the dish name, count, and price
        
        Returns:
            bool: True if the dish was successfully added, False otherwise
            
        Test cases:
            # Test case 1: Adding an available dish
            dish = {"dish": "Pasta", "count": 2, "price": 10}
            assert add_dish(dish) == True
            
            # Test case 2: Adding a dish not available in the menu
            dish = {"dish": "Steak", "count": 1, "price": 20}
            assert add_dish(dish) == False
            
            # Test case 3: Adding a dish with count exceeding the available count
            dish = {"dish": "Pasta", "count": 5, "price": 10}
            assert add_dish(dish) == False
        """
        for menu_dish in self.menu:
            if dish["dish"] == menu_dish["dish"]:
                if menu_dish["count"] < dish["count"]:
                    return False
                else:
                    menu_dish["count"] -= dish["count"]
                    break
        self.selected_dishes.append(dish)
        return True

    def calculate_total(self):
        """
        Calculates the total cost of the order considering the count and sales discount for each dish.
        
        Returns:
            float: The total cost of the order
            
        Test cases:
            # Test case 1: Calculating total cost with no discounts
            self.selected_dishes = [{"dish": "Pasta", "count": 2, "price": 10}]
            self.sales = {"Pasta": 1}
            assert calculate_total() == 20
            
            # Test case 2: Calculating total cost with discounts
            self.selected_dishes = [{"dish": "Pasta", "count": 2, "price": 10}]
            self.sales = {"Pasta": 0.9}
            assert calculate_total() == 18
            
            # Test case 3: Calculating total cost with multiple dishes
            self.selected_dishes = [{"dish": "Pasta", "count": 2, "price": 10}, {"dish": "Pizza", "count": 1, "price": 15}]
            self.sales = {"Pasta": 0.9, "Pizza": 1}
            assert calculate_total() == 33
        """
        total = 0
        for dish in self.selected_dishes:
            total += dish["price"] * dish["count"] * self.sales[dish["dish"]]
        return total

    def checkout(self):
        """
        Checks out the current order, resetting the selected dishes list and returning the total cost.

        Returns:
            float or bool: The total cost of the order if it contains at least one dish, False otherwise
            
        Test cases:
            # Test case 1: Checking out with dishes in the order
            self.selected_dishes = [{"dish": "Pasta", "count": 2, "price": 10}]
            self.sales = {"Pasta": 1}
            assert checkout() == 20
            
            # Test case 2: Checking out with no dishes in the order
            self.selected_dishes = []
            assert checkout() == False
            
            # Test case 3: Checking out resets the selected dishes list
            self.selected_dishes = [{"dish": "Pasta", "count": 2, "price": 10}]
            self.sales = {"Pasta": 1}
            checkout()
            assert self.selected_dishes == []
        """
        if len(self.selected_dishes) == 0:
            return False
        total = self.calculate_total()
        self.selected_dishes = []
        return total
