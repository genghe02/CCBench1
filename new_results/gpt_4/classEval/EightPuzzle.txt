"""
This class represents a solver for the 8-puzzle problem using the breadth-first search algorithm.
"""

class EightPuzzle:
    def __init__(self, initial_state):
        """
        Initializes an instance of the EightPuzzle class.
        
        Parameters:
            initial_state (list): A 2D list representing the initial state of the puzzle.
        """
        self.initial_state = initial_state
        self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def find_blank(self, state):
        """
        Finds the location of the blank tile (0) in the given state.
        
        Parameters:
            state (list): A 2D list representing a state of the puzzle.
            
        Returns:
            tuple: A tuple (i, j) representing the location of the blank tile.
            
        Test cases:
            # Test case 1: Normal case
            assert find_blank([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == (1, 1)
            
            # Test case 2: Edge case (top-left corner)
            assert find_blank([[0, 2, 3], [1, 4, 6], [7, 8, 5]]) == (0, 0)
            
            # Test case 3: Edge case (bottom-right corner)
            assert find_blank([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == (2, 2)
        """
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j

    def move(self, state, direction):
        """
        Performs a move operation in the given direction on the given state and returns a new state.
        
        Parameters:
            state (list): A 2D list representing a state of the puzzle.
            direction (str): A string indicating the direction of the move ('up', 'down', 'left', 'right').
            
        Returns:
            list: A 2D list representing the new state after the move.
            
        Test cases:
            # Test case 1: Move up
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'up') == [[1, 0, 3], [4, 2, 6], [7, 8, 5]]
            
            # Test case 2: Move down
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'down') == [[1, 2, 3], [4, 8, 6], [7, 0, 5]]
            
            # Test case 3: Move left
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'left') == [[1, 2, 3], [0, 4, 6], [7, 8, 5]]
            
            # Test case 4: Move right
            assert move([[1, 2, 3], [4, 0, 6], [7, 8, 5]], 'right') == [[1, 2, 3], [4, 6, 0], [7, 8, 5]]
        """
        i, j = self.find_blank(state)
        new_state = [row[:] for row in state]

        if direction == 'up':
            new_state[i][j], new_state[i - 1][j] = new_state[i - 1][j], new_state[i][j]
        elif direction == 'down':
            new_state[i][j], new_state[i + 1][j] = new_state[i + 1][j], new_state[i][j]
        elif direction == 'left':
            new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
        elif direction == 'right':
            new_state[i][j], new_state[i][j + 1] = new_state[i][j + 1], new_state[i][j]

        return new_state

    def get_possible_moves(self, state):
        """
        Returns a list of possible moves from the given state.
        
        Parameters:
            state (list): A 2D list representing a state of the puzzle.
            
        Returns:
            list: A list of strings representing the possible moves ('up', 'down', 'left', 'right').
            
        Test cases:
            # Test case 1: Middle tile
            assert get_possible_moves([[1, 2, 3], [4, 0, 6], [7, 8, 5]]) == ['up', 'down', 'left', 'right']
            
            # Test case 2: Top-left corner
            assert get_possible_moves([[0, 2, 3], [1, 4, 6], [7, 8, 5]]) == ['down', 'right']
            
            # Test case 3: Bottom-right corner
            assert get_possible_moves([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == ['up', 'left']
        """
        moves = []
        i, j = self.find_blank(state)

        if i > 0:
            moves.append('up')
        if i < 2:
            moves.append('down')
        if j > 0:
            moves.append('left')
        if j < 2:
            moves.append('right')

        return moves

    def solve(self):
        """
        Solves the 8-puzzle problem and returns a list of moves to reach the goal state from the initial state.
        
        Returns:
            list: A list of strings representing the sequence of moves to reach the goal state.
            
        Test cases:
            # Test case 1: Solvable puzzle
            assert solve([[1, 2, 3], [5, 0, 6], [7, 4, 8]]) == ['up', 'right', 'down', 'left', 'up', 'right', 'down']
            
            # Test case 2: Already solved puzzle
            assert solve([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == []
            
            # Test case 3: Unsolvable puzzle
            assert solve([[1, 2, 3], [4, 6, 8], [7, 5, 0]]) == None
        """
        open_list = [(self.initial_state, [])]
        closed_list = []

        while open_list:
            current_state, path = open_list.pop(0)
            closed_list.append(current_state)

            if current_state == self.goal_state:
                return path

            for move in self.get_possible_moves(current_state):
                new_state = self.move(current_state, move)
                if new_state not in closed_list:
                    open_list.append((new_state, path + [move]))

        return None