"""
This class provides a way to parse and extract information from URLs.
"""

class URLHandler:
    def __init__(self, url):
        """
        Initializes the URLHandler with the given URL.

        Parameters:
            url (str): The URL to be handled by this URLHandler.
        """
        self.url = url

    def get_scheme(self):
        """
        Extracts and returns the scheme (protocol) part of the URL.

        Returns:
            str: The scheme of the URL. None if no scheme is found.

        Test cases:
            # Test case 1: URL with http scheme
            urlHandler = URLHandler('http://example.com')
            assert urlHandler.get_scheme() == 'http'

            # Test case 2: URL with https scheme
            urlHandler = URLHandler('https://example.com')
            assert urlHandler.get_scheme() == 'https'

            # Test case 3: URL without scheme
            urlHandler = URLHandler('example.com')
            assert urlHandler.get_scheme() == None
        """
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            return self.url[:scheme_end]
        return None

    def get_host(self):
        """
        Extracts and returns the host (domain) part of the URL.

        Returns:
            str: The host of the URL. None if no host is found.

        Test cases:
            # Test case 1: URL with www host
            urlHandler = URLHandler('http://www.example.com')
            assert urlHandler.get_host() == 'www.example.com'

            # Test case 2: URL with non-www host
            urlHandler = URLHandler('https://example.com')
            assert urlHandler.get_host() == 'example.com'

            # Test case 3: URL without host
            urlHandler = URLHandler('http://')
            assert urlHandler.get_host() == None
        """
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[:host_end]
            return url_without_scheme
        return None

    def get_path(self):
        """
        Extracts and returns the path part of the URL.

        Returns:
            str: The path of the URL. None if no path is found.

        Test cases:
            # Test case 1: URL with path
            urlHandler = URLHandler('http://example.com/path/to/resource')
            assert urlHandler.get_path() == '/path/to/resource'

            # Test case 2: URL with root path
            urlHandler = URLHandler('https://example.com/')
            assert urlHandler.get_path() == '/'

            # Test case 3: URL without path
            urlHandler = URLHandler('http://example.com')
            assert urlHandler.get_path() == None
        """
        scheme_end = self.url.find("://")
        if scheme_end != -1:
            url_without_scheme = self.url[scheme_end + 3:]
            host_end = url_without_scheme.find("/")
            if host_end != -1:
                return url_without_scheme[host_end:]
        return None

    def get_query_params(self):
        """
        Extracts and returns the query parameters of the URL as a dictionary.

        Returns:
            dict: A dictionary of query parameters. Each key-value pair in the dictionary represents a query parameter.

        Test cases:
            # Test case 1: URL with query parameters
            urlHandler = URLHandler('http://example.com/path?param1=value1&param2=value2')
            assert urlHandler.get_query_params() == {'param1': 'value1', 'param2': 'value2'}

            # Test case 2: URL with empty query parameters
            urlHandler = URLHandler('https://example.com/path?')
            assert urlHandler.get_query_params() == {}

            # Test case 3: URL without query parameters
            urlHandler = URLHandler('http://example.com/path')
            assert urlHandler.get_query_params() == None
        """
        query_start = self.url.find("?")
        fragment_start = self.url.find("#")
        if query_start != -1:
            query_string = self.url[query_start + 1:fragment_start]
            params = {}
            if len(query_string) > 0:
                param_pairs = query_string.split("&")
                for pair in param_pairs:
                    key_value = pair.split("=")
                    if len(key_value) == 2:
                        key, value = key_value
                        params[key] = value
            return params
        return None

    def get_fragment(self):
        """
        Extracts and returns the fragment part of the URL.

        Returns:
            str: The fragment of the URL. None if no fragment is found.

        Test cases:
            # Test case 1: URL with fragment
            urlHandler = URLHandler('http://example.com/path#fragment')
            assert urlHandler.get_fragment() == 'fragment'

            # Test case 2: URL with empty fragment
            urlHandler = URLHandler('https://example.com/path#')
            assert urlHandler.get_fragment() == ''

            # Test case 3: URL without fragment
            urlHandler = URLHandler('http://example.com/path')
            assert urlHandler.get_fragment() == None
        """
        fragment_start = self.url.find("#")
        if fragment_start != -1:
            return self.url[fragment_start + 1:]
        return None