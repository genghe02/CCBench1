def encode_cyclic(s: str):
    # This function cycles the characters in a string in groups of 3.
    >>> encode_cyclic('abc') # returns 'bca'
    >>> encode_cyclic('abcdef') # returns 'bcaefd'
    >>> encode_cyclic('abcdefg') # returns 'bcaefdg'
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    # This function decodes a cyclically encoded string by performing the cyclic operation twice.
    >>> decode_cyclic('bca') # returns 'abc'
    >>> decode_cyclic('bcaefd') # returns 'abcdef'
    >>> decode_cyclic('bcaefdg') # returns 'abcdefg'
    return encode_cyclic(encode_cyclic(s))