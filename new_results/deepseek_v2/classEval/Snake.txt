```python
"""
This class represents a Snake game entity, handling the snake's movement, food consumption, and game state management.
"""

import random


class Snake:
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, BLOCK_SIZE, food_position):
        """
        Initializes the Snake object with the game screen dimensions, block size, and initial food position.

        Parameters:
            SCREEN_WIDTH (int): The width of the game screen in pixels.
            SCREEN_HEIGHT (int): The height of the game screen in pixels.
            BLOCK_SIZE (int): The size of each block (snake segment and food) in pixels.
            food_position (tuple): The initial position of the food on the screen as a tuple (x, y).

        Attributes:
            length (int): The current length of the snake.
            positions (list): A list of tuples representing the positions of the snake's segments.
            score (int): The current score of the game.
            food_position (tuple): The current position of the food on the screen.
        """
        self.length = 1
        self.SCREEN_WIDTH = SCREEN_WIDTH
        self.SCREEN_HEIGHT = SCREEN_HEIGHT
        self.BLOCK_SIZE = BLOCK_SIZE
        self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
        self.score = 0
        self.food_position = food_position

    def move(self, direction):
        """
        Moves the snake in the specified direction and updates its position.

        Parameters:
            direction (tuple): A tuple (x, y) representing the direction of movement, where x and y are -1, 0, or 1.

        Returns:
            None

        Test cases:
            # Test case 1: Move right
            snake = Snake(800, 600, 20, (100, 100))
            snake.move((1, 0))
            assert snake.positions[0] == (420, 300)

            # Test case 2: Move down
            snake = Snake(800, 600, 20, (100, 100))
            snake.move((0, 1))
            assert snake.positions[0] == (400, 320)

            # Test case 3: Move left (edge case, wrapping around the screen)
            snake = Snake(800, 600, 20, (100, 100))
            snake.move((-1, 0))
            assert snake.positions[0] == (380, 300)
        """
        cur = self.positions[0]
        x, y = direction

        new = (
            ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
            (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
        )

        if new == self.food_position:
            self.eat_food()

        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def random_food_position(self):
        """
        Randomly generates a new position for the food that is not occupied by the snake.

        Returns:
            None

        Test cases:
            # Test case 1: Food position is not on the snake
            snake = Snake(800, 600, 20, (100, 100))
            snake.random_food_position()
            assert snake.food_position not in snake.positions

            # Test case 2: Food position is within screen bounds
            snake = Snake(800, 600, 20, (100, 100))
            snake.random_food_position()
            assert 0 <= snake.food_position[0] < 800 and 0 <= snake.food_position[1] < 600

            # Test case 3: Food position is aligned with block size
            snake = Snake(800, 600, 20, (100, 100))
            snake.random_food_position()
            assert snake.food_position[0] % 20 == 0 and snake.food_position[1] % 20 == 0
        """
        while self.food_position in self.positions:
            self.food_position = (random.randint(0, self.SCREEN_WIDTH // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE,
                                  random.randint(0, self.SCREEN_HEIGHT // self.BLOCK_SIZE - 1) * self.BLOCK_SIZE)

    def reset(self):
        """
        Resets the snake to its initial state, including length, position, and score.

        Returns:
            None

        Test cases:
            # Test case 1: Reset after collision
            snake = Snake(800, 600, 20, (100, 100))
            snake.move((1, 0))
            snake.reset()
            assert snake.length == 1
            assert snake.positions == [(400, 300)]
            assert snake.score == 0

            # Test case 2: Reset after eating food
            snake = Snake(800, 600, 20, (100, 100))
            snake.eat_food()
            snake.reset()
            assert snake.length == 1
            assert snake.positions == [(400, 300)]
            assert snake.score == 0

            # Test case 3: Reset without any movement
            snake = Snake(800, 600, 20, (100, 100))
            snake.reset()
            assert snake.length == 1
            assert snake.positions == [(400, 300)]
            assert snake.score == 0
        """
        self.length = 1
        self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
        self.score = 0
        self.random_food_position()

    def eat_food(self):
        """
        Handles the snake eating the food, increasing its length and score, and generating a new food position.

        Returns:
            None

        Test cases:
            # Test case 1: Eating food increases length and score
            snake = Snake(800, 600, 20, (100, 100))
            snake.eat_food()
            assert snake.length == 2
            assert snake.score == 100

            # Test case 2: Eating food generates a new food position
            snake = Snake(800, 600, 20, (100, 100))
            snake.eat_food()
            assert snake.food_position != (100, 100)

            # Test case 3: Eating food does not place food on the snake
            snake = Snake(800, 600, 20, (100, 100))
            snake.eat_food()
            assert snake.food_position not in snake.positions
        """
        self.length += 1
        self.score += 100
        self.random_food_position()
```