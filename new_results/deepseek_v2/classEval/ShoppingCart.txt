```python
"""
This class represents a shopping cart that allows users to add, remove, and view items, as well as calculate the total price of the items in the cart.
"""

class ShoppingCart:
    def __init__(self):
        """
        Initializes a new ShoppingCart instance with an empty dictionary to store items.
        """
        self.items = {}

    def add_item(self, item, price, quantity=1):
        """
        Adds an item to the shopping cart or updates the quantity if the item already exists.

        Parameters:
            item (str): The name of the item to add.
            price (float): The price of the item.
            quantity (int, optional): The quantity of the item to add. Defaults to 1.

        Returns:
            None

        Test cases:
            # Test case 1: Add a new item
            cart = ShoppingCart()
            cart.add_item('apple', 1.0, 2)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 2}}

            # Test case 2: Update an existing item
            cart.add_item('apple', 1.0, 3)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 3}}

            # Test case 3: Add another new item
            cart.add_item('banana', 0.5)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 3}, 'banana': {'price': 0.5, 'quantity': 1}}
        """
        if item in self.items:
            self.items[item]['quantity'] += quantity
        else:
            self.items[item] = {'price': price, 'quantity': quantity}

    def remove_item(self, item, quantity=1):
        """
        Removes a specified quantity of an item from the shopping cart.

        Parameters:
            item (str): The name of the item to remove.
            quantity (int, optional): The quantity of the item to remove. Defaults to 1.

        Returns:
            None

        Test cases:
            # Test case 1: Remove part of an item's quantity
            cart = ShoppingCart()
            cart.add_item('apple', 1.0, 3)
            cart.remove_item('apple', 2)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 1}}

            # Test case 2: Remove all of an item's quantity
            cart.remove_item('apple', 1)
            assert cart.view_items() == {}

            # Test case 3: Attempt to remove an item not in the cart
            cart.remove_item('banana')
            assert cart.view_items() == {}
        """
        if item in self.items:
            self.items[item]['quantity'] -= quantity
            if self.items[item]['quantity'] <= 0:
                del self.items[item]

    def view_items(self) -> dict:
        """
        Returns a dictionary of all items in the shopping cart.

        Returns:
            dict: A dictionary where keys are item names and values are dictionaries containing 'price' and 'quantity'.

        Test cases:
            # Test case 1: View items in an empty cart
            cart = ShoppingCart()
            assert cart.view_items() == {}

            # Test case 2: View items in a cart with one item
            cart.add_item('apple', 1.0, 2)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 2}}

            # Test case 3: View items in a cart with multiple items
            cart.add_item('banana', 0.5)
            assert cart.view_items() == {'apple': {'price': 1.0, 'quantity': 2}, 'banana': {'price': 0.5, 'quantity': 1}}
        """
        return self.items

    def total_price(self) -> float:
        """
        Calculates the total price of all items in the shopping cart.

        Returns:
            float: The total price of all items in the cart.

        Test cases:
            # Test case 1: Total price of an empty cart
            cart = ShoppingCart()
            assert cart.total_price() == 0.0

            # Test case 2: Total price of a cart with one item
            cart.add_item('apple', 1.0, 2)
            assert cart.total_price() == 2.0

            # Test case 3: Total price of a cart with multiple items
            cart.add_item('banana', 0.5, 3)
            assert cart.total_price() == 3.5
        """
        return sum([item['quantity'] * item['price'] for item in self.items.values()])
```