```python
"""
This class provides a collection of static methods for performing various statistical calculations,
including measures of central tendency, dispersion, and correlation.
"""

import math

class Statistics3:

    @staticmethod
    def median(data):
        """
        Calculate the median of a list of numbers.

        Parameters:
            data (list of float/int): A list of numerical values

        Returns:
            float: The median value of the list

        Test cases:
            # Test case 1: Odd number of elements
            assert Statistics3.median([1, 3, 5]) == 3
            
            # Test case 2: Even number of elements
            assert Statistics3.median([1, 3, 5, 7]) == 4.0
            
            # Test case 3: Empty list
            assert Statistics3.median([]) == None
        """
        sorted_data = sorted(data)
        n = len(sorted_data)
        if n % 2 == 1:
            return sorted_data[n // 2]
        else:
            return (sorted_data[n // 2 - 1] + sorted_data[n // 2]) / 2

    @staticmethod
    def mode(data):
        """
        Find the mode(s) of a list of numbers.

        Parameters:
            data (list of float/int): A list of numerical values

        Returns:
            list: A list of mode values (can be multiple if there's a tie)

        Test cases:
            # Test case 1: Single mode
            assert Statistics3.mode([1, 2, 2, 3]) == [2]
            
            # Test case 2: Multiple modes
            assert sorted(Statistics3.mode([1, 1, 2, 2, 3])) == [1, 2]
            
            # Test case 3: Empty list
            assert Statistics3.mode([]) == []
        """
        counts = {}
        for value in data:
            counts[value] = counts.get(value, 0) + 1
        max_count = max(counts.values())
        mode_values = [value for value, count in counts.items() if count == max_count]
        return mode_values

    @staticmethod
    def correlation(x, y):
        """
        Calculate the Pearson correlation coefficient between two lists of numbers.

        Parameters:
            x (list of float/int): First list of numerical values
            y (list of float/int): Second list of numerical values

        Returns:
            float/None: The correlation coefficient, or None if calculation is not possible

        Test cases:
            # Test case 1: Perfect positive correlation
            assert Statistics3.correlation([1, 2, 3], [1, 2, 3]) == 1.0
            
            # Test case 2: Perfect negative correlation
            assert Statistics3.correlation([1, 2, 3], [3, 2, 1]) == -1.0
            
            # Test case 3: Invalid input (different lengths)
            assert Statistics3.correlation([1, 2], [1, 2, 3]) == None
        """
        n = len(x)
        if n != len(y) or n == 0:
            return None
        mean_x = sum(x) / n
        mean_y = sum(y) / n
        numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
        denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
        if denominator == 0:
            return None
        return numerator / denominator

    @staticmethod
    def mean(data):
        """
        Calculate the arithmetic mean of a list of numbers.

        Parameters:
            data (list of float/int): A list of numerical values

        Returns:
            float/None: The mean value, or None for empty list

        Test cases:
            # Test case 1: Normal case
            assert Statistics3.mean([1, 2, 3, 4]) == 2.5
            
            # Test case 2: Single value
            assert Statistics3.mean([5]) == 5.0
            
            # Test case 3: Empty list
            assert Statistics3.mean([]) == None
        """
        if len(data) == 0:
            return None
        return sum(data) / len(data)

    @staticmethod
    def correlation_matrix(data):
        """
        Calculate the correlation matrix for a 2D dataset.

        Parameters:
            data (list of list of float/int): A 2D list where each inner list represents a variable

        Returns:
            list of list of float: The correlation matrix

        Test cases:
            # Test case 1: Simple 2x2 matrix
            input_data = [[1, 2], [1, 2]]
            expected_output = [[1.0, 1.0], [1.0, 1.0]]
            assert Statistics3.correlation_matrix(input_data) == expected_output
            
            # Test case 2: Empty input
            assert Statistics3.correlation_matrix([]) == []
            
            # Test case 3: Invalid input (unequal lengths)
            input_data = [[1, 2], [1]]
            assert Statistics3.correlation_matrix(input_data) == []
        """
        if not data or any(len(row) != len(data[0]) for row in data):
            return []
        matrix = []
        for i in range(len(data[0])):
            row = []
            for j in range(len(data[0])):
                column1 = [row[i] for row in data]
                column2 = [row[j] for row in data]
                correlation = Statistics3.correlation(column1, column2)
                row.append(correlation)
            matrix.append(row)
        return matrix

    @staticmethod
    def standard_deviation(data):
        """
        Calculate the sample standard deviation of a list of numbers.

        Parameters:
            data (list of float/int): A list of numerical values

        Returns:
            float/None: The standard deviation, or None if calculation is not possible

        Test cases:
            # Test case 1: Normal case
            assert round(Statistics3.standard_deviation([1, 2, 3, 4, 5]), 2) == 1.58
            
            # Test case 2: Single value
            assert Statistics3.standard_deviation([5]) == None
            
            # Test case 3: Empty list
            assert Statistics3.standard_deviation([]) == None
        """
        n = len(data)
        if n < 2:
            return None
        mean_value = Statistics3.mean(data)
        variance = sum((x - mean_value) ** 2 for x in data) / (n - 1)
        return math.sqrt(variance)

    @staticmethod
    def z_score(data):
        """
        Calculate the z-scores for a list of numbers.

        Parameters:
            data (list of float/int): A list of numerical values

        Returns:
            list of float/None: A list of z-scores, or None if calculation is not possible

        Test cases:
            # Test case 1: Normal case
            assert [round(z, 2) for z in Statistics3.z_score([1, 2, 3])] == [-1.22, 0.0, 1.22]
            
            # Test case 2: Single value
            assert Statistics3.z_score([5]) == None
            
            # Test case 3: Empty list
            assert Statistics3.z_score([]) == None
        """
        mean = Statistics3.mean(data)
        std_deviation = Statistics3.standard_deviation(data)
        if std_deviation is None or std_deviation == 0:
            return None
        return [(x - mean) / std_deviation for x in data]
```