```python
"""
This class implements a simple Push Box game where the player moves around a map to push boxes onto target locations.
The game is over when all boxes are on their respective targets.
"""

class PushBoxGame:
    def __init__(self, map):
        """
        Initializes the PushBoxGame with the given map.

        Parameters:
            map (list of list of str): A 2D list representing the game map. 
                                      'O' represents the player, 'X' represents boxes, 
                                      'G' represents targets, and '#' represents walls.
        
        Test cases:
            # Test case 1: Simple map with player, box, and target
            map = [
                ['O', '.', 'X'],
                ['.', '.', 'G']
            ]
            game = PushBoxGame(map)
            assert game.player_row == 0 and game.player_col == 0
            assert game.boxes == [(0, 2)]
            assert game.targets == [(1, 2)]
            
            # Test case 2: Map with multiple boxes and targets
            map = [
                ['O', '.', 'X'],
                ['.', 'X', 'G'],
                ['G', '.', '.']
            ]
            game = PushBoxGame(map)
            assert game.boxes == [(0, 2), (1, 1)]
            assert game.targets == [(1, 2), (2, 0)]
            
            # Test case 3: Map with no boxes or targets
            map = [
                ['O', '.', '.'],
                ['.', '.', '.']
            ]
            game = PushBoxGame(map)
            assert game.boxes == []
            assert game.targets == []
        """
        self.map = map
        self.player_row = 0
        self.player_col = 0
        self.targets = []
        self.boxes = []
        self.target_count = 0
        self.is_game_over = False

        self.init_game()

    def init_game(self):
        """
        Initializes the game state by scanning the map to locate the player, boxes, and targets.
        
        Test cases:
            # Test case 1: Player, box, and target are correctly identified
            map = [
                ['O', '.', 'X'],
                ['.', '.', 'G']
            ]
            game = PushBoxGame(map)
            assert game.player_row == 0 and game.player_col == 0
            assert game.boxes == [(0, 2)]
            assert game.targets == [(1, 2)]
            
            # Test case 2: Multiple boxes and targets are correctly identified
            map = [
                ['O', '.', 'X'],
                ['.', 'X', 'G'],
                ['G', '.', '.']
            ]
            game = PushBoxGame(map)
            assert game.boxes == [(0, 2), (1, 1)]
            assert game.targets == [(1, 2), (2, 0)]
            
            # Test case 3: No boxes or targets on the map
            map = [
                ['O', '.', '.'],
                ['.', '.', '.']
            ]
            game = PushBoxGame(map)
            assert game.boxes == []
            assert game.targets == []
        """
        for row in range(len(self.map)):
            for col in range(len(self.map[row])):
                if self.map[row][col] == "O":
                    self.player_row = row
                    self.player_col = col
                elif self.map[row][col] == "G":
                    self.targets.append((row, col))
                    self.target_count += 1
                elif self.map[row][col] == "X":
                    self.boxes.append((row, col))

    def check_win(self):
        """
        Checks if all boxes are on their respective targets, indicating a win.

        Returns:
            bool: True if all boxes are on targets, False otherwise.
        
        Test cases:
            # Test case 1: All boxes on targets
            game = PushBoxGame([
                ['O', '.', 'X'],
                ['.', '.', 'G']
            ])
            game.boxes = [(1, 2)]
            assert game.check_win() == True
            
            # Test case 2: Not all boxes on targets
            game = PushBoxGame([
                ['O', '.', 'X'],
                ['.', '.', 'G']
            ])
            game.boxes = [(0, 2)]
            assert game.check_win() == False
            
            # Test case 3: No boxes on targets
            game = PushBoxGame([
                ['O', '.', '.'],
                ['.', '.', '.']
            ])
            assert game.check_win() == False
        """
        box_on_target_count = 0
        for box in self.boxes:
            if box in self.targets:
                box_on_target_count += 1
        if box_on_target_count == self.target_count:
            self.is_game_over = True
        return self.is_game_over

    def move(self, direction):
        """
        Moves the player in the specified direction and updates the game state.

        Parameters:
            direction (str): The direction to move the player. 
                             Valid values are 'w' (up), 's' (down), 'a' (left), 'd' (right).
        
        Returns:
            bool: True if the game is won after the move, False otherwise.
        
        Test cases:
            # Test case 1: Move player to an empty space
            game = PushBoxGame([
                ['O', '.', '.'],
                ['.', '.', '.']
            ])
            assert game.move('d') == False
            assert game.player_row == 0 and game.player_col == 1
            
            # Test case 2: Move player to push a box onto a target
            game = PushBoxGame([
                ['O', '.', 'X'],
                ['.', '.', 'G']
            ])
            assert game.move('d') == True
            assert game.player_row == 0 and game.player_col == 1
            assert game.boxes == [(0, 3)]
            
            # Test case 3: Move player into a wall
            game = PushBoxGame([
                ['O', '#', '.'],
                ['.', '.', '.']
            ])
            assert game.move('d') == False
            assert game.player_row == 0 and game.player_col == 0
        """
        new_player_row = self.player_row
        new_player_col = self.player_col

        if direction == "w":
            new_player_row -= 1
        elif direction == "s":
            new_player_row += 1
        elif direction == "a":
            new_player_col -= 1
        elif direction == "d":
            new_player_col += 1

        if self.map[new_player_row][new_player_col] != "#":
            if (new_player_row, new_player_col) in self.boxes:
                new_box_row = new_player_row + (new_player_row - self.player_row)
                new_box_col = new_player_col + (new_player_col - self.player_col)

                if self.map[new_box_row][new_box_col] != "#":
                    self.boxes.remove((new_player_row, new_player_col))
                    self.boxes.append((new_box_row, new_box_col))
                    self.player_row = new_player_row
                    self.player_col = new_player_col
            else:
                self.player_row = new_player_row
                self.player_col = new_player_col

        return self.check_win()
```