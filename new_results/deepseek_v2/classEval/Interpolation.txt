```python
"""
This class provides methods for performing linear interpolation in one and two dimensions.
It allows for estimating values at points within the range of known data points.
"""

class Interpolation:
    def __init__(self):
        """
        Initialization method for the Interpolation class.
        """
        pass

    @staticmethod
    def interpolate_1d(x, y, x_interp):
        """
        Perform linear interpolation in one dimension.

        Parameters:
            x (list of float): List of known x-coordinates (must be in ascending order).
            y (list of float): List of known y-coordinates corresponding to x.
            x_interp (list of float): List of x-coordinates at which to interpolate y-values.

        Returns:
            list of float: Interpolated y-values corresponding to x_interp.

        Test cases:
            # Test case 1: Interpolate within the range
            x = [0, 1, 2]
            y = [0, 1, 4]
            x_interp = [0.5, 1.5]
            assert Interpolation.interpolate_1d(x, y, x_interp) == [0.5, 2.5]

            # Test case 2: Interpolate at known points
            x = [0, 1, 2]
            y = [0, 1, 4]
            x_interp = [0, 1, 2]
            assert Interpolation.interpolate_1d(x, y, x_interp) == [0, 1, 4]

            # Test case 3: Interpolate outside the range (edge case)
            x = [0, 1, 2]
            y = [0, 1, 4]
            x_interp = [-1, 3]
            assert Interpolation.interpolate_1d(x, y, x_interp) == []
        """
        y_interp = []
        for xi in x_interp:
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
                    y_interp.append(yi)
                    break
        return y_interp
    
    @staticmethod
    def interpolate_2d(x, y, z, x_interp, y_interp):
        """
        Perform bilinear interpolation in two dimensions.

        Parameters:
            x (list of float): List of known x-coordinates (must be in ascending order).
            y (list of float): List of known y-coordinates (must be in ascending order).
            z (list of list of float): 2D list of known z-values corresponding to x and y.
            x_interp (list of float): List of x-coordinates at which to interpolate z-values.
            y_interp (list of float): List of y-coordinates at which to interpolate z-values.

        Returns:
            list of float: Interpolated z-values corresponding to (x_interp, y_interp).

        Test cases:
            # Test case 1: Interpolate within the range
            x = [0, 1]
            y = [0, 1]
            z = [[0, 1], [1, 2]]
            x_interp = [0.5]
            y_interp = [0.5]
            assert Interpolation.interpolate_2d(x, y, z, x_interp, y_interp) == [1.0]

            # Test case 2: Interpolate at known points
            x = [0, 1]
            y = [0, 1]
            z = [[0, 1], [1, 2]]
            x_interp = [0, 1]
            y_interp = [0, 1]
            assert Interpolation.interpolate_2d(x, y, z, x_interp, y_interp) == [0, 2]

            # Test case 3: Interpolate outside the range (edge case)
            x = [0, 1]
            y = [0, 1]
            z = [[0, 1], [1, 2]]
            x_interp = [-1, 2]
            y_interp = [-1, 2]
            assert Interpolation.interpolate_2d(x, y, z, x_interp, y_interp) == []
        """
        z_interp = []
        for xi, yi in zip(x_interp, y_interp):
            for i in range(len(x) - 1):
                if x[i] <= xi <= x[i+1]:
                    for j in range(len(y) - 1):
                        if y[j] <= yi <= y[j+1]:
                            z00 = z[i][j]
                            z01 = z[i][j+1]
                            z10 = z[i+1][j]
                            z11 = z[i+1][j+1]
                            zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
                                  z10 * (xi - x[i]) * (y[j+1] - yi) +
                                  z01 * (x[i+1] - xi) * (yi - y[j]) +
                                  z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
                            z_interp.append(zi)
                            break
                    break
        return z_interp
```