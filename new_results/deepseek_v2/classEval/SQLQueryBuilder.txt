```python
"""
This class provides a set of static methods to build SQL queries for common database operations such as SELECT, INSERT, DELETE, and UPDATE.
"""

class SQLQueryBuilder:

    @staticmethod
    def select(table, columns='*', where=None):
        """
        Builds a SQL SELECT query.

        Parameters:
            table (str): The name of the table to select from.
            columns (list or str, optional): The columns to select. Defaults to '*'.
            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.

        Returns:
            str: The constructed SQL SELECT query.

        Test cases:
            # Test case 1: Select all columns from a table
            assert SQLQueryBuilder.select('users') == "SELECT * FROM users"

            # Test case 2: Select specific columns with a WHERE clause
            assert SQLQueryBuilder.select('users', ['name', 'age'], {'id': 1}) == "SELECT name, age FROM users WHERE id='1'"

            # Test case 3: Select specific columns without a WHERE clause
            assert SQLQueryBuilder.select('users', ['name', 'age']) == "SELECT name, age FROM users"
        """
        if columns != '*':
            columns = ', '.join(columns)
        query = f"SELECT {columns} FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def insert(table, data):
        """
        Builds a SQL INSERT query.

        Parameters:
            table (str): The name of the table to insert into.
            data (dict): A dictionary of column names and values to insert.

        Returns:
            str: The constructed SQL INSERT query.

        Test cases:
            # Test case 1: Insert a single row
            assert SQLQueryBuilder.insert('users', {'name': 'John', 'age': 30}) == "INSERT INTO users (name, age) VALUES ('John', '30')"

            # Test case 2: Insert multiple columns
            assert SQLQueryBuilder.insert('users', {'name': 'Jane', 'age': 25, 'email': 'jane@example.com'}) == "INSERT INTO users (name, age, email) VALUES ('Jane', '25', 'jane@example.com')"

            # Test case 3: Insert with empty data
            assert SQLQueryBuilder.insert('users', {}) == "INSERT INTO users () VALUES ()"
        """
        keys = ', '.join(data.keys())
        values = ', '.join(f"'{v}'" for v in data.values())
        return f"INSERT INTO {table} ({keys}) VALUES ({values})"

    @staticmethod
    def delete(table, where=None):
        """
        Builds a SQL DELETE query.

        Parameters:
            table (str): The name of the table to delete from.
            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.

        Returns:
            str: The constructed SQL DELETE query.

        Test cases:
            # Test case 1: Delete all rows
            assert SQLQueryBuilder.delete('users') == "DELETE FROM users"

            # Test case 2: Delete with a WHERE clause
            assert SQLQueryBuilder.delete('users', {'id': 1}) == "DELETE FROM users WHERE id='1'"

            # Test case 3: Delete with multiple conditions
            assert SQLQueryBuilder.delete('users', {'id': 1, 'name': 'John'}) == "DELETE FROM users WHERE id='1' AND name='John'"
        """
        query = f"DELETE FROM {table}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query

    @staticmethod
    def update(table, data, where=None):
        """
        Builds a SQL UPDATE query.

        Parameters:
            table (str): The name of the table to update.
            data (dict): A dictionary of column names and new values.
            where (dict, optional): A dictionary of conditions for the WHERE clause. Defaults to None.

        Returns:
            str: The constructed SQL UPDATE query.

        Test cases:
            # Test case 1: Update all rows
            assert SQLQueryBuilder.update('users', {'age': 31}) == "UPDATE users SET age='31'"

            # Test case 2: Update with a WHERE clause
            assert SQLQueryBuilder.update('users', {'age': 31}, {'id': 1}) == "UPDATE users SET age='31' WHERE id='1'"

            # Test case 3: Update multiple columns with multiple conditions
            assert SQLQueryBuilder.update('users', {'age': 31, 'name': 'John Doe'}, {'id': 1, 'name': 'John'}) == "UPDATE users SET age='31', name='John Doe' WHERE id='1' AND name='John'"
        """
        update_str = ', '.join(f"{k}='{v}'" for k, v in data.items())
        query = f"UPDATE {table} SET {update_str}"
        if where:
            query += " WHERE " + ' AND '.join(f"{k}='{v}'" for k, v in where.items())
        return query
```