```python
"""
This class manages a database for movie tickets, allowing for the creation, insertion, retrieval, and deletion of ticket records.
"""

import sqlite3


class MovieTicketDB:
    def __init__(self, db_name):
        """
        Initializes the MovieTicketDB class by connecting to the specified SQLite database and creating the necessary table.

        Parameters:
            db_name (str): The name of the SQLite database file to connect to.
        """
        self.connection = sqlite3.connect(db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        """
        Creates the 'tickets' table in the database if it does not already exist.

        Returns:
            None
        """
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY,
                movie_name TEXT,
                theater_name TEXT,
                seat_number TEXT,
                customer_name TEXT
            )
        ''')
        self.connection.commit()

    def insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        """
        Inserts a new ticket record into the 'tickets' table.

        Parameters:
            movie_name (str): The name of the movie.
            theater_name (str): The name of the theater.
            seat_number (str): The seat number.
            customer_name (str): The name of the customer.

        Returns:
            None
        """
        self.cursor.execute('''
            INSERT INTO tickets (movie_name, theater_name, seat_number, customer_name)
            VALUES (?, ?, ?, ?)
        ''', (movie_name, theater_name, seat_number, customer_name))
        self.connection.commit()

    def search_tickets_by_customer(self, customer_name):
        """
        Searches for all tickets associated with a specific customer.

        Parameters:
            customer_name (str): The name of the customer to search for.

        Returns:
            list: A list of tuples representing the ticket records found.

        Test cases:
            # Test case 1: Customer with multiple tickets
            db = MovieTicketDB(':memory:')
            db.insert_ticket('Movie A', 'Theater 1', 'A1', 'John Doe')
            db.insert_ticket('Movie B', 'Theater 2', 'B2', 'John Doe')
            assert len(db.search_tickets_by_customer('John Doe')) == 2

            # Test case 2: Customer with no tickets
            assert len(db.search_tickets_by_customer('Jane Doe')) == 0

            # Test case 3: Empty customer name
            assert len(db.search_tickets_by_customer('')) == 0
        """
        self.cursor.execute('''
            SELECT * FROM tickets WHERE customer_name = ?
        ''', (customer_name,))
        tickets = self.cursor.fetchall()
        return tickets

    def delete_ticket(self, ticket_id):
        """
        Deletes a ticket record from the 'tickets' table based on the ticket ID.

        Parameters:
            ticket_id (int): The ID of the ticket to delete.

        Returns:
            None
        """
        self.cursor.execute('''
            DELETE FROM tickets WHERE id = ?
        ''', (ticket_id,))
        self.connection.commit()
```

### Explanation:
1. **Class Documentation**: The class-level docstring provides a brief overview of the class's purpose, which is to manage a database for movie tickets.
2. **Method Documentation**: Each method has a docstring that includes:
   - A description of what the method does.
   - A list of parameters with their types and purposes.
   - A description of the return value (if any).
   - Test cases demonstrating normal usage, edge cases, and error handling.
3. **Test Cases**: The test cases are designed to cover various scenarios, including successful operations, edge cases, and potential errors. These test cases are included within the docstrings to provide immediate examples of how the methods can be used.

This documentation adheres to Python standards and provides clear, concise, and useful information for anyone using the `MovieTicketDB` class.