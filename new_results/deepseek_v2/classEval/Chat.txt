```python
"""
This class represents a simple chat system that allows users to send messages to each other.
It manages user registration, message sending, and retrieving messages for a specific user.
"""

from datetime import datetime

class Chat:
    def __init__(self):
        """
        Initializes a new Chat instance with an empty dictionary to store users and their messages.
        """
        self.users = {}

    def add_user(self, username):
        """
        Adds a new user to the chat system.

        Parameters:
            username (str): The username of the user to be added.

        Returns:
            bool: True if the user was successfully added, False if the user already exists.

        Test cases:
            # Test case 1: Add a new user
            chat = Chat()
            assert chat.add_user('alice') == True

            # Test case 2: Add an existing user
            chat.add_user('alice')
            assert chat.add_user('alice') == False

            # Test case 3: Add another new user
            assert chat.add_user('bob') == True
        """
        if username in self.users:
            return False
        else:
            self.users[username] = []
            return True

    def remove_user(self, username):
        """
        Removes a user from the chat system.

        Parameters:
            username (str): The username of the user to be removed.

        Returns:
            bool: True if the user was successfully removed, False if the user does not exist.

        Test cases:
            # Test case 1: Remove an existing user
            chat = Chat()
            chat.add_user('alice')
            assert chat.remove_user('alice') == True

            # Test case 2: Remove a non-existing user
            assert chat.remove_user('bob') == False

            # Test case 3: Remove a user after sending messages
            chat.add_user('alice')
            chat.add_user('bob')
            chat.send_message('alice', 'bob', 'Hello')
            assert chat.remove_user('alice') == True
        """
        if username in self.users:
            del self.users[username]
            return True
        else:
            return False

    def send_message(self, sender, receiver, message):
        """
        Sends a message from one user to another.

        Parameters:
            sender (str): The username of the sender.
            receiver (str): The username of the receiver.
            message (str): The message content to be sent.

        Returns:
            bool: True if the message was successfully sent, False if either the sender or receiver does not exist.

        Test cases:
            # Test case 1: Send a message between existing users
            chat = Chat()
            chat.add_user('alice')
            chat.add_user('bob')
            assert chat.send_message('alice', 'bob', 'Hello') == True

            # Test case 2: Send a message with a non-existing sender
            assert chat.send_message('charlie', 'bob', 'Hi') == False

            # Test case 3: Send a message with a non-existing receiver
            assert chat.send_message('alice', 'charlie', 'Hi') == False
        """
        if sender not in self.users or receiver not in self.users:
            return False

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_info = {
            'sender': sender,
            'receiver': receiver,
            'message': message,
            'timestamp': timestamp
        }
        self.users[sender].append(message_info)
        self.users[receiver].append(message_info)
        return True

    def get_messages(self, username):
        """
        Retrieves all messages for a specific user.

        Parameters:
            username (str): The username of the user whose messages are to be retrieved.

        Returns:
            list: A list of message dictionaries, each containing sender, receiver, message, and timestamp.
                  Returns an empty list if the user does not exist.

        Test cases:
            # Test case 1: Retrieve messages for an existing user with messages
            chat = Chat()
            chat.add_user('alice')
            chat.add_user('bob')
            chat.send_message('alice', 'bob', 'Hello')
            messages = chat.get_messages('alice')
            assert len(messages) == 1
            assert messages[0]['message'] == 'Hello'

            # Test case 2: Retrieve messages for an existing user without messages
            assert len(chat.get_messages('bob')) == 1

            # Test case 3: Retrieve messages for a non-existing user
            assert chat.get_messages('charlie') == []
        """
        if username not in self.users:
            return []
        return self.users[username]
```