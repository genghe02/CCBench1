```python
"""
This class represents a server that manages a white list of addresses, handles sending and receiving information, and provides methods to display the current state of sent and received data.
"""

class Server:

    def __init__(self):
        """
        Initializes the Server instance with empty white list, send structure, and receive structure.
        """
        self.white_list = []
        self.send_struct = {}
        self.receive_struct = {}

    def add_white_list(self, addr):
        """
        Adds an address to the white list if it is not already present.

        Parameters:
            addr (str): The address to add to the white list

        Returns:
            list: The updated white list if the address was added, False if the address was already in the list

        Test cases:
            # Test case 1: Add a new address
            server = Server()
            assert server.add_white_list('192.168.1.1') == ['192.168.1.1']

            # Test case 2: Add an existing address
            server = Server()
            server.add_white_list('192.168.1.1')
            assert server.add_white_list('192.168.1.1') == False

            # Test case 3: Add multiple addresses
            server = Server()
            server.add_white_list('192.168.1.1')
            assert server.add_white_list('192.168.1.2') == ['192.168.1.1', '192.168.1.2']
        """
        if addr in self.white_list:
            return False
        else:
            self.white_list.append(addr)
            return self.white_list

    def del_white_list(self, addr):
        """
        Removes an address from the white list if it is present.

        Parameters:
            addr (str): The address to remove from the white list

        Returns:
            list: The updated white list if the address was removed, False if the address was not in the list

        Test cases:
            # Test case 1: Remove an existing address
            server = Server()
            server.add_white_list('192.168.1.1')
            assert server.del_white_list('192.168.1.1') == []

            # Test case 2: Remove a non-existing address
            server = Server()
            assert server.del_white_list('192.168.1.1') == False

            # Test case 3: Remove an address from a list with multiple addresses
            server = Server()
            server.add_white_list('192.168.1.1')
            server.add_white_list('192.168.1.2')
            assert server.del_white_list('192.168.1.1') == ['192.168.1.2']
        """
        if addr not in self.white_list:
            return False
        else:
            self.white_list.remove(addr)
            return self.white_list

    def recv(self, info):
        """
        Receives information from an address if it is in the white list.

        Parameters:
            info (dict): A dictionary containing the address and content to receive

        Returns:
            str: The received content if the address is in the white list, False if not, -1 if the info structure is incorrect

        Test cases:
            # Test case 1: Receive from a white-listed address
            server = Server()
            server.add_white_list('192.168.1.1')
            assert server.recv({"addr": "192.168.1.1", "content": "Hello"}) == "Hello"

            # Test case 2: Receive from a non-white-listed address
            server = Server()
            assert server.recv({"addr": "192.168.1.1", "content": "Hello"}) == False

            # Test case 3: Receive with incorrect info structure
            server = Server()
            assert server.recv({"address": "192.168.1.1", "content": "Hello"}) == -1
        """
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return -1
        addr = info["addr"]
        content = info["content"]
        if addr not in self.white_list:
            return False
        else:
            self.receive_struct = {"addr": addr, "content": content}
            return self.receive_struct["content"]

    def send(self, info):
        """
        Sends information to an address.

        Parameters:
            info (dict): A dictionary containing the address and content to send

        Returns:
            str: A message indicating the info structure is incorrect if it is, otherwise None

        Test cases:
            # Test case 1: Send with correct info structure
            server = Server()
            assert server.send({"addr": "192.168.1.1", "content": "Hello"}) == None

            # Test case 2: Send with incorrect info structure
            server = Server()
            assert server.send({"address": "192.168.1.1", "content": "Hello"}) == "info structure is not correct"

            # Test case 3: Send with missing content
            server = Server()
            assert server.send({"addr": "192.168.1.1"}) == "info structure is not correct"
        """
        if not isinstance(info, dict) or "addr" not in info or "content" not in info:
            return "info structure is not correct"
        self.send_struct = {"addr": info["addr"], "content": info["content"]}

    def show(self, type):
        """
        Displays the current send or receive structure.

        Parameters:
            type (str): The type of structure to display, either "send" or "receive"

        Returns:
            dict: The send or receive structure if the type is correct, False otherwise

        Test cases:
            # Test case 1: Show send structure
            server = Server()
            server.send({"addr": "192.168.1.1", "content": "Hello"})
            assert server.show("send") == {"addr": "192.168.1.1", "content": "Hello"}

            # Test case 2: Show receive structure
            server = Server()
            server.recv({"addr": "192.168.1.1", "content": "Hello"})
            assert server.show("receive") == {"addr": "192.168.1.1", "content": "Hello"}

            # Test case 3: Show with incorrect type
            server = Server()
            assert server.show("history") == False
        """
        if type == "send":
            return self.send_struct
        elif type == "receive":
            return self.receive_struct
        else:
            return False
```