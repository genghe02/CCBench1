```python
"""
This class implements a calculator that can evaluate mathematical expressions using a stack-based approach.
It supports basic arithmetic operations (+, -, *, /) and exponentiation (^).
"""

class Calculator:
    def __init__(self):
        """
        Initializes the Calculator class with a dictionary of supported operators and their corresponding lambda functions.
        """
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y,
            '^': lambda x, y: x ** y
        }

    def calculate(self, expression):
        """
        Evaluates a mathematical expression and returns the result.

        Parameters:
            expression (str): A string representing the mathematical expression to be evaluated.

        Returns:
            float: The result of the evaluated expression. Returns None if the expression is invalid or empty.

        Test cases:
            # Test case 1: Simple addition
            assert calculate('2 + 3') == 5.0

            # Test case 2: Complex expression with parentheses
            assert calculate('(2 + 3) * 4') == 20.0

            # Test case 3: Invalid expression
            assert calculate('2 + ') == None
        """
        operand_stack = []
        operator_stack = []
        num_buffer = ''

        for char in expression:
            if char.isdigit() or char == '.':
                num_buffer += char
            else:
                if num_buffer:
                    operand_stack.append(float(num_buffer))
                    num_buffer = ''

                if char in '+-*/^':
                    while (
                            operator_stack and
                            operator_stack[-1] != '(' and
                            self.precedence(operator_stack[-1]) >= self.precedence(char)
                    ):
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.append(char)
                elif char == '(':
                    operator_stack.append(char)
                elif char == ')':
                    while operator_stack and operator_stack[-1] != '(':
                        operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

                    operator_stack.pop()

        if num_buffer:
            operand_stack.append(float(num_buffer))

        while operator_stack:
            operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)

        return operand_stack[-1] if operand_stack else None

    def precedence(self, operator):
        """
        Returns the precedence level of the given operator.

        Parameters:
            operator (str): The operator whose precedence level is to be determined.

        Returns:
            int: The precedence level of the operator. Returns 0 if the operator is not recognized.

        Test cases:
            # Test case 1: Addition operator
            assert precedence('+') == 1

            # Test case 2: Multiplication operator
            assert precedence('*') == 2

            # Test case 3: Unrecognized operator
            assert precedence('@') == 0
        """
        precedences = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2,
            '^': 3
        }
        return precedences.get(operator, 0)

    def apply_operator(self, operand_stack, operator_stack):
        """
        Applies the top operator from the operator stack to the top two operands from the operand stack.

        Parameters:
            operand_stack (list): A stack of operands.
            operator_stack (list): A stack of operators.

        Returns:
            tuple: A tuple containing the updated operand stack and operator stack.

        Test cases:
            # Test case 1: Simple addition
            operand_stack = [2, 3]
            operator_stack = ['+']
            apply_operator(operand_stack, operator_stack)
            assert operand_stack == [5]
            assert operator_stack == []

            # Test case 2: Exponentiation
            operand_stack = [2, 3]
            operator_stack = ['^']
            apply_operator(operand_stack, operator_stack)
            assert operand_stack == [8]
            assert operator_stack == []

            # Test case 3: Division by zero
            operand_stack = [2, 0]
            operator_stack = ['/']
            apply_operator(operand_stack, operator_stack)
            assert operand_stack == [float('inf')]
            assert operator_stack == []
        """
        operator = operator_stack.pop()
        if operator == '^':
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        else:
            operand2 = operand_stack.pop()
            operand1 = operand_stack.pop()
            result = self.operators[operator](operand1, operand2)
            operand_stack.append(result)
        return operand_stack, operator_stack
```