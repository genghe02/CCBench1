```python
"""
This class provides trigonometric calculations including sine, cosine, and tangent using Taylor series approximations.
"""

from math import pi, fabs


class TriCalculator:

    def __init__(self):
        """
        Initializes the TriCalculator class.
        """
        pass

    def cos(self, x):
        """
        Calculates the cosine of an angle in degrees using a Taylor series approximation.

        Parameters:
            x (float): The angle in degrees for which to calculate the cosine.

        Returns:
            float: The cosine of the angle, rounded to 10 decimal places.

        Test cases:
            # Test case 1: Cosine of 0 degrees
            assert cos(0) == 1.0

            # Test case 2: Cosine of 90 degrees
            assert cos(90) == 0.0

            # Test case 3: Cosine of 180 degrees
            assert cos(180) == -1.0
        """
        return round(self.taylor(x, 50), 10)

    def factorial(self, a):
        """
        Calculates the factorial of a given integer.

        Parameters:
            a (int): The integer for which to calculate the factorial.

        Returns:
            int: The factorial of the given integer.

        Test cases:
            # Test case 1: Factorial of 5
            assert factorial(5) == 120

            # Test case 2: Factorial of 0
            assert factorial(0) == 1

            # Test case 3: Factorial of 1
            assert factorial(1) == 1
        """
        b = 1
        while a != 1:
            b *= a
            a -= 1
        return b

    def taylor(self, x, n):
        """
        Approximates the cosine of an angle in degrees using the Taylor series expansion.

        Parameters:
            x (float): The angle in degrees for which to approximate the cosine.
            n (int): The number of terms to use in the Taylor series expansion.

        Returns:
            float: The approximated cosine of the angle.

        Test cases:
            # Test case 1: Taylor approximation of 0 degrees with 50 terms
            assert taylor(0, 50) == 1.0

            # Test case 2: Taylor approximation of 90 degrees with 50 terms
            assert taylor(90, 50) == 0.0

            # Test case 3: Taylor approximation of 180 degrees with 50 terms
            assert taylor(180, 50) == -1.0
        """
        a = 1
        x = x / 180 * pi
        count = 1
        for k in range(1, n):
            if count % 2 != 0:
                a -= (x ** (2 * k)) / self.factorial(2 * k)
            else:
                a += (x ** (2 * k)) / self.factorial(2 * k)
            count += 1
        return a

    def sin(self, x):
        """
        Calculates the sine of an angle in degrees using a Taylor series approximation.

        Parameters:
            x (float): The angle in degrees for which to calculate the sine.

        Returns:
            float: The sine of the angle, rounded to 10 decimal places.

        Test cases:
            # Test case 1: Sine of 0 degrees
            assert sin(0) == 0.0

            # Test case 2: Sine of 90 degrees
            assert sin(90) == 1.0

            # Test case 3: Sine of 180 degrees
            assert sin(180) == 0.0
        """
        x = x / 180 * pi
        g = 0
        t = x
        n = 1

        while fabs(t) >= 1e-15:
            g += t
            n += 1
            t = -t * x * x / (2 * n - 1) / (2 * n - 2)
        return round(g, 10)

    def tan(self, x):
        """
        Calculates the tangent of an angle in degrees using sine and cosine.

        Parameters:
            x (float): The angle in degrees for which to calculate the tangent.

        Returns:
            float: The tangent of the angle, rounded to 10 decimal places, or False if cosine is zero.

        Test cases:
            # Test case 1: Tangent of 0 degrees
            assert tan(0) == 0.0

            # Test case 2: Tangent of 45 degrees
            assert tan(45) == 1.0

            # Test case 3: Tangent of 90 degrees (undefined)
            assert tan(90) == False
        """
        if self.cos(x) != 0:
            result = self.sin(x) / self.cos(x)
            return round(result, 10)
        else:
            return False
```