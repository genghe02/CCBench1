```python
"""
This class provides utility functions for processing and extracting information from HTML text.
It includes methods for formatting HTML text, extracting code blocks, and handling special markers.
"""

import re
import string
import gensim
from bs4 import BeautifulSoup


class HtmlUtil:

    def __init__(self):
        """
        Initializes the HtmlUtil class with special markers for different types of content.
        """
        self.SPACE_MARK = '-SPACE-'
        self.JSON_MARK = '-JSON-'
        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        self.URL_MARK = '-URL-'
        self.NUMBER_MARK = '-NUMBER-'
        self.TRACE_MARK = '-TRACE-'
        self.COMMAND_MARK = '-COMMAND-'
        self.COMMENT_MARK = '-COMMENT-'
        self.CODE_MARK = '-CODE-'

    @staticmethod
    def __format_line_feed(text):
        """
        Formats the text by replacing multiple line feeds with a single line feed.

        Parameters:
            text (str): The input text to be formatted

        Returns:
            str: The formatted text with single line feeds
        """
        return re.sub(re.compile(r'\n+'), '\n', text)

    def format_line_html_text(self, html_text):
        """
        Formats the HTML text by cleaning and structuring it for readability.
        It handles code blocks, lists, and paragraphs, ensuring proper punctuation and structure.

        Parameters:
            html_text (str): The HTML text to be formatted

        Returns:
            str: The cleaned and formatted text

        Test cases:
            # Test case 1: Simple HTML with paragraphs
            html = '<p>Hello world</p><p>This is a test.</p>'
            expected_output = 'Hello world.\nThis is a test.\n'
            assert format_line_html_text(html) == expected_output

            # Test case 2: HTML with code block
            html = '<p>Code example:</p><pre>print("Hello")</pre>'
            expected_output = 'Code example:\n-CODE-\n'
            assert format_line_html_text(html) == expected_output

            # Test case 3: Empty HTML
            html = ''
            expected_output = ''
            assert format_line_html_text(html) == expected_output
        """
        if html_text is None or len(html_text) == 0:
            return ''
        soup = BeautifulSoup(html_text, 'lxml')

        code_tag = soup.find_all(name=['pre', 'blockquote'])
        for tag in code_tag:
            tag.string = self.CODE_MARK

        ul_ol_group = soup.find_all(name=['ul', 'ol'])
        for ul_ol_item in ul_ol_group:
            li_group = ul_ol_item.find_all('li')
            for li_item in li_group:
                li_item_text = li_item.get_text().strip()
                if len(li_item_text) == 0:
                    continue
                if li_item_text[-1] in string.punctuation:
                    li_item.string = '[{0}]{1}'.format('-', li_item_text)
                    continue
                li_item.string = '[{0}]{1}.'.format('-', li_item_text)

        p_group = soup.find_all(name=['p'])
        for p_item in p_group:
            p_item_text = p_item.get_text().strip()
            if p_item_text:
                if p_item_text[-1] in string.punctuation:
                    p_item.string = p_item_text
                    continue
                next_sibling = p_item.find_next_sibling()
                if next_sibling and self.CODE_MARK in next_sibling.get_text():
                    p_item.string = p_item_text + ':'
                    continue
                p_item.string = p_item_text + '.'

        clean_text = gensim.utils.decode_htmlentities(soup.get_text())
        return self.__format_line_feed(clean_text)

    def extract_code_from_html_text(self, html_text):
        """
        Extracts code blocks from the HTML text.

        Parameters:
            html_text (str): The HTML text containing code blocks

        Returns:
            list: A list of extracted code blocks

        Test cases:
            # Test case 1: HTML with single code block
            html = '<pre>print("Hello")</pre>'
            expected_output = ['print("Hello")']
            assert extract_code_from_html_text(html) == expected_output

            # Test case 2: HTML with multiple code blocks
            html = '<pre>print("Hello")</pre><blockquote>print("World")</blockquote>'
            expected_output = ['print("Hello")', 'print("World")']
            assert extract_code_from_html_text(html) == expected_output

            # Test case 3: HTML without code blocks
            html = '<p>No code here</p>'
            expected_output = []
            assert extract_code_from_html_text(html) == expected_output
        """
        text_with_code_tag = self.format_line_html_text(html_text)

        if self.CODE_MARK not in text_with_code_tag:
            return []

        code_index_start = 0
        soup = BeautifulSoup(html_text, 'lxml')
        code_tag = soup.find_all(name=['pre', 'blockquote'])
        code_count = text_with_code_tag.count(self.CODE_MARK)
        code_list = []
        for code_index in range(code_index_start, code_index_start + code_count):
            code = code_tag[code_index].get_text()
            if code:
                code_list.append(code)
        return code_list
```