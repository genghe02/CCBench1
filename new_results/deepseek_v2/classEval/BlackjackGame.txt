```python
"""
This class implements a simple Blackjack game, allowing players to play against a dealer.
It includes methods for deck creation, hand value calculation, and determining the game winner.
"""

import random


class BlackjackGame:
    def __init__(self):
        """
        Initializes the Blackjack game by creating a shuffled deck and setting up empty hands for the player and dealer.
        """
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []

    def create_deck(self):
        """
        Creates and shuffles a standard deck of 52 playing cards.

        Returns:
            list: A shuffled list of card strings, where each card is represented as a combination of rank and suit (e.g., 'AS' for Ace of Spades).

        Test cases:
            # Test case 1: Check if the deck has 52 cards
            game = BlackjackGame()
            assert len(game.create_deck()) == 52

            # Test case 2: Check if the deck is shuffled
            deck1 = BlackjackGame().create_deck()
            deck2 = BlackjackGame().create_deck()
            assert deck1 != deck2

            # Test case 3: Check if all suits and ranks are included
            deck = BlackjackGame().create_deck()
            assert 'AS' in deck and '10H' in deck and 'KD' in deck
        """
        deck = []
        suits = ['S', 'C', 'D', 'H']
        ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
        for suit in suits:
            for rank in ranks:
                deck.append(rank + suit)
        random.shuffle(deck)
        return deck

    def calculate_hand_value(self, hand):
        """
        Calculates the total value of a given hand in Blackjack, adjusting for the flexible value of Aces.

        Parameters:
            hand (list): A list of card strings representing the hand.

        Returns:
            int: The total value of the hand, with Aces counted as 11 or 1 to avoid busting.

        Test cases:
            # Test case 1: Hand with no Aces
            game = BlackjackGame()
            assert game.calculate_hand_value(['2S', '3D']) == 5

            # Test case 2: Hand with Aces
            game = BlackjackGame()
            assert game.calculate_hand_value(['AS', 'KD']) == 21

            # Test case 3: Hand with multiple Aces
            game = BlackjackGame()
            assert game.calculate_hand_value(['AS', 'AD', '9H']) == 21
        """
        value = 0
        num_aces = 0
        for card in hand:
            rank = card[:-1]
            if rank.isdigit():
                value += int(rank)
            elif rank in ['J', 'Q', 'K']:
                value += 10
            elif rank == 'A':
                value += 11
                num_aces += 1
        while value > 21 and num_aces > 0:
            value -= 10
            num_aces -= 1
        return value

    def check_winner(self, player_hand, dealer_hand):
        """
        Determines the winner of the game based on the values of the player's and dealer's hands.

        Parameters:
            player_hand (list): A list of card strings representing the player's hand.
            dealer_hand (list): A list of card strings representing the dealer's hand.

        Returns:
            str: A string indicating the winner ('Player wins' or 'Dealer wins').

        Test cases:
            # Test case 1: Player wins with a higher hand value
            game = BlackjackGame()
            assert game.check_winner(['AS', 'KD'], ['2S', '3D']) == 'Player wins'

            # Test case 2: Dealer wins with a higher hand value
            game = BlackjackGame()
            assert game.check_winner(['2S', '3D'], ['AS', 'KD']) == 'Dealer wins'

            # Test case 3: Both bust, but player has a lower hand value
            game = BlackjackGame()
            assert game.check_winner(['AS', 'AD', '9H'], ['AS', 'AD', '10H']) == 'Player wins'
        """
        player_value = self.calculate_hand_value(player_hand)
        dealer_value = self.calculate_hand_value(dealer_hand)
        if player_value > 21 and dealer_value > 21:
            if player_value <= dealer_value:
                return 'Player wins'
            else:
                return 'Dealer wins'
        elif player_value > 21:
            return 'Dealer wins'
        elif dealer_value > 21:
            return 'Player wins'
        else:
            if player_value <= dealer_value:
                return 'Dealer wins'
            else:
                return 'Player wins'
```