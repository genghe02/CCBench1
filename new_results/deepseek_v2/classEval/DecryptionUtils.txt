```python
"""
This class provides utility methods for decrypting text using various cipher techniques, including Caesar, Vigenère, and Rail Fence ciphers.
"""

class DecryptionUtils:
    def __init__(self, key):
        """
        Initializes the DecryptionUtils class with a key for decryption.

        Parameters:
            key (str): The key used for decryption in certain cipher methods.
        """
        self.key = key
    
    def caesar_decipher(self, ciphertext, shift):
        """
        Decrypts a ciphertext using the Caesar cipher technique.

        Parameters:
            ciphertext (str): The encrypted text to be decrypted.
            shift (int): The number of positions each letter in the ciphertext is shifted back.

        Returns:
            str: The decrypted plaintext.

        Test cases:
            # Test case 1: Normal usage
            assert caesar_decipher("Khoor", 3) == "Hello"
            
            # Test case 2: Edge case with non-alphabetic characters
            assert caesar_decipher("Khoor, Zruog!", 3) == "Hello, World!"
            
            # Test case 3: Error case with empty string
            assert caesar_decipher("", 3) == ""
        """
        plaintext = ""
        for char in ciphertext:
            if char.isalpha():
                if char.isupper():
                    ascii_offset = 65
                else:
                    ascii_offset = 97
                shifted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
                plaintext += shifted_char
            else:
                plaintext += char
        return plaintext
    
    def vigenere_decipher(self, ciphertext):
        """
        Decrypts a ciphertext using the Vigenère cipher technique.

        Parameters:
            ciphertext (str): The encrypted text to be decrypted.

        Returns:
            str: The decrypted plaintext.

        Test cases:
            # Test case 1: Normal usage
            assert vigenere_decipher("LXFOPVEFRNHR") == "ATTACKATDAWN"
            
            # Test case 2: Edge case with mixed case and non-alphabetic characters
            assert vigenere_decipher("Lxfopv, EfRNhr!") == "Attack, AtDawn!"
            
            # Test case 3: Error case with empty string
            assert vigenere_decipher("") == ""
        """
        decrypted_text = ""
        key_index = 0
        for char in ciphertext:
            if char.isalpha():
                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
                decrypted_char = chr((ord(char.lower()) - ord('a') - shift) % 26 + ord('a'))
                decrypted_text += decrypted_char.upper() if char.isupper() else decrypted_char
                key_index += 1
            else:
                decrypted_text += char
        return decrypted_text
    
    def rail_fence_decipher(self, encrypted_text, rails):
        """
        Decrypts a ciphertext using the Rail Fence cipher technique.

        Parameters:
            encrypted_text (str): The encrypted text to be decrypted.
            rails (int): The number of rails used in the Rail Fence cipher.

        Returns:
            str: The decrypted plaintext.

        Test cases:
            # Test case 1: Normal usage
            assert rail_fence_decipher("Hooel", 2) == "Hello"
            
            # Test case 2: Edge case with non-alphabetic characters
            assert rail_fence_decipher("Hooel, Wrdl!", 2) == "Hello, World!"
            
            # Test case 3: Error case with empty string
            assert rail_fence_decipher("", 2) == ""
        """
        fence = [['\n' for _ in range(len(encrypted_text))] for _ in range(rails)]
        direction = -1
        row, col = 0, 0

        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            fence[row][col] = ''
            col += 1
            row += direction

        index = 0
        for i in range(rails):
            for j in range(len(encrypted_text)):
                if fence[i][j] == '':
                    fence[i][j] = encrypted_text[index]
                    index += 1

        plain_text = ''
        direction = -1
        row, col = 0, 0
        for _ in range(len(encrypted_text)):
            if row == 0 or row == rails - 1:
                direction = -direction

            plain_text += fence[row][col]
            col += 1
            row += direction

        return plain_text
```

### Explanation:
1. **Class Documentation**: The class `DecryptionUtils` is described as providing utility methods for decrypting text using various cipher techniques.
2. **Method Documentation**: Each method (`__init__`, `caesar_decipher`, `vigenere_decipher`, `rail_fence_decipher`) is documented with a description, parameters, return values, and test cases.
3. **Test Cases**: Each method includes three test cases demonstrating normal usage, edge case handling, and error case handling.
4. **Formatting**: The documentation follows the standard Python docstring format with clear sectioning and consistent formatting.