["result # Find indexes where values in the array change"][Block]["# Add a new axis to the existing array to create a 3D array"][Block][
    "# Count the number of values in the array 'a' that are greater than 2 and less than 8"
][Block]["# Insert a specified element at the beginning of an array using NumPy insert function."][Block]["# Concatenate the list of arrays and flatten them into a single 1D array"][Block]["# Get the shape of array a"][Block]["# Calculate the inverse of the input matrix using numpy"][Block]["# Check if numpy array is empty by comparing its size to zero."][Block]["# Replace the second column of a with the values of x"][Block]["# Find indices where elements from 'search' can be inserted into 'master' while maintaining order"][Block]["# Stack arrays in sequence horizontally"][Block]["# Return the minimum value of the numpy array."][Block]["# Creating a new 5x5 matrix initialized with -1.0 values"][Block]["# Calculate histogram and cumulative sum based on array values"][Block]["# Convert array to a string and then back to an array"][Block]["# Convert array elements to string and concatenate them with a space in between"][Block]["# Calculate the average of every 3 elements in an array without modifying original array"][Block]["# Define a function that performs XOR operation on given inputs and returns the result"][Block]["# Perform broadcasting operation to add a 2x1 array to a 3x1 array"][Block]["# Return array after dividing each element by the previous element"][Block]["# Create a list of 10 arrays, each of shape (5, 4, 2, 5, 1, 2)"][Block]["# Calculate the standard deviation of elements along axis 0"][Block]["# Convert the matrix M to an array and remove single-dimensional entries"][Block]["# Return the index of the maximum element along the specified axis of the array"][Block]["# Convert string elements in an array to float data type using numpy's astype function"][Block]["# Change the data type of array a from float64 to float32"][Block]["# Retrieve value at specified index from a 2D array using a tuple"][Block]["# Calculate the number of rows in the broadcasted matrix"][Block]["# Reshape a 3D array into a 2D array"][Block][
    "# y axis",
    "# Create a masked array where values larger than 2 are masked"
][Block]["# Create a NumPy array with specified values in a 3x3 matrix"][Block]["# Select elements from the original array at positions 1 and 4"][Block]["# Return the most frequently occurring number in the given array based on binary counting frequency and indexing argument maximum value position."][Block][
    "# Create three numpy arrays with different shapes",
    "# Concatenate the arrays along the first axis to form a single array"
][Block]["# Filter array 'a' rows where the first column is 0 and the second column is 1"][Block]["# Create a numpy array by zipping elements from two lists, filling missing values with 0"][Block]["# Interleave elements of two arrays and store them in a new array"][Block]["# Assign values from 'a' to the center 3x3 area of a 5x5 zero matrix"][Block]["# Get unique rows from the array 'a' and store them in 'out' variable"][Block]["# Concatenate arrays a and b into a single array c"][Block][
    "# Perform element-wise multiplication between a 2D array and a 1D array after reshaping b"
][Block]["# Combine arrays a and b as columns into a new 2D array c"][Block]["# Create a numpy array by stacking a list of arrays"][Block]["# Find the set exclusive-or (symmetric difference) of two arrays"][Block]["# Find and return the total number of true values in the input array"][Block]["# Create a new empty numpy array"][Block]["# Convert a matrix to a flattened 1D array by removing single-dimensional entries"][Block]["# Calculate the mean of arrays a, b, and c along the axis 0"][Block]["# Find the indices of the k smallest elements in A using numpy.partition and return the first k elements"][Block]["# Sort points lexicographically based on the columns"][Block]["# Calculate the result by subtracting the minimum value along each column from the array 'a'"][Block]["# Reshape the array 'a' to a column vector containing numbers from 1 to 9"][Block]["# Replace negative values in the array with 0"][Block]["# Select distances within a specified range [r, r+dr]"][Block]["# Repeat elements in array 'a' that satisfy condition 'cond' by 'n' times and store in array 'm'"][Block]["# Check if the array 'a' is sorted in ascending order by comparing each element to its successor in 'a' array"][Block][
    "# Reshape the array into a 4D array with the specified dimensions",
    "# Transpose the dimensions of the array based on the specified order"
][Block]["# Convert an array to a tuple of tuples by mapping each inner array to a tuple and then converting the resulting list of tuples to a tuple"][Block]["# Return the indices of the minimum values along the specified axis"][Block]["# Update the slice using specified axis, start, and end values"][Block]["# Create a structured array from transposed array to save as record array"][Block]["# Create index array to remove elements at indices found in C from the original array A"][Block]["# Convert all elements in the array 'a' to strings and store them in a new array 'a_str'"][Block]["# Concatenate a row to an existing numpy array as a new row"][Block]["# Create an array by combining a, b, and c as columns and then transposing and flattening it"][Block]["# Find the indices of zeros in an array and return only the row indices"][Block]["# Fill the `result` array with 1s using fancy indexing based on the array `data`"][Block]["# Find the index of the minimum value in the array A"][Block]["# Reverse the elements along the last axis of the array 'a'"][Block]["# Compute the mean along each row of masked array and fill NaN values with NaN"][Block]["# Update elements in the array that are greater than a specified value with a new value"][Block]["# Return values at index i for the last dimension of a numpy array"][Block]["# Find the index of the element in the array that is closest to the given value"][Block]["# Find indices of elements within the specified range in the input array."][Block]["# Check for elements in the array divisible by 2 and return their indices"][Block]["# Create a numpy array from a dictionary with specified data types"][Block]["# Update array values to shift all elements one position to the right"][Block]["# Use a numpy vectorized version of the get function to map dictionary values to array elements"][Block]["# Concatenate two arrays element-wise and return the result as a new array"][Block]["# Filter out rows containing non-numeric values and return the cleaned array"][Block]["# Split the input array x into 3 equal parts and return as a list of arrays"][Block]["# Function to crop a 2D array"][Block]["# Add the first element of the input array to the end of the array and return the updated array"][Block][
    "# Extract keys from the dictionary and convert to numpy array",
    "# Extract values from the dictionary and convert to numpy array"
][Block][
    "# Set real part of complex numbers with absolute value < tolerance to 0",
    "# Set imaginary part of complex numbers with absolute value < tolerance to 0"
][Block]["# Check if the array contains only zeros"][Block]["# Reshape a 3x1 array into a 1D array"][Block]["# Check if all elements in 'a' are equal to the first row of 'a' along axis 0"][Block]["# Update the input numpy array to replace NaN values with zeros"][Block][][Block]["# Fill the diagonal elements of a dataframe with zeros"][Block]["# Concatenate two input arrays and return the result as a single array"][Block]["# Remove the 2nd and 4th columns from the 3x4 matrix 'a'"][Block]["# Convert the numpy matrix to a list and reshape it into a 1D array"][Block]["# Create list of indexes to delete"][Block]["# Filter out rows where all elements are zeros"][Block]["# Check for common elements between two arrays and return boolean array"][Block]["# Create a 3x4 boolean array filled with True values"][Block]["# Perform element-wise multiplication of a 2D array by a 1D array with broadcasting"][Block]["# Calculate the Euclidean distance between two vectors"][Block]["# Calculate sum of all elements in the dataframe"][Block]